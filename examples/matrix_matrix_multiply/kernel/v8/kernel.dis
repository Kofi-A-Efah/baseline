
kernel/v8/kernel.riscv:     file format elf32-littleriscv


Disassembly of section .sdata.dmem:

00001000 <__bsg_tile_group_id>:
int __bsg_grp_org_y = -1;
int __bsg_grid_dim_x = -1;
int __bsg_grid_dim_y = -1;
int __bsg_tile_group_id_x = -1;
int __bsg_tile_group_id_y = -1;
int __bsg_tile_group_id = -1;
    1000:	ffff                	0xffff
                int rc, temp = IGNORE_TAG;

                // These arrays are resident in DMEM
                int A_local[A_HEIGHT * A_WIDTH];
                int B_local[A_WIDTH * B_WIDTH];
                int C_local[A_HEIGHT * B_WIDTH];
    1002:	ffff                	0xffff

00001004 <__bsg_tile_group_id_y>:
int __bsg_tile_group_id_y = -1;
    1004:	ffff                	0xffff
    1006:	ffff                	0xffff

00001008 <__bsg_tile_group_id_x>:
int __bsg_tile_group_id_x = -1;
    1008:	ffff                	0xffff

                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    100a:	ffff                	0xffff

0000100c <__bsg_grid_dim_y>:
int __bsg_grid_dim_y = -1;
    100c:	ffff                	0xffff
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    100e:	ffff                	0xffff

00001010 <__bsg_grid_dim_x>:
int __bsg_grid_dim_x = -1;
    1010:	ffff                	0xffff
    1012:	ffff                	0xffff

00001014 <__bsg_grp_org_y>:
int __bsg_grp_org_y = -1;
    1014:	ffff                	0xffff
    1016:	ffff                	0xffff

00001018 <__bsg_grp_org_x>:
int __bsg_grp_org_x = -1;
    1018:	ffff                	0xffff
    101a:	ffff                	0xffff

0000101c <__bsg_id>:
int __bsg_id = -1;
    101c:	ffff                	0xffff

                for(int i = 0; i <= iter; ++i){
                        bsg_cuda_print_stat_start(temp);
    101e:	ffff                	0xffff

00001020 <__bsg_y>:
int __bsg_y = -1;
    1020:	ffff                	0xffff
    1022:	ffff                	0xffff

00001024 <__bsg_x>:
int __bsg_x = -1;
    1024:	ffff                	0xffff
                int C_local[A_HEIGHT * B_WIDTH];
    1026:	ffff                	0xffff

Disassembly of section .sbss.dmem:

00001028 <cuda_kernel_not_loaded_val>:
 // Location kernel writes it's finish signal into
uint32_t cuda_finish_signal_addr = 0;
// The value that kernel writes in cuda_finish_signal_addr when it is finished
uint32_t cuda_finish_signal_val = 0;
// When cuda_kernel_ptr equals this value means the kernel is not loaded 
uint32_t cuda_kernel_not_loaded_val = 0;
    1028:	0000                	unimp
	...

0000102c <cuda_finish_signal_val>:
uint32_t cuda_finish_signal_val = 0;
    102c:	0000                	unimp
	...

00001030 <cuda_finish_signal_addr>:
uint32_t cuda_finish_signal_addr = 0;
    1030:	0000                	unimp
	...

00001034 <cuda_argv_ptr>:
uint32_t cuda_argv_ptr = 0;
    1034:	0000                	unimp
	...

00001038 <cuda_argc>:
uint32_t cuda_argc = 0;	
    1038:	0000                	unimp
	...

0000103c <cuda_kernel_ptr>:
int32_t cuda_kernel_ptr = 0;
    103c:	0000                	unimp
	...

Disassembly of section .rodata.dmem:

00001040 <.rodata.dmem>:
                        bsg_cuda_print_stat_start(temp);
    1040:	0694                	addi	x13,x2,832
    1042:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
                                                                                   A_HEIGHT, A_WIDTH, B_WIDTH);
                        bsg_cuda_print_stat_end(temp);
                        temp = tag;
    1044:	0610                	addi	x12,x2,768
    1046:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1048:	0610                	addi	x12,x2,768
    104a:	0000                	unimp
    104c:	0688                	addi	x10,x2,832
    104e:	0000                	unimp
    1050:	0610                	addi	x12,x2,768
    1052:	0000                	unimp
    1054:	0610                	addi	x12,x2,768
    1056:	0000                	unimp
    1058:	0610                	addi	x12,x2,768
    105a:	0000                	unimp
    105c:	0610                	addi	x12,x2,768
    105e:	0000                	unimp
    1060:	0610                	addi	x12,x2,768
    1062:	0000                	unimp
    1064:	0610                	addi	x12,x2,768
    1066:	0000                	unimp
    1068:	0610                	addi	x12,x2,768
    106a:	0000                	unimp
    106c:	067c                	addi	x15,x2,780
    106e:	0000                	unimp
    1070:	0610                	addi	x12,x2,768
    1072:	0000                	unimp
    1074:	0670                	addi	x12,x2,780
    1076:	0000                	unimp
    1078:	0610                	addi	x12,x2,768
    107a:	0000                	unimp
    107c:	0610                	addi	x12,x2,768
    107e:	0000                	unimp
    1080:	0664                	addi	x9,x2,780
    1082:	0000                	unimp
    1084:	08e8                	addi	x10,x2,92
    1086:	0000                	unimp
    1088:	06d8                	addi	x14,x2,836
    108a:	0000                	unimp
    108c:	06d8                	addi	x14,x2,836
    108e:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1090:	06d8                	addi	x14,x2,836
    1092:	0000                	unimp
    1094:	06d8                	addi	x14,x2,836
    1096:	0000                	unimp
    1098:	06d8                	addi	x14,x2,836
    109a:	0000                	unimp
    109c:	06d8                	addi	x14,x2,836
    109e:	0000                	unimp
    10a0:	06d8                	addi	x14,x2,836
    10a2:	0000                	unimp
    10a4:	06d8                	addi	x14,x2,836
    10a6:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    10a8:	06d8                	addi	x14,x2,836
    10aa:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    10ac:	06d8                	addi	x14,x2,836
    10ae:	0000                	unimp
                        bsg_cuda_print_stat_end(temp);
    10b0:	06d8                	addi	x14,x2,836
    10b2:	0000                	unimp
    10b4:	06d8                	addi	x14,x2,836
    10b6:	0000                	unimp
    10b8:	06d8                	addi	x14,x2,836
    10ba:	0000                	unimp
    10bc:	06d8                	addi	x14,x2,836
    10be:	0000                	unimp
    10c0:	06d8                	addi	x14,x2,836
    10c2:	0000                	unimp
    10c4:	06d8                	addi	x14,x2,836
    10c6:	0000                	unimp
    10c8:	06d8                	addi	x14,x2,836
    10ca:	0000                	unimp
    10cc:	06d8                	addi	x14,x2,836
    10ce:	0000                	unimp
    10d0:	06d8                	addi	x14,x2,836
    10d2:	0000                	unimp
    10d4:	06d8                	addi	x14,x2,836
    10d6:	0000                	unimp
    10d8:	06d8                	addi	x14,x2,836
    10da:	0000                	unimp
    10dc:	06d8                	addi	x14,x2,836
    10de:	0000                	unimp
    10e0:	08d8                	addi	x14,x2,84
    10e2:	0000                	unimp
    10e4:	06d8                	addi	x14,x2,836
    10e6:	0000                	unimp
    10e8:	06d8                	addi	x14,x2,836
    10ea:	0000                	unimp
    10ec:	06d8                	addi	x14,x2,836
    10ee:	0000                	unimp
    10f0:	06d8                	addi	x14,x2,836
    10f2:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    10f4:	06d8                	addi	x14,x2,836
    10f6:	0000                	unimp
                        bsg_cuda_print_stat_end(temp);
    10f8:	06d8                	addi	x14,x2,836
    10fa:	0000                	unimp
    10fc:	06d8                	addi	x14,x2,836
    10fe:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    1100:	06d8                	addi	x14,x2,836
    1102:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1104:	0bec                	addi	x11,x2,476
    1106:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    1108:	06d8                	addi	x14,x2,836
    110a:	0000                	unimp
                }

                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    110c:	0888                	addi	x10,x2,80
    110e:	0000                	unimp
    1110:	0874                	addi	x13,x2,28
    1112:	0000                	unimp
    1114:	06d8                	addi	x14,x2,836
    1116:	0000                	unimp
    1118:	06d8                	addi	x14,x2,836
    111a:	0000                	unimp

                return rc;
        }
    111c:	06d8                	addi	x14,x2,836
    111e:	0000                	unimp
    1120:	06d8                	addi	x14,x2,836
    1122:	0000                	unimp
    1124:	0874                	addi	x13,x2,28
    1126:	0000                	unimp
    1128:	06d8                	addi	x14,x2,836
    112a:	0000                	unimp
    112c:	06d8                	addi	x14,x2,836
    112e:	0000                	unimp
    1130:	06d8                	addi	x14,x2,836
    1132:	0000                	unimp
    1134:	06d8                	addi	x14,x2,836
    1136:	0000                	unimp
    1138:	06d8                	addi	x14,x2,836
    113a:	0000                	unimp
    113c:	0868                	addi	x10,x2,28
    113e:	0000                	unimp
    1140:	0840                	addi	x8,x2,20
    1142:	0000                	unimp
    1144:	06d8                	addi	x14,x2,836
    1146:	0000                	unimp
    1148:	06d8                	addi	x14,x2,836
    114a:	0000                	unimp
    114c:	07ac                	addi	x11,x2,968
    114e:	0000                	unimp
    1150:	06d8                	addi	x14,x2,836
    1152:	0000                	unimp
    1154:	079c                	addi	x15,x2,960
    1156:	0000                	unimp
    1158:	06d8                	addi	x14,x2,836
    115a:	0000                	unimp
    115c:	06d8                	addi	x14,x2,836
    115e:	0000                	unimp
        int  __attribute__ ((noinline)) kernel_matrix_multiply_int16(
                      int16_t *A, int16_t *B, int16_t *C,
                      uint32_t A_HEIGHT, uint32_t A_WIDTH,
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1160:	0778                	addi	x14,x2,908
    1162:	0000                	unimp
    1164:	0a6c                	addi	x11,x2,284
    1166:	0000                	unimp
    1168:	06d0                	addi	x12,x2,836
    116a:	0000                	unimp
    116c:	06d0                	addi	x12,x2,836
    116e:	0000                	unimp
    1170:	06d0                	addi	x12,x2,836
    1172:	0000                	unimp
    1174:	06d0                	addi	x12,x2,836
    1176:	0000                	unimp
    1178:	06d0                	addi	x12,x2,836
    117a:	0000                	unimp
    117c:	06d0                	addi	x12,x2,836
    117e:	0000                	unimp
    1180:	06d0                	addi	x12,x2,836
    1182:	0000                	unimp
    1184:	06d0                	addi	x12,x2,836
    1186:	0000                	unimp
    1188:	06d0                	addi	x12,x2,836
    118a:	0000                	unimp
    118c:	06d0                	addi	x12,x2,836
    118e:	0000                	unimp
    1190:	06d0                	addi	x12,x2,836
    1192:	0000                	unimp
    1194:	06d0                	addi	x12,x2,836
    1196:	0000                	unimp
    1198:	06d0                	addi	x12,x2,836
    119a:	0000                	unimp
    119c:	06d0                	addi	x12,x2,836
    119e:	0000                	unimp
    11a0:	06d0                	addi	x12,x2,836
    11a2:	0000                	unimp
                int rc, temp = IGNORE_TAG;

                // These arrays are resident in DMEM
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11a4:	06d0                	addi	x12,x2,836
    11a6:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11a8:	06d0                	addi	x12,x2,836
    11aa:	0000                	unimp
    11ac:	06d0                	addi	x12,x2,836
    11ae:	0000                	unimp
    11b0:	06d0                	addi	x12,x2,836
    11b2:	0000                	unimp
    11b4:	06d0                	addi	x12,x2,836
    11b6:	0000                	unimp
    11b8:	06d0                	addi	x12,x2,836
    11ba:	0000                	unimp
    11bc:	06d0                	addi	x12,x2,836
    11be:	0000                	unimp
                int16_t B_local[A_WIDTH * B_WIDTH];
                int16_t C_local[A_HEIGHT * B_WIDTH];

                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    11c0:	0a60                	addi	x8,x2,284
    11c2:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11c4:	06d0                	addi	x12,x2,836
    11c6:	0000                	unimp
    11c8:	06d0                	addi	x12,x2,836
    11ca:	0000                	unimp
                int16_t B_local[A_WIDTH * B_WIDTH];
    11cc:	06d0                	addi	x12,x2,836
    11ce:	0000                	unimp
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11d0:	06d0                	addi	x12,x2,836
    11d2:	0000                	unimp
    11d4:	06d0                	addi	x12,x2,836
    11d6:	0000                	unimp
    11d8:	06d0                	addi	x12,x2,836
    11da:	0000                	unimp
    11dc:	06d0                	addi	x12,x2,836
    11de:	0000                	unimp
    11e0:	06d0                	addi	x12,x2,836
    11e2:	0000                	unimp
    11e4:	0a70                	addi	x12,x2,284
    11e6:	0000                	unimp
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);

                for(int i = 0; i <= iter; ++i){
    11e8:	06d0                	addi	x12,x2,836
    11ea:	0000                	unimp
    11ec:	0884                	addi	x9,x2,80
    11ee:	0000                	unimp
    11f0:	0a34                	addi	x13,x2,280
    11f2:	0000                	unimp
                int16_t C_local[A_HEIGHT * B_WIDTH];
    11f4:	06d0                	addi	x12,x2,836
    11f6:	0000                	unimp
                int16_t B_local[A_WIDTH * B_WIDTH];
    11f8:	06d0                	addi	x12,x2,836
    11fa:	0000                	unimp
    11fc:	06d0                	addi	x12,x2,836
    11fe:	0000                	unimp
    1200:	06d0                	addi	x12,x2,836
    1202:	0000                	unimp
    1204:	0a34                	addi	x13,x2,280
    1206:	0000                	unimp
    1208:	06d0                	addi	x12,x2,836
    120a:	0000                	unimp
    120c:	06d0                	addi	x12,x2,836
    120e:	0000                	unimp
    1210:	06d0                	addi	x12,x2,836
    1212:	0000                	unimp
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1214:	06d0                	addi	x12,x2,836
    1216:	0000                	unimp
    1218:	06d0                	addi	x12,x2,836
    121a:	0000                	unimp
    121c:	0a58                	addi	x14,x2,276
    121e:	0000                	unimp
    1220:	083c                	addi	x15,x2,24
    1222:	0000                	unimp
    1224:	06d0                	addi	x12,x2,836
    1226:	0000                	unimp
    1228:	06d0                	addi	x12,x2,836
    122a:	0000                	unimp
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    122c:	07a8                	addi	x10,x2,968
    122e:	0000                	unimp
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1230:	06d0                	addi	x12,x2,836
    1232:	0000                	unimp
    1234:	0cd4                	addi	x13,x2,596
    1236:	0000                	unimp
    1238:	06d0                	addi	x12,x2,836
    123a:	0000                	unimp
    123c:	06d0                	addi	x12,x2,836
    123e:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1240:	0ccc                	addi	x11,x2,596
	...

Disassembly of section .eh_frame.dmem:

00001244 <_bsg_data_end_addr-0x2c8>:
    1244:	0010                	0x10
    1246:	0000                	unimp
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1248:	0000                	unimp
    124a:	0000                	unimp
                int rc, temp = IGNORE_TAG;
    124c:	7a01                	lui	x20,0xfffe0
    124e:	0052                	c.slli	x0,0x14
    1250:	7c01                	lui	x24,0xfffe0
    1252:	0101                	addi	x2,x2,0
                        bsg_cuda_print_stat_start(temp);
    1254:	00020d1b          	0x20d1b
    1258:	0010                	0x10
    125a:	0000                	unimp
    125c:	0018                	0x18
    125e:	0000                	unimp
    1260:	fb08                	fsw	f10,48(x14)
    1262:	ffff                	0xffff
    1264:	01d4                	addi	x13,x2,196
    1266:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
                                                                              A_HEIGHT, A_WIDTH, B_WIDTH);
                        bsg_cuda_print_stat_end(temp);
                        temp = tag;
    1268:	0000                	unimp
    126a:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    126c:	004c                	addi	x11,x2,4
    126e:	0000                	unimp
    1270:	002c                	addi	x11,x2,8
    1272:	0000                	unimp
    1274:	0768                	addi	x10,x2,908
    1276:	0000                	unimp
    1278:	02a0                	addi	x8,x2,328
    127a:	0000                	unimp
    127c:	4400                	lw	x8,8(x8)
    127e:	700e                	flw	f0,224(x2)
    1280:	4402                	lw	x8,0(x2)
    1282:	0188                	addi	x10,x2,192
    1284:	0289                	addi	x5,x5,2
    1286:	0392                	slli	x7,x7,0x4
    1288:	05940493          	addi	x9,x8,89
    128c:	0695                	addi	x13,x13,5
    128e:	0796                	slli	x15,x15,0x5
    1290:	09980897          	auipc	x17,0x9980
    1294:	0a99                	addi	x21,x21,6
    1296:	0b9a                	slli	x23,x23,0x6
    1298:	fc030c9b          	0xfc030c9b
    129c:	0a01                	addi	x20,x20,0
    129e:	44c8                	lw	x10,12(x9)
    12a0:	44c9                	li	x9,18
    12a2:	44d2                	lw	x9,20(x2)
    12a4:	44d444d3          	0x44d444d3
    12a8:	44d5                	li	x9,21
    12aa:	44d6                	lw	x9,84(x2)
    12ac:	44d844d7          	0x44d844d7
    12b0:	44d9                	li	x9,22
    12b2:	44da                	lw	x9,148(x2)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12b4:	000e48db          	0xe48db
    12b8:	0b44                	addi	x9,x2,404
    12ba:	0000                	unimp
    12bc:	0054                	addi	x13,x2,4
    12be:	0000                	unimp
    12c0:	007c                	addi	x15,x2,12
    12c2:	0000                	unimp
    12c4:	fc78                	fsw	f14,124(x8)
    12c6:	ffff                	0xffff
    12c8:	0224                	addi	x9,x2,264
    12ca:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    12cc:	4400                	lw	x8,8(x8)
    12ce:	700e                	flw	f0,224(x2)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12d0:	814c                	0x814c
    12d2:	8801                	andi	x8,x8,0
                        bsg_cuda_print_stat_end(temp);
    12d4:	8902                	jr	x18
    12d6:	080c4403          	lbu	x8,128(x24) # fffe0080 <_end+0x7efe0028>
    12da:	6800                	flw	f8,16(x8)
    12dc:	0492                	slli	x9,x9,0x4
    12de:	06940593          	addi	x11,x8,105
    12e2:	0795                	addi	x15,x15,5
    12e4:	0896                	slli	x17,x17,0x5
    12e6:	0a980997          	auipc	x19,0xa980
    12ea:	0b99                	addi	x23,x23,6
    12ec:	0c9a                	slli	x25,x25,0x6
    12ee:	a8030d9b          	0xa8030d9b
    12f2:	0c01                	addi	x24,x24,0
    12f4:	7002                	flw	f0,32(x2)
    12f6:	c144                	sw	x9,4(x10)
    12f8:	c848                	sw	x10,20(x8)
    12fa:	c944                	sw	x9,20(x10)
    12fc:	d244                	sw	x9,36(x12)
    12fe:	d344                	sw	x9,36(x14)
    1300:	d444                	sw	x9,44(x8)
    1302:	d544                	sw	x9,44(x10)
    1304:	d644                	sw	x9,44(x12)
    1306:	d744                	sw	x9,44(x14)
    1308:	d844                	sw	x9,52(x8)
    130a:	d944                	sw	x9,52(x10)
    130c:	da44                	sw	x9,52(x12)
    130e:	db44                	sw	x9,52(x14)
    1310:	0e44                	addi	x9,x2,788
    1312:	0000                	unimp
    1314:	004c                	addi	x11,x2,4
    1316:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    1318:	00d4                	addi	x13,x2,68
    131a:	0000                	unimp
                        bsg_cuda_print_stat_end(temp);
    131c:	0960                	addi	x8,x2,156
    131e:	0000                	unimp
    1320:	02d8                	addi	x14,x2,324
    1322:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    1324:	4400                	lw	x8,8(x8)
    1326:	700e                	flw	f0,224(x2)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1328:	887c                	0x887c
    132a:	8901                	andi	x10,x10,0
                for(int i = 0; i <= iter; ++i){
    132c:	9202                	jalr	x4
    132e:	94049303          	lh	x6,-1728(x9)
                }

                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1332:	9505                	srai	x10,x10,0x21
    1334:	9606                	add	x12,x12,x1
    1336:	98089707          	0x98089707
    133a:	9909                	andi	x10,x10,-30
    133c:	9a0a                	add	x20,x20,x2
    133e:	030c9b0b          	0x30c9b0b

                return rc;
        }
    1342:	023c                	addi	x15,x2,264
    1344:	c80a                	sw	x2,16(x2)
    1346:	c944                	sw	x9,20(x10)
    1348:	d244                	sw	x9,36(x12)
    134a:	d344                	sw	x9,36(x14)
    134c:	d444                	sw	x9,44(x8)
    134e:	d544                	sw	x9,44(x10)
    1350:	d644                	sw	x9,44(x12)
    1352:	d744                	sw	x9,44(x14)
    1354:	d844                	sw	x9,52(x8)
    1356:	d944                	sw	x9,52(x10)
    1358:	da44                	sw	x9,52(x12)
    135a:	db44                	sw	x9,52(x14)
    135c:	0e48                	addi	x10,x2,788
    135e:	4400                	lw	x8,8(x8)
    1360:	0000000b          	0xb
    1364:	0054                	addi	x13,x2,4
    1366:	0000                	unimp
    1368:	0124                	addi	x9,x2,136
    136a:	0000                	unimp
    136c:	fdf4                	fsw	f13,124(x11)
    136e:	ffff                	0xffff
    1370:	0224                	addi	x9,x2,264
    1372:	0000                	unimp
    1374:	4400                	lw	x8,8(x8)
    1376:	700e                	flw	f0,224(x2)
    1378:	814c                	0x814c
    137a:	8801                	andi	x8,x8,0
    137c:	8902                	jr	x18
    137e:	080c4403          	lbu	x8,128(x24)
    1382:	6800                	flw	f8,16(x8)
        int  __attribute__ ((noinline)) kernel_matrix_multiply_int8(
                      int8_t *A, int8_t *B, int8_t *C,
                      uint32_t A_HEIGHT, uint32_t A_WIDTH,
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1384:	0492                	slli	x9,x9,0x4
    1386:	06940593          	addi	x11,x8,105
    138a:	0795                	addi	x15,x15,5
    138c:	0896                	slli	x17,x17,0x5
    138e:	0a980997          	auipc	x19,0xa980
    1392:	0b99                	addi	x23,x23,6
    1394:	0c9a                	slli	x25,x25,0x6
    1396:	a8030d9b          	0xa8030d9b
    139a:	0c01                	addi	x24,x24,0
    139c:	7002                	flw	f0,32(x2)
    139e:	c144                	sw	x9,4(x10)
    13a0:	c848                	sw	x10,20(x8)
    13a2:	c944                	sw	x9,20(x10)
    13a4:	d244                	sw	x9,36(x12)
    13a6:	d344                	sw	x9,36(x14)
    13a8:	d444                	sw	x9,44(x8)
    13aa:	d544                	sw	x9,44(x10)
    13ac:	d644                	sw	x9,44(x12)
    13ae:	d744                	sw	x9,44(x14)
    13b0:	d844                	sw	x9,52(x8)
    13b2:	d944                	sw	x9,52(x10)
    13b4:	da44                	sw	x9,52(x12)
    13b6:	db44                	sw	x9,52(x14)
    13b8:	0e44                	addi	x9,x2,788
    13ba:	0000                	unimp
    13bc:	004c                	addi	x11,x2,4
    13be:	0000                	unimp
    13c0:	017c                	addi	x15,x2,140
    13c2:	0000                	unimp
    13c4:	0b90                	addi	x12,x2,464
    13c6:	0000                	unimp
                int rc, temp = IGNORE_TAG;

                // These arrays are resident in DMEM
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13c8:	02a0                	addi	x8,x2,328
    13ca:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13cc:	4400                	lw	x8,8(x8)
    13ce:	600e                	flw	f0,192(x2)
                int8_t B_local[A_WIDTH * B_WIDTH];
    13d0:	4002                	0x4002
    13d2:	0188                	addi	x10,x2,192
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13d4:	0289                	addi	x5,x5,2
    13d6:	0392                	slli	x7,x7,0x4
    13d8:	05940493          	addi	x9,x8,89
                int8_t C_local[A_HEIGHT * B_WIDTH];

                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    13dc:	0695                	addi	x13,x13,5
    13de:	0796                	slli	x15,x15,0x5
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13e0:	09980897          	auipc	x17,0x9980
    13e4:	0a99                	addi	x21,x21,6
    13e6:	0b9a                	slli	x23,x23,0x6
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);

                for(int i = 0; i <= iter; ++i){
    13e8:	00030c9b          	0x30c9b
    13ec:	0a02                	c.slli64	x20
    13ee:	44c8                	lw	x10,12(x9)
                int8_t B_local[A_WIDTH * B_WIDTH];
    13f0:	44c9                	li	x9,18
    13f2:	44d2                	lw	x9,20(x2)
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13f4:	44d444d3          	0x44d444d3
    13f8:	44d5                	li	x9,21
    13fa:	44d6                	lw	x9,84(x2)
    13fc:	44d844d7          	0x44d844d7
    1400:	44d9                	li	x9,22
    1402:	44da                	lw	x9,148(x2)
    1404:	000e48db          	0xe48db
    1408:	0b44                	addi	x9,x2,404
    140a:	0000                	unimp
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    140c:	0054                	addi	x13,x2,4
    140e:	0000                	unimp
                int8_t A_local[A_HEIGHT * A_WIDTH];
    1410:	01cc                	addi	x11,x2,196
    1412:	0000                	unimp
                int8_t B_local[A_WIDTH * B_WIDTH];
    1414:	ff70                	fsw	f12,124(x14)
    1416:	ffff                	0xffff
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1418:	021c                	addi	x15,x2,256
    141a:	0000                	unimp
                int8_t B_local[A_WIDTH * B_WIDTH];
    141c:	4400                	lw	x8,8(x8)
    141e:	700e                	flw	f0,224(x2)
    1420:	814c                	0x814c
    1422:	8801                	andi	x8,x8,0
    1424:	8902                	jr	x18
    1426:	080c4403          	lbu	x8,128(x24)
    142a:	6800                	flw	f8,16(x8)
    142c:	0492                	slli	x9,x9,0x4
    142e:	06940593          	addi	x11,x8,105
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1432:	0795                	addi	x15,x15,5
    1434:	0896                	slli	x17,x17,0x5
    1436:	0a980997          	auipc	x19,0xa980
    143a:	0b99                	addi	x23,x23,6
                        bsg_cuda_print_stat_start(temp);
    143c:	0c9a                	slli	x25,x25,0x6
    143e:	a0030d9b          	0xa0030d9b
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1442:	0c01                	addi	x24,x24,0
    1444:	7002                	flw	f0,32(x2)
    1446:	c144                	sw	x9,4(x10)
    1448:	c848                	sw	x10,20(x8)
    144a:	c944                	sw	x9,20(x10)
    144c:	d244                	sw	x9,36(x12)
    144e:	d344                	sw	x9,36(x14)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1450:	d444                	sw	x9,44(x8)
    1452:	d544                	sw	x9,44(x10)
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1454:	d644                	sw	x9,44(x12)
    1456:	d744                	sw	x9,44(x14)
    1458:	d844                	sw	x9,52(x8)
    145a:	d944                	sw	x9,52(x10)
    145c:	da44                	sw	x9,52(x12)
    145e:	db44                	sw	x9,52(x14)
    1460:	0e44                	addi	x9,x2,788
    1462:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1464:	004c                	addi	x11,x2,4
    1466:	0000                	unimp
    1468:	0224                	addi	x9,x2,264
    146a:	0000                	unimp
                int8_t C_local[A_HEIGHT * B_WIDTH];
    146c:	0d88                	addi	x10,x2,720
    146e:	0000                	unimp
                int rc, temp = IGNORE_TAG;
    1470:	023c                	addi	x15,x2,264
    1472:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1474:	4400                	lw	x8,8(x8)
    1476:	400e                	0x400e
    1478:	9448                	0x9448
    147a:	8805                	andi	x8,x8,1
    147c:	6c01                	0x6c01
    147e:	0289                	addi	x5,x5,2
    1480:	0392                	slli	x7,x7,0x4
    1482:	06950493          	addi	x9,x10,105
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
                                                                                   A_HEIGHT, A_WIDTH, B_WIDTH);
                        bsg_cuda_print_stat_end(temp);
                        temp = tag;
    1486:	0796                	slli	x15,x15,0x5
                        bsg_cuda_print_stat_start(temp);
    1488:	09980897          	auipc	x17,0x9980
    148c:	0a99                	addi	x21,x21,6
    148e:	0b9a                	slli	x23,x23,0x6
    1490:	a8030c9b          	0xa8030c9b
    1494:	0a01                	addi	x20,x20,0
    1496:	44c8                	lw	x10,12(x9)
    1498:	44c9                	li	x9,18
    149a:	44d2                	lw	x9,20(x2)
    149c:	44d444d3          	0x44d444d3
    14a0:	44d5                	li	x9,21
    14a2:	44d6                	lw	x9,84(x2)
    14a4:	44d844d7          	0x44d844d7
    14a8:	44d9                	li	x9,22
    14aa:	44da                	lw	x9,148(x2)
    14ac:	000e48db          	0xe48db
    14b0:	0b44                	addi	x9,x2,404
    14b2:	0000                	unimp
    14b4:	0054                	addi	x13,x2,4
    14b6:	0000                	unimp
    14b8:	0274                	addi	x13,x2,268
    14ba:	0000                	unimp
    14bc:	00e4                	addi	x9,x2,76
    14be:	0000                	unimp
    14c0:	0224                	addi	x9,x2,264
    14c2:	0000                	unimp
    14c4:	4400                	lw	x8,8(x8)
    14c6:	700e                	flw	f0,224(x2)
    14c8:	814c                	0x814c
    14ca:	8801                	andi	x8,x8,0
    14cc:	8902                	jr	x18
    14ce:	080c4403          	lbu	x8,128(x24)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14d2:	6800                	flw	f8,16(x8)
    14d4:	0492                	slli	x9,x9,0x4
    14d6:	06940593          	addi	x11,x8,105
    14da:	0795                	addi	x15,x15,5
    14dc:	0896                	slli	x17,x17,0x5
    14de:	0a980997          	auipc	x19,0xa980
    14e2:	0b99                	addi	x23,x23,6
    14e4:	0c9a                	slli	x25,x25,0x6
    14e6:	a8030d9b          	0xa8030d9b
                for(int i = 0; i <= iter; ++i){
    14ea:	0c01                	addi	x24,x24,0
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14ec:	7002                	flw	f0,32(x2)
    14ee:	c144                	sw	x9,4(x10)
                        bsg_cuda_print_stat_end(temp);
    14f0:	c848                	sw	x10,20(x8)
    14f2:	c944                	sw	x9,20(x10)
    14f4:	d244                	sw	x9,36(x12)
    14f6:	d344                	sw	x9,36(x14)
    14f8:	d444                	sw	x9,44(x8)
    14fa:	d544                	sw	x9,44(x10)
    14fc:	d644                	sw	x9,44(x12)
    14fe:	d744                	sw	x9,44(x14)
    1500:	d844                	sw	x9,52(x8)
    1502:	d944                	sw	x9,52(x10)
    1504:	da44                	sw	x9,52(x12)
    1506:	db44                	sw	x9,52(x14)
    1508:	0e44                	addi	x9,x2,788
	...

Disassembly of section .text.dram:

00000000 <_start>:
# MBT modified for bsg_manycore

.section .crtbegin,"a"
  .globl _start
_start:
  li  x1, 0
       0:	00000093          	li	x1,0
  // li  x2, 0
  li  x3, 0
       4:	00000193          	li	x3,0
  li  x4, 0
       8:	00000213          	li	x4,0
  li  x5, 0
       c:	00000293          	li	x5,0
  li  x6, 0
      10:	00000313          	li	x6,0
  li  x7, 0
      14:	00000393          	li	x7,0
  li  x8, 0
      18:	00000413          	li	x8,0
  li  x9, 0
      1c:	00000493          	li	x9,0
  li  x10,0
      20:	00000513          	li	x10,0
  li  x11,0
      24:	00000593          	li	x11,0
  li  x12,0
      28:	00000613          	li	x12,0
  li  x13,0
      2c:	00000693          	li	x13,0
  li  x14,0
      30:	00000713          	li	x14,0
  li  x15,0
      34:	00000793          	li	x15,0
  li  x16,0
      38:	00000813          	li	x16,0
  li  x17,0
      3c:	00000893          	li	x17,0
  li  x18,0
      40:	00000913          	li	x18,0
  li  x19,0
      44:	00000993          	li	x19,0
  li  x20,0
      48:	00000a13          	li	x20,0
  li  x21,0
      4c:	00000a93          	li	x21,0
  li  x22,0
      50:	00000b13          	li	x22,0
  li  x23,0
      54:	00000b93          	li	x23,0
  li  x24,0
      58:	00000c13          	li	x24,0
  li  x25,0
      5c:	00000c93          	li	x25,0
  li  x26,0
      60:	00000d13          	li	x26,0
  li  x27,0
      64:	00000d93          	li	x27,0
  li  x28,0
      68:	00000e13          	li	x28,0
  li  x29,0
      6c:	00000e93          	li	x29,0
  li  x30,0
      70:	00000f13          	li	x30,0
  li  x31,0
      74:	00000f93          	li	x31,0
  # Enable FPU and clear fcsr.
  #
  # These are ignored by manycore hardware but might be
  # required by execution environments supporting 
  # exceptions (such as Spike).
  li t0, 0x00003000 # mstatus.FS
      78:	000032b7          	lui	x5,0x3
  csrs mstatus, t0 # enable FPU
      7c:	3002a073          	csrs	mstatus,x5
  fscsr x0
      80:	00301073          	fscsr	x0
  li t0, 0
      84:	00000293          	li	x5,0

  fcvt.s.w f0, x0 
      88:	d0007053          	fcvt.s.w	f0,x0
  fcvt.s.w f1, x0 
      8c:	d00070d3          	fcvt.s.w	f1,x0
  fcvt.s.w f2, x0 
      90:	d0007153          	fcvt.s.w	f2,x0
  fcvt.s.w f3, x0 
      94:	d00071d3          	fcvt.s.w	f3,x0
  fcvt.s.w f4, x0 
      98:	d0007253          	fcvt.s.w	f4,x0
  fcvt.s.w f5, x0 
      9c:	d00072d3          	fcvt.s.w	f5,x0
  fcvt.s.w f6, x0 
      a0:	d0007353          	fcvt.s.w	f6,x0
  fcvt.s.w f7, x0 
      a4:	d00073d3          	fcvt.s.w	f7,x0
  fcvt.s.w f8, x0 
      a8:	d0007453          	fcvt.s.w	f8,x0
  fcvt.s.w f9, x0 
      ac:	d00074d3          	fcvt.s.w	f9,x0
  fcvt.s.w f10,x0 
      b0:	d0007553          	fcvt.s.w	f10,x0
  fcvt.s.w f11,x0 
      b4:	d00075d3          	fcvt.s.w	f11,x0
  fcvt.s.w f12,x0 
      b8:	d0007653          	fcvt.s.w	f12,x0
  fcvt.s.w f13,x0 
      bc:	d00076d3          	fcvt.s.w	f13,x0
  fcvt.s.w f14,x0 
      c0:	d0007753          	fcvt.s.w	f14,x0
  fcvt.s.w f15,x0 
      c4:	d00077d3          	fcvt.s.w	f15,x0
  fcvt.s.w f16,x0 
      c8:	d0007853          	fcvt.s.w	f16,x0
  fcvt.s.w f17,x0 
      cc:	d00078d3          	fcvt.s.w	f17,x0
  fcvt.s.w f18,x0 
      d0:	d0007953          	fcvt.s.w	f18,x0
  fcvt.s.w f19,x0 
      d4:	d00079d3          	fcvt.s.w	f19,x0
  fcvt.s.w f20,x0 
      d8:	d0007a53          	fcvt.s.w	f20,x0
  fcvt.s.w f21,x0 
      dc:	d0007ad3          	fcvt.s.w	f21,x0
  fcvt.s.w f22,x0 
      e0:	d0007b53          	fcvt.s.w	f22,x0
  fcvt.s.w f23,x0 
      e4:	d0007bd3          	fcvt.s.w	f23,x0
  fcvt.s.w f24,x0 
      e8:	d0007c53          	fcvt.s.w	f24,x0
  fcvt.s.w f25,x0 
      ec:	d0007cd3          	fcvt.s.w	f25,x0
  fcvt.s.w f26,x0 
      f0:	d0007d53          	fcvt.s.w	f26,x0
  fcvt.s.w f27,x0 
      f4:	d0007dd3          	fcvt.s.w	f27,x0
  fcvt.s.w f28,x0 
      f8:	d0007e53          	fcvt.s.w	f28,x0
  fcvt.s.w f29,x0 
      fc:	d0007ed3          	fcvt.s.w	f29,x0
  fcvt.s.w f30,x0 
     100:	d0007f53          	fcvt.s.w	f30,x0
  fcvt.s.w f31,x0 
     104:	d0007fd3          	fcvt.s.w	f31,x0



  # initialize global pointer
  la gp, _gp
     108:	00001197          	auipc	x3,0x1
     10c:	6f818193          	addi	x3,x3,1784 # 1800 <_gp>

  la  tp, _bsg_data_end_addr + 63
     110:	00001217          	auipc	x4,0x1
     114:	43b20213          	addi	x4,x4,1083 # 154b <_bsg_data_end_addr+0x3f>
  and tp, tp, -64
     118:	fc027213          	andi	x4,x4,-64

  # mbt: put stack at top of local memory
  # mbt fix for 4KB IMEM / 4KB DMEM
  la sp, _sp
     11c:	00002117          	auipc	x2,0x2
     120:	ee010113          	addi	x2,x2,-288 # 1ffc <_bsg_elf_stack_ptr>
  lw a1, -4(sp)    # argv
  li a2, 0         # envp = NULL
  call main
  tail exit
#else
  j main
     124:	7bc0106f          	j	18e0 <main>
#endif

2:
  # Should never this point
  j 2b
     128:	0000006f          	j	128 <bsg_group_size+0x127>

0000012c <write_finish_signal>:



int write_finish_signal () 
{
  if (__bsg_id == 0) 
     12c:	000017b7          	lui	x15,0x1
     130:	01c7a783          	lw	x15,28(x15) # 101c <__bsg_id>
     134:	00079c63          	bnez	x15,14c <write_finish_signal+0x20>
  {
     int *signal_ptr = (int *) cuda_finish_signal_addr; 
     *signal_ptr = cuda_finish_signal_val;     
     138:	000017b7          	lui	x15,0x1
     13c:	00001737          	lui	x14,0x1
     140:	0307a783          	lw	x15,48(x15) # 1030 <cuda_finish_signal_addr>
     144:	02c72703          	lw	x14,44(x14) # 102c <cuda_finish_signal_val>
     148:	00e7a023          	sw	x14,0(x15)
  }
}
     14c:	00008067          	ret

00000150 <bsg_set_tile_x_y>:

  bsg_remote_int_ptr grp_org_x_p;
  bsg_remote_int_ptr grp_org_y_p;

  // everybody stores to tile 0,0
  bsg_remote_store(0,0,bsg_x_v,0);
     150:	00001737          	lui	x14,0x1
     154:	200007b7          	lui	x15,0x20000
     158:	02470593          	addi	x11,x14,36 # 1024 <__bsg_x>
  bsg_remote_store(0,0,bsg_y_v,0);
     15c:	000016b7          	lui	x13,0x1
  bsg_remote_store(0,0,bsg_x_v,0);
     160:	00b7e5b3          	or	x11,x15,x11
  bsg_remote_store(0,0,bsg_y_v,0);
     164:	02068613          	addi	x12,x13,32 # 1020 <__bsg_y>
  bsg_remote_store(0,0,bsg_x_v,0);
     168:	0005a023          	sw	x0,0(x11)
  bsg_remote_store(0,0,bsg_y_v,0);
     16c:	00c7e633          	or	x12,x15,x12
     170:	00062023          	sw	x0,0(x12)

  bsg_wait_while(*bsg_x_v < 0);
     174:	02472783          	lw	x15,36(x14)
     178:	fe07cee3          	bltz	x15,174 <bsg_set_tile_x_y+0x24>
  bsg_wait_while(*bsg_y_v < 0);
     17c:	0206a783          	lw	x15,32(x13)
     180:	fe07cee3          	bltz	x15,17c <bsg_set_tile_x_y+0x2c>

  if (!*bsg_x_v && !*bsg_y_v)
     184:	02472783          	lw	x15,36(x14)
     188:	00079a63          	bnez	x15,19c <bsg_set_tile_x_y+0x4c>
     18c:	0206a783          	lw	x15,32(x13)
     190:	00079663          	bnez	x15,19c <bsg_set_tile_x_y+0x4c>
    for (int x = 0; x < bsg_tiles_X; x++)
      for (int y = 0; y < bsg_tiles_Y; y++)
      {
        bsg_remote_store(x,y,bsg_x_v,x);
     194:	0005a023          	sw	x0,0(x11)
        bsg_remote_store(x,y,bsg_y_v,y);
     198:	00062023          	sw	x0,0(x12)
      }

  grp_org_x_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_X );
     19c:	02472583          	lw	x11,36(x14)
     1a0:	0206a683          	lw	x13,32(x13)
     1a4:	20020737          	lui	x14,0x20020
     1a8:	01259613          	slli	x12,x11,0x12
     1ac:	01869793          	slli	x15,x13,0x18
     1b0:	00c7e7b3          	or	x15,x15,x12
     1b4:	00470613          	addi	x12,x14,4 # 20020004 <_bsg_elf_vcache_size+0x20000004>
     1b8:	00c7e633          	or	x12,x15,x12
  grp_org_y_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_Y );

  __bsg_grp_org_x  = * grp_org_x_p;
     1bc:	00062603          	lw	x12,0(x12)
  grp_org_y_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_Y );
     1c0:	00870713          	addi	x14,x14,8
     1c4:	00e7e7b3          	or	x15,x15,x14
  __bsg_grp_org_x  = * grp_org_x_p;
     1c8:	00001737          	lui	x14,0x1
     1cc:	00c72c23          	sw	x12,24(x14) # 1018 <__bsg_grp_org_x>
  __bsg_grp_org_y  = * grp_org_y_p;
     1d0:	0007a603          	lw	x12,0(x15) # 20000000 <_bsg_elf_vcache_size+0x1ffe0000>
     1d4:	00001737          	lui	x14,0x1
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1d8:	00b686b3          	add	x13,x13,x11
  __bsg_grp_org_y  = * grp_org_y_p;
     1dc:	00c72a23          	sw	x12,20(x14) # 1014 <__bsg_grp_org_y>
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e0:	00001737          	lui	x14,0x1
  __bsg_grid_dim_x = 1;
     1e4:	00100793          	li	x15,1
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e8:	00d72e23          	sw	x13,28(x14) # 101c <__bsg_id>
  __bsg_grid_dim_x = 1;
     1ec:	00001737          	lui	x14,0x1
     1f0:	00f72823          	sw	x15,16(x14) # 1010 <__bsg_grid_dim_x>
  __bsg_grid_dim_y = 1;
     1f4:	00001737          	lui	x14,0x1
     1f8:	00f72623          	sw	x15,12(x14) # 100c <__bsg_grid_dim_y>
  __bsg_tile_group_id_x = 0;
     1fc:	000017b7          	lui	x15,0x1
     200:	0007a423          	sw	x0,8(x15) # 1008 <__bsg_tile_group_id_x>
  __bsg_tile_group_id_y = 0;
     204:	000017b7          	lui	x15,0x1
     208:	0007a223          	sw	x0,4(x15) # 1004 <__bsg_tile_group_id_y>
  __bsg_tile_group_id = 0;
     20c:	000017b7          	lui	x15,0x1
     210:	0007a023          	sw	x0,0(x15) # 1000 <_bsg_data_start_addr>
}
     214:	00008067          	ret

00000218 <number>:
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
  return i;
}

static char *number(char *str, long num, int base, int size, int precision, int type)
{
     218:	fa010113          	addi	x2,x2,-96
     21c:	04812e23          	sw	x8,92(x2)
     220:	04912c23          	sw	x9,88(x2)
  char c, sign, tmp[66];
  char *dig = digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
     224:	0407f813          	andi	x16,x15,64
     228:	1c080063          	beqz	x16,3e8 <number+0x1d0>
     22c:	81000eb7          	lui	x29,0x81000
  if (type & LEFT) type &= ~ZEROPAD;
     230:	0107f293          	andi	x5,x15,16
  if (type & UPPERCASE)  dig = upper_digits;
     234:	028e8e93          	addi	x29,x29,40 # 81000028 <_end+0xffffffd0>
  if (type & LEFT) type &= ~ZEROPAD;
     238:	1c028063          	beqz	x5,3f8 <number+0x1e0>
     23c:	ffe7f793          	andi	x15,x15,-2
     240:	00028413          	mv	x8,x5
  if (base < 2 || base > 36) return 0;
  
  c = (type & ZEROPAD) ? '0' : ' ';
  sign = 0;
  if (type & SIGN)
     244:	0027f813          	andi	x16,x15,2
  c = (type & ZEROPAD) ? '0' : ' ';
     248:	02000f93          	li	x31,32
  if (type & SIGN)
     24c:	0207f393          	andi	x7,x15,32
     250:	1c080263          	beqz	x16,414 <number+0x1fc>
  {
    if (num < 0)
     254:	1c05c463          	bltz	x11,41c <number+0x204>
    {
      sign = '-';
      num = -num;
      size--;
    }
    else if (type & PLUS)
     258:	0047f813          	andi	x16,x15,4
     25c:	20081263          	bnez	x16,460 <number+0x248>
    {
      sign = '+';
      size--;
    }
    else if (type & SPACE)
     260:	0087f793          	andi	x15,x15,8
  sign = 0;
     264:	00000493          	li	x9,0
    else if (type & SPACE)
     268:	00078663          	beqz	x15,274 <number+0x5c>
    {
      sign = ' ';
      size--;
     26c:	fff68693          	addi	x13,x13,-1
      sign = ' ';
     270:	02000493          	li	x9,32
    }
  }

  if (type & HEX_PREP)
     274:	00038c63          	beqz	x7,28c <number+0x74>
  {
    if (base == 16)
     278:	01000793          	li	x15,16
     27c:	20f60463          	beq	x12,x15,484 <number+0x26c>
      size -= 2;
    else if (base == 8)
      size--;
     280:	ff860793          	addi	x15,x12,-8
     284:	0017b793          	seqz	x15,x15
     288:	40f686b3          	sub	x13,x13,x15
  }

  i = 0;

  if (num == 0)
     28c:	1a059063          	bnez	x11,42c <number+0x214>
    tmp[i++] = '0';
     290:	03000793          	li	x15,48
     294:	00f10623          	sb	x15,12(x2)
     298:	00000893          	li	x17,0
     29c:	03000813          	li	x16,48
     2a0:	00100f13          	li	x30,1
     2a4:	00c10793          	addi	x15,x2,12
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
     2a8:	000f0e13          	mv	x28,x30
     2ac:	00ef5463          	bge	x30,x14,2b4 <number+0x9c>
     2b0:	00070e13          	mv	x28,x14
  size -= precision;
     2b4:	41c68333          	sub	x6,x13,x28
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     2b8:	fff30593          	addi	x11,x6,-1
     2bc:	02041263          	bnez	x8,2e0 <number+0xc8>
     2c0:	006506b3          	add	x13,x10,x6
     2c4:	02000713          	li	x14,32
     2c8:	1c605e63          	blez	x6,4a4 <number+0x28c>
     2cc:	00150513          	addi	x10,x10,1
     2d0:	fee50fa3          	sb	x14,-1(x10)
     2d4:	fed51ce3          	bne	x10,x13,2cc <number+0xb4>
     2d8:	ffe00593          	li	x11,-2
     2dc:	fff00313          	li	x6,-1
  if (sign) *str++ = sign;
     2e0:	00048663          	beqz	x9,2ec <number+0xd4>
     2e4:	00950023          	sb	x9,0(x10)
     2e8:	00150513          	addi	x10,x10,1
  
  if (type & HEX_PREP)
     2ec:	00038a63          	beqz	x7,300 <number+0xe8>
  {
    if (base == 8)
     2f0:	00800713          	li	x14,8
     2f4:	18e60c63          	beq	x12,x14,48c <number+0x274>
      *str++ = '0';
    else if (base == 16)
     2f8:	01000713          	li	x14,16
     2fc:	16e60863          	beq	x12,x14,46c <number+0x254>
      *str++ = '0';
      *str++ = digits[33];
    }
  }

  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     300:	04029463          	bnez	x5,348 <number+0x130>
     304:	00050613          	mv	x12,x10
     308:	00100713          	li	x14,1
     30c:	1a605463          	blez	x6,4b4 <number+0x29c>
     310:	00160613          	addi	x12,x12,1
     314:	40c706b3          	sub	x13,x14,x12
     318:	00b686b3          	add	x13,x13,x11
     31c:	00d506b3          	add	x13,x10,x13
     320:	fff60fa3          	sb	x31,-1(x12)
     324:	fed046e3          	bgtz	x13,310 <number+0xf8>
     328:	fff5c713          	not	x14,x11
     32c:	41f75713          	srai	x14,x14,0x1f
     330:	00e5f733          	and	x14,x11,x14
     334:	fff58593          	addi	x11,x11,-1
     338:	40e58333          	sub	x6,x11,x14
     33c:	00170713          	addi	x14,x14,1
     340:	00e50533          	add	x10,x10,x14
     344:	fff30593          	addi	x11,x6,-1
  while (i < precision--) *str++ = '0';
     348:	41ee0733          	sub	x14,x28,x30
     34c:	00e50733          	add	x14,x10,x14
     350:	03000693          	li	x13,48
     354:	15cf5463          	bge	x30,x28,49c <number+0x284>
     358:	00150513          	addi	x10,x10,1
     35c:	fed50fa3          	sb	x13,-1(x10)
     360:	fea71ce3          	bne	x14,x10,358 <number+0x140>
  while (i-- > 0) *str++ = tmp[i];
     364:	01178633          	add	x12,x15,x17
  while (i < precision--) *str++ = '0';
     368:	00070693          	mv	x13,x14
  while (i-- > 0) *str++ = tmp[i];
     36c:	00100513          	li	x10,1
     370:	0080006f          	j	378 <number+0x160>
     374:	00064803          	lbu	x16,0(x12)
     378:	00168693          	addi	x13,x13,1
     37c:	40d507b3          	sub	x15,x10,x13
     380:	011787b3          	add	x15,x15,x17
     384:	00f707b3          	add	x15,x14,x15
     388:	ff068fa3          	sb	x16,-1(x13)
     38c:	fff60613          	addi	x12,x12,-1
     390:	fef042e3          	bgtz	x15,374 <number+0x15c>
     394:	00188513          	addi	x10,x17,1 # 9981489 <_bsg_elf_vcache_size+0x9961489>
     398:	00a70533          	add	x10,x14,x10
  while (size-- > 0) *str++ = ' ';
     39c:	02605e63          	blez	x6,3d8 <number+0x1c0>
  while (i-- > 0) *str++ = tmp[i];
     3a0:	00050713          	mv	x14,x10
  while (size-- > 0) *str++ = ' ';
     3a4:	02000613          	li	x12,32
     3a8:	00100693          	li	x13,1
     3ac:	00170713          	addi	x14,x14,1
     3b0:	40e687b3          	sub	x15,x13,x14
     3b4:	00b787b3          	add	x15,x15,x11
     3b8:	00f507b3          	add	x15,x10,x15
     3bc:	fec70fa3          	sb	x12,-1(x14)
     3c0:	fef046e3          	bgtz	x15,3ac <number+0x194>
     3c4:	fff5c793          	not	x15,x11
     3c8:	41f7d793          	srai	x15,x15,0x1f
     3cc:	00f5f5b3          	and	x11,x11,x15
     3d0:	00158593          	addi	x11,x11,1
     3d4:	00b50533          	add	x10,x10,x11

  return str;
}
     3d8:	05c12403          	lw	x8,92(x2)
     3dc:	05812483          	lw	x9,88(x2)
     3e0:	06010113          	addi	x2,x2,96
     3e4:	00008067          	ret
  char *dig = digits;
     3e8:	81000eb7          	lui	x29,0x81000
  if (type & LEFT) type &= ~ZEROPAD;
     3ec:	0107f293          	andi	x5,x15,16
  char *dig = digits;
     3f0:	000e8e93          	mv	x29,x29
  if (type & LEFT) type &= ~ZEROPAD;
     3f4:	e40294e3          	bnez	x5,23c <number+0x24>
  c = (type & ZEROPAD) ? '0' : ' ';
     3f8:	0017f813          	andi	x16,x15,1
     3fc:	0117f413          	andi	x8,x15,17
     400:	03000f93          	li	x31,48
     404:	e40800e3          	beqz	x16,244 <number+0x2c>
  if (type & SIGN)
     408:	0027f813          	andi	x16,x15,2
     40c:	0207f393          	andi	x7,x15,32
     410:	e40812e3          	bnez	x16,254 <number+0x3c>
  sign = 0;
     414:	00000493          	li	x9,0
     418:	e5dff06f          	j	274 <number+0x5c>
      num = -num;
     41c:	40b005b3          	neg	x11,x11
      size--;
     420:	fff68693          	addi	x13,x13,-1
      sign = '-';
     424:	02d00493          	li	x9,45
  if (type & HEX_PREP)
     428:	e40398e3          	bnez	x7,278 <number+0x60>
  if (base < 2 || base > 36) return 0;
     42c:	00000f13          	li	x30,0
     430:	00c10793          	addi	x15,x2,12
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     434:	02c5f833          	remu	x16,x11,x12
     438:	000f0893          	mv	x17,x30
     43c:	001f0f13          	addi	x30,x30,1
     440:	01e78e33          	add	x28,x15,x30
     444:	00058313          	mv	x6,x11
     448:	010e8833          	add	x16,x29,x16
     44c:	00084803          	lbu	x16,0(x16)
      num = ((unsigned long) num) / (unsigned) base;
     450:	02c5d5b3          	divu	x11,x11,x12
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     454:	ff0e0fa3          	sb	x16,-1(x28)
    while (num != 0)
     458:	fcc37ee3          	bgeu	x6,x12,434 <number+0x21c>
     45c:	e4dff06f          	j	2a8 <number+0x90>
      size--;
     460:	fff68693          	addi	x13,x13,-1
      sign = '+';
     464:	02b00493          	li	x9,43
     468:	e0dff06f          	j	274 <number+0x5c>
      *str++ = '0';
     46c:	03000713          	li	x14,48
     470:	00e50023          	sb	x14,0(x10)
      *str++ = digits[33];
     474:	07800713          	li	x14,120
     478:	00e500a3          	sb	x14,1(x10)
     47c:	00250513          	addi	x10,x10,2
     480:	e81ff06f          	j	300 <number+0xe8>
      size -= 2;
     484:	ffe68693          	addi	x13,x13,-2
     488:	e05ff06f          	j	28c <number+0x74>
      *str++ = '0';
     48c:	03000713          	li	x14,48
     490:	00e50023          	sb	x14,0(x10)
     494:	00150513          	addi	x10,x10,1
     498:	e69ff06f          	j	300 <number+0xe8>
  while (i < precision--) *str++ = '0';
     49c:	00050713          	mv	x14,x10
     4a0:	ec5ff06f          	j	364 <number+0x14c>
     4a4:	ffe30713          	addi	x14,x6,-2
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     4a8:	00058313          	mv	x6,x11
     4ac:	00070593          	mv	x11,x14
     4b0:	e31ff06f          	j	2e0 <number+0xc8>
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     4b4:	00058313          	mv	x6,x11
     4b8:	fff58593          	addi	x11,x11,-1
     4bc:	e8dff06f          	j	348 <number+0x130>

000004c0 <uart_send_char>:
  return str - buf;
}

void uart_send_char(char c) {

bsg_putchar( c );
     4c0:	4000f7b7          	lui	x15,0x4000f
     4c4:	aca78e23          	sb	x10,-1316(x15) # 4000eadc <_bsg_elf_vcache_size+0x3ffeeadc>

}
     4c8:	00008067          	ret

000004cc <bsg_printf>:

int bsg_printf(const char *fmt, ...)
{
     4cc:	e9010113          	addi	x2,x2,-368
     4d0:	13312e23          	sw	x19,316(x2)
     4d4:	14112623          	sw	x1,332(x2)
     4d8:	14812423          	sw	x8,328(x2)
     4dc:	14912223          	sw	x9,324(x2)
     4e0:	15212023          	sw	x18,320(x2)
     4e4:	13412c23          	sw	x20,312(x2)
     4e8:	13512a23          	sw	x21,308(x2)
     4ec:	13612823          	sw	x22,304(x2)
     4f0:	13712623          	sw	x23,300(x2)
     4f4:	13812423          	sw	x24,296(x2)
     4f8:	13912223          	sw	x25,292(x2)
     4fc:	14b12a23          	sw	x11,340(x2)
     500:	14c12c23          	sw	x12,344(x2)
     504:	14d12e23          	sw	x13,348(x2)
     508:	16e12023          	sw	x14,352(x2)
     50c:	16f12223          	sw	x15,356(x2)
     510:	17012423          	sw	x16,360(x2)
     514:	17112623          	sw	x17,364(x2)
  for (str = buf; *fmt; fmt++)
     518:	00054783          	lbu	x15,0(x10)
  char buf[256],*p;
  va_list args;
  int n=0;

  va_start(args, fmt);
     51c:	15410993          	addi	x19,x2,340
     520:	01312223          	sw	x19,4(x2)
  for (str = buf; *fmt; fmt++)
     524:	76078463          	beqz	x15,c8c <bsg_printf+0x7c0>
     528:	02010913          	addi	x18,x2,32
     52c:	00001ab7          	lui	x21,0x1
     530:	00001a37          	lui	x20,0x1
     534:	81000437          	lui	x8,0x81000
     538:	00050313          	mv	x6,x10
     53c:	040a8a93          	addi	x21,x21,64 # 1040 <_tls_data>
     540:	00090513          	mv	x10,x18
     544:	084a0a13          	addi	x20,x20,132 # 1084 <_tls_data+0x44>
     548:	00040413          	mv	x8,x8
    if (*fmt != '%')
     54c:	02500713          	li	x14,37
     550:	08e78a63          	beq	x15,x14,5e4 <bsg_printf+0x118>
      *str++ = *fmt;
     554:	00f50023          	sb	x15,0(x10)
      continue;
     558:	00134783          	lbu	x15,1(x6)
      *str++ = *fmt;
     55c:	00150513          	addi	x10,x10,1
      continue;
     560:	00130313          	addi	x6,x6,1
  for (str = buf; *fmt; fmt++)
     564:	fe0794e3          	bnez	x15,54c <bsg_printf+0x80>
  *str = '\0';
     568:	00050023          	sb	x0,0(x10)
    bsg_mutex_status result = bsg_mutex_lock_fail;

    unsigned int mutex_addr = (unsigned int) ( p_mutex );
    unsigned int swap_val = 1;

    asm volatile ("amoswap.w.aq %[result], %[swap_val], 0(%[addr]);"  \
     56c:	400006b7          	lui	x13,0x40000
     570:	00100793          	li	x15,1
     574:	0cf6a72f          	amoswap.w.aq	x14,x15,(x13)
static void inline bsg_mutex_lock( bsg_mutex_ptr  p_mutex ){
    int result = bsg_mutex_lock_fail;
    do{
       result =  bsg_mutex_try_lock( p_mutex );

    }while( result == bsg_mutex_lock_fail);
     578:	fef70ee3          	beq	x14,x15,574 <bsg_printf+0xa8>
  ee_vsprintf(buf, fmt, args);
  va_end(args);
  p=buf;
 
  bsg_mutex_lock( io_mutex_ptr );
  while (*p) {
     57c:	02014703          	lbu	x14,32(x2)
     580:	70070263          	beqz	x14,c84 <bsg_printf+0x7b8>
     584:	00100693          	li	x13,1
  p=buf;
     588:	00090793          	mv	x15,x18
bsg_putchar( c );
     58c:	4000f637          	lui	x12,0x4000f
     590:	412686b3          	sub	x13,x13,x18
     594:	ace60e23          	sb	x14,-1316(x12) # 4000eadc <_bsg_elf_vcache_size+0x3ffeeadc>
  while (*p) {
     598:	0017c703          	lbu	x14,1(x15)
     59c:	00d78533          	add	x10,x15,x13
	uart_send_char(*p);
	n++;
	p++;
     5a0:	00178793          	addi	x15,x15,1
  while (*p) {
     5a4:	fe0718e3          	bnez	x14,594 <bsg_printf+0xc8>
static void inline bsg_mutex_unlock( bsg_mutex_ptr  p_mutex ){


    unsigned int mutex_addr = (unsigned int) ( p_mutex );

    asm volatile ("amoswap.w.rl x0, x0, 0(%[addr]);"   \
     5a8:	400007b7          	lui	x15,0x40000
     5ac:	0a07a02f          	amoswap.w.rl	x0,x0,(x15)
  }
  bsg_mutex_unlock( io_mutex_ptr );

  return n;
}
     5b0:	14c12083          	lw	x1,332(x2)
     5b4:	14812403          	lw	x8,328(x2)
     5b8:	14412483          	lw	x9,324(x2)
     5bc:	14012903          	lw	x18,320(x2)
     5c0:	13c12983          	lw	x19,316(x2)
     5c4:	13812a03          	lw	x20,312(x2)
     5c8:	13412a83          	lw	x21,308(x2)
     5cc:	13012b03          	lw	x22,304(x2)
     5d0:	12c12b83          	lw	x23,300(x2)
     5d4:	12812c03          	lw	x24,296(x2)
     5d8:	12412c83          	lw	x25,292(x2)
     5dc:	17010113          	addi	x2,x2,368
     5e0:	00008067          	ret
    flags = 0;
     5e4:	00000793          	li	x15,0
     5e8:	01000693          	li	x13,16
    switch (*fmt)
     5ec:	00134583          	lbu	x11,1(x6)
    fmt++; // This also skips first '%'
     5f0:	00130493          	addi	x9,x6,1
    switch (*fmt)
     5f4:	fe058713          	addi	x14,x11,-32
     5f8:	0ff77713          	andi	x14,x14,255
     5fc:	00e6ea63          	bltu	x13,x14,610 <bsg_printf+0x144>
     600:	00271713          	slli	x14,x14,0x2
     604:	01570733          	add	x14,x14,x21
     608:	00072703          	lw	x14,0(x14)
     60c:	00070067          	jr	x14
    if (is_digit(*fmt))
     610:	fd058713          	addi	x14,x11,-48
     614:	0ff77713          	andi	x14,x14,255
     618:	00900693          	li	x13,9
     61c:	10e6f463          	bgeu	x13,x14,724 <bsg_printf+0x258>
    else if (*fmt == '*')
     620:	02a00713          	li	x14,42
    field_width = -1;
     624:	fff00693          	li	x13,-1
    else if (*fmt == '*')
     628:	12e58863          	beq	x11,x14,758 <bsg_printf+0x28c>
    if (*fmt == '.')
     62c:	02e00613          	li	x12,46
    precision = -1;
     630:	fff00713          	li	x14,-1
    if (*fmt == '.')
     634:	0cc58263          	beq	x11,x12,6f8 <bsg_printf+0x22c>
    if (*fmt == 'l' || *fmt == 'L')
     638:	0df5f613          	andi	x12,x11,223
     63c:	04c00813          	li	x16,76
     640:	07060063          	beq	x12,x16,6a0 <bsg_printf+0x1d4>
    switch (*fmt)
     644:	fbf58613          	addi	x12,x11,-65
     648:	0ff67613          	andi	x12,x12,255
     64c:	03700813          	li	x16,55
     650:	08c86463          	bltu	x16,x12,6d8 <bsg_printf+0x20c>
     654:	00261613          	slli	x12,x12,0x2
     658:	01460633          	add	x12,x12,x20
     65c:	00062603          	lw	x12,0(x12)
     660:	00060067          	jr	x12
      case '0': flags |= ZEROPAD; goto repeat;
     664:	0017e793          	ori	x15,x15,1
  for (str = buf; *fmt; fmt++)
     668:	00048313          	mv	x6,x9
     66c:	f81ff06f          	j	5ec <bsg_printf+0x120>
      case '-': flags |= LEFT; goto repeat;
     670:	0107e793          	ori	x15,x15,16
  for (str = buf; *fmt; fmt++)
     674:	00048313          	mv	x6,x9
     678:	f75ff06f          	j	5ec <bsg_printf+0x120>
      case '+': flags |= PLUS; goto repeat;
     67c:	0047e793          	ori	x15,x15,4
  for (str = buf; *fmt; fmt++)
     680:	00048313          	mv	x6,x9
     684:	f69ff06f          	j	5ec <bsg_printf+0x120>
      case '#': flags |= HEX_PREP; goto repeat;
     688:	0207e793          	ori	x15,x15,32
  for (str = buf; *fmt; fmt++)
     68c:	00048313          	mv	x6,x9
     690:	f5dff06f          	j	5ec <bsg_printf+0x120>
      case ' ': flags |= SPACE; goto repeat;
     694:	0087e793          	ori	x15,x15,8
  for (str = buf; *fmt; fmt++)
     698:	00048313          	mv	x6,x9
     69c:	f51ff06f          	j	5ec <bsg_printf+0x120>
    switch (*fmt)
     6a0:	0014c803          	lbu	x16,1(x9)
     6a4:	03700893          	li	x17,55
      fmt++;
     6a8:	00148313          	addi	x6,x9,1
    switch (*fmt)
     6ac:	fbf80613          	addi	x12,x16,-65
     6b0:	0ff67613          	andi	x12,x12,255
     6b4:	00c8ee63          	bltu	x17,x12,6d0 <bsg_printf+0x204>
     6b8:	000018b7          	lui	x17,0x1
     6bc:	00261613          	slli	x12,x12,0x2
     6c0:	16488893          	addi	x17,x17,356 # 1164 <kernel_matrix_multiply_int16+0x4>
     6c4:	01160633          	add	x12,x12,x17
     6c8:	00062603          	lw	x12,0(x12)
     6cc:	00060067          	jr	x12
     6d0:	00080593          	mv	x11,x16
      fmt++;
     6d4:	00030493          	mv	x9,x6
        if (*fmt != '%') *str++ = '%';
     6d8:	02500713          	li	x14,37
     6dc:	00150793          	addi	x15,x10,1
     6e0:	54e58463          	beq	x11,x14,c28 <bsg_printf+0x75c>
     6e4:	00e50023          	sb	x14,0(x10)
        if (*fmt)
     6e8:	0004c703          	lbu	x14,0(x9)
     6ec:	62071863          	bnez	x14,d1c <bsg_printf+0x850>
        if (*fmt != '%') *str++ = '%';
     6f0:	00078513          	mv	x10,x15
     6f4:	e75ff06f          	j	568 <bsg_printf+0x9c>
      if (is_digit(*fmt))
     6f8:	0014c583          	lbu	x11,1(x9)
     6fc:	00900613          	li	x12,9
      ++fmt;    
     700:	00148813          	addi	x16,x9,1
      if (is_digit(*fmt))
     704:	fd058713          	addi	x14,x11,-48
     708:	0ff77713          	andi	x14,x14,255
     70c:	4ae67463          	bgeu	x12,x14,bb4 <bsg_printf+0x6e8>
      else if (*fmt == '*')
     710:	02a00713          	li	x14,42
     714:	4ee58263          	beq	x11,x14,bf8 <bsg_printf+0x72c>
      ++fmt;    
     718:	00080493          	mv	x9,x16
      if (precision < 0) precision = 0;
     71c:	00000713          	li	x14,0
     720:	f19ff06f          	j	638 <bsg_printf+0x16c>
  int i = 0;
     724:	00000693          	li	x13,0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     728:	00900613          	li	x12,9
     72c:	00269713          	slli	x14,x13,0x2
     730:	00d706b3          	add	x13,x14,x13
     734:	00148493          	addi	x9,x9,1
     738:	00169693          	slli	x13,x13,0x1
     73c:	00b686b3          	add	x13,x13,x11
     740:	0004c583          	lbu	x11,0(x9)
     744:	fd068693          	addi	x13,x13,-48 # 3fffffd0 <_bsg_elf_vcache_size+0x3ffdffd0>
     748:	fd058713          	addi	x14,x11,-48
     74c:	0ff77713          	andi	x14,x14,255
     750:	fce67ee3          	bgeu	x12,x14,72c <bsg_printf+0x260>
     754:	ed9ff06f          	j	62c <bsg_printf+0x160>
      field_width = va_arg(args, int);
     758:	0009a683          	lw	x13,0(x19) # a9814de <_bsg_elf_vcache_size+0xa9614de>
     75c:	00234583          	lbu	x11,2(x6)
      fmt++;
     760:	00230493          	addi	x9,x6,2
      field_width = va_arg(args, int);
     764:	00498993          	addi	x19,x19,4
      if (field_width < 0)
     768:	ec06d2e3          	bgez	x13,62c <bsg_printf+0x160>
        field_width = -field_width;
     76c:	40d006b3          	neg	x13,x13
        flags |= LEFT;
     770:	0107e793          	ori	x15,x15,16
     774:	eb9ff06f          	j	62c <bsg_printf+0x160>
    if (qualifier == 'l')
     778:	00498813          	addi	x16,x19,4
        base = 16;
     77c:	01000613          	li	x12,16
      num = va_arg(args, unsigned int);
     780:	0009a583          	lw	x11,0(x19)
     784:	00080993          	mv	x19,x16
    str = number(str, num, base, field_width, precision, flags);
     788:	a91ff0ef          	jal	x1,218 <number>
     78c:	0014c783          	lbu	x15,1(x9)
     790:	00148313          	addi	x6,x9,1
  for (str = buf; *fmt; fmt++)
     794:	da079ce3          	bnez	x15,54c <bsg_printf+0x80>
     798:	dd1ff06f          	j	568 <bsg_printf+0x9c>
    if (qualifier == 'l')
     79c:	00498813          	addi	x16,x19,4
    if (*fmt == 'l' || *fmt == 'L')
     7a0:	00a00613          	li	x12,10
     7a4:	fddff06f          	j	780 <bsg_printf+0x2b4>
      fmt++;
     7a8:	00030493          	mv	x9,x6
        s = va_arg(args, char *);
     7ac:	0009a603          	lw	x12,0(x19)
     7b0:	00498993          	addi	x19,x19,4
        if (!s) s = "<NULL>";
     7b4:	4a060263          	beqz	x12,c58 <bsg_printf+0x78c>
  for (sc = s; *sc != '\0' && count--; ++sc);
     7b8:	00064583          	lbu	x11,0(x12)
     7bc:	52058063          	beqz	x11,cdc <bsg_printf+0x810>
     7c0:	50070e63          	beqz	x14,cdc <bsg_printf+0x810>
     7c4:	00060593          	mv	x11,x12
     7c8:	00c0006f          	j	7d4 <bsg_printf+0x308>
     7cc:	40e58833          	sub	x16,x11,x14
     7d0:	00c80863          	beq	x16,x12,7e0 <bsg_printf+0x314>
     7d4:	0015c803          	lbu	x16,1(x11)
     7d8:	00158593          	addi	x11,x11,1
     7dc:	fe0818e3          	bnez	x16,7cc <bsg_printf+0x300>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e0:	0107f793          	andi	x15,x15,16
  return sc - s;
     7e4:	40c585b3          	sub	x11,x11,x12
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e8:	4a078863          	beqz	x15,c98 <bsg_printf+0x7cc>
        for (i = 0; i < len; ++i) *str++ = *s++;
     7ec:	54b05c63          	blez	x11,d44 <bsg_printf+0x878>
     7f0:	00b60833          	add	x16,x12,x11
     7f4:	00050793          	mv	x15,x10
     7f8:	00064703          	lbu	x14,0(x12)
     7fc:	00160613          	addi	x12,x12,1
     800:	00178793          	addi	x15,x15,1 # 40000001 <_bsg_elf_vcache_size+0x3ffe0001>
     804:	fee78fa3          	sb	x14,-1(x15)
     808:	ff0618e3          	bne	x12,x16,7f8 <bsg_printf+0x32c>
     80c:	00b50733          	add	x14,x10,x11
        while (len < field_width--) *str++ = ' ';
     810:	40b68533          	sub	x10,x13,x11
     814:	00148313          	addi	x6,x9,1
     818:	00a70533          	add	x10,x14,x10
     81c:	02000793          	li	x15,32
     820:	4ed5d263          	bge	x11,x13,d04 <bsg_printf+0x838>
     824:	00170713          	addi	x14,x14,1
     828:	fef70fa3          	sb	x15,-1(x14)
     82c:	fea71ce3          	bne	x14,x10,824 <bsg_printf+0x358>
     830:	0014c783          	lbu	x15,1(x9)
  for (str = buf; *fmt; fmt++)
     834:	d0079ce3          	bnez	x15,54c <bsg_printf+0x80>
     838:	d31ff06f          	j	568 <bsg_printf+0x9c>
      fmt++;
     83c:	00030493          	mv	x9,x6
        if (field_width == -1)
     840:	fff00613          	li	x12,-1
     844:	40c68463          	beq	x13,x12,c4c <bsg_printf+0x780>
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
     848:	0009a583          	lw	x11,0(x19)
     84c:	01000613          	li	x12,16
     850:	00498993          	addi	x19,x19,4
     854:	9c5ff0ef          	jal	x1,218 <number>
     858:	0014c783          	lbu	x15,1(x9)
        continue;
     85c:	00148313          	addi	x6,x9,1
  for (str = buf; *fmt; fmt++)
     860:	ce0796e3          	bnez	x15,54c <bsg_printf+0x80>
     864:	d05ff06f          	j	568 <bsg_printf+0x9c>
    if (qualifier == 'l')
     868:	00498813          	addi	x16,x19,4
        base = 8;
     86c:	00800613          	li	x12,8
     870:	f11ff06f          	j	780 <bsg_printf+0x2b4>
        flags |= SIGN;
     874:	0027e793          	ori	x15,x15,2
    if (qualifier == 'l')
     878:	00498813          	addi	x16,x19,4
    base = 10;
     87c:	00a00613          	li	x12,10
     880:	f01ff06f          	j	780 <bsg_printf+0x2b4>
      fmt++;
     884:	00030493          	mv	x9,x6
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     888:	0107f793          	andi	x15,x15,16
     88c:	fff68693          	addi	x13,x13,-1
     890:	3c078a63          	beqz	x15,c64 <bsg_printf+0x798>
        *str++ = (unsigned char) va_arg(args, int);
     894:	0009a603          	lw	x12,0(x19)
     898:	00150713          	addi	x14,x10,1
     89c:	00168793          	addi	x15,x13,1
     8a0:	00c50023          	sb	x12,0(x10)
     8a4:	00498993          	addi	x19,x19,4
        while (--field_width > 0) *str++ = ' ';
     8a8:	00f50533          	add	x10,x10,x15
     8ac:	00148313          	addi	x6,x9,1
        *str++ = (unsigned char) va_arg(args, int);
     8b0:	00070793          	mv	x15,x14
        while (--field_width > 0) *str++ = ' ';
     8b4:	02000613          	li	x12,32
     8b8:	44d05663          	blez	x13,d04 <bsg_printf+0x838>
     8bc:	00178793          	addi	x15,x15,1
     8c0:	fec78fa3          	sb	x12,-1(x15)
     8c4:	fea79ce3          	bne	x15,x10,8bc <bsg_printf+0x3f0>
     8c8:	0014c783          	lbu	x15,1(x9)
     8cc:	00d70533          	add	x10,x14,x13
  for (str = buf; *fmt; fmt++)
     8d0:	c6079ee3          	bnez	x15,54c <bsg_printf+0x80>
     8d4:	c95ff06f          	j	568 <bsg_printf+0x9c>
        flags |= UPPERCASE;
     8d8:	0407e793          	ori	x15,x15,64
    if (qualifier == 'l')
     8dc:	00498813          	addi	x16,x19,4
        base = 16;
     8e0:	01000613          	li	x12,16
     8e4:	e9dff06f          	j	780 <bsg_printf+0x2b4>
        flags |= UPPERCASE;
     8e8:	0009a703          	lw	x14,0(x19)
     8ec:	0407e793          	ori	x15,x15,64
        if (qualifier == 'l')
     8f0:	00498993          	addi	x19,x19,4
    n = addr[i];
     8f4:	00074583          	lbu	x11,0(x14)
  len = 0;
     8f8:	00000813          	li	x16,0
     8fc:	00470893          	addi	x17,x14,4
      if (n >= 100) 
     900:	06300f13          	li	x30,99
      else if (n >= 10) 
     904:	00900293          	li	x5,9
        tmp[len++] = digits[n / 10];
     908:	00a00e13          	li	x28,10
        tmp[len++] = digits[n / 100];
     90c:	06400f93          	li	x31,100
      tmp[len++] = digits[0];
     910:	03000e93          	li	x29,48
    if (i != 0) tmp[len++] = '.';
     914:	02e00313          	li	x6,46
    if (n == 0)
     918:	00180613          	addi	x12,x16,1
     91c:	02059a63          	bnez	x11,950 <bsg_printf+0x484>
      tmp[len++] = digits[0];
     920:	12010593          	addi	x11,x2,288
     924:	01058833          	add	x16,x11,x16
     928:	efd80423          	sb	x29,-280(x16)
  for (i = 0; i < 4; i++)
     92c:	00170713          	addi	x14,x14,1
     930:	07170e63          	beq	x14,x17,9ac <bsg_printf+0x4e0>
    if (i != 0) tmp[len++] = '.';
     934:	12010593          	addi	x11,x2,288
     938:	00c585b3          	add	x11,x11,x12
     93c:	ee658423          	sb	x6,-280(x11)
    n = addr[i];
     940:	00074583          	lbu	x11,0(x14)
    if (i != 0) tmp[len++] = '.';
     944:	00160813          	addi	x16,x12,1
    if (n == 0)
     948:	00180613          	addi	x12,x16,1
     94c:	fc058ae3          	beqz	x11,920 <bsg_printf+0x454>
      if (n >= 100) 
     950:	22bf5a63          	bge	x30,x11,b84 <bsg_printf+0x6b8>
        n = n % 100;
     954:	03f5ebb3          	rem	x23,x11,x31
        tmp[len++] = digits[n / 100];
     958:	12010393          	addi	x7,x2,288
     95c:	01038cb3          	add	x25,x7,x16
        tmp[len++] = digits[n / 10];
     960:	00c38c33          	add	x24,x7,x12
     964:	00280b13          	addi	x22,x16,2
     968:	00380613          	addi	x12,x16,3
        tmp[len++] = digits[n / 100];
     96c:	03f5c3b3          	div	x7,x11,x31
        tmp[len++] = digits[n / 10];
     970:	03cbc833          	div	x16,x23,x28
        tmp[len++] = digits[n / 100];
     974:	007403b3          	add	x7,x8,x7
     978:	0003c583          	lbu	x11,0(x7)
     97c:	eebc8423          	sb	x11,-280(x25)
        n = n % 10;
     980:	03cbe5b3          	rem	x11,x23,x28
        tmp[len++] = digits[n / 10];
     984:	01040833          	add	x16,x8,x16
     988:	00084803          	lbu	x16,0(x16)
     98c:	ef0c0423          	sb	x16,-280(x24)
      tmp[len++] = digits[n];
     990:	00b405b3          	add	x11,x8,x11
     994:	0005c803          	lbu	x16,0(x11)
     998:	12010593          	addi	x11,x2,288
     99c:	016585b3          	add	x11,x11,x22
     9a0:	ef058423          	sb	x16,-280(x11)
  for (i = 0; i < 4; i++)
     9a4:	00170713          	addi	x14,x14,1
     9a8:	f91716e3          	bne	x14,x17,934 <bsg_printf+0x468>
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     9ac:	0107f793          	andi	x15,x15,16
     9b0:	fff68813          	addi	x16,x13,-1
     9b4:	02079663          	bnez	x15,9e0 <bsg_printf+0x514>
     9b8:	40c687b3          	sub	x15,x13,x12
     9bc:	00f507b3          	add	x15,x10,x15
     9c0:	02000713          	li	x14,32
     9c4:	36d65063          	bge	x12,x13,d24 <bsg_printf+0x858>
     9c8:	00150513          	addi	x10,x10,1
     9cc:	fee50fa3          	sb	x14,-1(x10)
     9d0:	fef51ce3          	bne	x10,x15,9c8 <bsg_printf+0x4fc>
     9d4:	40d606b3          	sub	x13,x12,x13
     9d8:	010686b3          	add	x13,x13,x16
     9dc:	fff68813          	addi	x16,x13,-1
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     9e0:	00810793          	addi	x15,x2,8
     9e4:	00c505b3          	add	x11,x10,x12
     9e8:	0007c703          	lbu	x14,0(x15)
     9ec:	00150513          	addi	x10,x10,1
     9f0:	00178793          	addi	x15,x15,1
     9f4:	fee50fa3          	sb	x14,-1(x10)
     9f8:	feb518e3          	bne	x10,x11,9e8 <bsg_printf+0x51c>
  while (len < size--) *str++ = ' ';
     9fc:	d8d658e3          	bge	x12,x13,78c <bsg_printf+0x2c0>
     a00:	00058713          	mv	x14,x11
     a04:	02000513          	li	x10,32
     a08:	00100693          	li	x13,1
     a0c:	00170713          	addi	x14,x14,1
     a10:	40e687b3          	sub	x15,x13,x14
     a14:	010787b3          	add	x15,x15,x16
     a18:	00f587b3          	add	x15,x11,x15
     a1c:	fea70fa3          	sb	x10,-1(x14)
     a20:	fef646e3          	blt	x12,x15,a0c <bsg_printf+0x540>
     a24:	00100513          	li	x10,1
     a28:	1ec85863          	bge	x16,x12,c18 <bsg_printf+0x74c>
     a2c:	00a58533          	add	x10,x11,x10
  return str;
     a30:	d5dff06f          	j	78c <bsg_printf+0x2c0>
        flags |= SIGN;
     a34:	0027e793          	ori	x15,x15,2
    base = 10;
     a38:	00a00613          	li	x12,10
    if (qualifier == 'l')
     a3c:	06c00893          	li	x17,108
     a40:	00498813          	addi	x16,x19,4
     a44:	2d159863          	bne	x11,x17,d14 <bsg_printf+0x848>
      num = va_arg(args, unsigned long);
     a48:	0009a583          	lw	x11,0(x19)
      fmt++;
     a4c:	00030493          	mv	x9,x6
     a50:	00080993          	mv	x19,x16
     a54:	d35ff06f          	j	788 <bsg_printf+0x2bc>
        base = 8;
     a58:	00800613          	li	x12,8
        break;
     a5c:	fe1ff06f          	j	a3c <bsg_printf+0x570>
        flags |= UPPERCASE;
     a60:	0407e793          	ori	x15,x15,64
        base = 16;
     a64:	01000613          	li	x12,16
     a68:	fd5ff06f          	j	a3c <bsg_printf+0x570>
        flags |= UPPERCASE;
     a6c:	0407e793          	ori	x15,x15,64
        if (qualifier == 'l')
     a70:	06c00613          	li	x12,108
     a74:	0009a703          	lw	x14,0(x19)
     a78:	00498993          	addi	x19,x19,4
     a7c:	24c59463          	bne	x11,x12,cc4 <bsg_printf+0x7f8>
  if (type & UPPERCASE)  dig = upper_digits;
     a80:	0407f613          	andi	x12,x15,64
  char *dig = digits;
     a84:	00040893          	mv	x17,x8
  if (type & UPPERCASE)  dig = upper_digits;
     a88:	00060663          	beqz	x12,a94 <bsg_printf+0x5c8>
     a8c:	810008b7          	lui	x17,0x81000
     a90:	02888893          	addi	x17,x17,40 # 81000028 <_end+0xffffffd0>
    if (i != 0) tmp[len++] = ':';
     a94:	00810313          	addi	x6,x2,8
     a98:	01a10e13          	addi	x28,x2,26
  if (type & UPPERCASE)  dig = upper_digits;
     a9c:	00030593          	mv	x11,x6
    if (i != 0) tmp[len++] = ':';
     aa0:	03a00e93          	li	x29,58
     aa4:	0080006f          	j	aac <bsg_printf+0x5e0>
     aa8:	ffd58fa3          	sb	x29,-1(x11)
    tmp[len++] = dig[addr[i] >> 4];
     aac:	00074603          	lbu	x12,0(x14)
     ab0:	00358593          	addi	x11,x11,3
     ab4:	00170713          	addi	x14,x14,1
     ab8:	00465813          	srli	x16,x12,0x4
    tmp[len++] = dig[addr[i] & 0x0F];
     abc:	00f67613          	andi	x12,x12,15
    tmp[len++] = dig[addr[i] >> 4];
     ac0:	01088833          	add	x16,x17,x16
    tmp[len++] = dig[addr[i] & 0x0F];
     ac4:	00c88633          	add	x12,x17,x12
    tmp[len++] = dig[addr[i] >> 4];
     ac8:	00084803          	lbu	x16,0(x16)
    tmp[len++] = dig[addr[i] & 0x0F];
     acc:	00064603          	lbu	x12,0(x12)
    tmp[len++] = dig[addr[i] >> 4];
     ad0:	ff058ea3          	sb	x16,-3(x11)
    tmp[len++] = dig[addr[i] & 0x0F];
     ad4:	fec58f23          	sb	x12,-2(x11)
  for (i = 0; i < 6; i++)
     ad8:	fdc598e3          	bne	x11,x28,aa8 <bsg_printf+0x5dc>
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     adc:	0107f793          	andi	x15,x15,16
     ae0:	fff68613          	addi	x12,x13,-1
     ae4:	02079663          	bnez	x15,b10 <bsg_printf+0x644>
     ae8:	fef68593          	addi	x11,x13,-17
     aec:	01100813          	li	x16,17
     af0:	00b50733          	add	x14,x10,x11
     af4:	02000793          	li	x15,32
     af8:	22d85e63          	bge	x16,x13,d34 <bsg_printf+0x868>
     afc:	00150513          	addi	x10,x10,1
     b00:	fef50fa3          	sb	x15,-1(x10)
     b04:	fee51ce3          	bne	x10,x14,afc <bsg_printf+0x630>
     b08:	40b606b3          	sub	x13,x12,x11
     b0c:	fff68613          	addi	x12,x13,-1
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b10:	00050793          	mv	x15,x10
     b14:	01130593          	addi	x11,x6,17
     b18:	00034703          	lbu	x14,0(x6)
     b1c:	00130313          	addi	x6,x6,1
     b20:	00178793          	addi	x15,x15,1
     b24:	fee78fa3          	sb	x14,-1(x15)
     b28:	fe6598e3          	bne	x11,x6,b18 <bsg_printf+0x64c>
  while (len < size--) *str++ = ' ';
     b2c:	01100793          	li	x15,17
     b30:	01150513          	addi	x10,x10,17
     b34:	04d7d063          	bge	x15,x13,b74 <bsg_printf+0x6a8>
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b38:	00050713          	mv	x14,x10
  while (len < size--) *str++ = ' ';
     b3c:	02000813          	li	x16,32
     b40:	00100593          	li	x11,1
     b44:	01100693          	li	x13,17
     b48:	00170713          	addi	x14,x14,1
     b4c:	40e587b3          	sub	x15,x11,x14
     b50:	00c787b3          	add	x15,x15,x12
     b54:	00f507b3          	add	x15,x10,x15
     b58:	ff070fa3          	sb	x16,-1(x14)
     b5c:	fef6c6e3          	blt	x13,x15,b48 <bsg_printf+0x67c>
     b60:	01000713          	li	x14,16
     b64:	00100793          	li	x15,1
     b68:	00c75463          	bge	x14,x12,b70 <bsg_printf+0x6a4>
     b6c:	ff060793          	addi	x15,x12,-16
     b70:	00f50533          	add	x10,x10,x15
  return str;
     b74:	0024c783          	lbu	x15,2(x9)
     b78:	00248313          	addi	x6,x9,2
  for (str = buf; *fmt; fmt++)
     b7c:	9c0798e3          	bnez	x15,54c <bsg_printf+0x80>
     b80:	9e9ff06f          	j	568 <bsg_printf+0x9c>
      else if (n >= 10) 
     b84:	00080b13          	mv	x22,x16
     b88:	e0b2d4e3          	bge	x5,x11,990 <bsg_printf+0x4c4>
        tmp[len++] = digits[n / 10];
     b8c:	03c5c3b3          	div	x7,x11,x28
     b90:	12010b13          	addi	x22,x2,288
     b94:	010b0bb3          	add	x23,x22,x16
     b98:	00060b13          	mv	x22,x12
        n = n % 10;
     b9c:	00280613          	addi	x12,x16,2
        tmp[len++] = digits[n / 10];
     ba0:	00740833          	add	x16,x8,x7
     ba4:	00084803          	lbu	x16,0(x16)
        n = n % 10;
     ba8:	03c5e5b3          	rem	x11,x11,x28
        tmp[len++] = digits[n / 10];
     bac:	ef0b8423          	sb	x16,-280(x23)
        n = n % 10;
     bb0:	de1ff06f          	j	990 <bsg_printf+0x4c4>
  int i = 0;
     bb4:	00000713          	li	x14,0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     bb8:	00900893          	li	x17,9
     bbc:	00271613          	slli	x12,x14,0x2
     bc0:	00e60733          	add	x14,x12,x14
     bc4:	00180813          	addi	x16,x16,1
     bc8:	00171713          	slli	x14,x14,0x1
     bcc:	00b70733          	add	x14,x14,x11
     bd0:	00084583          	lbu	x11,0(x16)
     bd4:	fd070713          	addi	x14,x14,-48
     bd8:	fd058613          	addi	x12,x11,-48
     bdc:	0ff67613          	andi	x12,x12,255
     be0:	fcc8fee3          	bgeu	x17,x12,bbc <bsg_printf+0x6f0>
     be4:	00080493          	mv	x9,x16
     be8:	a51ff06f          	j	638 <bsg_printf+0x16c>
     bec:	0009a703          	lw	x14,0(x19)
     bf0:	00498993          	addi	x19,x19,4
     bf4:	d01ff06f          	j	8f4 <bsg_printf+0x428>
        precision = va_arg(args, int);
     bf8:	0009a703          	lw	x14,0(x19)
     bfc:	0024c583          	lbu	x11,2(x9)
     c00:	00498993          	addi	x19,x19,4
     c04:	fff74613          	not	x12,x14
     c08:	41f65613          	srai	x12,x12,0x1f
     c0c:	00c77733          	and	x14,x14,x12
        ++fmt;
     c10:	00248493          	addi	x9,x9,2
      if (precision < 0) precision = 0;
     c14:	a25ff06f          	j	638 <bsg_printf+0x16c>
     c18:	40c686b3          	sub	x13,x13,x12
     c1c:	01068533          	add	x10,x13,x16
     c20:	00a58533          	add	x10,x11,x10
  return str;
     c24:	b69ff06f          	j	78c <bsg_printf+0x2c0>
        if (*fmt)
     c28:	0004c703          	lbu	x14,0(x9)
     c2c:	00078693          	mv	x13,x15
     c30:	00050793          	mv	x15,x10
     c34:	00068513          	mv	x10,x13
          *str++ = *fmt;
     c38:	00e78023          	sb	x14,0(x15)
     c3c:	0014c783          	lbu	x15,1(x9)
     c40:	00148313          	addi	x6,x9,1
  for (str = buf; *fmt; fmt++)
     c44:	900794e3          	bnez	x15,54c <bsg_printf+0x80>
     c48:	921ff06f          	j	568 <bsg_printf+0x9c>
          flags |= ZEROPAD;
     c4c:	0017e793          	ori	x15,x15,1
          field_width = 2 * sizeof(void *);
     c50:	00800693          	li	x13,8
     c54:	bf5ff06f          	j	848 <bsg_printf+0x37c>
        if (!s) s = "<NULL>";
     c58:	81000637          	lui	x12,0x81000
     c5c:	05060613          	addi	x12,x12,80 # 81000050 <_end+0xfffffff8>
     c60:	b61ff06f          	j	7c0 <bsg_printf+0x2f4>
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     c64:	00d50733          	add	x14,x10,x13
     c68:	02000793          	li	x15,32
     c6c:	08d05263          	blez	x13,cf0 <bsg_printf+0x824>
     c70:	00150513          	addi	x10,x10,1
     c74:	fef50fa3          	sb	x15,-1(x10)
     c78:	fee51ce3          	bne	x10,x14,c70 <bsg_printf+0x7a4>
     c7c:	fff00693          	li	x13,-1
     c80:	c15ff06f          	j	894 <bsg_printf+0x3c8>
  int n=0;
     c84:	00000513          	li	x10,0
     c88:	921ff06f          	j	5a8 <bsg_printf+0xdc>
  for (str = buf; *fmt; fmt++)
     c8c:	02010913          	addi	x18,x2,32
     c90:	00090513          	mv	x10,x18
     c94:	8d5ff06f          	j	568 <bsg_printf+0x9c>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     c98:	fff68813          	addi	x16,x13,-1
     c9c:	0cd5d263          	bge	x11,x13,d60 <bsg_printf+0x894>
     ca0:	40b687b3          	sub	x15,x13,x11
     ca4:	00f507b3          	add	x15,x10,x15
     ca8:	02000713          	li	x14,32
     cac:	00150513          	addi	x10,x10,1
     cb0:	fee50fa3          	sb	x14,-1(x10)
     cb4:	fef51ce3          	bne	x10,x15,cac <bsg_printf+0x7e0>
     cb8:	40d586b3          	sub	x13,x11,x13
     cbc:	010686b3          	add	x13,x13,x16
     cc0:	b2dff06f          	j	7ec <bsg_printf+0x320>
      fmt++;
     cc4:	00030493          	mv	x9,x6
     cc8:	c2dff06f          	j	8f4 <bsg_printf+0x428>
        base = 16;
     ccc:	01000613          	li	x12,16
     cd0:	d6dff06f          	j	a3c <bsg_printf+0x570>
    switch (*fmt)
     cd4:	00a00613          	li	x12,10
     cd8:	d65ff06f          	j	a3c <bsg_printf+0x570>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     cdc:	0107f593          	andi	x11,x15,16
     ce0:	06058663          	beqz	x11,d4c <bsg_printf+0x880>
     ce4:	00050713          	mv	x14,x10
  return sc - s;
     ce8:	00000593          	li	x11,0
     cec:	b25ff06f          	j	810 <bsg_printf+0x344>
        *str++ = (unsigned char) va_arg(args, int);
     cf0:	0009a783          	lw	x15,0(x19)
     cf4:	00150713          	addi	x14,x10,1
     cf8:	00498993          	addi	x19,x19,4
     cfc:	00f50023          	sb	x15,0(x10)
        while (--field_width > 0) *str++ = ' ';
     d00:	00148313          	addi	x6,x9,1
     d04:	0014c783          	lbu	x15,1(x9)
        while (len < field_width--) *str++ = ' ';
     d08:	00070513          	mv	x10,x14
  for (str = buf; *fmt; fmt++)
     d0c:	840790e3          	bnez	x15,54c <bsg_printf+0x80>
     d10:	859ff06f          	j	568 <bsg_printf+0x9c>
      fmt++;
     d14:	00030493          	mv	x9,x6
     d18:	a69ff06f          	j	780 <bsg_printf+0x2b4>
     d1c:	00250513          	addi	x10,x10,2
     d20:	f19ff06f          	j	c38 <bsg_printf+0x76c>
     d24:	ffe68793          	addi	x15,x13,-2
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d28:	00080693          	mv	x13,x16
     d2c:	00078813          	mv	x16,x15
     d30:	cb1ff06f          	j	9e0 <bsg_printf+0x514>
     d34:	ffe68793          	addi	x15,x13,-2
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d38:	00060693          	mv	x13,x12
     d3c:	00078613          	mv	x12,x15
     d40:	dd1ff06f          	j	b10 <bsg_printf+0x644>
        for (i = 0; i < len; ++i) *str++ = *s++;
     d44:	00050713          	mv	x14,x10
     d48:	ac9ff06f          	j	810 <bsg_printf+0x344>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     d4c:	fff68813          	addi	x16,x13,-1
     d50:	f4d048e3          	bgtz	x13,ca0 <bsg_printf+0x7d4>
     d54:	00080693          	mv	x13,x16
     d58:	00050713          	mv	x14,x10
     d5c:	ab5ff06f          	j	810 <bsg_printf+0x344>
     d60:	00080693          	mv	x13,x16
     d64:	a89ff06f          	j	7ec <bsg_printf+0x320>

00000d68 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_>:

//------------------------------------------------------------------
//  The main sync funciton
//------------------------------------------------------------------
void bsg_tile_group_barrier(bsg_row_barrier *p_row_b, bsg_col_barrier * p_col_b){
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d68:	00054683          	lbu	x13,0(x10)
     d6c:	00154603          	lbu	x12,1(x10)
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d70:	00001337          	lui	x6,0x1
     d74:	02032783          	lw	x15,32(x6) # 1020 <__bsg_y>
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d78:	00d60633          	add	x12,x12,x13
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d7c:	00001e37          	lui	x28,0x1
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d80:	40165613          	srai	x12,x12,0x1
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d84:	024e2703          	lw	x14,36(x28) # 1024 <__bsg_x>
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d88:	01261813          	slli	x16,x12,0x12
     d8c:	01879793          	slli	x15,x15,0x18
     d90:	0107e7b3          	or	x15,x15,x16
     d94:	00a7e7b3          	or	x15,x15,x10
     d98:	20000eb7          	lui	x29,0x20000
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d9c:	40d70733          	sub	x14,x14,x13
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     da0:	01d7e7b3          	or	x15,x15,x29
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     da4:	00e787b3          	add	x15,x15,x14
     da8:	00100693          	li	x13,1

        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     dac:	0005c703          	lbu	x14,0(x11)
     db0:	0015c883          	lbu	x17,1(x11)
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     db4:	00d78123          	sb	x13,2(x15)
        #endif
        //1. send sync signals to center of the row 
        bsg_row_barrier_sync(p_row_b, center_x_cord );

        //2. send sync signals to the center of the col
        if( bsg_x == center_x_cord) 
     db8:	024e2783          	lw	x15,36(x28)
     dbc:	02c78463          	beq	x15,x12,de4 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x7c>
        bsg_wait_local_int( (int *) &(p_row_b->_local_alert), 1);
     dc0:	00450713          	addi	x14,x10,4
// wait until the specified memory address was written with specific value
inline int bsg_wait_local_int(int * ptr,  int cond ) {
    int tmp;
    while(1){
        tmp = bsg_lr( ptr );
        if( tmp == cond ) return tmp;  //the data is ready
     dc4:	00100793          	li	x15,1
     dc8:	00c0006f          	j	dd4 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x6c>
#ifdef __clang__
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "m" (*p)); return tmp; }
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "m" (*p)); return tmp; }
#elif defined(__GNUC__) || defined(__GNUG__)
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dcc:	140726af          	lr.w.aq	x13,(x14)
        else{
            tmp = bsg_lr_aq( ptr );    //stall until somebody clear the reservation
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     dd0:	00f68663          	beq	x13,x15,ddc <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x74>
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dd4:	100726af          	lr.w	x13,(x14)
        if( tmp == cond ) return tmp;  //the data is ready
     dd8:	fef69ae3          	bne	x13,x15,dcc <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x64>
        p_row_b->_local_alert = 0;
     ddc:	00052223          	sw	x0,4(x10)
}
     de0:	00008067          	ret
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     de4:	01170733          	add	x14,x14,x17
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     de8:	00154683          	lbu	x13,1(x10)
     dec:	00054f03          	lbu	x30,0(x10)
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     df0:	40175893          	srai	x17,x14,0x1
        bsg_col_barrier * p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( center_x_cord,    \
     df4:	01889793          	slli	x15,x17,0x18
     df8:	00b86833          	or	x16,x16,x11
     dfc:	0107e833          	or	x16,x15,x16
     e00:	01d86eb3          	or	x29,x16,x29
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e04:	41e686b3          	sub	x13,x13,x30
                for( i= 0; i <= range; i++) {
     e08:	0006ce63          	bltz	x13,e24 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xbc>
     e0c:	00000793          	li	x15,0
                        if ( p[ i ] == 0) break;
     e10:	00f50733          	add	x14,x10,x15
     e14:	00274703          	lbu	x14,2(x14)
                for( i= 0; i <= range; i++) {
     e18:	00178793          	addi	x15,x15,1
                        if ( p[ i ] == 0) break;
     e1c:	fe0706e3          	beqz	x14,e08 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xa0>
                for( i= 0; i <= range; i++) {
     e20:	fef6d8e3          	bge	x13,x15,e10 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xa8>
        p_remote_barrier->_done_list[ bsg_y - p_col_b-> _y_cord_start] = 1; 
     e24:	0005c703          	lbu	x14,0(x11)
     e28:	02032783          	lw	x15,32(x6)
     e2c:	40e787b3          	sub	x15,x15,x14
     e30:	00fe8eb3          	add	x29,x29,x15
     e34:	00100793          	li	x15,1
     e38:	00fe8123          	sb	x15,2(x29) # 20000002 <_bsg_elf_vcache_size+0x1ffe0002>
        if( bsg_x == center_x_cord && bsg_y == center_y_cord) 
     e3c:	024e2f03          	lw	x30,36(x28)
     e40:	f8cf10e3          	bne	x30,x12,dc0 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x58>
     e44:	02032783          	lw	x15,32(x6)
     e48:	07178c63          	beq	x15,x17,ec0 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x158>
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e4c:	00154803          	lbu	x16,1(x10)
     e50:	00054703          	lbu	x14,0(x10)
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e54:	00458693          	addi	x13,x11,4
        if( tmp == cond ) return tmp;  //the data is ready
     e58:	00100793          	li	x15,1
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e5c:	40e808b3          	sub	x17,x16,x14
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e60:	00c0006f          	j	e6c <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x104>
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e64:	1406a62f          	lr.w.aq	x12,(x13)
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     e68:	00f60663          	beq	x12,x15,e74 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x10c>
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e6c:	1006a62f          	lr.w	x12,(x13)
        if( tmp == cond ) return tmp;  //the data is ready
     e70:	fef61ae3          	bne	x12,x15,e64 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xfc>
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e74:	02e84a63          	blt	x16,x14,ea8 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x140>
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e78:	02032683          	lw	x13,32(x6)
     e7c:	20000837          	lui	x16,0x20000
               p_remote_barrier->_local_alert = 1;
     e80:	00100613          	li	x12,1
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e84:	01869693          	slli	x13,x13,0x18
     e88:	01271793          	slli	x15,x14,0x12
     e8c:	00d7e7b3          	or	x15,x15,x13
     e90:	00f567b3          	or	x15,x10,x15
     e94:	0107e7b3          	or	x15,x15,x16
               p_remote_barrier->_local_alert = 1;
     e98:	00c7a223          	sw	x12,4(x15)
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e9c:	00154783          	lbu	x15,1(x10)
     ea0:	00170713          	addi	x14,x14,1
     ea4:	fee7d2e3          	bge	x15,x14,e88 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x120>
        for( i= 0; i <= x_range; i++) {
     ea8:	0008d663          	bgez	x17,eb4 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x14c>
        p_col_b -> _local_alert = 0;
     eac:	0005a223          	sw	x0,4(x11)
}
     eb0:	f11ff06f          	j	dc0 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x58>
              p_row_b->_done_list[ i ] = 0;
     eb4:	00050123          	sb	x0,2(x10)
        p_col_b -> _local_alert = 0;
     eb8:	0005a223          	sw	x0,4(x11)
     ebc:	f05ff06f          	j	dc0 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x58>
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ec0:	0015cf83          	lbu	x31,1(x11)
     ec4:	0005ce83          	lbu	x29,0(x11)
                for( i= 0; i <= range; i++) {
     ec8:	ffe00893          	li	x17,-2
     ecc:	40b888b3          	sub	x17,x17,x11
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ed0:	41df8833          	sub	x16,x31,x29
                for( i= 0; i <= range; i++) {
     ed4:	06084063          	bltz	x16,f34 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x1cc>
     ed8:	00258793          	addi	x15,x11,2
                        if ( p[ i ] == 0) break;
     edc:	0007c703          	lbu	x14,0(x15)
     ee0:	00178793          	addi	x15,x15,1
                for( i= 0; i <= range; i++) {
     ee4:	00f886b3          	add	x13,x17,x15
                        if ( p[ i ] == 0) break;
     ee8:	fe0706e3          	beqz	x14,ed4 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x16c>
                for( i= 0; i <= range; i++) {
     eec:	fed858e3          	bge	x16,x13,edc <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x174>
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     ef0:	03dfca63          	blt	x31,x29,f24 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x1bc>
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     ef4:	012f1f13          	slli	x30,x30,0x12
     ef8:	200006b7          	lui	x13,0x20000
               p_remote_barrier->_local_alert = 1;
     efc:	00100713          	li	x14,1
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     f00:	018e9793          	slli	x15,x29,0x18
     f04:	01e7e7b3          	or	x15,x15,x30
     f08:	00f5e7b3          	or	x15,x11,x15
     f0c:	00d7e7b3          	or	x15,x15,x13
               p_remote_barrier->_local_alert = 1;
     f10:	00e7a223          	sw	x14,4(x15)
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f14:	0015c783          	lbu	x15,1(x11)
     f18:	001e8e93          	addi	x29,x29,1
     f1c:	ffd7d2e3          	bge	x15,x29,f00 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x198>
        for( i= 0; i <= y_range; i++) {
     f20:	f20846e3          	bltz	x16,e4c <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xe4>
              p_col_b->_done_list[ i ] = 0;
     f24:	00058123          	sb	x0,2(x11)
        if( bsg_x == center_x_cord)
     f28:	024e2783          	lw	x15,36(x28)
     f2c:	e8c79ae3          	bne	x15,x12,dc0 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x58>
     f30:	f1dff06f          	j	e4c <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xe4>
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f34:	fddfd0e3          	bge	x31,x29,ef4 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x18c>
     f38:	f15ff06f          	j	e4c <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xe4>

00000f3c <kernel_matrix_multiply_int>:
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f3c:	f9010113          	addi	x2,x2,-112
     f40:	06112623          	sw	x1,108(x2)
     f44:	06812423          	sw	x8,104(x2)
     f48:	06912223          	sw	x9,100(x2)
     f4c:	07010413          	addi	x8,x2,112
     f50:	07212023          	sw	x18,96(x2)
     f54:	05312e23          	sw	x19,92(x2)
     f58:	05412c23          	sw	x20,88(x2)
     f5c:	05512a23          	sw	x21,84(x2)
     f60:	05612823          	sw	x22,80(x2)
     f64:	05712623          	sw	x23,76(x2)
     f68:	05812423          	sw	x24,72(x2)
     f6c:	05912223          	sw	x25,68(x2)
     f70:	05a12023          	sw	x26,64(x2)
     f74:	03b12e23          	sw	x27,60(x2)
     f78:	00070e13          	mv	x28,x14
     f7c:	fae42223          	sw	x14,-92(x8) # 80ffffa4 <_end+0xffffff4c>
                int A_local[A_HEIGHT * A_WIDTH];
     f80:	02d70733          	mul	x14,x14,x13
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f84:	00068e93          	mv	x29,x13
     f88:	fad42423          	sw	x13,-88(x8)
     f8c:	00279693          	slli	x13,x15,0x2
     f90:	faf42e23          	sw	x15,-68(x8)
     f94:	00060313          	mv	x6,x12
     f98:	00058493          	mv	x9,x11
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
     f9c:	00050593          	mv	x11,x10
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     fa0:	f8642c23          	sw	x6,-104(x8)
     fa4:	fb042023          	sw	x16,-96(x8)
                int B_local[A_WIDTH * B_WIDTH];
     fa8:	02de09b3          	mul	x19,x28,x13
                int A_local[A_HEIGHT * A_WIDTH];
     fac:	00271613          	slli	x12,x14,0x2
     fb0:	00f60713          	addi	x14,x12,15
     fb4:	ff077713          	andi	x14,x14,-16
     fb8:	40e10133          	sub	x2,x2,x14
     fbc:	00010513          	mv	x10,x2
     fc0:	faa42a23          	sw	x10,-76(x8)
                for(int i = 0; i <= iter; ++i){
     fc4:	00000913          	li	x18,0
     fc8:	00001d37          	lui	x26,0x1
     fcc:	00001cb7          	lui	x25,0x1
                int C_local[A_HEIGHT * B_WIDTH];
     fd0:	02de87b3          	mul	x15,x29,x13
                int B_local[A_WIDTH * B_WIDTH];
     fd4:	00f98713          	addi	x14,x19,15
     fd8:	ff077713          	andi	x14,x14,-16
     fdc:	40e10133          	sub	x2,x2,x14
     fe0:	00188713          	addi	x14,x17,1
     fe4:	fae42623          	sw	x14,-84(x8)
     fe8:	00010a13          	mv	x20,x2
     fec:	fb442823          	sw	x20,-80(x8)
                int C_local[A_HEIGHT * B_WIDTH];
     ff0:	00001c37          	lui	x24,0x1
     ff4:	00001b37          	lui	x22,0x1
     ff8:	00f78713          	addi	x14,x15,15
     ffc:	ff077713          	andi	x14,x14,-16
    1000:	40e10133          	sub	x2,x2,x14
    1004:	f8f42e23          	sw	x15,-100(x8)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1008:	7bc000ef          	jal	x1,17c4 <memcpy>
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    100c:	00098613          	mv	x12,x19
    1010:	00048593          	mv	x11,x9
    1014:	000a0513          	mv	x10,x20
    1018:	7ac000ef          	jal	x1,17c4 <memcpy>
                        bsg_cuda_print_stat_start(temp);
    101c:	000409b7          	lui	x19,0x40
    1020:	fbc42783          	lw	x15,-68(x8)
                int C_local[A_HEIGHT * B_WIDTH];
    1024:	fa242c23          	sw	x2,-72(x8)
                int rc, temp = IGNORE_TAG;
    1028:	00000493          	li	x9,0
    102c:	00001ab7          	lui	x21,0x1
                        bsg_cuda_print_stat_start(temp);
    1030:	3f000db7          	lui	x27,0x3f000
    1034:	00fc0a37          	lui	x20,0xfc0
    1038:	ff098993          	addi	x19,x19,-16 # 3fff0 <_bsg_elf_vcache_size+0x1fff0>
    103c:	40001bb7          	lui	x23,0x40001
    1040:	0080006f          	j	1048 <_tls_data+0x8>
                        temp = tag;
    1044:	fa042483          	lw	x9,-96(x8)
                        bsg_cuda_print_stat_start(temp);
    1048:	020ca503          	lw	x10,32(x25) # 1020 <__bsg_y>
    104c:	024b2583          	lw	x11,36(x22) # 1024 <__bsg_x>
    1050:	014d2703          	lw	x14,20(x26) # 1014 <__bsg_grp_org_y>
    1054:	018c2603          	lw	x12,24(x24) # 1018 <__bsg_grp_org_x>
    1058:	000aa683          	lw	x13,0(x21) # 1000 <_bsg_data_start_addr>
    105c:	00a70733          	add	x14,x14,x10
    1060:	00b60633          	add	x12,x12,x11
    1064:	01871713          	slli	x14,x14,0x18
    1068:	01261613          	slli	x12,x12,0x12
    106c:	01467633          	and	x12,x12,x20
    1070:	01b77733          	and	x14,x14,x27
    1074:	00469693          	slli	x13,x13,0x4
    1078:	00c76733          	or	x14,x14,x12
    107c:	0136f6b3          	and	x13,x13,x19
    1080:	00f4f493          	andi	x9,x9,15
    1084:	00d76733          	or	x14,x14,x13
    1088:	00976733          	or	x14,x14,x9
    108c:	d0eba623          	sw	x14,-756(x23) # 40000d0c <_bsg_elf_vcache_size+0x3ffe0d0c>
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1090:	fa842683          	lw	x13,-88(x8)
    1094:	fa442703          	lw	x14,-92(x8)
    1098:	fb842603          	lw	x12,-72(x8)
    109c:	fb042583          	lw	x11,-80(x8)
    10a0:	fb442503          	lw	x10,-76(x8)
    10a4:	faf42e23          	sw	x15,-68(x8)
                for(int i = 0; i <= iter; ++i){
    10a8:	00190913          	addi	x18,x18,1
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    10ac:	131000ef          	jal	x1,19dc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm>
                        bsg_cuda_print_stat_end(temp);
    10b0:	014d2583          	lw	x11,20(x26)
    10b4:	020ca703          	lw	x14,32(x25)
    10b8:	000aa603          	lw	x12,0(x21)
    10bc:	018c2683          	lw	x13,24(x24)
    10c0:	024b2383          	lw	x7,36(x22)
    10c4:	00e58733          	add	x14,x11,x14
    10c8:	00461613          	slli	x12,x12,0x4
    10cc:	01871713          	slli	x14,x14,0x18
    10d0:	01367633          	and	x12,x12,x19
    10d4:	007686b3          	add	x13,x13,x7
    10d8:	01b77733          	and	x14,x14,x27
    10dc:	009664b3          	or	x9,x12,x9
    10e0:	01269693          	slli	x13,x13,0x12
    10e4:	009764b3          	or	x9,x14,x9
    10e8:	0146f6b3          	and	x13,x13,x20
    10ec:	400007b7          	lui	x15,0x40000
    10f0:	00d4e4b3          	or	x9,x9,x13
                for(int i = 0; i <= iter; ++i){
    10f4:	fac42703          	lw	x14,-84(x8)
                        bsg_cuda_print_stat_end(temp);
    10f8:	00f4e4b3          	or	x9,x9,x15
    10fc:	d09ba623          	sw	x9,-756(x23)
                for(int i = 0; i <= iter; ++i){
    1100:	fbc42783          	lw	x15,-68(x8)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1104:	00050493          	mv	x9,x10
                for(int i = 0; i <= iter; ++i){
    1108:	f2e91ee3          	bne	x18,x14,1044 <_tls_data+0x4>
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    110c:	f9c42603          	lw	x12,-100(x8)
    1110:	fb842583          	lw	x11,-72(x8)
    1114:	f9842503          	lw	x10,-104(x8)
    1118:	6ac000ef          	jal	x1,17c4 <memcpy>
        }
    111c:	f9040113          	addi	x2,x8,-112
    1120:	06c12083          	lw	x1,108(x2)
    1124:	00048513          	mv	x10,x9
    1128:	06812403          	lw	x8,104(x2)
    112c:	06412483          	lw	x9,100(x2)
    1130:	06012903          	lw	x18,96(x2)
    1134:	05c12983          	lw	x19,92(x2)
    1138:	05812a03          	lw	x20,88(x2)
    113c:	05412a83          	lw	x21,84(x2)
    1140:	05012b03          	lw	x22,80(x2)
    1144:	04c12b83          	lw	x23,76(x2)
    1148:	04812c03          	lw	x24,72(x2)
    114c:	04412c83          	lw	x25,68(x2)
    1150:	04012d03          	lw	x26,64(x2)
    1154:	03c12d83          	lw	x27,60(x2)
    1158:	07010113          	addi	x2,x2,112
    115c:	00008067          	ret

00001160 <kernel_matrix_multiply_int16>:
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1160:	f9010113          	addi	x2,x2,-112
    1164:	06112623          	sw	x1,108(x2)
    1168:	06812423          	sw	x8,104(x2)
    116c:	06912223          	sw	x9,100(x2)
    1170:	07010413          	addi	x8,x2,112
    1174:	07212023          	sw	x18,96(x2)
    1178:	05312e23          	sw	x19,92(x2)
    117c:	05412c23          	sw	x20,88(x2)
    1180:	05512a23          	sw	x21,84(x2)
    1184:	05612823          	sw	x22,80(x2)
    1188:	05712623          	sw	x23,76(x2)
    118c:	05812423          	sw	x24,72(x2)
    1190:	05912223          	sw	x25,68(x2)
    1194:	05a12023          	sw	x26,64(x2)
    1198:	03b12e23          	sw	x27,60(x2)
    119c:	00070e13          	mv	x28,x14
    11a0:	fae42223          	sw	x14,-92(x8)
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11a4:	02d70733          	mul	x14,x14,x13
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11a8:	00068e93          	mv	x29,x13
    11ac:	fad42423          	sw	x13,-88(x8)
    11b0:	00179693          	slli	x13,x15,0x1
    11b4:	faf42e23          	sw	x15,-68(x8)
    11b8:	00060313          	mv	x6,x12
    11bc:	00058493          	mv	x9,x11
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    11c0:	00050593          	mv	x11,x10
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11c4:	f8642c23          	sw	x6,-104(x8)
    11c8:	fb042023          	sw	x16,-96(x8)
                int16_t B_local[A_WIDTH * B_WIDTH];
    11cc:	02de09b3          	mul	x19,x28,x13
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11d0:	00171613          	slli	x12,x14,0x1
    11d4:	00f60713          	addi	x14,x12,15
    11d8:	ff077713          	andi	x14,x14,-16
    11dc:	40e10133          	sub	x2,x2,x14
    11e0:	00010513          	mv	x10,x2
    11e4:	faa42a23          	sw	x10,-76(x8)
                for(int i = 0; i <= iter; ++i){
    11e8:	00000913          	li	x18,0
    11ec:	00001d37          	lui	x26,0x1
    11f0:	00001cb7          	lui	x25,0x1
                int16_t C_local[A_HEIGHT * B_WIDTH];
    11f4:	02de87b3          	mul	x15,x29,x13
                int16_t B_local[A_WIDTH * B_WIDTH];
    11f8:	00f98713          	addi	x14,x19,15
    11fc:	ff077713          	andi	x14,x14,-16
    1200:	40e10133          	sub	x2,x2,x14
    1204:	00188713          	addi	x14,x17,1
    1208:	fae42623          	sw	x14,-84(x8)
    120c:	00010a13          	mv	x20,x2
    1210:	fb442823          	sw	x20,-80(x8)
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1214:	00001c37          	lui	x24,0x1
    1218:	00001b37          	lui	x22,0x1
    121c:	00f78713          	addi	x14,x15,15 # 4000000f <_bsg_elf_vcache_size+0x3ffe000f>
    1220:	ff077713          	andi	x14,x14,-16
    1224:	40e10133          	sub	x2,x2,x14
    1228:	f8f42e23          	sw	x15,-100(x8)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    122c:	598000ef          	jal	x1,17c4 <memcpy>
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1230:	00098613          	mv	x12,x19
    1234:	00048593          	mv	x11,x9
    1238:	000a0513          	mv	x10,x20
    123c:	588000ef          	jal	x1,17c4 <memcpy>
                        bsg_cuda_print_stat_start(temp);
    1240:	000409b7          	lui	x19,0x40
    1244:	fbc42783          	lw	x15,-68(x8)
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1248:	fa242c23          	sw	x2,-72(x8)
                int rc, temp = IGNORE_TAG;
    124c:	00000493          	li	x9,0
    1250:	00001ab7          	lui	x21,0x1
                        bsg_cuda_print_stat_start(temp);
    1254:	3f000db7          	lui	x27,0x3f000
    1258:	00fc0a37          	lui	x20,0xfc0
    125c:	ff098993          	addi	x19,x19,-16 # 3fff0 <_bsg_elf_vcache_size+0x1fff0>
    1260:	40001bb7          	lui	x23,0x40001
    1264:	0080006f          	j	126c <kernel_matrix_multiply_int16+0x10c>
                        temp = tag;
    1268:	fa042483          	lw	x9,-96(x8)
                        bsg_cuda_print_stat_start(temp);
    126c:	020ca503          	lw	x10,32(x25) # 1020 <__bsg_y>
    1270:	024b2583          	lw	x11,36(x22) # 1024 <__bsg_x>
    1274:	014d2703          	lw	x14,20(x26) # 1014 <__bsg_grp_org_y>
    1278:	018c2603          	lw	x12,24(x24) # 1018 <__bsg_grp_org_x>
    127c:	000aa683          	lw	x13,0(x21) # 1000 <_bsg_data_start_addr>
    1280:	00a70733          	add	x14,x14,x10
    1284:	00b60633          	add	x12,x12,x11
    1288:	01871713          	slli	x14,x14,0x18
    128c:	01261613          	slli	x12,x12,0x12
    1290:	01467633          	and	x12,x12,x20
    1294:	01b77733          	and	x14,x14,x27
    1298:	00469693          	slli	x13,x13,0x4
    129c:	00c76733          	or	x14,x14,x12
    12a0:	0136f6b3          	and	x13,x13,x19
    12a4:	00f4f493          	andi	x9,x9,15
    12a8:	00d76733          	or	x14,x14,x13
    12ac:	00976733          	or	x14,x14,x9
    12b0:	d0eba623          	sw	x14,-756(x23) # 40000d0c <_bsg_elf_vcache_size+0x3ffe0d0c>
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12b4:	fa842683          	lw	x13,-88(x8)
    12b8:	fa442703          	lw	x14,-92(x8)
    12bc:	fb842603          	lw	x12,-72(x8)
    12c0:	fb042583          	lw	x11,-80(x8)
    12c4:	fb442503          	lw	x10,-76(x8)
    12c8:	faf42e23          	sw	x15,-68(x8)
                for(int i = 0; i <= iter; ++i){
    12cc:	00190913          	addi	x18,x18,1
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12d0:	1ad000ef          	jal	x1,1c7c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm>
                        bsg_cuda_print_stat_end(temp);
    12d4:	014d2583          	lw	x11,20(x26)
    12d8:	020ca703          	lw	x14,32(x25)
    12dc:	000aa603          	lw	x12,0(x21)
    12e0:	018c2683          	lw	x13,24(x24)
    12e4:	024b2383          	lw	x7,36(x22)
    12e8:	00e58733          	add	x14,x11,x14
    12ec:	00461613          	slli	x12,x12,0x4
    12f0:	01871713          	slli	x14,x14,0x18
    12f4:	01367633          	and	x12,x12,x19
    12f8:	007686b3          	add	x13,x13,x7
    12fc:	01b77733          	and	x14,x14,x27
    1300:	009664b3          	or	x9,x12,x9
    1304:	01269693          	slli	x13,x13,0x12
    1308:	009764b3          	or	x9,x14,x9
    130c:	0146f6b3          	and	x13,x13,x20
    1310:	400007b7          	lui	x15,0x40000
    1314:	00d4e4b3          	or	x9,x9,x13
                for(int i = 0; i <= iter; ++i){
    1318:	fac42703          	lw	x14,-84(x8)
                        bsg_cuda_print_stat_end(temp);
    131c:	00f4e4b3          	or	x9,x9,x15
    1320:	d09ba623          	sw	x9,-756(x23)
                for(int i = 0; i <= iter; ++i){
    1324:	fbc42783          	lw	x15,-68(x8)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1328:	00050493          	mv	x9,x10
                for(int i = 0; i <= iter; ++i){
    132c:	f2e91ee3          	bne	x18,x14,1268 <kernel_matrix_multiply_int16+0x108>
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1330:	f9c42603          	lw	x12,-100(x8)
    1334:	fb842583          	lw	x11,-72(x8)
    1338:	f9842503          	lw	x10,-104(x8)
    133c:	488000ef          	jal	x1,17c4 <memcpy>
        }
    1340:	f9040113          	addi	x2,x8,-112
    1344:	06c12083          	lw	x1,108(x2)
    1348:	00048513          	mv	x10,x9
    134c:	06812403          	lw	x8,104(x2)
    1350:	06412483          	lw	x9,100(x2)
    1354:	06012903          	lw	x18,96(x2)
    1358:	05c12983          	lw	x19,92(x2)
    135c:	05812a03          	lw	x20,88(x2)
    1360:	05412a83          	lw	x21,84(x2)
    1364:	05012b03          	lw	x22,80(x2)
    1368:	04c12b83          	lw	x23,76(x2)
    136c:	04812c03          	lw	x24,72(x2)
    1370:	04412c83          	lw	x25,68(x2)
    1374:	04012d03          	lw	x26,64(x2)
    1378:	03c12d83          	lw	x27,60(x2)
    137c:	07010113          	addi	x2,x2,112
    1380:	00008067          	ret

00001384 <kernel_matrix_multiply_int8>:
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1384:	f9010113          	addi	x2,x2,-112
    1388:	06112623          	sw	x1,108(x2)
    138c:	06812423          	sw	x8,104(x2)
    1390:	06912223          	sw	x9,100(x2)
    1394:	07010413          	addi	x8,x2,112
    1398:	07212023          	sw	x18,96(x2)
    139c:	05312e23          	sw	x19,92(x2)
    13a0:	05412c23          	sw	x20,88(x2)
    13a4:	05512a23          	sw	x21,84(x2)
    13a8:	05612823          	sw	x22,80(x2)
    13ac:	05712623          	sw	x23,76(x2)
    13b0:	05812423          	sw	x24,72(x2)
    13b4:	05912223          	sw	x25,68(x2)
    13b8:	05a12023          	sw	x26,64(x2)
    13bc:	03b12e23          	sw	x27,60(x2)
    13c0:	00068313          	mv	x6,x13
    13c4:	fad42823          	sw	x13,-80(x8)
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13c8:	02d706b3          	mul	x13,x14,x13
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13cc:	00078e13          	mv	x28,x15
                int8_t B_local[A_WIDTH * B_WIDTH];
    13d0:	fae42e23          	sw	x14,-68(x8)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13d4:	faf42623          	sw	x15,-84(x8)
    13d8:	00058493          	mv	x9,x11
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    13dc:	00050593          	mv	x11,x10
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13e0:	f8c42c23          	sw	x12,-104(x8)
    13e4:	fb042023          	sw	x16,-96(x8)
                for(int i = 0; i <= iter; ++i){
    13e8:	00000913          	li	x18,0
    13ec:	00001d37          	lui	x26,0x1
                int8_t B_local[A_WIDTH * B_WIDTH];
    13f0:	02f709b3          	mul	x19,x14,x15
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13f4:	00f68793          	addi	x15,x13,15 # 2000000f <_bsg_elf_vcache_size+0x1ffe000f>
    13f8:	ff07f793          	andi	x15,x15,-16
    13fc:	40f10133          	sub	x2,x2,x15
    1400:	00188793          	addi	x15,x17,1
    1404:	faf42a23          	sw	x15,-76(x8)
    1408:	00010513          	mv	x10,x2
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    140c:	00068613          	mv	x12,x13
                int8_t A_local[A_HEIGHT * A_WIDTH];
    1410:	faa42423          	sw	x10,-88(x8)
                int8_t B_local[A_WIDTH * B_WIDTH];
    1414:	00001cb7          	lui	x25,0x1
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1418:	03c30733          	mul	x14,x6,x28
                int8_t B_local[A_WIDTH * B_WIDTH];
    141c:	00f98793          	addi	x15,x19,15
    1420:	ff07f793          	andi	x15,x15,-16
    1424:	40f10133          	sub	x2,x2,x15
    1428:	00010b13          	mv	x22,x2
    142c:	fb642223          	sw	x22,-92(x8)
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1430:	00001c37          	lui	x24,0x1
    1434:	00001ab7          	lui	x21,0x1
    1438:	00001a37          	lui	x20,0x1
                        bsg_cuda_print_stat_start(temp);
    143c:	3f000db7          	lui	x27,0x3f000
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1440:	00f70793          	addi	x15,x14,15
    1444:	ff07f793          	andi	x15,x15,-16
    1448:	40f10133          	sub	x2,x2,x15
    144c:	f8e42e23          	sw	x14,-100(x8)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1450:	374000ef          	jal	x1,17c4 <memcpy>
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1454:	00098613          	mv	x12,x19
    1458:	00048593          	mv	x11,x9
    145c:	000b0513          	mv	x10,x22
    1460:	364000ef          	jal	x1,17c4 <memcpy>
                        bsg_cuda_print_stat_start(temp);
    1464:	000409b7          	lui	x19,0x40
    1468:	fbc42703          	lw	x14,-68(x8)
                int8_t C_local[A_HEIGHT * B_WIDTH];
    146c:	fa242c23          	sw	x2,-72(x8)
                int rc, temp = IGNORE_TAG;
    1470:	00000493          	li	x9,0
                        bsg_cuda_print_stat_start(temp);
    1474:	00fc0b37          	lui	x22,0xfc0
    1478:	ff098993          	addi	x19,x19,-16 # 3fff0 <_bsg_elf_vcache_size+0x1fff0>
    147c:	40001bb7          	lui	x23,0x40001
    1480:	0080006f          	j	1488 <kernel_matrix_multiply_int8+0x104>
                        temp = tag;
    1484:	fa042483          	lw	x9,-96(x8)
                        bsg_cuda_print_stat_start(temp);
    1488:	020ca503          	lw	x10,32(x25) # 1020 <__bsg_y>
    148c:	024aa583          	lw	x11,36(x21) # 1024 <__bsg_x>
    1490:	014d2783          	lw	x15,20(x26) # 1014 <__bsg_grp_org_y>
    1494:	018c2603          	lw	x12,24(x24) # 1018 <__bsg_grp_org_x>
    1498:	000a2683          	lw	x13,0(x20) # 1000 <_bsg_data_start_addr>
    149c:	00a787b3          	add	x15,x15,x10
    14a0:	00b60633          	add	x12,x12,x11
    14a4:	01879793          	slli	x15,x15,0x18
    14a8:	01261613          	slli	x12,x12,0x12
    14ac:	01667633          	and	x12,x12,x22
    14b0:	01b7f7b3          	and	x15,x15,x27
    14b4:	00469693          	slli	x13,x13,0x4
    14b8:	00c7e7b3          	or	x15,x15,x12
    14bc:	0136f6b3          	and	x13,x13,x19
    14c0:	00f4f493          	andi	x9,x9,15
    14c4:	00d7e7b3          	or	x15,x15,x13
    14c8:	0097e7b3          	or	x15,x15,x9
    14cc:	d0fba623          	sw	x15,-756(x23) # 40000d0c <_bsg_elf_vcache_size+0x3ffe0d0c>
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14d0:	fb042683          	lw	x13,-80(x8)
    14d4:	fac42783          	lw	x15,-84(x8)
    14d8:	fb842603          	lw	x12,-72(x8)
    14dc:	fa442583          	lw	x11,-92(x8)
    14e0:	fa842503          	lw	x10,-88(x8)
    14e4:	fae42e23          	sw	x14,-68(x8)
                for(int i = 0; i <= iter; ++i){
    14e8:	00190913          	addi	x18,x18,1
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14ec:	269000ef          	jal	x1,1f54 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EaaaEiPT0_PT1_PT2_mmm>
                        bsg_cuda_print_stat_end(temp);
    14f0:	014d2583          	lw	x11,20(x26)
    14f4:	020ca783          	lw	x15,32(x25)
    14f8:	000a2603          	lw	x12,0(x20)
    14fc:	018c2683          	lw	x13,24(x24)
    1500:	024aa383          	lw	x7,36(x21)
    1504:	00f587b3          	add	x15,x11,x15
    1508:	00461613          	slli	x12,x12,0x4
    150c:	01879793          	slli	x15,x15,0x18
    1510:	01367633          	and	x12,x12,x19
    1514:	007686b3          	add	x13,x13,x7
    1518:	01b7f7b3          	and	x15,x15,x27
    151c:	009664b3          	or	x9,x12,x9
    1520:	01269693          	slli	x13,x13,0x12
    1524:	0097e4b3          	or	x9,x15,x9
    1528:	0166f6b3          	and	x13,x13,x22
    152c:	400007b7          	lui	x15,0x40000
    1530:	00d4e4b3          	or	x9,x9,x13
    1534:	00f4e4b3          	or	x9,x9,x15
                for(int i = 0; i <= iter; ++i){
    1538:	fb442783          	lw	x15,-76(x8)
                        bsg_cuda_print_stat_end(temp);
    153c:	d09ba623          	sw	x9,-756(x23)
                for(int i = 0; i <= iter; ++i){
    1540:	fbc42703          	lw	x14,-68(x8)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1544:	00050493          	mv	x9,x10
                for(int i = 0; i <= iter; ++i){
    1548:	f2f91ee3          	bne	x18,x15,1484 <kernel_matrix_multiply_int8+0x100>
                }

                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    154c:	f9c42603          	lw	x12,-100(x8)
    1550:	fb842583          	lw	x11,-72(x8)
    1554:	f9842503          	lw	x10,-104(x8)
    1558:	26c000ef          	jal	x1,17c4 <memcpy>

                return rc;
        }
    155c:	f9040113          	addi	x2,x8,-112
    1560:	06c12083          	lw	x1,108(x2)
    1564:	00048513          	mv	x10,x9
    1568:	06812403          	lw	x8,104(x2)
    156c:	06412483          	lw	x9,100(x2)
    1570:	06012903          	lw	x18,96(x2)
    1574:	05c12983          	lw	x19,92(x2)
    1578:	05812a03          	lw	x20,88(x2)
    157c:	05412a83          	lw	x21,84(x2)
    1580:	05012b03          	lw	x22,80(x2)
    1584:	04c12b83          	lw	x23,76(x2)
    1588:	04812c03          	lw	x24,72(x2)
    158c:	04412c83          	lw	x25,68(x2)
    1590:	04012d03          	lw	x26,64(x2)
    1594:	03c12d83          	lw	x27,60(x2)
    1598:	07010113          	addi	x2,x2,112
    159c:	00008067          	ret

000015a0 <kernel_matrix_multiply_float>:
        int  __attribute__ ((noinline)) kernel_matrix_multiply_float(
                      float *A, float *B, float *C,
                      uint32_t A_HEIGHT, uint32_t A_WIDTH,
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    15a0:	f9010113          	addi	x2,x2,-112
    15a4:	06112623          	sw	x1,108(x2)
    15a8:	06812423          	sw	x8,104(x2)
    15ac:	06912223          	sw	x9,100(x2)
    15b0:	07010413          	addi	x8,x2,112
    15b4:	07212023          	sw	x18,96(x2)
    15b8:	05312e23          	sw	x19,92(x2)
    15bc:	05412c23          	sw	x20,88(x2)
    15c0:	05512a23          	sw	x21,84(x2)
    15c4:	05612823          	sw	x22,80(x2)
    15c8:	05712623          	sw	x23,76(x2)
    15cc:	05812423          	sw	x24,72(x2)
    15d0:	05912223          	sw	x25,68(x2)
    15d4:	05a12023          	sw	x26,64(x2)
    15d8:	03b12e23          	sw	x27,60(x2)
    15dc:	00070e13          	mv	x28,x14
    15e0:	fae42223          	sw	x14,-92(x8)
                int rc, temp = IGNORE_TAG;

                // These arrays are resident in DMEM
                float A_local[A_HEIGHT * A_WIDTH];
    15e4:	02d70733          	mul	x14,x14,x13
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    15e8:	00068e93          	mv	x29,x13
    15ec:	fad42423          	sw	x13,-88(x8)
    15f0:	00279693          	slli	x13,x15,0x2
    15f4:	faf42e23          	sw	x15,-68(x8)
    15f8:	00060313          	mv	x6,x12
    15fc:	00058493          	mv	x9,x11
                float B_local[A_WIDTH * B_WIDTH];
                float C_local[A_HEIGHT * B_WIDTH];

                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1600:	00050593          	mv	x11,x10
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1604:	f8642c23          	sw	x6,-104(x8)
    1608:	fb042023          	sw	x16,-96(x8)
                float B_local[A_WIDTH * B_WIDTH];
    160c:	02de09b3          	mul	x19,x28,x13
                float A_local[A_HEIGHT * A_WIDTH];
    1610:	00271613          	slli	x12,x14,0x2
    1614:	00f60713          	addi	x14,x12,15
    1618:	ff077713          	andi	x14,x14,-16
    161c:	40e10133          	sub	x2,x2,x14
    1620:	00010513          	mv	x10,x2
    1624:	faa42a23          	sw	x10,-76(x8)
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);

                for(int i = 0; i <= iter; ++i){
    1628:	00000913          	li	x18,0
    162c:	00001d37          	lui	x26,0x1
    1630:	00001cb7          	lui	x25,0x1
                float C_local[A_HEIGHT * B_WIDTH];
    1634:	02de87b3          	mul	x15,x29,x13
                float B_local[A_WIDTH * B_WIDTH];
    1638:	00f98713          	addi	x14,x19,15
    163c:	ff077713          	andi	x14,x14,-16
    1640:	40e10133          	sub	x2,x2,x14
    1644:	00188713          	addi	x14,x17,1
    1648:	fae42623          	sw	x14,-84(x8)
    164c:	00010a13          	mv	x20,x2
    1650:	fb442823          	sw	x20,-80(x8)
                float C_local[A_HEIGHT * B_WIDTH];
    1654:	00001c37          	lui	x24,0x1
    1658:	00001b37          	lui	x22,0x1
    165c:	00f78713          	addi	x14,x15,15 # 4000000f <_bsg_elf_vcache_size+0x3ffe000f>
    1660:	ff077713          	andi	x14,x14,-16
    1664:	40e10133          	sub	x2,x2,x14
    1668:	f8f42e23          	sw	x15,-100(x8)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    166c:	158000ef          	jal	x1,17c4 <memcpy>
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1670:	00098613          	mv	x12,x19
    1674:	00048593          	mv	x11,x9
    1678:	000a0513          	mv	x10,x20
    167c:	148000ef          	jal	x1,17c4 <memcpy>
                        bsg_cuda_print_stat_start(temp);
    1680:	000409b7          	lui	x19,0x40
    1684:	fbc42783          	lw	x15,-68(x8)
                float C_local[A_HEIGHT * B_WIDTH];
    1688:	fa242c23          	sw	x2,-72(x8)
                int rc, temp = IGNORE_TAG;
    168c:	00000493          	li	x9,0
    1690:	00001ab7          	lui	x21,0x1
                        bsg_cuda_print_stat_start(temp);
    1694:	3f000db7          	lui	x27,0x3f000
    1698:	00fc0a37          	lui	x20,0xfc0
    169c:	ff098993          	addi	x19,x19,-16 # 3fff0 <_bsg_elf_vcache_size+0x1fff0>
    16a0:	40001bb7          	lui	x23,0x40001
    16a4:	0080006f          	j	16ac <kernel_matrix_multiply_float+0x10c>
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
                                                                                   A_HEIGHT, A_WIDTH, B_WIDTH);
                        bsg_cuda_print_stat_end(temp);
                        temp = tag;
    16a8:	fa042483          	lw	x9,-96(x8)
                        bsg_cuda_print_stat_start(temp);
    16ac:	020ca503          	lw	x10,32(x25) # 1020 <__bsg_y>
    16b0:	024b2583          	lw	x11,36(x22) # 1024 <__bsg_x>
    16b4:	014d2703          	lw	x14,20(x26) # 1014 <__bsg_grp_org_y>
    16b8:	018c2603          	lw	x12,24(x24) # 1018 <__bsg_grp_org_x>
    16bc:	000aa683          	lw	x13,0(x21) # 1000 <_bsg_data_start_addr>
    16c0:	00a70733          	add	x14,x14,x10
    16c4:	00b60633          	add	x12,x12,x11
    16c8:	01871713          	slli	x14,x14,0x18
    16cc:	01261613          	slli	x12,x12,0x12
    16d0:	01467633          	and	x12,x12,x20
    16d4:	01b77733          	and	x14,x14,x27
    16d8:	00469693          	slli	x13,x13,0x4
    16dc:	00c76733          	or	x14,x14,x12
    16e0:	0136f6b3          	and	x13,x13,x19
    16e4:	00f4f493          	andi	x9,x9,15
    16e8:	00d76733          	or	x14,x14,x13
    16ec:	00976733          	or	x14,x14,x9
    16f0:	d0eba623          	sw	x14,-756(x23) # 40000d0c <_bsg_elf_vcache_size+0x3ffe0d0c>
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    16f4:	fa842683          	lw	x13,-88(x8)
    16f8:	fa442703          	lw	x14,-92(x8)
    16fc:	fb842603          	lw	x12,-72(x8)
    1700:	fb042583          	lw	x11,-80(x8)
    1704:	fb442503          	lw	x10,-76(x8)
    1708:	faf42e23          	sw	x15,-68(x8)
                for(int i = 0; i <= iter; ++i){
    170c:	00190913          	addi	x18,x18,1
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1710:	2e5000ef          	jal	x1,21f4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm>
                        bsg_cuda_print_stat_end(temp);
    1714:	014d2583          	lw	x11,20(x26)
    1718:	020ca703          	lw	x14,32(x25)
    171c:	000aa603          	lw	x12,0(x21)
    1720:	018c2683          	lw	x13,24(x24)
    1724:	024b2383          	lw	x7,36(x22)
    1728:	00e58733          	add	x14,x11,x14
    172c:	00461613          	slli	x12,x12,0x4
    1730:	01871713          	slli	x14,x14,0x18
    1734:	01367633          	and	x12,x12,x19
    1738:	007686b3          	add	x13,x13,x7
    173c:	01b77733          	and	x14,x14,x27
    1740:	009664b3          	or	x9,x12,x9
    1744:	01269693          	slli	x13,x13,0x12
    1748:	009764b3          	or	x9,x14,x9
    174c:	0146f6b3          	and	x13,x13,x20
    1750:	400007b7          	lui	x15,0x40000
    1754:	00d4e4b3          	or	x9,x9,x13
                for(int i = 0; i <= iter; ++i){
    1758:	fac42703          	lw	x14,-84(x8)
                        bsg_cuda_print_stat_end(temp);
    175c:	00f4e4b3          	or	x9,x9,x15
    1760:	d09ba623          	sw	x9,-756(x23)
                for(int i = 0; i <= iter; ++i){
    1764:	fbc42783          	lw	x15,-68(x8)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1768:	00050493          	mv	x9,x10
                for(int i = 0; i <= iter; ++i){
    176c:	f2e91ee3          	bne	x18,x14,16a8 <kernel_matrix_multiply_float+0x108>
                }

                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1770:	f9c42603          	lw	x12,-100(x8)
    1774:	fb842583          	lw	x11,-72(x8)
    1778:	f9842503          	lw	x10,-104(x8)
    177c:	048000ef          	jal	x1,17c4 <memcpy>

                return rc;
        }
    1780:	f9040113          	addi	x2,x8,-112
    1784:	06c12083          	lw	x1,108(x2)
    1788:	00048513          	mv	x10,x9
    178c:	06812403          	lw	x8,104(x2)
    1790:	06412483          	lw	x9,100(x2)
    1794:	06012903          	lw	x18,96(x2)
    1798:	05c12983          	lw	x19,92(x2)
    179c:	05812a03          	lw	x20,88(x2)
    17a0:	05412a83          	lw	x21,84(x2)
    17a4:	05012b03          	lw	x22,80(x2)
    17a8:	04c12b83          	lw	x23,76(x2)
    17ac:	04812c03          	lw	x24,72(x2)
    17b0:	04412c83          	lw	x25,68(x2)
    17b4:	04012d03          	lw	x26,64(x2)
    17b8:	03c12d83          	lw	x27,60(x2)
    17bc:	07010113          	addi	x2,x2,112
    17c0:	00008067          	ret

000017c4 <memcpy>:
    17c4:	00a5c7b3          	xor	x15,x11,x10
    17c8:	0037f793          	andi	x15,x15,3
    17cc:	00c508b3          	add	x17,x10,x12
    17d0:	06079263          	bnez	x15,1834 <_gp+0x34>
    17d4:	00300793          	li	x15,3
    17d8:	04c7fe63          	bgeu	x15,x12,1834 <_gp+0x34>
    17dc:	00357793          	andi	x15,x10,3
    17e0:	00050713          	mv	x14,x10
    17e4:	06079863          	bnez	x15,1854 <_gp+0x54>
    17e8:	ffc8f613          	andi	x12,x17,-4
    17ec:	fe060793          	addi	x15,x12,-32
    17f0:	08f76c63          	bltu	x14,x15,1888 <_gp+0x88>
    17f4:	02c77c63          	bgeu	x14,x12,182c <_gp+0x2c>
    17f8:	00058693          	mv	x13,x11
    17fc:	00070793          	mv	x15,x14
    1800:	0006a803          	lw	x16,0(x13)
    1804:	00478793          	addi	x15,x15,4 # 40000004 <_bsg_elf_vcache_size+0x3ffe0004>
    1808:	00468693          	addi	x13,x13,4
    180c:	ff07ae23          	sw	x16,-4(x15)
    1810:	fec7e8e3          	bltu	x15,x12,1800 <_gp>
    1814:	fff60793          	addi	x15,x12,-1
    1818:	40e787b3          	sub	x15,x15,x14
    181c:	ffc7f793          	andi	x15,x15,-4
    1820:	00478793          	addi	x15,x15,4
    1824:	00f70733          	add	x14,x14,x15
    1828:	00f585b3          	add	x11,x11,x15
    182c:	01176863          	bltu	x14,x17,183c <_gp+0x3c>
    1830:	00008067          	ret
    1834:	00050713          	mv	x14,x10
    1838:	ff157ce3          	bgeu	x10,x17,1830 <_gp+0x30>
    183c:	0005c783          	lbu	x15,0(x11)
    1840:	00170713          	addi	x14,x14,1
    1844:	00158593          	addi	x11,x11,1
    1848:	fef70fa3          	sb	x15,-1(x14)
    184c:	ff1768e3          	bltu	x14,x17,183c <_gp+0x3c>
    1850:	00008067          	ret
    1854:	0005c683          	lbu	x13,0(x11)
    1858:	00170713          	addi	x14,x14,1
    185c:	00377793          	andi	x15,x14,3
    1860:	fed70fa3          	sb	x13,-1(x14)
    1864:	00158593          	addi	x11,x11,1
    1868:	f80780e3          	beqz	x15,17e8 <memcpy+0x24>
    186c:	0005c683          	lbu	x13,0(x11)
    1870:	00170713          	addi	x14,x14,1
    1874:	00377793          	andi	x15,x14,3
    1878:	fed70fa3          	sb	x13,-1(x14)
    187c:	00158593          	addi	x11,x11,1
    1880:	fc079ae3          	bnez	x15,1854 <_gp+0x54>
    1884:	f65ff06f          	j	17e8 <memcpy+0x24>
    1888:	0045a683          	lw	x13,4(x11)
    188c:	0005a283          	lw	x5,0(x11)
    1890:	0085af83          	lw	x31,8(x11)
    1894:	00c5af03          	lw	x30,12(x11)
    1898:	0105ae83          	lw	x29,16(x11)
    189c:	0145ae03          	lw	x28,20(x11)
    18a0:	0185a303          	lw	x6,24(x11)
    18a4:	01c5a803          	lw	x16,28(x11)
    18a8:	00d72223          	sw	x13,4(x14)
    18ac:	0205a683          	lw	x13,32(x11)
    18b0:	00572023          	sw	x5,0(x14)
    18b4:	01f72423          	sw	x31,8(x14)
    18b8:	01e72623          	sw	x30,12(x14)
    18bc:	01d72823          	sw	x29,16(x14)
    18c0:	01c72a23          	sw	x28,20(x14)
    18c4:	00672c23          	sw	x6,24(x14)
    18c8:	01072e23          	sw	x16,28(x14)
    18cc:	02d72023          	sw	x13,32(x14)
    18d0:	02470713          	addi	x14,x14,36
    18d4:	02458593          	addi	x11,x11,36
    18d8:	faf768e3          	bltu	x14,x15,1888 <_gp+0x88>
    18dc:	f19ff06f          	j	17f4 <memcpy+0x30>

000018e0 <main>:
#include "bsg_cuda_lite_runtime.h"


int main()
{
        __wait_until_valid_func();
    18e0:	fffff297          	auipc	x5,0xfffff
    18e4:	7482a283          	lw	x5,1864(x5) # 1028 <cuda_kernel_not_loaded_val>
    18e8:	fffff417          	auipc	x8,0xfffff
    18ec:	75440413          	addi	x8,x8,1876 # 103c <cuda_kernel_ptr>
    18f0:	1004232f          	lr.w	x6,(x8)
    18f4:	00629463          	bne	x5,x6,18fc <__init_param>
    18f8:	140422af          	lr.w.aq	x5,(x8)

000018fc <__init_param>:
    18fc:	fffff297          	auipc	x5,0xfffff
    1900:	74028293          	addi	x5,x5,1856 # 103c <cuda_kernel_ptr>
    1904:	0002a483          	lw	x9,0(x5)
    1908:	fffff297          	auipc	x5,0xfffff
    190c:	73028293          	addi	x5,x5,1840 # 1038 <cuda_argc>
    1910:	0002a903          	lw	x18,0(x5)
    1914:	fffff297          	auipc	x5,0xfffff
    1918:	72028293          	addi	x5,x5,1824 # 1034 <cuda_argv_ptr>
    191c:	0002a983          	lw	x19,0(x5)
    1920:	fffff297          	auipc	x5,0xfffff
    1924:	71028293          	addi	x5,x5,1808 # 1030 <cuda_finish_signal_addr>
    1928:	0002aa03          	lw	x20,0(x5)

0000192c <__load_argument>:
    192c:	0009a503          	lw	x10,0(x19)
    1930:	0049a583          	lw	x11,4(x19)
    1934:	0089a603          	lw	x12,8(x19)
    1938:	00c9a683          	lw	x13,12(x19)
    193c:	0109a703          	lw	x14,16(x19)
    1940:	0149a783          	lw	x15,20(x19)
    1944:	0189a803          	lw	x16,24(x19)
    1948:	01c9a883          	lw	x17,28(x19)
    194c:	00800293          	li	x5,8
    1950:	0322de63          	bge	x5,x18,198c <__invoke_kernel>
    1954:	ff890293          	addi	x5,x18,-8
    1958:	00229293          	slli	x5,x5,0x2
    195c:	40510133          	sub	x2,x2,x5
    1960:	00800293          	li	x5,8
    1964:	02000313          	li	x6,32
    1968:	00000e13          	li	x28,0

0000196c <__load_stack>:
    196c:	013303b3          	add	x7,x6,x19
    1970:	0003ae83          	lw	x29,0(x7)
    1974:	002e0f33          	add	x30,x28,x2
    1978:	01df2023          	sw	x29,0(x30)
    197c:	00128293          	addi	x5,x5,1
    1980:	00430313          	addi	x6,x6,4
    1984:	004e0e13          	addi	x28,x28,4
    1988:	ff22c2e3          	blt	x5,x18,196c <__load_stack>

0000198c <__invoke_kernel>:
    198c:	000480e7          	jalr	x9
    1990:	00800293          	li	x5,8
    1994:	0122d863          	bge	x5,x18,19a4 <__kernel_return>
    1998:	ff890293          	addi	x5,x18,-8
    199c:	00229293          	slli	x5,x5,0x2
    19a0:	00510133          	add	x2,x2,x5

000019a4 <__kernel_return>:
    19a4:	fffff297          	auipc	x5,0xfffff
    19a8:	6842a283          	lw	x5,1668(x5) # 1028 <cuda_kernel_not_loaded_val>
    19ac:	00542023          	sw	x5,0(x8)
  if (__bsg_id == 0) 
    19b0:	000017b7          	lui	x15,0x1
    19b4:	01c7a783          	lw	x15,28(x15) # 101c <__bsg_id>
    19b8:	00079c63          	bnez	x15,19d0 <__kernel_return+0x2c>
     *signal_ptr = cuda_finish_signal_val;     
    19bc:	000017b7          	lui	x15,0x1
    19c0:	00001737          	lui	x14,0x1
    19c4:	0307a783          	lw	x15,48(x15) # 1030 <cuda_finish_signal_addr>
    19c8:	02c72703          	lw	x14,44(x14) # 102c <cuda_finish_signal_val>
    19cc:	00e7a023          	sw	x14,0(x15)
    19d0:	f11ff06f          	j	18e0 <main>
}
    19d4:	00000513          	li	x10,0
    19d8:	00008067          	ret

000019dc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm>:
 * kernel and all multiplies used to index the A, B and C arrays are
 * transformed into additions (nomul). The row-column dot product is
 * unrolled by a factor of F (a template parameter)
 */
template <unsigned int F, typename TA, typename TB, typename TC>
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19dc:	f9010113          	addi	x2,x2,-112
    19e0:	00070813          	mv	x16,x14
    19e4:	00e12823          	sw	x14,16(x2)
                      TA *A, TB *BT, TC *C,
                      uint32_t A_HEIGHT, uint32_t A_WIDTH,
                      uint32_t B_WIDTH) {
        register TC init = static_cast<TC>(0);
        uint32_t incr = A_WIDTH * (F-1);
    19e8:	00371713          	slli	x14,x14,0x3
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19ec:	00b12e23          	sw	x11,28(x2)
        uint32_t incr = A_WIDTH * (F-1);
    19f0:	410705b3          	sub	x11,x14,x16
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19f4:	06812623          	sw	x8,108(x2)
    19f8:	06912423          	sw	x9,104(x2)
    19fc:	07212223          	sw	x18,100(x2)
    1a00:	07312023          	sw	x19,96(x2)
    1a04:	05412e23          	sw	x20,92(x2)
    1a08:	05512c23          	sw	x21,88(x2)
    1a0c:	05612a23          	sw	x22,84(x2)
    1a10:	05712823          	sw	x23,80(x2)
    1a14:	05812623          	sw	x24,76(x2)
    1a18:	05912423          	sw	x25,72(x2)
    1a1c:	05a12223          	sw	x26,68(x2)
    1a20:	05b12023          	sw	x27,64(x2)
    1a24:	02d12823          	sw	x13,48(x2)
    1a28:	02c12623          	sw	x12,44(x2)
    1a2c:	02f12a23          	sw	x15,52(x2)
        uint32_t incr = A_WIDTH * (F-1);
    1a30:	00b12a23          	sw	x11,20(x2)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1a34:	1e068463          	beqz	x13,1c1c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x240>
    1a38:	fff78793          	addi	x15,x15,-1
    1a3c:	ff87f713          	andi	x14,x15,-8
    1a40:	02060793          	addi	x15,x12,32
    1a44:	00281c13          	slli	x24,x16,0x2
    1a48:	02f12c23          	sw	x15,56(x2)
    1a4c:	00870793          	addi	x15,x14,8
    1a50:	00a12623          	sw	x10,12(x2)
    1a54:	01850cb3          	add	x25,x10,x24
    1a58:	02e12423          	sw	x14,40(x2)
    1a5c:	00481f13          	slli	x30,x16,0x4
    1a60:	00259d13          	slli	x26,x11,0x2
    1a64:	00012223          	sw	x0,4(x2)
    1a68:	02012023          	sw	x0,32(x2)
    1a6c:	00012423          	sw	x0,8(x2)
    1a70:	02012223          	sw	x0,36(x2)
    1a74:	02f12e23          	sw	x15,60(x2)
                boff = 0;
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1a78:	00812783          	lw	x15,8(x2)
    1a7c:	01012703          	lw	x14,16(x2)
    1a80:	00e787b3          	add	x15,x15,x14
    1a84:	00f12423          	sw	x15,8(x2)
    1a88:	03412783          	lw	x15,52(x2)
    1a8c:	14078e63          	beqz	x15,1be8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x20c>
    1a90:	02012703          	lw	x14,32(x2)
    1a94:	02812783          	lw	x15,40(x2)
    1a98:	00271b93          	slli	x23,x14,0x2
    1a9c:	00f707b3          	add	x15,x14,x15
    1aa0:	02c12703          	lw	x14,44(x2)
    1aa4:	00279793          	slli	x15,x15,0x2
    1aa8:	01770bb3          	add	x23,x14,x23
    1aac:	03812703          	lw	x14,56(x2)
    1ab0:	00e787b3          	add	x15,x15,x14
    1ab4:	00f12c23          	sw	x15,24(x2)
                boff = 0;
    1ab8:	00000793          	li	x15,0
                        uint32_t bofff = 0;
                        TC sum[F] = {{init}};
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1abc:	00412703          	lw	x14,4(x2)
    1ac0:	00812683          	lw	x13,8(x2)
    1ac4:	18d77a63          	bgeu	x14,x13,1c58 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x27c>
    1ac8:	01012703          	lw	x14,16(x2)
    1acc:	01c12583          	lw	x11,28(x2)
                        TC sum[F] = {{init}};
    1ad0:	00000f93          	li	x31,0
    1ad4:	00f70db3          	add	x27,x14,x15
    1ad8:	01b706b3          	add	x13,x14,x27
    1adc:	00279793          	slli	x15,x15,0x2
    1ae0:	002d9613          	slli	x12,x27,0x2
    1ae4:	00269693          	slli	x13,x13,0x2
    1ae8:	00f58733          	add	x14,x11,x15
    1aec:	00c58633          	add	x12,x11,x12
    1af0:	00d586b3          	add	x13,x11,x13
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1af4:	00c12583          	lw	x11,12(x2)
                        TC sum[F] = {{init}};
    1af8:	00000293          	li	x5,0
    1afc:	00000393          	li	x7,0
    1b00:	00000413          	li	x8,0
    1b04:	00000493          	li	x9,0
    1b08:	00000913          	li	x18,0
    1b0c:	00000993          	li	x19,0
    1b10:	00000a13          	li	x20,0
                                bofff = boff;
#pragma GCC unroll 8 // Does this unroll correctly when F < 4?
                                for (uint32_t f = 0; f < F; ++f, bofff += A_WIDTH){
                                        sum[f] += A[aoff] * BT[bofff];
    1b14:	01868333          	add	x6,x13,x24
    1b18:	01e708b3          	add	x17,x14,x30
    1b1c:	01e60833          	add	x16,x12,x30
    1b20:	01e68533          	add	x10,x13,x30
    1b24:	01a70ab3          	add	x21,x14,x26
    1b28:	0005a783          	lw	x15,0(x11)
    1b2c:	00072b03          	lw	x22,0(x14)
    1b30:	00062e83          	lw	x29,0(x12)
    1b34:	0006ae03          	lw	x28,0(x13)
    1b38:	00032303          	lw	x6,0(x6)
    1b3c:	0008a883          	lw	x17,0(x17)
    1b40:	00082803          	lw	x16,0(x16) # 20000000 <_bsg_elf_vcache_size+0x1ffe0000>
    1b44:	00052503          	lw	x10,0(x10)
    1b48:	000aaa83          	lw	x21,0(x21)
    1b4c:	03678b33          	mul	x22,x15,x22
    1b50:	00458593          	addi	x11,x11,4
    1b54:	00470713          	addi	x14,x14,4
    1b58:	00460613          	addi	x12,x12,4
    1b5c:	00468693          	addi	x13,x13,4
    1b60:	03d78eb3          	mul	x29,x15,x29
    1b64:	016a0a33          	add	x20,x20,x22
    1b68:	03c78e33          	mul	x28,x15,x28
    1b6c:	01d989b3          	add	x19,x19,x29
    1b70:	02678333          	mul	x6,x15,x6
    1b74:	01c90933          	add	x18,x18,x28
    1b78:	031788b3          	mul	x17,x15,x17
    1b7c:	006484b3          	add	x9,x9,x6
    1b80:	03078833          	mul	x16,x15,x16
    1b84:	01140433          	add	x8,x8,x17
    1b88:	02a78533          	mul	x10,x15,x10
    1b8c:	010383b3          	add	x7,x7,x16
    1b90:	035787b3          	mul	x15,x15,x21
    1b94:	00a282b3          	add	x5,x5,x10
    1b98:	00ff8fb3          	add	x31,x31,x15
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1b9c:	f6bc9ce3          	bne	x25,x11,1b14 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x138>
    1ba0:	000d8793          	mv	x15,x27

#pragma GCC unroll 8
                        for (uint32_t f = 0; f < F; f++){
                                C[coff + f] = sum[f];
                        }
                        boff += incr;
    1ba4:	01412703          	lw	x14,20(x2)
                                C[coff + f] = sum[f];
    1ba8:	014ba023          	sw	x20,0(x23)
    1bac:	013ba223          	sw	x19,4(x23)
                        boff += incr;
    1bb0:	00e787b3          	add	x15,x15,x14
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1bb4:	01812703          	lw	x14,24(x2)
                                C[coff + f] = sum[f];
    1bb8:	012ba423          	sw	x18,8(x23)
    1bbc:	009ba623          	sw	x9,12(x23)
    1bc0:	008ba823          	sw	x8,16(x23)
    1bc4:	007baa23          	sw	x7,20(x23)
    1bc8:	005bac23          	sw	x5,24(x23)
    1bcc:	01fbae23          	sw	x31,28(x23)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1bd0:	020b8b93          	addi	x23,x23,32
    1bd4:	ef7714e3          	bne	x14,x23,1abc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0xe0>
    1bd8:	02012783          	lw	x15,32(x2)
    1bdc:	03c12703          	lw	x14,60(x2)
    1be0:	00e787b3          	add	x15,x15,x14
    1be4:	02f12023          	sw	x15,32(x2)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1be8:	00412703          	lw	x14,4(x2)
    1bec:	01012683          	lw	x13,16(x2)
    1bf0:	02412783          	lw	x15,36(x2)
    1bf4:	018c8cb3          	add	x25,x25,x24
    1bf8:	00d70733          	add	x14,x14,x13
    1bfc:	00e12223          	sw	x14,4(x2)
    1c00:	00c12703          	lw	x14,12(x2)
    1c04:	00178793          	addi	x15,x15,1
    1c08:	02f12223          	sw	x15,36(x2)
    1c0c:	01870733          	add	x14,x14,x24
    1c10:	00e12623          	sw	x14,12(x2)
    1c14:	03012703          	lw	x14,48(x2)
    1c18:	e6f710e3          	bne	x14,x15,1a78 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x9c>
                        coff += F;
                }
        }
        return 0;
}
    1c1c:	06c12403          	lw	x8,108(x2)
    1c20:	06812483          	lw	x9,104(x2)
    1c24:	06412903          	lw	x18,100(x2)
    1c28:	06012983          	lw	x19,96(x2)
    1c2c:	05c12a03          	lw	x20,92(x2)
    1c30:	05812a83          	lw	x21,88(x2)
    1c34:	05412b03          	lw	x22,84(x2)
    1c38:	05012b83          	lw	x23,80(x2)
    1c3c:	04c12c03          	lw	x24,76(x2)
    1c40:	04812c83          	lw	x25,72(x2)
    1c44:	04412d03          	lw	x26,68(x2)
    1c48:	04012d83          	lw	x27,64(x2)
    1c4c:	00000513          	li	x10,0
    1c50:	07010113          	addi	x2,x2,112
    1c54:	00008067          	ret
                        TC sum[F] = {{init}};
    1c58:	00000f93          	li	x31,0
    1c5c:	00000293          	li	x5,0
    1c60:	00000393          	li	x7,0
    1c64:	00000413          	li	x8,0
    1c68:	00000493          	li	x9,0
    1c6c:	00000913          	li	x18,0
    1c70:	00000993          	li	x19,0
    1c74:	00000a13          	li	x20,0
    1c78:	f2dff06f          	j	1ba4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x1c8>

00001c7c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm>:
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c7c:	f9010113          	addi	x2,x2,-112
        uint32_t incr = A_WIDTH * (F-1);
    1c80:	00371f93          	slli	x31,x14,0x3
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c84:	00b12e23          	sw	x11,28(x2)
        uint32_t incr = A_WIDTH * (F-1);
    1c88:	40ef85b3          	sub	x11,x31,x14
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c8c:	06812623          	sw	x8,108(x2)
    1c90:	06912423          	sw	x9,104(x2)
    1c94:	07212223          	sw	x18,100(x2)
    1c98:	07312023          	sw	x19,96(x2)
    1c9c:	05412e23          	sw	x20,92(x2)
    1ca0:	05512c23          	sw	x21,88(x2)
    1ca4:	05612a23          	sw	x22,84(x2)
    1ca8:	05712823          	sw	x23,80(x2)
    1cac:	05812623          	sw	x24,76(x2)
    1cb0:	05912423          	sw	x25,72(x2)
    1cb4:	05a12223          	sw	x26,68(x2)
    1cb8:	05b12023          	sw	x27,64(x2)
    1cbc:	00e12823          	sw	x14,16(x2)
    1cc0:	02d12823          	sw	x13,48(x2)
    1cc4:	02c12623          	sw	x12,44(x2)
    1cc8:	02f12a23          	sw	x15,52(x2)
        uint32_t incr = A_WIDTH * (F-1);
    1ccc:	00b12a23          	sw	x11,20(x2)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1cd0:	22068263          	beqz	x13,1ef4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x278>
    1cd4:	fff78793          	addi	x15,x15,-1
    1cd8:	00171c13          	slli	x24,x14,0x1
    1cdc:	ff87f713          	andi	x14,x15,-8
    1ce0:	01060793          	addi	x15,x12,16
    1ce4:	02f12c23          	sw	x15,56(x2)
    1ce8:	00870793          	addi	x15,x14,8
    1cec:	00a12623          	sw	x10,12(x2)
    1cf0:	01850cb3          	add	x25,x10,x24
    1cf4:	02e12423          	sw	x14,40(x2)
    1cf8:	00159d13          	slli	x26,x11,0x1
    1cfc:	00012423          	sw	x0,8(x2)
    1d00:	02012023          	sw	x0,32(x2)
    1d04:	00012223          	sw	x0,4(x2)
    1d08:	02012223          	sw	x0,36(x2)
    1d0c:	02f12e23          	sw	x15,60(x2)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1d10:	00412783          	lw	x15,4(x2)
    1d14:	01012703          	lw	x14,16(x2)
    1d18:	00e787b3          	add	x15,x15,x14
    1d1c:	00f12223          	sw	x15,4(x2)
    1d20:	03412783          	lw	x15,52(x2)
    1d24:	18078e63          	beqz	x15,1ec0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x244>
    1d28:	02012703          	lw	x14,32(x2)
    1d2c:	02812783          	lw	x15,40(x2)
    1d30:	00171b93          	slli	x23,x14,0x1
    1d34:	00f707b3          	add	x15,x14,x15
    1d38:	02c12703          	lw	x14,44(x2)
    1d3c:	00179793          	slli	x15,x15,0x1
    1d40:	01770bb3          	add	x23,x14,x23
    1d44:	03812703          	lw	x14,56(x2)
    1d48:	00e787b3          	add	x15,x15,x14
    1d4c:	00f12c23          	sw	x15,24(x2)
                boff = 0;
    1d50:	00000793          	li	x15,0
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1d54:	00812703          	lw	x14,8(x2)
    1d58:	00412683          	lw	x13,4(x2)
    1d5c:	1cd77a63          	bgeu	x14,x13,1f30 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x2b4>
    1d60:	01012703          	lw	x14,16(x2)
    1d64:	00c12f03          	lw	x30,12(x2)
                        TC sum[F] = {{init}};
    1d68:	00000293          	li	x5,0
    1d6c:	00f70db3          	add	x27,x14,x15
    1d70:	01b70e33          	add	x28,x14,x27
    1d74:	01c12703          	lw	x14,28(x2)
    1d78:	00179793          	slli	x15,x15,0x1
    1d7c:	001d9e93          	slli	x29,x27,0x1
    1d80:	001e1e13          	slli	x28,x28,0x1
    1d84:	00f70333          	add	x6,x14,x15
    1d88:	01d70eb3          	add	x29,x14,x29
    1d8c:	01c70e33          	add	x28,x14,x28
    1d90:	00000393          	li	x7,0
    1d94:	00000413          	li	x8,0
    1d98:	00000493          	li	x9,0
    1d9c:	00000913          	li	x18,0
    1da0:	00000993          	li	x19,0
    1da4:	00000a13          	li	x20,0
    1da8:	00000a93          	li	x21,0
                                        sum[f] += A[aoff] * BT[bofff];
    1dac:	018e05b3          	add	x11,x28,x24
    1db0:	01f30633          	add	x12,x6,x31
    1db4:	01fe86b3          	add	x13,x29,x31
    1db8:	01fe0733          	add	x14,x28,x31
    1dbc:	01a30b33          	add	x22,x6,x26
    1dc0:	000f5783          	lhu	x15,0(x30)
    1dc4:	00035883          	lhu	x17,0(x6)
    1dc8:	000ed803          	lhu	x16,0(x29)
    1dcc:	000e5503          	lhu	x10,0(x28)
    1dd0:	0005d583          	lhu	x11,0(x11)
    1dd4:	00065603          	lhu	x12,0(x12)
    1dd8:	0006d683          	lhu	x13,0(x13)
    1ddc:	00075703          	lhu	x14,0(x14)
    1de0:	000b5b03          	lhu	x22,0(x22)
    1de4:	031788b3          	mul	x17,x15,x17
    1de8:	002f0f13          	addi	x30,x30,2
    1dec:	00230313          	addi	x6,x6,2
    1df0:	002e8e93          	addi	x29,x29,2
    1df4:	002e0e13          	addi	x28,x28,2
    1df8:	03078833          	mul	x16,x15,x16
    1dfc:	01588ab3          	add	x21,x17,x21
    1e00:	010a9a93          	slli	x21,x21,0x10
    1e04:	410ada93          	srai	x21,x21,0x10
    1e08:	02a78533          	mul	x10,x15,x10
    1e0c:	01480a33          	add	x20,x16,x20
    1e10:	010a1a13          	slli	x20,x20,0x10
    1e14:	410a5a13          	srai	x20,x20,0x10
    1e18:	02b785b3          	mul	x11,x15,x11
    1e1c:	01350533          	add	x10,x10,x19
    1e20:	01051993          	slli	x19,x10,0x10
    1e24:	4109d993          	srai	x19,x19,0x10
    1e28:	02c78633          	mul	x12,x15,x12
    1e2c:	012585b3          	add	x11,x11,x18
    1e30:	01059913          	slli	x18,x11,0x10
    1e34:	41095913          	srai	x18,x18,0x10
    1e38:	02d786b3          	mul	x13,x15,x13
    1e3c:	00960633          	add	x12,x12,x9
    1e40:	01061493          	slli	x9,x12,0x10
    1e44:	4104d493          	srai	x9,x9,0x10
    1e48:	02e78733          	mul	x14,x15,x14
    1e4c:	008686b3          	add	x13,x13,x8
    1e50:	01069413          	slli	x8,x13,0x10
    1e54:	41045413          	srai	x8,x8,0x10
    1e58:	036787b3          	mul	x15,x15,x22
    1e5c:	00770733          	add	x14,x14,x7
    1e60:	01071393          	slli	x7,x14,0x10
    1e64:	4103d393          	srai	x7,x7,0x10
    1e68:	005787b3          	add	x15,x15,x5
    1e6c:	01079293          	slli	x5,x15,0x10
    1e70:	4102d293          	srai	x5,x5,0x10
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1e74:	f3ec9ce3          	bne	x25,x30,1dac <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x130>
    1e78:	000d8793          	mv	x15,x27
                        boff += incr;
    1e7c:	01412703          	lw	x14,20(x2)
                                C[coff + f] = sum[f];
    1e80:	015b9023          	sh	x21,0(x23)
    1e84:	014b9123          	sh	x20,2(x23)
                        boff += incr;
    1e88:	00e787b3          	add	x15,x15,x14
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1e8c:	01812703          	lw	x14,24(x2)
                                C[coff + f] = sum[f];
    1e90:	013b9223          	sh	x19,4(x23)
    1e94:	012b9323          	sh	x18,6(x23)
    1e98:	009b9423          	sh	x9,8(x23)
    1e9c:	008b9523          	sh	x8,10(x23)
    1ea0:	007b9623          	sh	x7,12(x23)
    1ea4:	005b9723          	sh	x5,14(x23)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1ea8:	010b8b93          	addi	x23,x23,16
    1eac:	eb7714e3          	bne	x14,x23,1d54 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0xd8>
    1eb0:	02012783          	lw	x15,32(x2)
    1eb4:	03c12703          	lw	x14,60(x2)
    1eb8:	00e787b3          	add	x15,x15,x14
    1ebc:	02f12023          	sw	x15,32(x2)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1ec0:	00812703          	lw	x14,8(x2)
    1ec4:	01012683          	lw	x13,16(x2)
    1ec8:	02412783          	lw	x15,36(x2)
    1ecc:	018c8cb3          	add	x25,x25,x24
    1ed0:	00d70733          	add	x14,x14,x13
    1ed4:	00e12423          	sw	x14,8(x2)
    1ed8:	00c12703          	lw	x14,12(x2)
    1edc:	00178793          	addi	x15,x15,1
    1ee0:	02f12223          	sw	x15,36(x2)
    1ee4:	01870733          	add	x14,x14,x24
    1ee8:	00e12623          	sw	x14,12(x2)
    1eec:	03012703          	lw	x14,48(x2)
    1ef0:	e2f710e3          	bne	x14,x15,1d10 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x94>
}
    1ef4:	06c12403          	lw	x8,108(x2)
    1ef8:	06812483          	lw	x9,104(x2)
    1efc:	06412903          	lw	x18,100(x2)
    1f00:	06012983          	lw	x19,96(x2)
    1f04:	05c12a03          	lw	x20,92(x2)
    1f08:	05812a83          	lw	x21,88(x2)
    1f0c:	05412b03          	lw	x22,84(x2)
    1f10:	05012b83          	lw	x23,80(x2)
    1f14:	04c12c03          	lw	x24,76(x2)
    1f18:	04812c83          	lw	x25,72(x2)
    1f1c:	04412d03          	lw	x26,68(x2)
    1f20:	04012d83          	lw	x27,64(x2)
    1f24:	00000513          	li	x10,0
    1f28:	07010113          	addi	x2,x2,112
    1f2c:	00008067          	ret
                        TC sum[F] = {{init}};
    1f30:	00000293          	li	x5,0
    1f34:	00000393          	li	x7,0
    1f38:	00000413          	li	x8,0
    1f3c:	00000493          	li	x9,0
    1f40:	00000913          	li	x18,0
    1f44:	00000993          	li	x19,0
    1f48:	00000a13          	li	x20,0
    1f4c:	00000a93          	li	x21,0
    1f50:	f2dff06f          	j	1e7c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x200>

00001f54 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EaaaEiPT0_PT1_PT2_mmm>:
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f54:	fa010113          	addi	x2,x2,-96
    1f58:	00070f13          	mv	x30,x14
        uint32_t incr = A_WIDTH * (F-1);
    1f5c:	00371713          	slli	x14,x14,0x3
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f60:	00f12623          	sw	x15,12(x2)
        uint32_t incr = A_WIDTH * (F-1);
    1f64:	41e707b3          	sub	x15,x14,x30
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f68:	04812e23          	sw	x8,92(x2)
    1f6c:	04912c23          	sw	x9,88(x2)
    1f70:	05212a23          	sw	x18,84(x2)
    1f74:	05312823          	sw	x19,80(x2)
    1f78:	05412623          	sw	x20,76(x2)
    1f7c:	05512423          	sw	x21,72(x2)
    1f80:	05612223          	sw	x22,68(x2)
    1f84:	05712023          	sw	x23,64(x2)
    1f88:	03812e23          	sw	x24,60(x2)
    1f8c:	03912c23          	sw	x25,56(x2)
    1f90:	03a12a23          	sw	x26,52(x2)
    1f94:	03b12823          	sw	x27,48(x2)
    1f98:	02d12623          	sw	x13,44(x2)
    1f9c:	00b12e23          	sw	x11,28(x2)
    1fa0:	02c12423          	sw	x12,40(x2)
        uint32_t incr = A_WIDTH * (F-1);
    1fa4:	00f12823          	sw	x15,16(x2)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1fa8:	1e068663          	beqz	x13,2194 <_bsg_elf_stack_ptr+0x198>
    1fac:	001f1793          	slli	x15,x30,0x1
    1fb0:	02f12023          	sw	x15,32(x2)
    1fb4:	00800793          	li	x15,8
    1fb8:	002f1a93          	slli	x21,x30,0x2
    1fbc:	40c787b3          	sub	x15,x15,x12
    1fc0:	00a12423          	sw	x10,8(x2)
    1fc4:	01e50c33          	add	x24,x10,x30
    1fc8:	415f0d33          	sub	x26,x30,x21
    1fcc:	01ea8cb3          	add	x25,x21,x30
    1fd0:	00012023          	sw	x0,0(x2)
    1fd4:	00000713          	li	x14,0
    1fd8:	00012223          	sw	x0,4(x2)
    1fdc:	02012223          	sw	x0,36(x2)
    1fe0:	00f12c23          	sw	x15,24(x2)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1fe4:	00412783          	lw	x15,4(x2)
    1fe8:	01e787b3          	add	x15,x15,x30
    1fec:	00f12223          	sw	x15,4(x2)
    1ff0:	00c12783          	lw	x15,12(x2)
    1ff4:	16078863          	beqz	x15,2164 <_bsg_elf_stack_ptr+0x168>
    1ff8:	02812783          	lw	x15,40(x2)
                boff = 0;
    1ffc:	00000d93          	li	x27,0
    2000:	00e787b3          	add	x15,x15,x14
    2004:	00f12a23          	sw	x15,20(x2)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2008:	00078b93          	mv	x23,x15
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    200c:	00012783          	lw	x15,0(x2)
    2010:	00412703          	lw	x14,4(x2)
    2014:	1ae7fe63          	bgeu	x15,x14,21d0 <_bsg_elf_stack_ptr+0x1d4>
    2018:	02012783          	lw	x15,32(x2)
    201c:	01bf0db3          	add	x27,x30,x27
    2020:	00812e83          	lw	x29,8(x2)
    2024:	01b78733          	add	x14,x15,x27
    2028:	01c12783          	lw	x15,28(x2)
                        TC sum[F] = {{init}};
    202c:	00000f93          	li	x31,0
    2030:	00000293          	li	x5,0
    2034:	01b786b3          	add	x13,x15,x27
    2038:	00e78733          	add	x14,x15,x14
    203c:	00000393          	li	x7,0
    2040:	00000413          	li	x8,0
    2044:	00000493          	li	x9,0
    2048:	00000913          	li	x18,0
    204c:	00000993          	li	x19,0
    2050:	00000a13          	li	x20,0
                                        sum[f] += A[aoff] * BT[bofff];
    2054:	01a70e33          	add	x28,x14,x26
    2058:	01e688b3          	add	x17,x13,x30
    205c:	01e70533          	add	x10,x14,x30
    2060:	015685b3          	add	x11,x13,x21
    2064:	01968633          	add	x12,x13,x25
    2068:	01570b33          	add	x22,x14,x21
    206c:	000ec783          	lbu	x15,0(x29)
    2070:	0006c303          	lbu	x6,0(x13)
    2074:	00074803          	lbu	x16,0(x14)
    2078:	000e4e03          	lbu	x28,0(x28)
    207c:	0008c883          	lbu	x17,0(x17)
    2080:	00054503          	lbu	x10,0(x10)
    2084:	0005c583          	lbu	x11,0(x11)
    2088:	00064603          	lbu	x12,0(x12)
    208c:	000b4b03          	lbu	x22,0(x22)
    2090:	03c78e33          	mul	x28,x15,x28
    2094:	001e8e93          	addi	x29,x29,1
    2098:	00168693          	addi	x13,x13,1
    209c:	00170713          	addi	x14,x14,1
    20a0:	02678333          	mul	x6,x15,x6
    20a4:	014e0a33          	add	x20,x28,x20
    20a8:	018a1a13          	slli	x20,x20,0x18
    20ac:	418a5a13          	srai	x20,x20,0x18
    20b0:	031788b3          	mul	x17,x15,x17
    20b4:	013309b3          	add	x19,x6,x19
    20b8:	01899993          	slli	x19,x19,0x18
    20bc:	4189d993          	srai	x19,x19,0x18
    20c0:	03078833          	mul	x16,x15,x16
    20c4:	012888b3          	add	x17,x17,x18
    20c8:	01889913          	slli	x18,x17,0x18
    20cc:	41895913          	srai	x18,x18,0x18
    20d0:	02a78533          	mul	x10,x15,x10
    20d4:	00980833          	add	x16,x16,x9
    20d8:	01881493          	slli	x9,x16,0x18
    20dc:	4184d493          	srai	x9,x9,0x18
    20e0:	02b785b3          	mul	x11,x15,x11
    20e4:	00850533          	add	x10,x10,x8
    20e8:	01851413          	slli	x8,x10,0x18
    20ec:	41845413          	srai	x8,x8,0x18
    20f0:	02c78633          	mul	x12,x15,x12
    20f4:	007585b3          	add	x11,x11,x7
    20f8:	01859393          	slli	x7,x11,0x18
    20fc:	4183d393          	srai	x7,x7,0x18
    2100:	036787b3          	mul	x15,x15,x22
    2104:	00560633          	add	x12,x12,x5
    2108:	01861293          	slli	x5,x12,0x18
    210c:	4182d293          	srai	x5,x5,0x18
    2110:	01f787b3          	add	x15,x15,x31
    2114:	01879f93          	slli	x31,x15,0x18
    2118:	418fdf93          	srai	x31,x31,0x18
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    211c:	f3dc1ce3          	bne	x24,x29,2054 <_bsg_elf_stack_ptr+0x58>
                        for (uint32_t f = 0; f < F; f++){
    2120:	01812783          	lw	x15,24(x2)
                        boff += incr;
    2124:	01012683          	lw	x13,16(x2)
                                C[coff + f] = sum[f];
    2128:	014b8023          	sb	x20,0(x23)
                        for (uint32_t f = 0; f < F; f++){
    212c:	01778733          	add	x14,x15,x23
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2130:	01412783          	lw	x15,20(x2)
                        boff += incr;
    2134:	00dd8db3          	add	x27,x27,x13
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2138:	00c12683          	lw	x13,12(x2)
                                C[coff + f] = sum[f];
    213c:	013b80a3          	sb	x19,1(x23)
    2140:	012b8123          	sb	x18,2(x23)
    2144:	009b81a3          	sb	x9,3(x23)
    2148:	008b8223          	sb	x8,4(x23)
    214c:	007b82a3          	sb	x7,5(x23)
    2150:	005b8323          	sb	x5,6(x23)
    2154:	01fb83a3          	sb	x31,7(x23)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2158:	008b8b93          	addi	x23,x23,8
    215c:	40fb87b3          	sub	x15,x23,x15
    2160:	ead7e6e3          	bltu	x15,x13,200c <_bsg_elf_stack_ptr+0x10>
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    2164:	00012683          	lw	x13,0(x2)
    2168:	02412783          	lw	x15,36(x2)
    216c:	01ec0c33          	add	x24,x24,x30
    2170:	01e686b3          	add	x13,x13,x30
    2174:	00d12023          	sw	x13,0(x2)
    2178:	00812683          	lw	x13,8(x2)
    217c:	00178793          	addi	x15,x15,1
    2180:	02f12223          	sw	x15,36(x2)
    2184:	01e686b3          	add	x13,x13,x30
    2188:	00d12423          	sw	x13,8(x2)
    218c:	02c12683          	lw	x13,44(x2)
    2190:	e4f69ae3          	bne	x13,x15,1fe4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EaaaEiPT0_PT1_PT2_mmm+0x90>
}
    2194:	05c12403          	lw	x8,92(x2)
    2198:	05812483          	lw	x9,88(x2)
    219c:	05412903          	lw	x18,84(x2)
    21a0:	05012983          	lw	x19,80(x2)
    21a4:	04c12a03          	lw	x20,76(x2)
    21a8:	04812a83          	lw	x21,72(x2)
    21ac:	04412b03          	lw	x22,68(x2)
    21b0:	04012b83          	lw	x23,64(x2)
    21b4:	03c12c03          	lw	x24,60(x2)
    21b8:	03812c83          	lw	x25,56(x2)
    21bc:	03412d03          	lw	x26,52(x2)
    21c0:	03012d83          	lw	x27,48(x2)
    21c4:	00000513          	li	x10,0
    21c8:	06010113          	addi	x2,x2,96
    21cc:	00008067          	ret
                        TC sum[F] = {{init}};
    21d0:	00000f93          	li	x31,0
    21d4:	00000293          	li	x5,0
    21d8:	00000393          	li	x7,0
    21dc:	00000413          	li	x8,0
    21e0:	00000493          	li	x9,0
    21e4:	00000913          	li	x18,0
    21e8:	00000993          	li	x19,0
    21ec:	00000a13          	li	x20,0
    21f0:	f31ff06f          	j	2120 <_bsg_elf_stack_ptr+0x124>

000021f4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm>:
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    21f4:	fc010113          	addi	x2,x2,-64
    21f8:	03412623          	sw	x20,44(x2)
    21fc:	02812e23          	sw	x8,60(x2)
        uint32_t incr = A_WIDTH * (F-1);
    2200:	00371a13          	slli	x20,x14,0x3
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    2204:	02912c23          	sw	x9,56(x2)
    2208:	03212a23          	sw	x18,52(x2)
    220c:	03312823          	sw	x19,48(x2)
    2210:	03512423          	sw	x21,40(x2)
    2214:	03612223          	sw	x22,36(x2)
    2218:	03712023          	sw	x23,32(x2)
    221c:	01812e23          	sw	x24,28(x2)
    2220:	01912c23          	sw	x25,24(x2)
    2224:	01a12a23          	sw	x26,20(x2)
    2228:	01b12823          	sw	x27,16(x2)
        uint32_t incr = A_WIDTH * (F-1);
    222c:	40ea0a33          	sub	x20,x20,x14
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    2230:	1a068063          	beqz	x13,23d0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1dc>
    2234:	00078c93          	mv	x25,x15
    2238:	fff78793          	addi	x15,x15,-1
    223c:	00070493          	mv	x9,x14
    2240:	00271f13          	slli	x30,x14,0x2
    2244:	ff87f713          	andi	x14,x15,-8
    2248:	02060793          	addi	x15,x12,32
    224c:	00f12423          	sw	x15,8(x2)
    2250:	00870793          	addi	x15,x14,8
    2254:	00058413          	mv	x8,x11
    2258:	00068d13          	mv	x26,x13
    225c:	00060b93          	mv	x23,x12
    2260:	00050913          	mv	x18,x10
    2264:	01e50fb3          	add	x31,x10,x30
    2268:	00e12223          	sw	x14,4(x2)
    226c:	00449593          	slli	x11,x9,0x4
    2270:	002a1293          	slli	x5,x20,0x2
    2274:	00000b13          	li	x22,0
    2278:	00000c13          	li	x24,0
    227c:	00000a93          	li	x21,0
    2280:	00000d93          	li	x27,0
    2284:	00f12623          	sw	x15,12(x2)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2288:	009a8ab3          	add	x21,x21,x9
    228c:	120c8863          	beqz	x25,23bc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1c8>
    2290:	00412783          	lw	x15,4(x2)
    2294:	002c1e93          	slli	x29,x24,0x2
    2298:	01db8eb3          	add	x29,x23,x29
    229c:	00fc09b3          	add	x19,x24,x15
    22a0:	00812783          	lw	x15,8(x2)
    22a4:	00299993          	slli	x19,x19,0x2
    22a8:	00f989b3          	add	x19,x19,x15
                boff = 0;
    22ac:	00000793          	li	x15,0
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    22b0:	155b7e63          	bgeu	x22,x21,240c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x218>
                        TC sum[F] = {{init}};
    22b4:	f0000153          	fmv.w.x	f2,x0
    22b8:	00f483b3          	add	x7,x9,x15
    22bc:	00748733          	add	x14,x9,x7
    22c0:	202101d3          	fmv.s	f3,f2
    22c4:	20210253          	fmv.s	f4,f2
    22c8:	202102d3          	fmv.s	f5,f2
    22cc:	20210353          	fmv.s	f6,f2
    22d0:	202103d3          	fmv.s	f7,f2
    22d4:	20210853          	fmv.s	f16,f2
    22d8:	202108d3          	fmv.s	f17,f2
    22dc:	00279793          	slli	x15,x15,0x2
    22e0:	00239693          	slli	x13,x7,0x2
    22e4:	00271713          	slli	x14,x14,0x2
    22e8:	00f407b3          	add	x15,x8,x15
    22ec:	00d406b3          	add	x13,x8,x13
    22f0:	00e40733          	add	x14,x8,x14
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    22f4:	00090613          	mv	x12,x18
                                        sum[f] += A[aoff] * BT[bofff];
    22f8:	01e70e33          	add	x28,x14,x30
    22fc:	00b78333          	add	x6,x15,x11
    2300:	00b688b3          	add	x17,x13,x11
    2304:	00b70833          	add	x16,x14,x11
    2308:	00578533          	add	x10,x15,x5
    230c:	00062787          	flw	f15,0(x12)
    2310:	0007a087          	flw	f1,0(x15)
    2314:	0006a007          	flw	f0,0(x13)
    2318:	00072507          	flw	f10,0(x14)
    231c:	000e2587          	flw	f11,0(x28)
    2320:	00032607          	flw	f12,0(x6)
    2324:	0008a687          	flw	f13,0(x17)
    2328:	00082707          	flw	f14,0(x16)
    232c:	00052e07          	flw	f28,0(x10)
    2330:	1017f0d3          	fmul.s	f1,f15,f1
    2334:	1007f053          	fmul.s	f0,f15,f0
    2338:	10a7f553          	fmul.s	f10,f15,f10
    233c:	10b7f5d3          	fmul.s	f11,f15,f11
    2340:	10c7f653          	fmul.s	f12,f15,f12
    2344:	10d7f6d3          	fmul.s	f13,f15,f13
    2348:	10e7f753          	fmul.s	f14,f15,f14
    234c:	11c7f7d3          	fmul.s	f15,f15,f28
    2350:	00460613          	addi	x12,x12,4
    2354:	0018f8d3          	fadd.s	f17,f17,f1
    2358:	00087853          	fadd.s	f16,f16,f0
    235c:	00a3f3d3          	fadd.s	f7,f7,f10
    2360:	00b37353          	fadd.s	f6,f6,f11
    2364:	00c2f2d3          	fadd.s	f5,f5,f12
    2368:	00d27253          	fadd.s	f4,f4,f13
    236c:	00e1f1d3          	fadd.s	f3,f3,f14
    2370:	00f17153          	fadd.s	f2,f2,f15
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    2374:	00478793          	addi	x15,x15,4
    2378:	00468693          	addi	x13,x13,4
    237c:	00470713          	addi	x14,x14,4
    2380:	f6cf9ce3          	bne	x31,x12,22f8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x104>
    2384:	00038793          	mv	x15,x7
                                C[coff + f] = sum[f];
    2388:	011ea027          	fsw	f17,0(x29)
    238c:	010ea227          	fsw	f16,4(x29)
    2390:	007ea427          	fsw	f7,8(x29)
    2394:	006ea627          	fsw	f6,12(x29)
    2398:	005ea827          	fsw	f5,16(x29)
    239c:	004eaa27          	fsw	f4,20(x29)
    23a0:	003eac27          	fsw	f3,24(x29)
    23a4:	002eae27          	fsw	f2,28(x29)
                        for (uint32_t f = 0; f < F; f++){
    23a8:	020e8e93          	addi	x29,x29,32
                        boff += incr;
    23ac:	014787b3          	add	x15,x15,x20
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    23b0:	f1d990e3          	bne	x19,x29,22b0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xbc>
    23b4:	00c12783          	lw	x15,12(x2)
    23b8:	00fc0c33          	add	x24,x24,x15
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    23bc:	001d8d93          	addi	x27,x27,1 # 3f000001 <_bsg_elf_vcache_size+0x3efe0001>
    23c0:	009b0b33          	add	x22,x22,x9
    23c4:	01e90933          	add	x18,x18,x30
    23c8:	01ef8fb3          	add	x31,x31,x30
    23cc:	ebbd1ee3          	bne	x26,x27,2288 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x94>
}
    23d0:	03c12403          	lw	x8,60(x2)
    23d4:	03812483          	lw	x9,56(x2)
    23d8:	03412903          	lw	x18,52(x2)
    23dc:	03012983          	lw	x19,48(x2)
    23e0:	02c12a03          	lw	x20,44(x2)
    23e4:	02812a83          	lw	x21,40(x2)
    23e8:	02412b03          	lw	x22,36(x2)
    23ec:	02012b83          	lw	x23,32(x2)
    23f0:	01c12c03          	lw	x24,28(x2)
    23f4:	01812c83          	lw	x25,24(x2)
    23f8:	01412d03          	lw	x26,20(x2)
    23fc:	01012d83          	lw	x27,16(x2)
    2400:	00000513          	li	x10,0
    2404:	04010113          	addi	x2,x2,64
    2408:	00008067          	ret
                        TC sum[F] = {{init}};
    240c:	f0000153          	fmv.w.x	f2,x0
    2410:	202101d3          	fmv.s	f3,f2
    2414:	20210253          	fmv.s	f4,f2
    2418:	202102d3          	fmv.s	f5,f2
    241c:	20210353          	fmv.s	f6,f2
    2420:	202103d3          	fmv.s	f7,f2
    2424:	20210853          	fmv.s	f16,f2
    2428:	202108d3          	fmv.s	f17,f2
    242c:	f5dff06f          	j	2388 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x194>

Disassembly of section .data.dram:

81000000 <_bsg_dram_d_start_addr>:
81000000:	3130                	fld	f12,96(x10)
81000002:	3332                	fld	f6,296(x2)
81000004:	3534                	fld	f13,104(x10)
81000006:	3736                	fld	f14,360(x2)
81000008:	3938                	fld	f14,112(x10)
8100000a:	6261                	lui	x4,0x18
8100000c:	66656463          	bltu	x10,x6,81000674 <_bsg_dram_d_end_addr+0x61c>
81000010:	6a696867          	0x6a696867
81000014:	6e6d6c6b          	0x6e6d6c6b
81000018:	7271706f          	j	81017f3e <_bsg_dram_d_end_addr+0x17ee6>
8100001c:	76757473          	csrrci	x8,0x767,10
81000020:	7a797877          	0x7a797877
81000024:	0000                	unimp
81000026:	0000                	unimp
81000028:	3130                	fld	f12,96(x10)
8100002a:	3332                	fld	f6,296(x2)
8100002c:	3534                	fld	f13,104(x10)
8100002e:	3736                	fld	f14,360(x2)
81000030:	3938                	fld	f14,112(x10)
81000032:	4241                	li	x4,16
81000034:	46454443          	fmadd.q	f8,f10,f4,f8,rmm
81000038:	4a494847          	fmsub.d	f16,f18,f4,f9,rmm
8100003c:	4e4d4c4b          	fnmsub.q	f24,f26,f4,f9,rmm
81000040:	5251504f          	fnmadd.d	f0,f2,f5,f10,unknown
81000044:	56555453          	0x56555453
81000048:	5a595857          	0x5a595857
8100004c:	0000                	unimp
8100004e:	0000                	unimp
81000050:	4e3c                	lw	x15,88(x12)
81000052:	4c55                	li	x24,21
81000054:	3e4c                	fld	f11,184(x12)
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
  li  x1, 0
       0:	024d                	addi	x4,x4,19
       2:	0000                	unimp
  li  x3, 0
       4:	008f0003          	lb	x0,8(x30)
  li  x4, 0
       8:	0000                	unimp
       a:	0101                	addi	x2,x2,0
  li  x5, 0
       c:	000d0efb          	0xd0efb
  li  x6, 0
      10:	0101                	addi	x2,x2,0
      12:	0101                	addi	x2,x2,0
  li  x7, 0
      14:	0000                	unimp
      16:	0100                	addi	x8,x2,128
  li  x8, 0
      18:	0000                	unimp
      1a:	2f01                	jal	72a <bsg_printf+0x25e>
  li  x9, 0
      1c:	6e6d                	lui	x28,0x1b
      1e:	2f74                	fld	f13,216(x14)
  li  x10,0
      20:	7375                	lui	x6,0xffffd
      22:	7265                	lui	x4,0xffff9
  li  x11,0
      24:	70732f73          	csrrs	x30,0x707,x6
  li  x12,0
      28:	6e69                	lui	x28,0x1a
      2a:	2f30                	fld	f12,88(x14)
  li  x13,0
      2c:	6f6e                	flw	f30,216(x2)
      2e:	625f 6361 756b      	0x756b6361625f
  li  x15,0
      34:	2f70                	fld	f12,216(x14)
      36:	7264                	flw	f9,100(x12)
  li  x16,0
      38:	6369                	lui	x6,0x1a
      3a:	6d68                	flw	f10,92(x10)
  li  x17,0
      3c:	2f646e6f          	jal	x28,46332 <_bsg_elf_vcache_size+0x26332>
  li  x18,0
      40:	6552                	flw	f10,20(x2)
      42:	72616573          	csrrsi	x10,0x726,2
  li  x19,0
      46:	722f6863          	bltu	x30,x2,776 <bsg_printf+0x2aa>
  li  x20,0
      4a:	7065                	c.lui	x0,0xffff9
  li  x21,0
      4c:	7469736f          	jal	x6,97792 <_bsg_elf_vcache_size+0x77792>
  li  x22,0
      50:	6569726f          	jal	x4,976a6 <_bsg_elf_vcache_size+0x776a6>
  li  x23,0
      54:	69672f73          	csrrs	x30,0x696,x14
  li  x24,0
      58:	2f74                	fld	f13,216(x14)
      5a:	7362                	flw	f6,56(x2)
  li  x25,0
      5c:	6c625f67          	0x6c625f67
  li  x26,0
      60:	6461                	lui	x8,0x18
      62:	7265                	lui	x4,0xffff9
  li  x27,0
      64:	6e75                	lui	x28,0x1d
      66:	656e                	flw	f10,216(x2)
  li  x28,0
      68:	2f72                	fld	f30,280(x2)
      6a:	7362                	flw	f6,56(x2)
  li  x29,0
      6c:	616d5f67          	0x616d5f67
  li  x30,0
      70:	796e                	flw	f18,248(x2)
      72:	65726f63          	bltu	x4,x23,6d0 <bsg_printf+0x204>
  li  x31,0
      76:	666f732f          	0x666f732f
  li t0, 0x00003000 # mstatus.FS
      7a:	7774                	flw	f13,108(x14)
  csrs mstatus, t0 # enable FPU
      7c:	7261                	lui	x4,0xffff8
      7e:	2f65                	jal	836 <bsg_printf+0x36a>
  fscsr x0
      80:	646d7073          	csrci	0x646,26
  li t0, 0
      84:	6f632f2f          	0x6f632f2f
  fcvt.s.w f0, x0 
      88:	6d6d                	lui	x26,0x1b
      8a:	002f6e6f          	jal	x28,f608c <_bsg_elf_vcache_size+0xd608c>
  fcvt.s.w f1, x0 
      8e:	6300                	flw	f8,0(x14)
  fcvt.s.w f2, x0 
      90:	7472                	flw	f8,60(x2)
      92:	532e                	lw	x6,232(x2)
  fcvt.s.w f3, x0 
      94:	0100                	addi	x8,x2,128
      96:	0000                	unimp
  fcvt.s.w f4, x0 
      98:	0000                	unimp
      9a:	0205                	addi	x4,x4,1
  fcvt.s.w f5, x0 
      9c:	0000                	unimp
      9e:	0000                	unimp
  fcvt.s.w f6, x0 
      a0:	0318                	addi	x14,x2,384
      a2:	0902                	c.slli64	x18
  fcvt.s.w f7, x0 
      a4:	0004                	0x4
      a6:	0301                	addi	x6,x6,0
  fcvt.s.w f8, x0 
      a8:	0901                	addi	x18,x18,0
      aa:	0004                	0x4
  fcvt.s.w f9, x0 
      ac:	0301                	addi	x6,x6,0
      ae:	0901                	addi	x18,x18,0
  fcvt.s.w f10,x0 
      b0:	0004                	0x4
      b2:	0301                	addi	x6,x6,0
  fcvt.s.w f11,x0 
      b4:	0901                	addi	x18,x18,0
      b6:	0004                	0x4
  fcvt.s.w f12,x0 
      b8:	0301                	addi	x6,x6,0
      ba:	0901                	addi	x18,x18,0
  fcvt.s.w f13,x0 
      bc:	0004                	0x4
      be:	0301                	addi	x6,x6,0
  fcvt.s.w f14,x0 
      c0:	0901                	addi	x18,x18,0
      c2:	0004                	0x4
  fcvt.s.w f15,x0 
      c4:	0301                	addi	x6,x6,0
      c6:	0901                	addi	x18,x18,0
  fcvt.s.w f16,x0 
      c8:	0004                	0x4
      ca:	0301                	addi	x6,x6,0
  fcvt.s.w f17,x0 
      cc:	0901                	addi	x18,x18,0
      ce:	0004                	0x4
  fcvt.s.w f18,x0 
      d0:	0301                	addi	x6,x6,0
      d2:	0901                	addi	x18,x18,0
  fcvt.s.w f19,x0 
      d4:	0004                	0x4
      d6:	0301                	addi	x6,x6,0
  fcvt.s.w f20,x0 
      d8:	0901                	addi	x18,x18,0
      da:	0004                	0x4
  fcvt.s.w f21,x0 
      dc:	0301                	addi	x6,x6,0
      de:	0901                	addi	x18,x18,0
  fcvt.s.w f22,x0 
      e0:	0004                	0x4
      e2:	0301                	addi	x6,x6,0
  fcvt.s.w f23,x0 
      e4:	0901                	addi	x18,x18,0
      e6:	0004                	0x4
  fcvt.s.w f24,x0 
      e8:	0301                	addi	x6,x6,0
      ea:	0901                	addi	x18,x18,0
  fcvt.s.w f25,x0 
      ec:	0004                	0x4
      ee:	0301                	addi	x6,x6,0
  fcvt.s.w f26,x0 
      f0:	0901                	addi	x18,x18,0
      f2:	0004                	0x4
  fcvt.s.w f27,x0 
      f4:	0301                	addi	x6,x6,0
      f6:	0901                	addi	x18,x18,0
  fcvt.s.w f28,x0 
      f8:	0004                	0x4
      fa:	0301                	addi	x6,x6,0
  fcvt.s.w f29,x0 
      fc:	0901                	addi	x18,x18,0
      fe:	0004                	0x4
  fcvt.s.w f30,x0 
     100:	0301                	addi	x6,x6,0
     102:	0901                	addi	x18,x18,0
  fcvt.s.w f31,x0 
     104:	0004                	0x4
     106:	0301                	addi	x6,x6,0
  la gp, _gp
     108:	0901                	addi	x18,x18,0
     10a:	0004                	0x4
     10c:	0301                	addi	x6,x6,0
     10e:	0901                	addi	x18,x18,0
  la  tp, _bsg_data_end_addr + 63
     110:	0004                	0x4
     112:	0301                	addi	x6,x6,0
     114:	0901                	addi	x18,x18,0
     116:	0004                	0x4
  and tp, tp, -64
     118:	0301                	addi	x6,x6,0
     11a:	0901                	addi	x18,x18,0
  la sp, _sp
     11c:	0004                	0x4
     11e:	0301                	addi	x6,x6,0
     120:	0901                	addi	x18,x18,0
     122:	0004                	0x4
  j main
     124:	0301                	addi	x6,x6,0
     126:	0901                	addi	x18,x18,0
  j 2b
     128:	0004                	0x4
     12a:	0301                	addi	x6,x6,0
  if (__bsg_id == 0) 
     12c:	0901                	addi	x18,x18,0
     12e:	0004                	0x4
     130:	0301                	addi	x6,x6,0
     132:	0901                	addi	x18,x18,0
     134:	0004                	0x4
     136:	0301                	addi	x6,x6,0
     *signal_ptr = cuda_finish_signal_val;     
     138:	0901                	addi	x18,x18,0
     13a:	0004                	0x4
     13c:	0301                	addi	x6,x6,0
     13e:	0901                	addi	x18,x18,0
     140:	0004                	0x4
     142:	0301                	addi	x6,x6,0
     144:	0901                	addi	x18,x18,0
     146:	0004                	0x4
     148:	0301                	addi	x6,x6,0
     14a:	0901                	addi	x18,x18,0
}
     14c:	0004                	0x4
     14e:	0301                	addi	x6,x6,0
  bsg_remote_store(0,0,bsg_x_v,0);
     150:	00040907          	0x40907
     154:	0301                	addi	x6,x6,0
     156:	0901                	addi	x18,x18,0
     158:	0004                	0x4
     15a:	0301                	addi	x6,x6,0
  bsg_remote_store(0,0,bsg_y_v,0);
     15c:	0901                	addi	x18,x18,0
     15e:	0004                	0x4
  bsg_remote_store(0,0,bsg_x_v,0);
     160:	0301                	addi	x6,x6,0
     162:	0901                	addi	x18,x18,0
  bsg_remote_store(0,0,bsg_y_v,0);
     164:	0004                	0x4
     166:	0301                	addi	x6,x6,0
  bsg_remote_store(0,0,bsg_x_v,0);
     168:	0902                	c.slli64	x18
     16a:	0004                	0x4
  bsg_remote_store(0,0,bsg_y_v,0);
     16c:	0301                	addi	x6,x6,0
     16e:	0901                	addi	x18,x18,0
     170:	0004                	0x4
     172:	0301                	addi	x6,x6,0
  bsg_wait_while(*bsg_x_v < 0);
     174:	0901                	addi	x18,x18,0
     176:	0004                	0x4
     178:	0301                	addi	x6,x6,0
     17a:	0901                	addi	x18,x18,0
  bsg_wait_while(*bsg_y_v < 0);
     17c:	0004                	0x4
     17e:	0301                	addi	x6,x6,0
     180:	0901                	addi	x18,x18,0
     182:	0004                	0x4
  if (!*bsg_x_v && !*bsg_y_v)
     184:	0301                	addi	x6,x6,0
     186:	0901                	addi	x18,x18,0
     188:	0004                	0x4
     18a:	0301                	addi	x6,x6,0
     18c:	0901                	addi	x18,x18,0
     18e:	0004                	0x4
     190:	0301                	addi	x6,x6,0
     192:	0901                	addi	x18,x18,0
        bsg_remote_store(x,y,bsg_x_v,x);
     194:	0004                	0x4
     196:	0301                	addi	x6,x6,0
        bsg_remote_store(x,y,bsg_y_v,y);
     198:	0901                	addi	x18,x18,0
     19a:	0004                	0x4
  grp_org_x_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_X );
     19c:	0301                	addi	x6,x6,0
     19e:	0901                	addi	x18,x18,0
     1a0:	0004                	0x4
     1a2:	0301                	addi	x6,x6,0
     1a4:	0901                	addi	x18,x18,0
     1a6:	0004                	0x4
     1a8:	0301                	addi	x6,x6,0
     1aa:	0901                	addi	x18,x18,0
     1ac:	0004                	0x4
     1ae:	0301                	addi	x6,x6,0
     1b0:	0901                	addi	x18,x18,0
     1b2:	0004                	0x4
     1b4:	0301                	addi	x6,x6,0
     1b6:	0901                	addi	x18,x18,0
     1b8:	0004                	0x4
     1ba:	0301                	addi	x6,x6,0
  __bsg_grp_org_x  = * grp_org_x_p;
     1bc:	0901                	addi	x18,x18,0
     1be:	0004                	0x4
  grp_org_y_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_Y );
     1c0:	0301                	addi	x6,x6,0
     1c2:	0901                	addi	x18,x18,0
     1c4:	0004                	0x4
     1c6:	0301                	addi	x6,x6,0
  __bsg_grp_org_x  = * grp_org_x_p;
     1c8:	0901                	addi	x18,x18,0
     1ca:	0004                	0x4
     1cc:	0301                	addi	x6,x6,0
     1ce:	0901                	addi	x18,x18,0
  __bsg_grp_org_y  = * grp_org_y_p;
     1d0:	0004                	0x4
     1d2:	0301                	addi	x6,x6,0
     1d4:	0901                	addi	x18,x18,0
     1d6:	0004                	0x4
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1d8:	0301                	addi	x6,x6,0
     1da:	0901                	addi	x18,x18,0
  __bsg_grp_org_y  = * grp_org_y_p;
     1dc:	0004                	0x4
     1de:	0301                	addi	x6,x6,0
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e0:	0901                	addi	x18,x18,0
     1e2:	0004                	0x4
  __bsg_grid_dim_x = 1;
     1e4:	0301                	addi	x6,x6,0
     1e6:	0901                	addi	x18,x18,0
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e8:	0004                	0x4
     1ea:	0301                	addi	x6,x6,0
  __bsg_grid_dim_x = 1;
     1ec:	0901                	addi	x18,x18,0
     1ee:	0004                	0x4
     1f0:	0301                	addi	x6,x6,0
     1f2:	0901                	addi	x18,x18,0
  __bsg_grid_dim_y = 1;
     1f4:	0004                	0x4
     1f6:	0301                	addi	x6,x6,0
     1f8:	0901                	addi	x18,x18,0
     1fa:	0004                	0x4
  __bsg_tile_group_id_x = 0;
     1fc:	0301                	addi	x6,x6,0
     1fe:	0901                	addi	x18,x18,0
     200:	0004                	0x4
     202:	0301                	addi	x6,x6,0
  __bsg_tile_group_id_y = 0;
     204:	0901                	addi	x18,x18,0
     206:	0004                	0x4
     208:	0301                	addi	x6,x6,0
     20a:	0901                	addi	x18,x18,0
  __bsg_tile_group_id = 0;
     20c:	0004                	0x4
     20e:	0301                	addi	x6,x6,0
     210:	0901                	addi	x18,x18,0
     212:	0004                	0x4
}
     214:	0301                	addi	x6,x6,0
     216:	0901                	addi	x18,x18,0
{
     218:	0004                	0x4
     21a:	0301                	addi	x6,x6,0
     21c:	0901                	addi	x18,x18,0
     21e:	0004                	0x4
     220:	0301                	addi	x6,x6,0
     222:	0901                	addi	x18,x18,0
  if (type & UPPERCASE)  dig = upper_digits;
     224:	0004                	0x4
     226:	0301                	addi	x6,x6,0
     228:	0905                	addi	x18,x18,1
     22a:	0004                	0x4
     22c:	0301                	addi	x6,x6,0
     22e:	0902                	c.slli64	x18
  if (type & LEFT) type &= ~ZEROPAD;
     230:	0008                	0x8
     232:	0301                	addi	x6,x6,0
  if (type & UPPERCASE)  dig = upper_digits;
     234:	0901                	addi	x18,x18,0
     236:	0008                	0x8
  if (type & LEFT) type &= ~ZEROPAD;
     238:	0301                	addi	x6,x6,0
     23a:	0904                	addi	x9,x2,144
     23c:	0004                	0x4
     23e:	0301                	addi	x6,x6,0
     240:	0008090b          	0x8090b
  if (type & SIGN)
     244:	0301                	addi	x6,x6,0
     246:	0905                	addi	x18,x18,1
  c = (type & ZEROPAD) ? '0' : ' ';
     248:	0004                	0x4
     24a:	0901                	addi	x18,x18,0
  if (type & SIGN)
     24c:	0004                	0x4
     24e:	0100                	addi	x8,x2,128
     250:	8001                	c.srli64	x8
     252:	03000003          	lb	x0,48(x0) # 30 <bsg_group_size+0x2f>
    if (num < 0)
     256:	bc00                	fsd	f8,56(x8)
    else if (type & PLUS)
     258:	0002                	c.slli64	x0
     25a:	0100                	addi	x8,x2,128
     25c:	fb01                	bnez	x14,16c <bsg_set_tile_x_y+0x1c>
     25e:	0d0e                	slli	x26,x26,0x3
    else if (type & SPACE)
     260:	0100                	addi	x8,x2,128
     262:	0101                	addi	x2,x2,0
  sign = 0;
     264:	0001                	nop
     266:	0000                	unimp
    else if (type & SPACE)
     268:	0001                	nop
     26a:	0100                	addi	x8,x2,128
      size--;
     26c:	746e6d2f          	0x746e6d2f
      sign = ' ';
     270:	6573752f          	0x6573752f
  if (type & HEX_PREP)
     274:	7372                	flw	f6,60(x2)
     276:	6970732f          	0x6970732f
    if (base == 16)
     27a:	306e                	fld	f0,248(x2)
     27c:	5f6f6e2f          	0x5f6f6e2f
      size--;
     280:	6162                	flw	f2,24(x2)
     282:	70756b63          	bltu	x10,x7,998 <bsg_printf+0x4cc>
     286:	6972642f          	0x6972642f
     28a:	6f6d6863          	bltu	x26,x22,97a <bsg_printf+0x4ae>
  if (num == 0)
     28e:	646e                	flw	f8,216(x2)
    tmp[i++] = '0';
     290:	7365522f          	0x7365522f
     294:	6165                	addi	x2,x2,112
     296:	6372                	flw	f6,28(x2)
     298:	2f68                	fld	f10,216(x14)
     29a:	6572                	flw	f10,28(x2)
     29c:	6f70                	flw	f12,92(x14)
     29e:	6f746973          	csrrsi	x18,0x6f7,8
     2a2:	6972                	flw	f18,28(x2)
     2a4:	7365                	lui	x6,0xffff9
     2a6:	7469672f          	0x7469672f
  if (i > precision) precision = i;
     2aa:	6773622f          	0x6773622f
     2ae:	625f 616c 6564      	0x6564616c625f
  size -= precision;
     2b4:	7572                	flw	f10,60(x2)
     2b6:	6e6e                	flw	f28,216(x2)
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     2b8:	7265                	lui	x4,0xffff9
     2ba:	6773622f          	0x6773622f
     2be:	6d5f 6e61 6379      	0x63796e616d5f
     2c4:	2f65726f          	jal	x4,575ba <_bsg_elf_vcache_size+0x375ba>
     2c8:	74666f73          	csrrsi	x30,0x746,12
     2cc:	65726177          	0x65726177
     2d0:	6773622f          	0x6773622f
     2d4:	6d5f 6e61 6379      	0x63796e616d5f
     2da:	5f65726f          	jal	x4,578d0 <_bsg_elf_vcache_size+0x378d0>
     2de:	696c                	flw	f11,84(x10)
  if (sign) *str++ = sign;
     2e0:	0062                	c.slli	x0,0x18
     2e2:	746e6d2f          	0x746e6d2f
     2e6:	6573752f          	0x6573752f
     2ea:	7372                	flw	f6,60(x2)
  if (type & HEX_PREP)
     2ec:	6970732f          	0x6970732f
    if (base == 8)
     2f0:	306e                	fld	f0,248(x2)
     2f2:	5f6f6e2f          	0x5f6f6e2f
     2f6:	6162                	flw	f2,24(x2)
    else if (base == 16)
     2f8:	70756b63          	bltu	x10,x7,a0e <bsg_printf+0x542>
     2fc:	6972642f          	0x6972642f
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     300:	6f6d6863          	bltu	x26,x22,9f0 <bsg_printf+0x524>
     304:	646e                	flw	f8,216(x2)
     306:	7365522f          	0x7365522f
     30a:	6165                	addi	x2,x2,112
     30c:	6372                	flw	f6,28(x2)
     30e:	2f68                	fld	f10,216(x14)
     310:	6572                	flw	f10,28(x2)
     312:	6f70                	flw	f12,92(x14)
     314:	6f746973          	csrrsi	x18,0x6f7,8
     318:	6972                	flw	f18,28(x2)
     31a:	7365                	lui	x6,0xffff9
     31c:	7469672f          	0x7469672f
     320:	6773622f          	0x6773622f
     324:	625f 616c 6564      	0x6564616c625f
     32a:	7572                	flw	f10,60(x2)
     32c:	6e6e                	flw	f28,216(x2)
     32e:	7265                	lui	x4,0xffff9
     330:	6773622f          	0x6773622f
     334:	6d5f 6e61 6379      	0x63796e616d5f
     33a:	2f65726f          	jal	x4,57630 <_bsg_elf_vcache_size+0x37630>
     33e:	74666f73          	csrrsi	x30,0x746,12
     342:	65726177          	0x65726177
     346:	6d70732f          	0x6d70732f
  while (i < precision--) *str++ = '0';
     34a:	2f64                	fld	f9,216(x14)
     34c:	6773622f          	0x6773622f
     350:	635f 6475 5f61      	0x5f616475635f
     356:	696c                	flw	f11,84(x10)
     358:	6574                	flw	f13,76(x10)
     35a:	725f 6e75 6974      	0x69746e75725f
     360:	656d                	lui	x10,0x1b
     362:	616d2f2f          	amoand.w	x30,x22,(x26)
  while (i-- > 0) *str++ = tmp[i];
     366:	6e69                	lui	x28,0x1a
  while (i < precision--) *str++ = '0';
     368:	2f00                	fld	f8,24(x14)
     36a:	6e6d                	lui	x28,0x1b
  while (i-- > 0) *str++ = tmp[i];
     36c:	2f74                	fld	f13,216(x14)
     36e:	7375                	lui	x6,0xffffd
     370:	7265                	lui	x4,0xffff9
     372:	70732f73          	csrrs	x30,0x707,x6
     376:	6e69                	lui	x28,0x1a
     378:	2f30                	fld	f12,88(x14)
     37a:	6f6e                	flw	f30,216(x2)
     37c:	625f 6361 756b      	0x756b6361625f
     382:	2f70                	fld	f12,216(x14)
     384:	7264                	flw	f9,100(x12)
     386:	6369                	lui	x6,0x1a
     388:	6d68                	flw	f10,92(x10)
     38a:	2f646e6f          	jal	x28,46680 <_bsg_elf_vcache_size+0x26680>
     38e:	6552                	flw	f10,20(x2)
     390:	72616573          	csrrsi	x10,0x726,2
     394:	722f6863          	bltu	x30,x2,ac4 <bsg_printf+0x5f8>
     398:	7065                	c.lui	x0,0xffff9
     39a:	7469736f          	jal	x6,97ae0 <_bsg_elf_vcache_size+0x77ae0>
  while (size-- > 0) *str++ = ' ';
     39e:	6569726f          	jal	x4,979f4 <_bsg_elf_vcache_size+0x779f4>
  while (i-- > 0) *str++ = tmp[i];
     3a2:	69672f73          	csrrs	x30,0x696,x14
  while (size-- > 0) *str++ = ' ';
     3a6:	2f74                	fld	f13,216(x14)
     3a8:	7362                	flw	f6,56(x2)
     3aa:	6c625f67          	0x6c625f67
     3ae:	6461                	lui	x8,0x18
     3b0:	7265                	lui	x4,0xffff9
     3b2:	6e75                	lui	x28,0x1d
     3b4:	656e                	flw	f10,216(x2)
     3b6:	2f72                	fld	f30,280(x2)
     3b8:	7362                	flw	f6,56(x2)
     3ba:	616d5f67          	0x616d5f67
     3be:	796e                	flw	f18,248(x2)
     3c0:	65726f63          	bltu	x4,x23,a1e <bsg_printf+0x552>
     3c4:	666f732f          	0x666f732f
     3c8:	7774                	flw	f13,108(x14)
     3ca:	7261                	lui	x4,0xffff8
     3cc:	2f65                	jal	b84 <bsg_printf+0x6b8>
     3ce:	6972                	flw	f18,28(x2)
     3d0:	2d766373          	csrrsi	x6,0x2d7,12
     3d4:	6f74                	flw	f13,92(x14)
     3d6:	2f736c6f          	jal	x24,36ecc <_bsg_elf_vcache_size+0x16ecc>
}
     3da:	6972                	flw	f18,28(x2)
     3dc:	2d766373          	csrrsi	x6,0x2d7,12
     3e0:	6e69                	lui	x28,0x1a
     3e2:	6c617473          	csrrci	x8,0x6c6,2
     3e6:	2f6c                	fld	f11,216(x14)
  char *dig = digits;
     3e8:	6972                	flw	f18,28(x2)
     3ea:	33766373          	csrrsi	x6,mhpmevent23,12
  if (type & LEFT) type &= ~ZEROPAD;
     3ee:	2d32                	fld	f26,264(x2)
  char *dig = digits;
     3f0:	6e75                	lui	x28,0x1d
     3f2:	776f6e6b          	0x776f6e6b
  if (type & LEFT) type &= ~ZEROPAD;
     3f6:	2d6e                	fld	f26,216(x2)
  c = (type & ZEROPAD) ? '0' : ' ';
     3f8:	6c65                	lui	x24,0x19
     3fa:	2d66                	fld	f26,88(x2)
     3fc:	7264                	flw	f9,100(x12)
     3fe:	6d61                	lui	x26,0x18
     400:	7366                	flw	f6,120(x2)
     402:	636e692f          	0x636e692f
     406:	756c                	flw	f11,108(x10)
  if (type & SIGN)
     408:	6564                	flw	f9,76(x10)
     40a:	63616d2f          	0x63616d2f
     40e:	6968                	flw	f10,84(x10)
     410:	656e                	flw	f10,216(x2)
     412:	2f00                	fld	f8,24(x14)
  sign = 0;
     414:	6e6d                	lui	x28,0x1b
     416:	2f74                	fld	f13,216(x14)
     418:	7375                	lui	x6,0xffffd
     41a:	7265                	lui	x4,0xffff9
      num = -num;
     41c:	70732f73          	csrrs	x30,0x707,x6
      size--;
     420:	6e69                	lui	x28,0x1a
     422:	2f30                	fld	f12,88(x14)
      sign = '-';
     424:	6f6e                	flw	f30,216(x2)
     426:	625f 6361 756b      	0x756b6361625f
  if (base < 2 || base > 36) return 0;
     42c:	2f70                	fld	f12,216(x14)
     42e:	7264                	flw	f9,100(x12)
     430:	6369                	lui	x6,0x1a
     432:	6d68                	flw	f10,92(x10)
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     434:	2f646e6f          	jal	x28,4672a <_bsg_elf_vcache_size+0x2672a>
     438:	6552                	flw	f10,20(x2)
     43a:	72616573          	csrrsi	x10,0x726,2
     43e:	722f6863          	bltu	x30,x2,b6e <bsg_printf+0x6a2>
     442:	7065                	c.lui	x0,0xffff9
     444:	7469736f          	jal	x6,97b8a <_bsg_elf_vcache_size+0x77b8a>
     448:	6569726f          	jal	x4,97a9e <_bsg_elf_vcache_size+0x77a9e>
     44c:	69672f73          	csrrs	x30,0x696,x14
      num = ((unsigned long) num) / (unsigned) base;
     450:	2f74                	fld	f13,216(x14)
     452:	7362                	flw	f6,56(x2)
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     454:	6c625f67          	0x6c625f67
    while (num != 0)
     458:	6461                	lui	x8,0x18
     45a:	7265                	lui	x4,0xffff9
     45c:	6e75                	lui	x28,0x1d
     45e:	656e                	flw	f10,216(x2)
      size--;
     460:	2f72                	fld	f30,280(x2)
     462:	7362                	flw	f6,56(x2)
      sign = '+';
     464:	616d5f67          	0x616d5f67
     468:	796e                	flw	f18,248(x2)
     46a:	65726f63          	bltu	x4,x23,ac8 <bsg_printf+0x5fc>
      *str++ = '0';
     46e:	666f732f          	0x666f732f
     472:	7774                	flw	f13,108(x14)
      *str++ = digits[33];
     474:	7261                	lui	x4,0xffff8
     476:	2f65                	jal	c2e <bsg_printf+0x762>
     478:	6972                	flw	f18,28(x2)
     47a:	2d766373          	csrrsi	x6,0x2d7,12
     47e:	6f74                	flw	f13,92(x14)
     480:	2f736c6f          	jal	x24,36f76 <_bsg_elf_vcache_size+0x16f76>
      size -= 2;
     484:	6972                	flw	f18,28(x2)
     486:	2d766373          	csrrsi	x6,0x2d7,12
     48a:	6e69                	lui	x28,0x1a
      *str++ = '0';
     48c:	6c617473          	csrrci	x8,0x6c6,2
     490:	2f6c                	fld	f11,216(x14)
     492:	6972                	flw	f18,28(x2)
     494:	33766373          	csrrsi	x6,mhpmevent23,12
     498:	2d32                	fld	f26,264(x2)
     49a:	6e75                	lui	x28,0x1d
  while (i < precision--) *str++ = '0';
     49c:	776f6e6b          	0x776f6e6b
     4a0:	2d6e                	fld	f26,216(x2)
     4a2:	6c65                	lui	x24,0x19
     4a4:	2d66                	fld	f26,88(x2)
     4a6:	7264                	flw	f9,100(x12)
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     4a8:	6d61                	lui	x26,0x18
     4aa:	7366                	flw	f6,120(x2)
     4ac:	636e692f          	0x636e692f
     4b0:	756c                	flw	f11,108(x10)
     4b2:	6564                	flw	f9,76(x10)
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     4b4:	7379732f          	0x7379732f
     4b8:	0000                	unimp
     4ba:	7362                	flw	f6,56(x2)
     4bc:	75635f67          	0x75635f67
bsg_putchar( c );
     4c0:	6164                	flw	f9,68(x10)
     4c2:	6c5f 7469 5f65      	0x5f6574696c5f
}
     4c8:	7572                	flw	f10,60(x2)
     4ca:	746e                	flw	f8,248(x2)
{
     4cc:	6d69                	lui	x26,0x1a
     4ce:	2e65                	jal	886 <bsg_printf+0x3ba>
     4d0:	0068                	addi	x10,x2,12
     4d2:	0001                	nop
     4d4:	6d00                	flw	f8,24(x10)
     4d6:	6961                	lui	x18,0x18
     4d8:	2e6e                	fld	f28,216(x2)
     4da:	00020063          	beqz	x4,4da <bsg_printf+0xe>
     4de:	6200                	flw	f8,0(x12)
     4e0:	735f6773          	csrrsi	x14,0x735,30
     4e4:	7465                	lui	x8,0xffff9
     4e6:	745f 6c69 5f65      	0x5f656c69745f
     4ec:	5f78                	lw	x14,124(x14)
     4ee:	2e79                	jal	88c <bsg_printf+0x3c0>
     4f0:	0068                	addi	x10,x2,12
     4f2:	0001                	nop
     4f4:	5f00                	lw	x8,56(x14)
     4f6:	6564                	flw	f9,76(x10)
     4f8:	6166                	flw	f2,88(x2)
     4fa:	6c75                	lui	x24,0x1d
     4fc:	5f74                	lw	x13,124(x14)
     4fe:	7974                	flw	f13,116(x10)
     500:	6570                	flw	f12,76(x10)
     502:	00682e73          	csrrs	x28,0x6,x16
     506:	5f000003          	lb	x0,1520(x0) # 5f0 <bsg_printf+0x124>
     50a:	69647473          	csrrci	x8,0x696,8
     50e:	746e                	flw	f8,248(x2)
     510:	682e                	flw	f16,200(x2)
     512:	0400                	addi	x8,x2,512
     514:	0000                	unimp
     516:	0500                	addi	x8,x2,640
  for (str = buf; *fmt; fmt++)
     518:	0001                	nop
     51a:	0205                	addi	x4,x4,1
  va_start(args, fmt);
     51c:	012c                	addi	x11,x2,136
     51e:	0000                	unimp
     520:	0100c403          	lbu	x8,16(x1)
  for (str = buf; *fmt; fmt++)
     524:	0305                	addi	x6,x6,1
     526:	00090103          	lb	x2,0(x18) # 18000 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x15e0c>
     52a:	0100                	addi	x8,x2,128
     52c:	1005                	c.nop	-31
     52e:	0306                	slli	x6,x6,0x1
     530:	0900                	addi	x8,x2,144
     532:	0000                	unimp
     534:	0501                	addi	x10,x10,0
     536:	0306                	slli	x6,x6,0x1
     538:	0900                	addi	x8,x2,144
     53a:	0004                	0x4
     53c:	0601                	addi	x12,x12,0
     53e:	08090203          	lb	x4,128(x18)
     542:	0100                	addi	x8,x2,128
     544:	00090103          	lb	x2,0(x18)
     548:	0100                	addi	x8,x2,128
     54a:	1205                	addi	x4,x4,-31
    if (*fmt != '%')
     54c:	0306                	slli	x6,x6,0x1
     54e:	0900                	addi	x8,x2,144
     550:	0000                	unimp
     552:	0501                	addi	x10,x10,0
      *str++ = *fmt;
     554:	0301                	addi	x6,x6,0
     556:	0902                	c.slli64	x18
      continue;
     558:	0014                	0x14
     55a:	0901                	addi	x18,x18,0
      *str++ = *fmt;
     55c:	0004                	0x4
     55e:	0100                	addi	x8,x2,128
      continue;
     560:	0401                	addi	x8,x8,0
     562:	0502                	c.slli64	x10
  for (str = buf; *fmt; fmt++)
     564:	0001                	nop
     566:	0205                	addi	x4,x4,1
  *str = '\0';
     568:	18e0                	addi	x8,x2,124
     56a:	0000                	unimp
    asm volatile ("amoswap.w.aq %[result], %[swap_val], 0(%[addr]);"  \
     56c:	0518                	addi	x14,x2,640
     56e:	0309                	addi	x6,x6,2
     570:	0901                	addi	x18,x18,0
     572:	0000                	unimp
     574:	0301                	addi	x6,x6,0
     576:	0900                	addi	x8,x2,144
    }while( result == bsg_mutex_lock_fail);
     578:	00b0                	addi	x12,x2,72
     57a:	0301                	addi	x6,x6,0
  while (*p) {
     57c:	0900                	addi	x8,x2,144
     57e:	0020                	addi	x8,x2,8
     580:	0401                	addi	x8,x8,0
     582:	0501                	addi	x10,x10,0
     584:	093e0303          	lb	x6,147(x28) # 1d093 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1ae9f>
  p=buf;
     588:	0000                	unimp
     58a:	0501                	addi	x10,x10,0
bsg_putchar( c );
     58c:	0610                	addi	x12,x2,768
     58e:	00090003          	lb	x0,0(x18)
     592:	0100                	addi	x8,x2,128
     594:	0605                	addi	x12,x12,1
     596:	04090003          	lb	x0,64(x18)
  while (*p) {
     59a:	0100                	addi	x8,x2,128
     59c:	0306                	slli	x6,x6,0x1
     59e:	0902                	c.slli64	x18
	p++;
     5a0:	0008                	0x8
     5a2:	0301                	addi	x6,x6,0
  while (*p) {
     5a4:	0901                	addi	x18,x18,0
     5a6:	0000                	unimp
    asm volatile ("amoswap.w.rl x0, x0, 0(%[addr]);"   \
     5a8:	0501                	addi	x10,x10,0
     5aa:	0612                	slli	x12,x12,0x4
     5ac:	00090003          	lb	x0,0(x18)
}
     5b0:	0100                	addi	x8,x2,128
     5b2:	0204                	addi	x9,x2,256
     5b4:	0905                	addi	x18,x18,1
     5b6:	0306                	slli	x6,x6,0x1
     5b8:	14097fbf 22050100 	0x2205010014097fbf
     5c0:	04090003          	lb	x0,64(x18)
     5c4:	0100                	addi	x8,x2,128
     5c6:	0105                	addi	x2,x2,1
     5c8:	0306                	slli	x6,x6,0x1
     5ca:	0901                	addi	x18,x18,0
     5cc:	0000                	unimp
     5ce:	0901                	addi	x18,x18,0
     5d0:	0008                	0x8
     5d2:	0100                	addi	x8,x2,128
     5d4:	f601                	bnez	x12,4dc <bsg_printf+0x10>
     5d6:	0002                	c.slli64	x0
     5d8:	0300                	addi	x8,x2,384
     5da:	b100                	fsd	f8,32(x10)
     5dc:	0000                	unimp
     5de:	0100                	addi	x8,x2,128
     5e0:	fb01                	bnez	x14,4f0 <bsg_printf+0x24>
     5e2:	0d0e                	slli	x26,x26,0x3
    flags = 0;
     5e4:	0100                	addi	x8,x2,128
     5e6:	0101                	addi	x2,x2,0
     5e8:	0001                	nop
     5ea:	0000                	unimp
    switch (*fmt)
     5ec:	0001                	nop
     5ee:	0100                	addi	x8,x2,128
    fmt++; // This also skips first '%'
     5f0:	746e6d2f          	0x746e6d2f
    switch (*fmt)
     5f4:	6573752f          	0x6573752f
     5f8:	7372                	flw	f6,60(x2)
     5fa:	6970732f          	0x6970732f
     5fe:	306e                	fld	f0,248(x2)
     600:	5f6f6e2f          	0x5f6f6e2f
     604:	6162                	flw	f2,24(x2)
     606:	70756b63          	bltu	x10,x7,d1c <bsg_printf+0x850>
     60a:	6972642f          	0x6972642f
     60e:	6f6d6863          	bltu	x26,x22,cfe <bsg_printf+0x832>
    if (is_digit(*fmt))
     612:	646e                	flw	f8,216(x2)
     614:	7365522f          	0x7365522f
     618:	6165                	addi	x2,x2,112
     61a:	6372                	flw	f6,28(x2)
     61c:	2f68                	fld	f10,216(x14)
     61e:	6572                	flw	f10,28(x2)
    else if (*fmt == '*')
     620:	6f70                	flw	f12,92(x14)
     622:	6f746973          	csrrsi	x18,0x6f7,8
    field_width = -1;
     626:	6972                	flw	f18,28(x2)
    else if (*fmt == '*')
     628:	7365                	lui	x6,0xffff9
     62a:	7469672f          	0x7469672f
    if (*fmt == '.')
     62e:	6773622f          	0x6773622f
    precision = -1;
     632:	625f 616c 6564      	0x6564616c625f
    if (*fmt == 'l' || *fmt == 'L')
     638:	7572                	flw	f10,60(x2)
     63a:	6e6e                	flw	f28,216(x2)
     63c:	7265                	lui	x4,0xffff9
     63e:	6773622f          	0x6773622f
     642:	6d5f 6e61 6379      	0x63796e616d5f
    switch (*fmt)
     648:	2f65726f          	jal	x4,5793e <_bsg_elf_vcache_size+0x3793e>
     64c:	74666f73          	csrrsi	x30,0x746,12
     650:	65726177          	0x65726177
     654:	6773622f          	0x6773622f
     658:	6d5f 6e61 6379      	0x63796e616d5f
     65e:	5f65726f          	jal	x4,57c54 <_bsg_elf_vcache_size+0x37c54>
     662:	696c                	flw	f11,84(x10)
      case '0': flags |= ZEROPAD; goto repeat;
     664:	0062                	c.slli	x0,0x18
     666:	6200                	flw	f8,0(x12)
  for (str = buf; *fmt; fmt++)
     668:	735f6773          	csrrsi	x14,0x735,30
     66c:	7465                	lui	x8,0xffff9
     66e:	745f 6c69 5f65      	0x5f656c69745f
     674:	5f78                	lw	x14,124(x14)
     676:	2e79                	jal	a14 <bsg_printf+0x548>
     678:	00010063          	beqz	x2,678 <bsg_printf+0x1ac>
      case '+': flags |= PLUS; goto repeat;
     67c:	6200                	flw	f8,0(x12)
     67e:	6d5f6773          	csrrsi	x14,0x6d5,30
  for (str = buf; *fmt; fmt++)
     682:	6e61                	lui	x28,0x18
     684:	6379                	lui	x6,0x1e
     686:	2e65726f          	jal	x4,5796c <_bsg_elf_vcache_size+0x3796c>
      case '#': flags |= HEX_PREP; goto repeat;
     68a:	0068                	addi	x10,x2,12
  for (str = buf; *fmt; fmt++)
     68c:	0001                	nop
     68e:	0000                	unimp
     690:	0105                	addi	x2,x2,1
     692:	0500                	addi	x8,x2,640
      case ' ': flags |= SPACE; goto repeat;
     694:	5002                	0x5002
     696:	0001                	nop
  for (str = buf; *fmt; fmt++)
     698:	0300                	addi	x8,x2,384
     69a:	03050113          	addi	x2,x10,48 # 1b030 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x18e3c>
     69e:	00090103          	lb	x2,0(x18)
    switch (*fmt)
     6a2:	0100                	addi	x8,x2,128
     6a4:	00090103          	lb	x2,0(x18)
      fmt++;
     6a8:	0100                	addi	x8,x2,128
     6aa:	00090203          	lb	x4,0(x18)
    switch (*fmt)
     6ae:	0100                	addi	x8,x2,128
     6b0:	00090103          	lb	x2,0(x18)
     6b4:	0100                	addi	x8,x2,128
     6b6:	00090303          	lb	x6,0(x18)
     6ba:	0100                	addi	x8,x2,128
     6bc:	00090003          	lb	x0,0(x18)
     6c0:	0100                	addi	x8,x2,128
     6c2:	0306                	slli	x6,x6,0x1
     6c4:	0901                	addi	x18,x18,0
     6c6:	000c                	0xc
     6c8:	0301                	addi	x6,x6,0
     6ca:	097f                	0x97f
     6cc:	0004                	0x4
     6ce:	0301                	addi	x6,x6,0
     6d0:	0901                	addi	x18,x18,0
     6d2:	0004                	0x4
      fmt++;
     6d4:	0301                	addi	x6,x6,0
     6d6:	097f                	0x97f
        if (*fmt != '%') *str++ = '%';
     6d8:	0004                	0x4
     6da:	0601                	addi	x12,x12,0
     6dc:	04090003          	lb	x0,64(x18)
     6e0:	0100                	addi	x8,x2,128
     6e2:	00090103          	lb	x2,0(x18)
     6e6:	0100                	addi	x8,x2,128
        if (*fmt)
     6e8:	00090003          	lb	x0,0(x18)
     6ec:	0100                	addi	x8,x2,128
     6ee:	0200                	addi	x8,x2,256
        if (*fmt != '%') *str++ = '%';
     6f0:	0104                	addi	x9,x2,128
     6f2:	08090003          	lb	x0,128(x18)
     6f6:	0100                	addi	x8,x2,128
      if (is_digit(*fmt))
     6f8:	0200                	addi	x8,x2,256
     6fa:	0104                	addi	x9,x2,128
     6fc:	00090203          	lb	x4,0(x18)
      ++fmt;    
     700:	0100                	addi	x8,x2,128
     702:	0200                	addi	x8,x2,256
      if (is_digit(*fmt))
     704:	0104                	addi	x9,x2,128
     706:	00090003          	lb	x0,0(x18)
     70a:	0100                	addi	x8,x2,128
     70c:	0200                	addi	x8,x2,256
     70e:	0104                	addi	x9,x2,128
      else if (*fmt == '*')
     710:	00090003          	lb	x0,0(x18)
     714:	0100                	addi	x8,x2,128
     716:	0200                	addi	x8,x2,256
      ++fmt;    
     718:	0104                	addi	x9,x2,128
     71a:	08090103          	lb	x2,128(x18)
      if (precision < 0) precision = 0;
     71e:	0100                	addi	x8,x2,128
     720:	0200                	addi	x8,x2,256
     722:	0104                	addi	x9,x2,128
  int i = 0;
     724:	00090003          	lb	x0,0(x18)
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     728:	0100                	addi	x8,x2,128
     72a:	0200                	addi	x8,x2,256
     72c:	0104                	addi	x9,x2,128
     72e:	00090003          	lb	x0,0(x18)
     732:	0100                	addi	x8,x2,128
     734:	08090203          	lb	x4,128(x18)
     738:	0100                	addi	x8,x2,128
     73a:	0805                	addi	x16,x16,1
     73c:	0306                	slli	x6,x6,0x1
     73e:	0900                	addi	x8,x2,144
     740:	0000                	unimp
     742:	0501                	addi	x10,x10,0
     744:	0306                	slli	x6,x6,0x1
     746:	0900                	addi	x8,x2,144
     748:	0004                	0x4
     74a:	0501                	addi	x10,x10,0
     74c:	0015                	c.nop	5
     74e:	0402                	c.slli64	x8
     750:	0301                	addi	x6,x6,0
     752:	0900                	addi	x8,x2,144
     754:	0004                	0x4
     756:	0501                	addi	x10,x10,0
      field_width = va_arg(args, int);
     758:	0011                	c.nop	4
     75a:	0402                	c.slli64	x8
     75c:	0301                	addi	x6,x6,0
     75e:	0900                	addi	x8,x2,144
      fmt++;
     760:	0004                	0x4
     762:	0501                	addi	x10,x10,0
      field_width = va_arg(args, int);
     764:	0015                	c.nop	5
     766:	0402                	c.slli64	x8
      if (field_width < 0)
     768:	0601                	addi	x12,x12,0
     76a:	04090103          	lb	x2,64(x18)
        field_width = -field_width;
     76e:	0100                	addi	x8,x2,128
        flags |= LEFT;
     770:	1705                	addi	x14,x14,-31
     772:	0200                	addi	x8,x2,256
     774:	0104                	addi	x9,x2,128
     776:	00090103          	lb	x2,0(x18)
    if (qualifier == 'l')
     77a:	0100                	addi	x8,x2,128
        base = 16;
     77c:	0905                	addi	x18,x18,1
     77e:	0200                	addi	x8,x2,256
      num = va_arg(args, unsigned int);
     780:	0104                	addi	x9,x2,128
     782:	00090203          	lb	x4,0(x18)
     786:	0100                	addi	x8,x2,128
    str = number(str, num, base, field_width, precision, flags);
     788:	0200                	addi	x8,x2,256
     78a:	0104                	addi	x9,x2,128
     78c:	00090003          	lb	x0,0(x18)
     790:	0100                	addi	x8,x2,128
     792:	0200                	addi	x8,x2,256
  for (str = buf; *fmt; fmt++)
     794:	0104                	addi	x9,x2,128
     796:	04090003          	lb	x0,64(x18)
     79a:	0100                	addi	x8,x2,128
    if (qualifier == 'l')
     79c:	0200                	addi	x8,x2,256
     79e:	0104                	addi	x9,x2,128
    if (*fmt == 'l' || *fmt == 'L')
     7a0:	00090103          	lb	x2,0(x18)
     7a4:	0100                	addi	x8,x2,128
     7a6:	0200                	addi	x8,x2,256
      fmt++;
     7a8:	0104                	addi	x9,x2,128
     7aa:	00090003          	lb	x0,0(x18)
        s = va_arg(args, char *);
     7ae:	0100                	addi	x8,x2,128
     7b0:	0200                	addi	x8,x2,256
     7b2:	0104                	addi	x9,x2,128
        if (!s) s = "<NULL>";
     7b4:	04090003          	lb	x0,64(x18)
  for (sc = s; *sc != '\0' && count--; ++sc);
     7b8:	0100                	addi	x8,x2,128
     7ba:	2805                	jal	7ea <bsg_printf+0x31e>
     7bc:	0200                	addi	x8,x2,256
     7be:	0104                	addi	x9,x2,128
     7c0:	00097d03          	0x97d03
     7c4:	0100                	addi	x8,x2,128
     7c6:	1705                	addi	x14,x14,-31
     7c8:	0200                	addi	x8,x2,256
     7ca:	0104                	addi	x9,x2,128
     7cc:	00090003          	lb	x0,0(x18)
     7d0:	0100                	addi	x8,x2,128
     7d2:	1505                	addi	x10,x10,-31
     7d4:	0200                	addi	x8,x2,256
     7d6:	0104                	addi	x9,x2,128
     7d8:	00097f03          	0x97f03
     7dc:	0100                	addi	x8,x2,128
     7de:	0305                	addi	x6,x6,1
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e0:	00090703          	lb	x14,0(x18)
  return sc - s;
     7e4:	0100                	addi	x8,x2,128
     7e6:	1105                	addi	x2,x2,-31
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e8:	0306                	slli	x6,x6,0x1
     7ea:	0900                	addi	x8,x2,144
        for (i = 0; i < len; ++i) *str++ = *s++;
     7ec:	0000                	unimp
     7ee:	0501                	addi	x10,x10,0
     7f0:	01030603          	lb	x12,16(x6) # 1e010 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1be1c>
     7f4:	2009                	jal	7f6 <bsg_printf+0x32a>
     7f6:	0100                	addi	x8,x2,128
     7f8:	1605                	addi	x12,x12,-31
     7fa:	0306                	slli	x6,x6,0x1
     7fc:	0902                	c.slli64	x18
     7fe:	0000                	unimp
     800:	0501                	addi	x10,x10,0
     802:	0311                	addi	x6,x6,4
     804:	097e                	slli	x18,x18,0x1f
     806:	0004                	0x4
     808:	0501                	addi	x10,x10,0
     80a:	02030603          	lb	x12,32(x6)
     80e:	0809                	addi	x16,x16,2
        while (len < field_width--) *str++ = ' ';
     810:	0100                	addi	x8,x2,128
     812:	1405                	addi	x8,x8,-31
     814:	0306                	slli	x6,x6,0x1
     816:	0900                	addi	x8,x2,144
     818:	0000                	unimp
     81a:	0501                	addi	x10,x10,0
     81c:	01030603          	lb	x12,16(x6)
     820:	0809                	addi	x16,x16,2
     822:	0100                	addi	x8,x2,128
     824:	1605                	addi	x12,x12,-31
     826:	0306                	slli	x6,x6,0x1
     828:	0900                	addi	x8,x2,144
     82a:	0000                	unimp
     82c:	0501                	addi	x10,x10,0
     82e:	0314                	addi	x13,x2,384
     830:	0900                	addi	x8,x2,144
     832:	0004                	0x4
  for (str = buf; *fmt; fmt++)
     834:	0501                	addi	x10,x10,0
     836:	0324                	addi	x9,x2,392
     838:	0901                	addi	x18,x18,0
     83a:	0004                	0x4
      fmt++;
     83c:	0501                	addi	x10,x10,0
     83e:	0314                	addi	x13,x2,384
        if (field_width == -1)
     840:	097f                	0x97f
     842:	0004                	0x4
     844:	0501                	addi	x10,x10,0
     846:	01030603          	lb	x12,16(x6)
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
     84a:	0409                	addi	x8,x8,2
     84c:	0100                	addi	x8,x2,128
     84e:	0c05                	addi	x24,x24,1
     850:	0306                	slli	x6,x6,0x1
     852:	0900                	addi	x8,x2,144
     854:	0000                	unimp
     856:	0501                	addi	x10,x10,0
     858:	0314                	addi	x13,x2,384
     85a:	0901                	addi	x18,x18,0
        continue;
     85c:	0004                	0x4
     85e:	0501                	addi	x10,x10,0
  for (str = buf; *fmt; fmt++)
     860:	030c                	addi	x11,x2,384
     862:	097f                	0x97f
     864:	0004                	0x4
     866:	0501                	addi	x10,x10,0
    if (qualifier == 'l')
     868:	01030603          	lb	x12,16(x6)
        base = 8;
     86c:	0409                	addi	x8,x8,2
     86e:	0100                	addi	x8,x2,128
     870:	1405                	addi	x8,x8,-31
     872:	0306                	slli	x6,x6,0x1
        flags |= SIGN;
     874:	0900                	addi	x8,x2,144
     876:	0000                	unimp
    if (qualifier == 'l')
     878:	0501                	addi	x10,x10,0
     87a:	01030603          	lb	x12,16(x6)
    base = 10;
     87e:	0809                	addi	x16,x16,2
     880:	0100                	addi	x8,x2,128
     882:	1405                	addi	x8,x8,-31
      fmt++;
     884:	0306                	slli	x6,x6,0x1
     886:	0900                	addi	x8,x2,144
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     888:	0000                	unimp
     88a:	0501                	addi	x10,x10,0
     88c:	01030603          	lb	x12,16(x6)
     890:	0809                	addi	x16,x16,2
     892:	0100                	addi	x8,x2,128
        *str++ = (unsigned char) va_arg(args, int);
     894:	1905                	addi	x18,x18,-31
     896:	0306                	slli	x6,x6,0x1
     898:	0900                	addi	x8,x2,144
     89a:	0000                	unimp
     89c:	0501                	addi	x10,x10,0
     89e:	01030603          	lb	x12,16(x6)
     8a2:	0809                	addi	x16,x16,2
     8a4:	0100                	addi	x8,x2,128
     8a6:	1905                	addi	x18,x18,-31
        while (--field_width > 0) *str++ = ' ';
     8a8:	0306                	slli	x6,x6,0x1
     8aa:	0900                	addi	x8,x2,144
     8ac:	0000                	unimp
     8ae:	0501                	addi	x10,x10,0
        *str++ = (unsigned char) va_arg(args, int);
     8b0:	01030603          	lb	x12,16(x6)
        while (--field_width > 0) *str++ = ' ';
     8b4:	0809                	addi	x16,x16,2
     8b6:	0100                	addi	x8,x2,128
     8b8:	1705                	addi	x14,x14,-31
     8ba:	0306                	slli	x6,x6,0x1
     8bc:	0900                	addi	x8,x2,144
     8be:	0000                	unimp
     8c0:	0501                	addi	x10,x10,0
     8c2:	0301                	addi	x6,x6,0
     8c4:	0901                	addi	x18,x18,0
     8c6:	0008                	0x8
     8c8:	0901                	addi	x18,x18,0
     8ca:	0004                	0x4
     8cc:	0100                	addi	x8,x2,128
     8ce:	3301                	jal	5ce <bsg_printf+0x102>
  for (str = buf; *fmt; fmt++)
     8d0:	0018                	0x18
     8d2:	0300                	addi	x8,x2,384
     8d4:	7600                	flw	f8,40(x12)
     8d6:	0001                	nop
        flags |= UPPERCASE;
     8d8:	0100                	addi	x8,x2,128
     8da:	fb01                	bnez	x14,7ea <bsg_printf+0x31e>
    if (qualifier == 'l')
     8dc:	0d0e                	slli	x26,x26,0x3
     8de:	0100                	addi	x8,x2,128
        base = 16;
     8e0:	0101                	addi	x2,x2,0
     8e2:	0001                	nop
     8e4:	0000                	unimp
     8e6:	0001                	nop
        flags |= UPPERCASE;
     8e8:	0100                	addi	x8,x2,128
     8ea:	746e6d2f          	0x746e6d2f
     8ee:	6573752f          	0x6573752f
        if (qualifier == 'l')
     8f2:	7372                	flw	f6,60(x2)
    n = addr[i];
     8f4:	6970732f          	0x6970732f
  len = 0;
     8f8:	306e                	fld	f0,248(x2)
     8fa:	5f6f6e2f          	0x5f6f6e2f
     8fe:	6162                	flw	f2,24(x2)
      if (n >= 100) 
     900:	70756b63          	bltu	x10,x7,1016 <__bsg_grp_org_y+0x2>
      else if (n >= 10) 
     904:	6972642f          	0x6972642f
        tmp[len++] = digits[n / 10];
     908:	6f6d6863          	bltu	x26,x22,ff8 <kernel_matrix_multiply_int+0xbc>
        tmp[len++] = digits[n / 100];
     90c:	646e                	flw	f8,216(x2)
     90e:	7365522f          	0x7365522f
      tmp[len++] = digits[0];
     912:	6165                	addi	x2,x2,112
    if (i != 0) tmp[len++] = '.';
     914:	6372                	flw	f6,28(x2)
     916:	2f68                	fld	f10,216(x14)
    if (n == 0)
     918:	6572                	flw	f10,28(x2)
     91a:	6f70                	flw	f12,92(x14)
     91c:	6f746973          	csrrsi	x18,0x6f7,8
      tmp[len++] = digits[0];
     920:	6972                	flw	f18,28(x2)
     922:	7365                	lui	x6,0xffff9
     924:	7469672f          	0x7469672f
     928:	6773622f          	0x6773622f
  for (i = 0; i < 4; i++)
     92c:	625f 616c 6564      	0x6564616c625f
     932:	7572                	flw	f10,60(x2)
    if (i != 0) tmp[len++] = '.';
     934:	6e6e                	flw	f28,216(x2)
     936:	7265                	lui	x4,0xffff9
     938:	6773622f          	0x6773622f
     93c:	6d5f 6e61 6379      	0x63796e616d5f
    n = addr[i];
     942:	2f65726f          	jal	x4,57c38 <_bsg_elf_vcache_size+0x37c38>
    if (i != 0) tmp[len++] = '.';
     946:	74666f73          	csrrsi	x30,0x746,12
    if (n == 0)
     94a:	65726177          	0x65726177
     94e:	6773622f          	0x6773622f
      if (n >= 100) 
     952:	6d5f 6e61 6379      	0x63796e616d5f
        tmp[len++] = digits[n / 100];
     958:	5f65726f          	jal	x4,57f4e <_bsg_elf_vcache_size+0x37f4e>
     95c:	696c                	flw	f11,84(x10)
     95e:	0062                	c.slli	x0,0x18
        tmp[len++] = digits[n / 10];
     960:	746e6d2f          	0x746e6d2f
     964:	6573752f          	0x6573752f
     968:	7372                	flw	f6,60(x2)
     96a:	6970732f          	0x6970732f
        tmp[len++] = digits[n / 100];
     96e:	306e                	fld	f0,248(x2)
        tmp[len++] = digits[n / 10];
     970:	5f6f6e2f          	0x5f6f6e2f
        tmp[len++] = digits[n / 100];
     974:	6162                	flw	f2,24(x2)
     976:	70756b63          	bltu	x10,x7,108c <_tls_data+0x4c>
     97a:	6972642f          	0x6972642f
     97e:	6f6d6863          	bltu	x26,x22,106e <_tls_data+0x2e>
        n = n % 10;
     982:	646e                	flw	f8,216(x2)
        tmp[len++] = digits[n / 10];
     984:	7365522f          	0x7365522f
     988:	6165                	addi	x2,x2,112
     98a:	6372                	flw	f6,28(x2)
     98c:	2f68                	fld	f10,216(x14)
     98e:	6572                	flw	f10,28(x2)
      tmp[len++] = digits[n];
     990:	6f70                	flw	f12,92(x14)
     992:	6f746973          	csrrsi	x18,0x6f7,8
     996:	6972                	flw	f18,28(x2)
     998:	7365                	lui	x6,0xffff9
     99a:	7469672f          	0x7469672f
     99e:	6773622f          	0x6773622f
     9a2:	625f 616c 6564      	0x6564616c625f
  for (i = 0; i < 4; i++)
     9a8:	7572                	flw	f10,60(x2)
     9aa:	6e6e                	flw	f28,216(x2)
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     9ac:	7265                	lui	x4,0xffff9
     9ae:	6773622f          	0x6773622f
     9b2:	6d5f 6e61 6379      	0x63796e616d5f
     9b8:	2f65726f          	jal	x4,57cae <_bsg_elf_vcache_size+0x37cae>
     9bc:	74666f73          	csrrsi	x30,0x746,12
     9c0:	65726177          	0x65726177
     9c4:	7369722f          	0x7369722f
     9c8:	742d7663          	bgeu	x26,x2,1114 <_tls_data+0xd4>
     9cc:	736c6f6f          	jal	x30,c7102 <_bsg_elf_vcache_size+0xa7102>
     9d0:	7369722f          	0x7369722f
     9d4:	692d7663          	bgeu	x26,x18,1060 <_tls_data+0x20>
     9d8:	736e                	flw	f6,248(x2)
     9da:	6174                	flw	f13,68(x10)
     9dc:	6c6c                	flw	f11,92(x8)
     9de:	62696c2f          	0x62696c2f
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     9e2:	6363672f          	0x6363672f
     9e6:	7369722f          	0x7369722f
     9ea:	32337663          	bgeu	x6,x3,d16 <bsg_printf+0x84a>
     9ee:	752d                	lui	x10,0xfffeb
     9f0:	6b6e                	flw	f22,216(x2)
     9f2:	6f6e                	flw	f30,216(x2)
     9f4:	652d6e77          	0x652d6e77
     9f8:	666c                	flw	f11,76(x12)
     9fa:	642d                	lui	x8,0xb
  while (len < size--) *str++ = ' ';
     9fc:	6172                	flw	f2,28(x2)
     9fe:	666d                	lui	x12,0x1b
     a00:	2e392f73          	csrrs	x30,0x2e3,x18
     a04:	2e32                	fld	f28,264(x2)
     a06:	2f30                	fld	f12,88(x14)
     a08:	6e69                	lui	x28,0x1a
     a0a:	64756c63          	bltu	x10,x7,1062 <_tls_data+0x22>
     a0e:	0065                	c.nop	25
     a10:	6200                	flw	f8,0(x12)
     a12:	705f6773          	csrrsi	x14,0x705,30
     a16:	6972                	flw	f18,28(x2)
     a18:	746e                	flw	f8,248(x2)
     a1a:	2e66                	fld	f28,88(x2)
     a1c:	00010063          	beqz	x2,a1c <bsg_printf+0x550>
     a20:	6200                	flw	f8,0(x12)
     a22:	6d5f6773          	csrrsi	x14,0x6d5,30
     a26:	7475                	lui	x8,0xffffd
     a28:	7865                	lui	x16,0xffff9
     a2a:	682e                	flw	f16,200(x2)
     a2c:	0100                	addi	x8,x2,128
     a2e:	0000                	unimp
  return str;
     a30:	7362                	flw	f6,56(x2)
     a32:	616d5f67          	0x616d5f67
        flags |= SIGN;
     a36:	796e                	flw	f18,248(x2)
    base = 10;
     a38:	65726f63          	bltu	x4,x23,1096 <_tls_data+0x56>
    if (qualifier == 'l')
     a3c:	682e                	flw	f16,200(x2)
     a3e:	0100                	addi	x8,x2,128
     a40:	0000                	unimp
     a42:	61647473          	csrrci	x8,0x616,8
     a46:	6772                	flw	f14,28(x2)
      num = va_arg(args, unsigned long);
     a48:	682e                	flw	f16,200(x2)
     a4a:	0200                	addi	x8,x2,256
      fmt++;
     a4c:	0000                	unimp
     a4e:	0500                	addi	x8,x2,640
     a50:	0001                	nop
     a52:	0205                	addi	x4,x4,1
     a54:	0218                	addi	x14,x2,256
     a56:	0000                	unimp
        base = 8;
     a58:	05013a03          	0x5013a03
        break;
     a5c:	09010303          	lb	x6,144(x2)
        flags |= UPPERCASE;
     a60:	0000                	unimp
     a62:	0301                	addi	x6,x6,0
        base = 16;
     a64:	0901                	addi	x18,x18,0
     a66:	0000                	unimp
     a68:	0301                	addi	x6,x6,0
     a6a:	0901                	addi	x18,x18,0
        flags |= UPPERCASE;
     a6c:	0000                	unimp
     a6e:	0301                	addi	x6,x6,0
        if (qualifier == 'l')
     a70:	0902                	c.slli64	x18
     a72:	0000                	unimp
     a74:	0501                	addi	x10,x10,0
     a76:	0601                	addi	x12,x12,0
     a78:	00097b03          	0x97b03
     a7c:	0100                	addi	x8,x2,128
     a7e:	0c05                	addi	x24,x24,1
  if (type & UPPERCASE)  dig = upper_digits;
     a80:	0c090503          	lb	x10,192(x18)
  char *dig = digits;
     a84:	0100                	addi	x8,x2,128
     a86:	0605                	addi	x12,x12,1
  if (type & UPPERCASE)  dig = upper_digits;
     a88:	04090003          	lb	x0,64(x18)
     a8c:	0100                	addi	x8,x2,128
     a8e:	1e05                	addi	x28,x28,-31
     a90:	04090003          	lb	x0,64(x18)
    if (i != 0) tmp[len++] = ':';
     a94:	0100                	addi	x8,x2,128
     a96:	0c05                	addi	x24,x24,1
     a98:	04090103          	lb	x2,64(x18)
  if (type & UPPERCASE)  dig = upper_digits;
     a9c:	0100                	addi	x8,x2,128
     a9e:	1e05                	addi	x28,x28,-31
    if (i != 0) tmp[len++] = ':';
     aa0:	04097f03          	0x4097f03
     aa4:	0100                	addi	x8,x2,128
     aa6:	0305                	addi	x6,x6,1
     aa8:	0306                	slli	x6,x6,0x1
     aaa:	0901                	addi	x18,x18,0
    tmp[len++] = dig[addr[i] >> 4];
     aac:	0004                	0x4
     aae:	0501                	addi	x10,x10,0
     ab0:	0606                	slli	x12,x12,0x1
     ab2:	00090003          	lb	x0,0(x18)
     ab6:	0100                	addi	x8,x2,128
     ab8:	1405                	addi	x8,x8,-31
     aba:	0200                	addi	x8,x2,256
    tmp[len++] = dig[addr[i] & 0x0F];
     abc:	0104                	addi	x9,x2,128
     abe:	0306                	slli	x6,x6,0x1
    tmp[len++] = dig[addr[i] >> 4];
     ac0:	0900                	addi	x8,x2,144
     ac2:	0004                	0x4
    tmp[len++] = dig[addr[i] & 0x0F];
     ac4:	0501                	addi	x10,x10,0
     ac6:	0019                	c.nop	6
    tmp[len++] = dig[addr[i] >> 4];
     ac8:	0402                	c.slli64	x8
     aca:	0601                	addi	x12,x12,0
    tmp[len++] = dig[addr[i] & 0x0F];
     acc:	00090003          	lb	x0,0(x18)
    tmp[len++] = dig[addr[i] >> 4];
     ad0:	0100                	addi	x8,x2,128
     ad2:	0305                	addi	x6,x6,1
    tmp[len++] = dig[addr[i] & 0x0F];
     ad4:	0200                	addi	x8,x2,256
     ad6:	0104                	addi	x9,x2,128
  for (i = 0; i < 6; i++)
     ad8:	0306                	slli	x6,x6,0x1
     ada:	0901                	addi	x18,x18,0
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     adc:	0004                	0x4
     ade:	0001                	nop
     ae0:	0402                	c.slli64	x8
     ae2:	0301                	addi	x6,x6,0
     ae4:	0902                	c.slli64	x18
     ae6:	0000                	unimp
     ae8:	0501                	addi	x10,x10,0
     aea:	0019                	c.nop	6
     aec:	0402                	c.slli64	x8
     aee:	0601                	addi	x12,x12,0
     af0:	00097d03          	0x97d03
     af4:	0100                	addi	x8,x2,128
     af6:	0c05                	addi	x24,x24,1
     af8:	04090503          	lb	x10,64(x18)
     afc:	0100                	addi	x8,x2,128
     afe:	0505                	addi	x10,x10,1
     b00:	04097e03          	0x4097e03
     b04:	0100                	addi	x8,x2,128
     b06:	0305                	addi	x6,x6,1
     b08:	0306                	slli	x6,x6,0x1
     b0a:	0901                	addi	x18,x18,0
     b0c:	0004                	0x4
     b0e:	0301                	addi	x6,x6,0
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b10:	0901                	addi	x18,x18,0
     b12:	0000                	unimp
     b14:	0501                	addi	x10,x10,0
     b16:	0606                	slli	x12,x12,0x1
     b18:	04090003          	lb	x0,64(x18)
     b1c:	0100                	addi	x8,x2,128
     b1e:	0505                	addi	x10,x10,1
     b20:	0306                	slli	x6,x6,0x1
     b22:	0902                	c.slli64	x18
     b24:	0004                	0x4
     b26:	0501                	addi	x10,x10,0
     b28:	0608                	addi	x10,x2,768
     b2a:	00090003          	lb	x0,0(x18)
  while (len < size--) *str++ = ' ';
     b2e:	0100                	addi	x8,x2,128
     b30:	0a05                	addi	x20,x20,1
     b32:	0306                	slli	x6,x6,0x1
     b34:	0906                	slli	x18,x18,0x1
     b36:	0004                	0x4
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b38:	0501                	addi	x10,x10,0
     b3a:	00030613          	mv	x12,x6
  while (len < size--) *str++ = ' ';
     b3e:	0009                	c.nop	2
     b40:	0100                	addi	x8,x2,128
     b42:	0d05                	addi	x26,x26,1
     b44:	04090003          	lb	x0,64(x18)
     b48:	0100                	addi	x8,x2,128
     b4a:	0a05                	addi	x20,x20,1
     b4c:	0306                	slli	x6,x6,0x1
     b4e:	0905                	addi	x18,x18,1
     b50:	0004                	0x4
     b52:	0501                	addi	x10,x10,0
     b54:	00030613          	mv	x12,x6
     b58:	0009                	c.nop	2
     b5a:	0100                	addi	x8,x2,128
     b5c:	0805                	addi	x16,x16,1
     b5e:	04097203          	0x4097203
     b62:	0100                	addi	x8,x2,128
     b64:	0d05                	addi	x26,x26,1
     b66:	04090e03          	lb	x28,64(x18)
     b6a:	0100                	addi	x8,x2,128
     b6c:	0705                	addi	x14,x14,1
     b6e:	0306                	slli	x6,x6,0x1
     b70:	0902                	c.slli64	x18
     b72:	0004                	0x4
  return str;
     b74:	0301                	addi	x6,x6,0
     b76:	0901                	addi	x18,x18,0
     b78:	0000                	unimp
     b7a:	0501                	addi	x10,x10,0
  for (str = buf; *fmt; fmt++)
     b7c:	0003060b          	0x3060b
     b80:	0009                	c.nop	2
     b82:	0100                	addi	x8,x2,128
      else if (n >= 10) 
     b84:	0c05                	addi	x24,x24,1
     b86:	04097f03          	0x4097f03
     b8a:	0100                	addi	x8,x2,128
        tmp[len++] = digits[n / 10];
     b8c:	0305                	addi	x6,x6,1
     b8e:	0306                	slli	x6,x6,0x1
     b90:	0905                	addi	x18,x18,1
     b92:	0004                	0x4
     b94:	0501                	addi	x10,x10,0
     b96:	0606                	slli	x12,x12,0x1
     b98:	00090003          	lb	x0,0(x18)
        n = n % 10;
     b9c:	0100                	addi	x8,x2,128
     b9e:	0505                	addi	x10,x10,1
        tmp[len++] = digits[n / 10];
     ba0:	0306                	slli	x6,x6,0x1
     ba2:	0902                	c.slli64	x18
     ba4:	0004                	0x4
     ba6:	0501                	addi	x10,x10,0
        n = n % 10;
     ba8:	0608                	addi	x10,x2,768
     baa:	00090003          	lb	x0,0(x18)
        tmp[len++] = digits[n / 10];
     bae:	0100                	addi	x8,x2,128
        n = n % 10;
     bb0:	0a05                	addi	x20,x20,1
     bb2:	0306                	slli	x6,x6,0x1
  int i = 0;
     bb4:	0902                	c.slli64	x18
     bb6:	0008                	0x8
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     bb8:	0501                	addi	x10,x10,0
     bba:	0103060b          	0x103060b
     bbe:	0009                	c.nop	2
     bc0:	0100                	addi	x8,x2,128
     bc2:	0305                	addi	x6,x6,1
     bc4:	0306                	slli	x6,x6,0x1
     bc6:	000c0903          	lb	x18,0(x24) # 1d000 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1ae0c>
     bca:	0301                	addi	x6,x6,0
     bcc:	0902                	c.slli64	x18
     bce:	0000                	unimp
     bd0:	0501                	addi	x10,x10,0
     bd2:	0606                	slli	x12,x12,0x1
     bd4:	00090003          	lb	x0,0(x18)
     bd8:	0100                	addi	x8,x2,128
     bda:	0505                	addi	x10,x10,1
     bdc:	0306                	slli	x6,x6,0x1
     bde:	0901                	addi	x18,x18,0
     be0:	0004                	0x4
     be2:	0501                	addi	x10,x10,0
     be4:	060e                	slli	x12,x12,0x3
     be6:	00090003          	lb	x0,0(x18)
     bea:	0100                	addi	x8,x2,128
     bec:	0a05                	addi	x20,x20,1
     bee:	10090003          	lb	x0,256(x18)
     bf2:	0100                	addi	x8,x2,128
     bf4:	0305                	addi	x6,x6,1
     bf6:	0306                	slli	x6,x6,0x1
        precision = va_arg(args, int);
     bf8:	090a                	slli	x18,x18,0x2
     bfa:	0008                	0x8
     bfc:	0301                	addi	x6,x6,0
     bfe:	0901                	addi	x18,x18,0
     c00:	000c                	0xc
     c02:	0501                	addi	x10,x10,0
     c04:	0608                	addi	x10,x2,768
     c06:	00090003          	lb	x0,0(x18)
     c0a:	0100                	addi	x8,x2,128
     c0c:	0305                	addi	x6,x6,1
     c0e:	0306                	slli	x6,x6,0x1
        ++fmt;
     c10:	0901                	addi	x18,x18,0
     c12:	0004                	0x4
      if (precision < 0) precision = 0;
     c14:	0501                	addi	x10,x10,0
     c16:	0606                	slli	x12,x12,0x1
     c18:	04090003          	lb	x0,64(x18)
     c1c:	0100                	addi	x8,x2,128
     c1e:	2905                	jal	104e <_tls_data+0xe>
     c20:	0306                	slli	x6,x6,0x1
     c22:	0900                	addi	x8,x2,144
  return str;
     c24:	0004                	0x4
     c26:	0501                	addi	x10,x10,0
        if (*fmt)
     c28:	063d                	addi	x12,x12,15
     c2a:	04090003          	lb	x0,64(x18)
     c2e:	0100                	addi	x8,x2,128
     c30:	2905                	jal	1060 <_tls_data+0x20>
     c32:	04090003          	lb	x0,64(x18)
     c36:	0100                	addi	x8,x2,128
          *str++ = *fmt;
     c38:	3605                	jal	758 <bsg_printf+0x28c>
     c3a:	0200                	addi	x8,x2,256
     c3c:	0304                	addi	x9,x2,384
     c3e:	0306                	slli	x6,x6,0x1
     c40:	0900                	addi	x8,x2,144
     c42:	0004                	0x4
  for (str = buf; *fmt; fmt++)
     c44:	0501                	addi	x10,x10,0
     c46:	003a                	c.slli	x0,0xe
     c48:	0402                	c.slli64	x8
     c4a:	00030603          	lb	x12,0(x6) # ffff9000 <_end+0x7eff8fa8>
          flags |= ZEROPAD;
     c4e:	0009                	c.nop	2
          field_width = 2 * sizeof(void *);
     c50:	0100                	addi	x8,x2,128
     c52:	3d05                	jal	a82 <bsg_printf+0x5b6>
     c54:	0200                	addi	x8,x2,256
     c56:	0304                	addi	x9,x2,384
        if (!s) s = "<NULL>";
     c58:	04090003          	lb	x0,64(x18)
     c5c:	0100                	addi	x8,x2,128
     c5e:	2905                	jal	108e <_tls_data+0x4e>
     c60:	0200                	addi	x8,x2,256
     c62:	0304                	addi	x9,x2,384
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     c64:	0306                	slli	x6,x6,0x1
     c66:	0900                	addi	x8,x2,144
     c68:	0004                	0x4
     c6a:	0501                	addi	x10,x10,0
     c6c:	062e                	slli	x12,x12,0xb
     c6e:	08090003          	lb	x0,128(x18)
     c72:	0100                	addi	x8,x2,128
     c74:	0305                	addi	x6,x6,1
     c76:	0306                	slli	x6,x6,0x1
     c78:	0901                	addi	x18,x18,0
     c7a:	0004                	0x4
     c7c:	0501                	addi	x10,x10,0
     c7e:	0606                	slli	x12,x12,0x1
     c80:	00090003          	lb	x0,0(x18)
  int n=0;
     c84:	0100                	addi	x8,x2,128
     c86:	0d05                	addi	x26,x26,1
     c88:	0200                	addi	x8,x2,256
     c8a:	0104                	addi	x9,x2,128
  for (str = buf; *fmt; fmt++)
     c8c:	0306                	slli	x6,x6,0x1
     c8e:	0900                	addi	x8,x2,144
     c90:	0004                	0x4
     c92:	0501                	addi	x10,x10,0
     c94:	0014                	0x14
     c96:	0402                	c.slli64	x8
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     c98:	0601                	addi	x12,x12,0
     c9a:	00090003          	lb	x0,0(x18)
     c9e:	0100                	addi	x8,x2,128
     ca0:	1105                	addi	x2,x2,-31
     ca2:	0200                	addi	x8,x2,256
     ca4:	0104                	addi	x9,x2,128
     ca6:	04090003          	lb	x0,64(x18)
     caa:	0100                	addi	x8,x2,128
     cac:	0305                	addi	x6,x6,1
     cae:	0306                	slli	x6,x6,0x1
     cb0:	0902                	c.slli64	x18
     cb2:	0004                	0x4
     cb4:	0501                	addi	x10,x10,0
     cb6:	0606                	slli	x12,x12,0x1
     cb8:	00090003          	lb	x0,0(x18)
     cbc:	0100                	addi	x8,x2,128
     cbe:	0505                	addi	x10,x10,1
     cc0:	0306                	slli	x6,x6,0x1
     cc2:	0902                	c.slli64	x18
      fmt++;
     cc4:	0004                	0x4
     cc6:	0501                	addi	x10,x10,0
     cc8:	0608                	addi	x10,x2,768
     cca:	00090003          	lb	x0,0(x18)
        base = 16;
     cce:	0100                	addi	x8,x2,128
     cd0:	0a05                	addi	x20,x20,1
     cd2:	0306                	slli	x6,x6,0x1
    switch (*fmt)
     cd4:	0902                	c.slli64	x18
     cd6:	0008                	0x8
     cd8:	0501                	addi	x10,x10,0
     cda:	060d                	addi	x12,x12,3
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     cdc:	00090003          	lb	x0,0(x18)
     ce0:	0100                	addi	x8,x2,128
     ce2:	0305                	addi	x6,x6,1
     ce4:	0306                	slli	x6,x6,0x1
     ce6:	00080907          	0x80907
  return sc - s;
     cea:	0501                	addi	x10,x10,0
     cec:	0606                	slli	x12,x12,0x1
     cee:	00090003          	lb	x0,0(x18)
        *str++ = (unsigned char) va_arg(args, int);
     cf2:	0100                	addi	x8,x2,128
     cf4:	1d05                	addi	x26,x26,-31
     cf6:	0306                	slli	x6,x6,0x1
     cf8:	0900                	addi	x8,x2,144
     cfa:	0004                	0x4
     cfc:	0501                	addi	x10,x10,0
     cfe:	002a                	c.slli	x0,0xa
        while (--field_width > 0) *str++ = ' ';
     d00:	0402                	c.slli64	x8
     d02:	09000303          	lb	x6,144(x0) # 90 <bsg_group_size+0x8f>
     d06:	000c                	0xc
        while (len < field_width--) *str++ = ' ';
     d08:	0501                	addi	x10,x10,0
     d0a:	002e                	c.slli	x0,0xb
  for (str = buf; *fmt; fmt++)
     d0c:	0402                	c.slli64	x8
     d0e:	00030603          	lb	x12,0(x6)
     d12:	0009                	c.nop	2
      fmt++;
     d14:	0100                	addi	x8,x2,128
     d16:	1d05                	addi	x26,x26,-31
     d18:	0200                	addi	x8,x2,256
     d1a:	0304                	addi	x9,x2,384
     d1c:	04090003          	lb	x0,64(x18)
     d20:	0100                	addi	x8,x2,128
     d22:	3105                	jal	942 <bsg_printf+0x476>
     d24:	0200                	addi	x8,x2,256
     d26:	0304                	addi	x9,x2,384
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d28:	0c090003          	lb	x0,192(x18)
     d2c:	0100                	addi	x8,x2,128
     d2e:	1d05                	addi	x26,x26,-31
     d30:	0200                	addi	x8,x2,256
     d32:	0304                	addi	x9,x2,384
     d34:	0306                	slli	x6,x6,0x1
     d36:	0900                	addi	x8,x2,144
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d38:	0004                	0x4
     d3a:	0501                	addi	x10,x10,0
     d3c:	0009                	c.nop	2
     d3e:	0402                	c.slli64	x8
     d40:	0301                	addi	x6,x6,0
     d42:	0901                	addi	x18,x18,0
        for (i = 0; i < len; ++i) *str++ = *s++;
     d44:	0024                	addi	x9,x2,8
     d46:	0501                	addi	x10,x10,0
     d48:	0022                	c.slli	x0,0x8
     d4a:	0402                	c.slli64	x8
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     d4c:	0601                	addi	x12,x12,0
     d4e:	08090003          	lb	x0,128(x18)
     d52:	0100                	addi	x8,x2,128
     d54:	0905                	addi	x18,x18,1
     d56:	0200                	addi	x8,x2,256
     d58:	0104                	addi	x9,x2,128
     d5a:	04090003          	lb	x0,64(x18)
     d5e:	0100                	addi	x8,x2,128
     d60:	1b05                	addi	x22,x22,-31
     d62:	0200                	addi	x8,x2,256
     d64:	0204                	addi	x9,x2,256
     d66:	0306                	slli	x6,x6,0x1
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d68:	0900                	addi	x8,x2,144
     d6a:	0004                	0x4
     d6c:	0501                	addi	x10,x10,0
     d6e:	001f 0402 0602      	0x6020402001f
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d74:	00090003          	lb	x0,0(x18)
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d78:	0100                	addi	x8,x2,128
     d7a:	2205                	jal	e9a <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x132>
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d7c:	0200                	addi	x8,x2,256
     d7e:	0204                	addi	x9,x2,256
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d80:	04090003          	lb	x0,64(x18)
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d84:	0100                	addi	x8,x2,128
     d86:	0905                	addi	x18,x18,1
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d88:	0200                	addi	x8,x2,256
     d8a:	0204                	addi	x9,x2,256
     d8c:	0306                	slli	x6,x6,0x1
     d8e:	0900                	addi	x8,x2,144
     d90:	0004                	0x4
     d92:	0301                	addi	x6,x6,0
     d94:	0901                	addi	x18,x18,0
     d96:	0004                	0x4
     d98:	0601                	addi	x12,x12,0
     d9a:	04097f03          	0x4097f03
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d9e:	0100                	addi	x8,x2,128
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     da0:	04090103          	lb	x2,64(x18)
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     da4:	0100                	addi	x8,x2,128
     da6:	1305                	addi	x6,x6,-31
     da8:	0200                	addi	x8,x2,256
     daa:	0204                	addi	x9,x2,256
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     dac:	0306                	slli	x6,x6,0x1
     dae:	0900                	addi	x8,x2,144
     db0:	000c                	0xc
     db2:	0501                	addi	x10,x10,0
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     db4:	04020017          	auipc	x0,0x4020
        if( bsg_x == center_x_cord) 
     db8:	0602                	c.slli64	x12
     dba:	00090003          	lb	x0,0(x18)
     dbe:	0100                	addi	x8,x2,128
        bsg_wait_local_int( (int *) &(p_row_b->_local_alert), 1);
     dc0:	0905                	addi	x18,x18,1
     dc2:	0200                	addi	x8,x2,256
        if( tmp == cond ) return tmp;  //the data is ready
     dc4:	0204                	addi	x9,x2,256
     dc6:	04090003          	lb	x0,64(x18)
     dca:	0100                	addi	x8,x2,128
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dcc:	1a05                	addi	x20,x20,-31
     dce:	0200                	addi	x8,x2,256
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     dd0:	0204                	addi	x9,x2,256
     dd2:	0c090003          	lb	x0,192(x18)
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dd6:	0100                	addi	x8,x2,128
        if( tmp == cond ) return tmp;  //the data is ready
     dd8:	0905                	addi	x18,x18,1
     dda:	0200                	addi	x8,x2,256
        p_row_b->_local_alert = 0;
     ddc:	0204                	addi	x9,x2,256
     dde:	0306                	slli	x6,x6,0x1
}
     de0:	0900                	addi	x8,x2,144
     de2:	0004                	0x4
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     de4:	0301                	addi	x6,x6,0
     de6:	0901                	addi	x18,x18,0
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     de8:	0010                	0x10
     dea:	0501                	addi	x10,x10,0
     dec:	7f030617          	auipc	x12,0x7f030
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     df0:	0409                	addi	x8,x8,2
     df2:	0100                	addi	x8,x2,128
        bsg_col_barrier * p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( center_x_cord,    \
     df4:	1d05                	addi	x26,x26,-31
     df6:	04090103          	lb	x2,64(x18)
     dfa:	0100                	addi	x8,x2,128
     dfc:	0905                	addi	x18,x18,1
     dfe:	04090003          	lb	x0,64(x18)
     e02:	0100                	addi	x8,x2,128
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e04:	1605                	addi	x12,x12,-31
     e06:	0200                	addi	x8,x2,256
                for( i= 0; i <= range; i++) {
     e08:	0204                	addi	x9,x2,256
     e0a:	0306                	slli	x6,x6,0x1
     e0c:	0900                	addi	x8,x2,144
     e0e:	0004                	0x4
                        if ( p[ i ] == 0) break;
     e10:	0501                	addi	x10,x10,0
     e12:	001a                	c.slli	x0,0x6
     e14:	0402                	c.slli64	x8
     e16:	0602                	c.slli64	x12
                for( i= 0; i <= range; i++) {
     e18:	00090003          	lb	x0,0(x18)
                        if ( p[ i ] == 0) break;
     e1c:	0100                	addi	x8,x2,128
     e1e:	0905                	addi	x18,x18,1
                for( i= 0; i <= range; i++) {
     e20:	0200                	addi	x8,x2,256
     e22:	0204                	addi	x9,x2,256
        p_remote_barrier->_done_list[ bsg_y - p_col_b-> _y_cord_start] = 1; 
     e24:	04090003          	lb	x0,64(x18)
     e28:	0100                	addi	x8,x2,128
     e2a:	1d05                	addi	x26,x26,-31
     e2c:	0200                	addi	x8,x2,256
     e2e:	0204                	addi	x9,x2,256
     e30:	0c090003          	lb	x0,192(x18)
     e34:	0100                	addi	x8,x2,128
     e36:	0905                	addi	x18,x18,1
     e38:	0200                	addi	x8,x2,256
     e3a:	0204                	addi	x9,x2,256
        if( bsg_x == center_x_cord && bsg_y == center_y_cord) 
     e3c:	0306                	slli	x6,x6,0x1
     e3e:	0900                	addi	x8,x2,144
     e40:	0004                	0x4
     e42:	0501                	addi	x10,x10,0
     e44:	0601                	addi	x12,x12,0
     e46:	18090303          	lb	x6,384(x18)
     e4a:	0100                	addi	x8,x2,128
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e4c:	0905                	addi	x18,x18,1
     e4e:	097fb803          	0x97fb803
     e52:	0010                	0x10
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e54:	0501                	addi	x10,x10,0
     e56:	030c                	addi	x11,x2,384
        if( tmp == cond ) return tmp;  //the data is ready
     e58:	0904                	addi	x9,x2,144
     e5a:	0004                	0x4
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e5c:	0501                	addi	x10,x10,0
     e5e:	0309                	addi	x6,x6,2
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e60:	097c                	addi	x15,x2,156
     e62:	0004                	0x4
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e64:	0501                	addi	x10,x10,0
     e66:	04030603          	lb	x12,64(x6)
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     e6a:	0409                	addi	x8,x8,2
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e6c:	0100                	addi	x8,x2,128
     e6e:	0605                	addi	x12,x12,1
        if( tmp == cond ) return tmp;  //the data is ready
     e70:	0306                	slli	x6,x6,0x1
     e72:	0900                	addi	x8,x2,144
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e74:	0000                	unimp
     e76:	0501                	addi	x10,x10,0
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e78:	0305                	addi	x6,x6,1
     e7a:	00040903          	lb	x18,0(x8) # ffffd000 <_end+0x7effcfa8>
     e7e:	0501                	addi	x10,x10,0
               p_remote_barrier->_local_alert = 1;
     e80:	7e030603          	lb	x12,2016(x6)
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e84:	0809                	addi	x16,x16,2
     e86:	0100                	addi	x8,x2,128
     e88:	00090203          	lb	x4,0(x18)
     e8c:	0100                	addi	x8,x2,128
     e8e:	0505                	addi	x10,x10,1
     e90:	0306                	slli	x6,x6,0x1
     e92:	0900                	addi	x8,x2,144
     e94:	0000                	unimp
     e96:	0501                	addi	x10,x10,0
               p_remote_barrier->_local_alert = 1;
     e98:	01030603          	lb	x12,16(x6)
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e9c:	0809                	addi	x16,x16,2
     e9e:	0100                	addi	x8,x2,128
     ea0:	00090103          	lb	x2,0(x18)
     ea4:	0100                	addi	x8,x2,128
     ea6:	0c05                	addi	x24,x24,1
        for( i= 0; i <= x_range; i++) {
     ea8:	0306                	slli	x6,x6,0x1
     eaa:	0900                	addi	x8,x2,144
        p_col_b -> _local_alert = 0;
     eac:	0000                	unimp
     eae:	0501                	addi	x10,x10,0
}
     eb0:	0306                	slli	x6,x6,0x1
     eb2:	0900                	addi	x8,x2,144
              p_row_b->_done_list[ i ] = 0;
     eb4:	0008                	0x8
     eb6:	0501                	addi	x10,x10,0
        p_col_b -> _local_alert = 0;
     eb8:	0308                	addi	x10,x2,384
     eba:	097f                	0x97f
     ebc:	0004                	0x4
     ebe:	0501                	addi	x10,x10,0
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ec0:	05030607          	0x5030607
     ec4:	0809                	addi	x16,x16,2
     ec6:	0100                	addi	x8,x2,128
                for( i= 0; i <= range; i++) {
     ec8:	00090103          	lb	x2,0(x18)
     ecc:	0100                	addi	x8,x2,128
     ece:	0b05                	addi	x22,x22,1
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ed0:	0306                	slli	x6,x6,0x1
     ed2:	0900                	addi	x8,x2,144
                for( i= 0; i <= range; i++) {
     ed4:	0000                	unimp
     ed6:	0501                	addi	x10,x10,0
     ed8:	01030607          	0x1030607
                        if ( p[ i ] == 0) break;
     edc:	0409                	addi	x8,x8,2
     ede:	0100                	addi	x8,x2,128
     ee0:	0b05                	addi	x22,x22,1
     ee2:	0306                	slli	x6,x6,0x1
                for( i= 0; i <= range; i++) {
     ee4:	0900                	addi	x8,x2,144
     ee6:	0000                	unimp
                        if ( p[ i ] == 0) break;
     ee8:	0501                	addi	x10,x10,0
     eea:	0e030603          	lb	x12,224(x6)
                for( i= 0; i <= range; i++) {
     eee:	0409                	addi	x8,x8,2
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     ef0:	0100                	addi	x8,x2,128
     ef2:	0c05                	addi	x24,x24,1
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     ef4:	0306                	slli	x6,x6,0x1
     ef6:	0970                	addi	x12,x2,156
     ef8:	0000                	unimp
     efa:	0501                	addi	x10,x10,0
               p_remote_barrier->_local_alert = 1;
     efc:	0306                	slli	x6,x6,0x1
     efe:	0910                	addi	x12,x2,144
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     f00:	0004                	0x4
     f02:	0501                	addi	x10,x10,0
     f04:	0310                	addi	x12,x2,384
     f06:	0968                	addi	x10,x2,156
     f08:	0004                	0x4
     f0a:	0501                	addi	x10,x10,0
     f0c:	28030607          	0x28030607
               p_remote_barrier->_local_alert = 1;
     f10:	0809                	addi	x16,x16,2
     f12:	0100                	addi	x8,x2,128
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f14:	2c05                	jal	1144 <_tls_data+0x104>
     f16:	0306                	slli	x6,x6,0x1
     f18:	0900                	addi	x8,x2,144
     f1a:	0000                	unimp
     f1c:	0501                	addi	x10,x10,0
     f1e:	030c                	addi	x11,x2,384
        for( i= 0; i <= y_range; i++) {
     f20:	0900                	addi	x8,x2,144
     f22:	0008                	0x8
              p_col_b->_done_list[ i ] = 0;
     f24:	0501                	addi	x10,x10,0
     f26:	0310                	addi	x12,x2,384
        if( bsg_x == center_x_cord)
     f28:	0900                	addi	x8,x2,144
     f2a:	0004                	0x4
     f2c:	0501                	addi	x10,x10,0
     f2e:	09000317          	auipc	x6,0x9000
     f32:	0004                	0x4
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f34:	0501                	addi	x10,x10,0
     f36:	0315                	addi	x6,x6,5
     f38:	0900                	addi	x8,x2,144
     f3a:	0004                	0x4
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f3c:	0501                	addi	x10,x10,0
     f3e:	09010323          	sb	x16,134(x2)
     f42:	0008                	0x8
     f44:	0501                	addi	x10,x10,0
     f46:	0310                	addi	x12,x2,384
     f48:	097f                	0x97f
     f4a:	0004                	0x4
     f4c:	0501                	addi	x10,x10,0
     f4e:	01030607          	0x1030607
     f52:	0409                	addi	x8,x8,2
     f54:	0100                	addi	x8,x2,128
     f56:	0b05                	addi	x22,x22,1
     f58:	00097d03          	0x97d03
     f5c:	0100                	addi	x8,x2,128
     f5e:	0705                	addi	x14,x14,1
     f60:	08096803          	0x8096803
     f64:	0100                	addi	x8,x2,128
     f66:	00090103          	lb	x2,0(x18)
     f6a:	0100                	addi	x8,x2,128
     f6c:	0b05                	addi	x22,x22,1
     f6e:	0306                	slli	x6,x6,0x1
     f70:	0900                	addi	x8,x2,144
     f72:	0000                	unimp
     f74:	0501                	addi	x10,x10,0
     f76:	030c                	addi	x11,x2,384
     f78:	097f                	0x97f
     f7a:	0004                	0x4
     f7c:	0501                	addi	x10,x10,0
     f7e:	2a030607          	0x2a030607
                int A_local[A_HEIGHT * A_WIDTH];
     f82:	0809                	addi	x16,x16,2
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f84:	0100                	addi	x8,x2,128
     f86:	0e05                	addi	x28,x28,1
     f88:	0306                	slli	x6,x6,0x1
     f8a:	0900                	addi	x8,x2,144
     f8c:	0000                	unimp
     f8e:	0501                	addi	x10,x10,0
     f90:	01030607          	0x1030607
     f94:	0809                	addi	x16,x16,2
     f96:	0100                	addi	x8,x2,128
     f98:	0e05                	addi	x28,x28,1
     f9a:	0306                	slli	x6,x6,0x1
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
     f9c:	0900                	addi	x8,x2,144
     f9e:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     fa0:	0501                	addi	x10,x10,0
     fa2:	0900030b          	0x900030b
     fa6:	0008                	0x8
                int B_local[A_WIDTH * B_WIDTH];
     fa8:	0501                	addi	x10,x10,0
     faa:	62030607          	0x62030607
                int A_local[A_HEIGHT * A_WIDTH];
     fae:	0809                	addi	x16,x16,2
     fb0:	0100                	addi	x8,x2,128
     fb2:	0c05                	addi	x24,x24,1
     fb4:	0306                	slli	x6,x6,0x1
     fb6:	0900                	addi	x8,x2,144
     fb8:	0000                	unimp
     fba:	0501                	addi	x10,x10,0
     fbc:	1a030607          	0x1a030607
     fc0:	0809                	addi	x16,x16,2
     fc2:	0100                	addi	x8,x2,128
                for(int i = 0; i <= iter; ++i){
     fc4:	0e05                	addi	x28,x28,1
     fc6:	0306                	slli	x6,x6,0x1
     fc8:	0900                	addi	x8,x2,144
     fca:	0000                	unimp
     fcc:	0501                	addi	x10,x10,0
     fce:	0900030b          	0x900030b
                int C_local[A_HEIGHT * B_WIDTH];
     fd2:	0008                	0x8
                int B_local[A_WIDTH * B_WIDTH];
     fd4:	0501                	addi	x10,x10,0
     fd6:	0309                	addi	x6,x6,2
     fd8:	0909                	addi	x18,x18,2
     fda:	0008                	0x8
     fdc:	0501                	addi	x10,x10,0
     fde:	032e                	slli	x6,x6,0xb
     fe0:	0971                	addi	x18,x18,28
     fe2:	000c                	0xc
     fe4:	0501                	addi	x10,x10,0
     fe6:	0329                	addi	x6,x6,10
     fe8:	0900                	addi	x8,x2,144
     fea:	0004                	0x4
     fec:	0501                	addi	x10,x10,0
     fee:	0322                	slli	x6,x6,0x8
                int C_local[A_HEIGHT * B_WIDTH];
     ff0:	090e                	slli	x18,x18,0x3
     ff2:	0008                	0x8
     ff4:	0501                	addi	x10,x10,0
     ff6:	031d                	addi	x6,x6,7
     ff8:	0900                	addi	x8,x2,144
     ffa:	0004                	0x4
     ffc:	0601                	addi	x12,x12,0
     ffe:	0903be03          	0x903be03
    1002:	0008                	0x8
    1004:	0501                	addi	x10,x10,0
    1006:	0301                	addi	x6,x6,0
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1008:	0902                	c.slli64	x18
    100a:	0000                	unimp
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    100c:	0301                	addi	x6,x6,0
    100e:	0900                	addi	x8,x2,144
    1010:	0000                	unimp
    1012:	0301                	addi	x6,x6,0
    1014:	0900                	addi	x8,x2,144
    1016:	0000                	unimp
    1018:	0301                	addi	x6,x6,0
    101a:	0900                	addi	x8,x2,144
                        bsg_cuda_print_stat_start(temp);
    101c:	0008                	0x8
    101e:	0601                	addi	x12,x12,0
    1020:	00090203          	lb	x4,0(x18)
                int C_local[A_HEIGHT * B_WIDTH];
    1024:	0100                	addi	x8,x2,128
    1026:	0306                	slli	x6,x6,0x1
                int rc, temp = IGNORE_TAG;
    1028:	00040903          	lb	x18,0(x8)
    102c:	0501                	addi	x10,x10,0
    102e:	09010303          	lb	x6,144(x2)
                        bsg_cuda_print_stat_start(temp);
    1032:	0000                	unimp
    1034:	0301                	addi	x6,x6,0
    1036:	0901                	addi	x18,x18,0
    1038:	0000                	unimp
    103a:	0301                	addi	x6,x6,0
    103c:	0901                	addi	x18,x18,0
    103e:	0000                	unimp
    1040:	0301                	addi	x6,x6,0
    1042:	0902                	c.slli64	x18
                        temp = tag;
    1044:	0000                	unimp
    1046:	0501                	addi	x10,x10,0
                        bsg_cuda_print_stat_start(temp);
    1048:	0601                	addi	x12,x12,0
    104a:	00097b03          	0x97b03
    104e:	0100                	addi	x8,x2,128
    1050:	30090003          	lb	x0,768(x18)
    1054:	0100                	addi	x8,x2,128
    1056:	1305                	addi	x6,x6,-31
    1058:	097ee503          	0x97ee503
    105c:	001c                	0x1c
    105e:	0501                	addi	x10,x10,0
    1060:	01a00303          	lb	x6,26(x0) # 1a <bsg_group_size+0x19>
    1064:	0409                	addi	x8,x8,2
    1066:	0100                	addi	x8,x2,128
    1068:	0306                	slli	x6,x6,0x1
    106a:	0901                	addi	x18,x18,0
    106c:	0008                	0x8
    106e:	0301                	addi	x6,x6,0
    1070:	00097ed3          	fadd.s	f29,f18,f0
    1074:	0100                	addi	x8,x2,128
    1076:	00090103          	lb	x2,0(x18)
    107a:	0100                	addi	x8,x2,128
    107c:	00090103          	lb	x2,0(x18)
    1080:	0100                	addi	x8,x2,128
    1082:	00090103          	lb	x2,0(x18)
    1086:	0100                	addi	x8,x2,128
    1088:	00090103          	lb	x2,0(x18)
    108c:	0100                	addi	x8,x2,128
    108e:	00090203          	lb	x4,0(x18)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1092:	0100                	addi	x8,x2,128
    1094:	00090203          	lb	x4,0(x18)
    1098:	0100                	addi	x8,x2,128
    109a:	00090103          	lb	x2,0(x18)
    109e:	0100                	addi	x8,x2,128
    10a0:	00090103          	lb	x2,0(x18)
    10a4:	0100                	addi	x8,x2,128
    10a6:	00090203          	lb	x4,0(x18)
                for(int i = 0; i <= iter; ++i){
    10aa:	0100                	addi	x8,x2,128
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    10ac:	1305                	addi	x6,x6,-31
    10ae:	00090003          	lb	x0,0(x18)
                        bsg_cuda_print_stat_end(temp);
    10b2:	0100                	addi	x8,x2,128
    10b4:	0305                	addi	x6,x6,1
    10b6:	0306                	slli	x6,x6,0x1
    10b8:	0900                	addi	x8,x2,144
    10ba:	0000                	unimp
    10bc:	0501                	addi	x10,x10,0
    10be:	030c                	addi	x11,x2,384
    10c0:	0900                	addi	x8,x2,144
    10c2:	0004                	0x4
    10c4:	0501                	addi	x10,x10,0
    10c6:	0605                	addi	x12,x12,1
    10c8:	24090203          	lb	x4,576(x18)
    10cc:	0100                	addi	x8,x2,128
    10ce:	0805                	addi	x16,x16,1
    10d0:	0306                	slli	x6,x6,0x1
    10d2:	0900                	addi	x8,x2,144
    10d4:	0000                	unimp
    10d6:	0501                	addi	x10,x10,0
    10d8:	02030607          	0x2030607
    10dc:	0809                	addi	x16,x16,2
    10de:	0100                	addi	x8,x2,128
    10e0:	0e05                	addi	x28,x28,1
    10e2:	0306                	slli	x6,x6,0x1
    10e4:	0900                	addi	x8,x2,144
    10e6:	0000                	unimp
    10e8:	0501                	addi	x10,x10,0
    10ea:	01030607          	0x1030607
    10ee:	0409                	addi	x8,x8,2
    10f0:	0100                	addi	x8,x2,128
    10f2:	0b05                	addi	x22,x22,1
                for(int i = 0; i <= iter; ++i){
    10f4:	0306                	slli	x6,x6,0x1
    10f6:	097f                	0x97f
                        bsg_cuda_print_stat_end(temp);
    10f8:	0004                	0x4
    10fa:	0501                	addi	x10,x10,0
    10fc:	09010307          	0x9010307
                for(int i = 0; i <= iter; ++i){
    1100:	0004                	0x4
    1102:	0501                	addi	x10,x10,0
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1104:	0619                	addi	x12,x12,6
    1106:	04097b03          	0x4097b03
                for(int i = 0; i <= iter; ++i){
    110a:	0100                	addi	x8,x2,128
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    110c:	1305                	addi	x6,x6,-31
    110e:	00090003          	lb	x0,0(x18)
    1112:	0100                	addi	x8,x2,128
    1114:	0305                	addi	x6,x6,1
    1116:	0306                	slli	x6,x6,0x1
    1118:	0900                	addi	x8,x2,144
    111a:	0000                	unimp
        }
    111c:	0601                	addi	x12,x12,0
    111e:	09019003          	lh	x0,144(x3)
    1122:	0004                	0x4
    1124:	0501                	addi	x10,x10,0
    1126:	0608                	addi	x10,x2,768
    1128:	00090003          	lb	x0,0(x18)
    112c:	0100                	addi	x8,x2,128
    112e:	0305                	addi	x6,x6,1
    1130:	0306                	slli	x6,x6,0x1
    1132:	0901                	addi	x18,x18,0
    1134:	0004                	0x4
    1136:	0301                	addi	x6,x6,0
    1138:	0911                	addi	x18,x18,4
    113a:	0000                	unimp
    113c:	0301                	addi	x6,x6,0
    113e:	0901                	addi	x18,x18,0
    1140:	0000                	unimp
    1142:	0301                	addi	x6,x6,0
    1144:	0902                	c.slli64	x18
    1146:	0000                	unimp
    1148:	0401                	addi	x8,x8,0
    114a:	0502                	c.slli64	x10
    114c:	0305                	addi	x6,x6,1
    114e:	00097bef          	jal	x23,9814e <_bsg_elf_vcache_size+0x7814e>
    1152:	0100                	addi	x8,x2,128
    1154:	0306                	slli	x6,x6,0x1
    1156:	00000977          	0x977
    115a:	0601                	addi	x12,x12,0
    115c:	08090a03          	lb	x20,128(x18)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1160:	0100                	addi	x8,x2,128
    1162:	0805                	addi	x16,x16,1
    1164:	00090103          	lb	x2,0(x18)
    1168:	0100                	addi	x8,x2,128
    116a:	0505                	addi	x10,x10,1
    116c:	00097003          	0x97003
    1170:	0100                	addi	x8,x2,128
    1172:	00090203          	lb	x4,0(x18)
    1176:	0100                	addi	x8,x2,128
    1178:	00090103          	lb	x2,0(x18)
    117c:	0100                	addi	x8,x2,128
    117e:	00090203          	lb	x4,0(x18)
    1182:	0100                	addi	x8,x2,128
    1184:	04090503          	lb	x10,64(x18)
    1188:	0100                	addi	x8,x2,128
    118a:	0b05                	addi	x22,x22,1
    118c:	00090803          	lb	x16,0(x18)
    1190:	0100                	addi	x8,x2,128
    1192:	0505                	addi	x10,x10,1
    1194:	0306                	slli	x6,x6,0x1
    1196:	0900                	addi	x8,x2,144
    1198:	0000                	unimp
    119a:	0401                	addi	x8,x8,0
    119c:	0501                	addi	x10,x10,0
    119e:	0609                	addi	x12,x12,2
    11a0:	09048e03          	lb	x28,144(x9)
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11a4:	0004                	0x4
    11a6:	0501                	addi	x10,x10,0
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11a8:	060a                	slli	x12,x12,0x2
    11aa:	00090003          	lb	x0,0(x18)
    11ae:	0100                	addi	x8,x2,128
    11b0:	0905                	addi	x18,x18,1
    11b2:	04090003          	lb	x0,64(x18)
    11b6:	0100                	addi	x8,x2,128
    11b8:	0405                	addi	x8,x8,1
    11ba:	08097d03          	0x8097d03
    11be:	0100                	addi	x8,x2,128
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    11c0:	0105                	addi	x2,x2,1
    11c2:	04097303          	0x4097303
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11c6:	0100                	addi	x8,x2,128
    11c8:	0205                	addi	x4,x4,1
    11ca:	0306                	slli	x6,x6,0x1
                int16_t B_local[A_WIDTH * B_WIDTH];
    11cc:	0911                	addi	x18,x18,4
    11ce:	0008                	0x8
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11d0:	0501                	addi	x10,x10,0
    11d2:	0301                	addi	x6,x6,0
    11d4:	0000096f          	jal	x18,11d4 <kernel_matrix_multiply_int16+0x74>
    11d8:	0301                	addi	x6,x6,0
    11da:	0900                	addi	x8,x2,144
    11dc:	0000                	unimp
    11de:	0301                	addi	x6,x6,0
    11e0:	0900                	addi	x8,x2,144
    11e2:	0000                	unimp
    11e4:	0301                	addi	x6,x6,0
    11e6:	0900                	addi	x8,x2,144
                for(int i = 0; i <= iter; ++i){
    11e8:	0004                	0x4
    11ea:	0501                	addi	x10,x10,0
    11ec:	0302                	c.slli64	x6
    11ee:	0912                	slli	x18,x18,0x4
    11f0:	0000                	unimp
    11f2:	0501                	addi	x10,x10,0
                int16_t C_local[A_HEIGHT * B_WIDTH];
    11f4:	060a                	slli	x12,x12,0x2
    11f6:	00097e03          	0x97e03
                int16_t B_local[A_WIDTH * B_WIDTH];
    11fa:	0100                	addi	x8,x2,128
    11fc:	0205                	addi	x4,x4,1
    11fe:	0306                	slli	x6,x6,0x1
    1200:	00080903          	lb	x18,0(x16) # ffff9000 <_end+0x7eff8fa8>
    1204:	0501                	addi	x10,x10,0
    1206:	00030603          	lb	x12,0(x6) # 9000f2e <_bsg_elf_vcache_size+0x8fe0f2e>
    120a:	0009                	c.nop	2
    120c:	0100                	addi	x8,x2,128
    120e:	0905                	addi	x18,x18,1
    1210:	0306                	slli	x6,x6,0x1
    1212:	097d                	addi	x18,x18,31
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1214:	0004                	0x4
    1216:	0501                	addi	x10,x10,0
    1218:	09050303          	lb	x6,144(x10) # fffeb090 <_end+0x7efeb038>
    121c:	0004                	0x4
    121e:	0401                	addi	x8,x8,0
    1220:	0502                	c.slli64	x10
    1222:	0305                	addi	x6,x6,1
    1224:	00097bf3          	csrrci	x23,ustatus,18
    1228:	0100                	addi	x8,x2,128
    122a:	00090203          	lb	x4,0(x18)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    122e:	0100                	addi	x8,x2,128
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1230:	0104                	addi	x9,x2,128
    1232:	0305                	addi	x6,x6,1
    1234:	09048d03          	lb	x26,144(x9)
    1238:	0008                	0x8
    123a:	0501                	addi	x10,x10,0
    123c:	0601                	addi	x12,x12,0
    123e:	00090103          	lb	x2,0(x18)
                        bsg_cuda_print_stat_start(temp);
    1242:	0100                	addi	x8,x2,128
    1244:	0b05                	addi	x22,x22,1
    1246:	097edb03          	lhu	x22,151(x29)
                int16_t C_local[A_HEIGHT * B_WIDTH];
    124a:	0034                	addi	x13,x2,8
                int rc, temp = IGNORE_TAG;
    124c:	0501                	addi	x10,x10,0
    124e:	0605                	addi	x12,x12,1
    1250:	08090203          	lb	x4,128(x18)
                        bsg_cuda_print_stat_start(temp);
    1254:	0100                	addi	x8,x2,128
    1256:	0d05                	addi	x26,x26,1
    1258:	0306                	slli	x6,x6,0x1
    125a:	0901                	addi	x18,x18,0
    125c:	0000                	unimp
    125e:	0501                	addi	x10,x10,0
    1260:	0308                	addi	x10,x2,384
    1262:	097f                	0x97f
    1264:	0004                	0x4
    1266:	0501                	addi	x10,x10,0
                        temp = tag;
    1268:	0605                	addi	x12,x12,1
    126a:	04090103          	lb	x2,64(x18)
                        bsg_cuda_print_stat_start(temp);
    126e:	0100                	addi	x8,x2,128
    1270:	1c090a03          	lb	x20,448(x18)
    1274:	0100                	addi	x8,x2,128
    1276:	00090103          	lb	x2,0(x18)
    127a:	0100                	addi	x8,x2,128
    127c:	0905                	addi	x18,x18,1
    127e:	0306                	slli	x6,x6,0x1
    1280:	0900                	addi	x8,x2,144
    1282:	0000                	unimp
    1284:	0501                	addi	x10,x10,0
    1286:	0308                	addi	x10,x2,384
    1288:	0900                	addi	x8,x2,144
    128a:	0004                	0x4
    128c:	0501                	addi	x10,x10,0
    128e:	060a                	slli	x12,x12,0x2
    1290:	0c090203          	lb	x4,192(x18)
    1294:	0100                	addi	x8,x2,128
    1296:	0d05                	addi	x26,x26,1
    1298:	0306                	slli	x6,x6,0x1
    129a:	0900                	addi	x8,x2,144
    129c:	0000                	unimp
    129e:	0501                	addi	x10,x10,0
    12a0:	0311                	addi	x6,x6,4
    12a2:	097d                	addi	x18,x18,31
    12a4:	0004                	0x4
    12a6:	0501                	addi	x10,x10,0
    12a8:	030d                	addi	x6,x6,3
    12aa:	00040903          	lb	x18,0(x8)
    12ae:	0501                	addi	x10,x10,0
    12b0:	0605                	addi	x12,x12,1
    12b2:	04090c03          	lb	x24,64(x18)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12b6:	0100                	addi	x8,x2,128
    12b8:	00090103          	lb	x2,0(x18)
    12bc:	0100                	addi	x8,x2,128
    12be:	0805                	addi	x16,x16,1
    12c0:	0306                	slli	x6,x6,0x1
    12c2:	0900                	addi	x8,x2,144
    12c4:	0000                	unimp
    12c6:	0501                	addi	x10,x10,0
    12c8:	097f030f          	0x97f030f
                for(int i = 0; i <= iter; ++i){
    12cc:	0004                	0x4
    12ce:	0501                	addi	x10,x10,0
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12d0:	0308                	addi	x10,x2,384
    12d2:	0901                	addi	x18,x18,0
                        bsg_cuda_print_stat_end(temp);
    12d4:	0004                	0x4
    12d6:	0501                	addi	x10,x10,0
    12d8:	0605                	addi	x12,x12,1
    12da:	04090e03          	lb	x28,64(x18)
    12de:	0100                	addi	x8,x2,128
    12e0:	00090103          	lb	x2,0(x18)
    12e4:	0100                	addi	x8,x2,128
    12e6:	1505                	addi	x10,x10,-31
    12e8:	0306                	slli	x6,x6,0x1
    12ea:	0900                	addi	x8,x2,144
    12ec:	0000                	unimp
    12ee:	0501                	addi	x10,x10,0
    12f0:	0605                	addi	x12,x12,1
    12f2:	0c090703          	lb	x14,192(x18)
    12f6:	0100                	addi	x8,x2,128
    12f8:	00090203          	lb	x4,0(x18)
    12fc:	0100                	addi	x8,x2,128
    12fe:	1105                	addi	x2,x2,-31
    1300:	20095403          	lhu	x8,512(x18)
    1304:	0100                	addi	x8,x2,128
    1306:	1705                	addi	x14,x14,-31
    1308:	0306                	slli	x6,x6,0x1
    130a:	0900                	addi	x8,x2,144
    130c:	0000                	unimp
    130e:	0501                	addi	x10,x10,0
    1310:	00030623          	sb	x0,12(x6)
    1314:	0409                	addi	x8,x8,2
    1316:	0100                	addi	x8,x2,128
                for(int i = 0; i <= iter; ++i){
    1318:	0c05                	addi	x24,x24,1
    131a:	0306                	slli	x6,x6,0x1
                        bsg_cuda_print_stat_end(temp);
    131c:	096e                	slli	x18,x18,0x1b
    131e:	0000                	unimp
    1320:	0501                	addi	x10,x10,0
    1322:	0611                	addi	x12,x12,4
                for(int i = 0; i <= iter; ++i){
    1324:	08090e03          	lb	x28,128(x18)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1328:	0100                	addi	x8,x2,128
    132a:	1705                	addi	x14,x14,-31
                for(int i = 0; i <= iter; ++i){
    132c:	0306                	slli	x6,x6,0x1
    132e:	0900                	addi	x8,x2,144
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1330:	0000                	unimp
    1332:	0501                	addi	x10,x10,0
    1334:	0620                	addi	x8,x2,776
    1336:	04090003          	lb	x0,64(x18)
    133a:	0100                	addi	x8,x2,128
    133c:	0c05                	addi	x24,x24,1
    133e:	0306                	slli	x6,x6,0x1
        }
    1340:	0972                	slli	x18,x18,0x1c
    1342:	0000                	unimp
    1344:	0501                	addi	x10,x10,0
    1346:	0611                	addi	x12,x12,4
    1348:	08090f03          	lb	x30,128(x18)
    134c:	0100                	addi	x8,x2,128
    134e:	1705                	addi	x14,x14,-31
    1350:	0306                	slli	x6,x6,0x1
    1352:	0900                	addi	x8,x2,144
    1354:	0000                	unimp
    1356:	0501                	addi	x10,x10,0
    1358:	0620                	addi	x8,x2,776
    135a:	04090003          	lb	x0,64(x18)
    135e:	0100                	addi	x8,x2,128
    1360:	0c05                	addi	x24,x24,1
    1362:	0306                	slli	x6,x6,0x1
    1364:	0971                	addi	x18,x18,28
    1366:	0000                	unimp
    1368:	0501                	addi	x10,x10,0
    136a:	0611                	addi	x12,x12,4
    136c:	08091103          	lh	x2,128(x18)
    1370:	0100                	addi	x8,x2,128
    1372:	1705                	addi	x14,x14,-31
    1374:	0306                	slli	x6,x6,0x1
    1376:	0900                	addi	x8,x2,144
    1378:	0000                	unimp
    137a:	0501                	addi	x10,x10,0
    137c:	0624                	addi	x9,x2,776
    137e:	04090003          	lb	x0,64(x18)
    1382:	0100                	addi	x8,x2,128
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1384:	0c05                	addi	x24,x24,1
    1386:	0306                	slli	x6,x6,0x1
    1388:	0000096f          	jal	x18,1388 <kernel_matrix_multiply_int8+0x4>
    138c:	0501                	addi	x10,x10,0
    138e:	0611                	addi	x12,x12,4
    1390:	08091003          	lh	x0,128(x18)
    1394:	0100                	addi	x8,x2,128
    1396:	1705                	addi	x14,x14,-31
    1398:	0306                	slli	x6,x6,0x1
    139a:	0900                	addi	x8,x2,144
    139c:	0000                	unimp
    139e:	0501                	addi	x10,x10,0
    13a0:	0621                	addi	x12,x12,8
    13a2:	04090003          	lb	x0,64(x18)
    13a6:	0100                	addi	x8,x2,128
    13a8:	0c05                	addi	x24,x24,1
    13aa:	0306                	slli	x6,x6,0x1
    13ac:	0970                	addi	x12,x2,156
    13ae:	0000                	unimp
    13b0:	0501                	addi	x10,x10,0
    13b2:	37030607          	0x37030607
    13b6:	0809                	addi	x16,x16,2
    13b8:	0100                	addi	x8,x2,128
    13ba:	00090103          	lb	x2,0(x18)
    13be:	0100                	addi	x8,x2,128
    13c0:	0d05                	addi	x26,x26,1
    13c2:	0306                	slli	x6,x6,0x1
    13c4:	0906                	slli	x18,x18,0x1
    13c6:	0000                	unimp
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13c8:	0501                	addi	x10,x10,0
    13ca:	030a                	slli	x6,x6,0x2
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13cc:	097a                	slli	x18,x18,0x1e
    13ce:	0008                	0x8
                int8_t B_local[A_WIDTH * B_WIDTH];
    13d0:	0501                	addi	x10,x10,0
    13d2:	0605                	addi	x12,x12,1
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13d4:	04090403          	lb	x8,64(x18)
    13d8:	0100                	addi	x8,x2,128
    13da:	00090203          	lb	x4,0(x18)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    13de:	0100                	addi	x8,x2,128
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13e0:	0d05                	addi	x26,x26,1
    13e2:	0306                	slli	x6,x6,0x1
    13e4:	0900                	addi	x8,x2,144
    13e6:	0024                	addi	x9,x2,8
                for(int i = 0; i <= iter; ++i){
    13e8:	0501                	addi	x10,x10,0
    13ea:	030a                	slli	x6,x6,0x2
    13ec:	097a                	slli	x18,x18,0x1e
    13ee:	0004                	0x4
                int8_t B_local[A_WIDTH * B_WIDTH];
    13f0:	0501                	addi	x10,x10,0
    13f2:	0609                	addi	x12,x12,2
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13f4:	0900c603          	lbu	x12,144(x1)
    13f8:	0004                	0x4
    13fa:	0501                	addi	x10,x10,0
    13fc:	060c                	addi	x11,x2,768
    13fe:	00090003          	lb	x0,0(x18)
    1402:	0100                	addi	x8,x2,128
    1404:	1a05                	addi	x20,x20,-31
    1406:	0306                	slli	x6,x6,0x1
    1408:	0900                	addi	x8,x2,144
    140a:	000c                	0xc
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    140c:	0501                	addi	x10,x10,0
    140e:	0621                	addi	x12,x12,8
                int8_t A_local[A_HEIGHT * A_WIDTH];
    1410:	00090003          	lb	x0,0(x18)
                int8_t B_local[A_WIDTH * B_WIDTH];
    1414:	0100                	addi	x8,x2,128
    1416:	0905                	addi	x18,x18,1
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1418:	0306                	slli	x6,x6,0x1
    141a:	0901                	addi	x18,x18,0
                int8_t B_local[A_WIDTH * B_WIDTH];
    141c:	0004                	0x4
    141e:	0501                	addi	x10,x10,0
    1420:	060d                	addi	x12,x12,3
    1422:	00090003          	lb	x0,0(x18)
    1426:	0100                	addi	x8,x2,128
    1428:	0c05                	addi	x24,x24,1
    142a:	04090003          	lb	x0,64(x18)
    142e:	0100                	addi	x8,x2,128
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1430:	1e05                	addi	x28,x28,-31
    1432:	04097f03          	0x4097f03
    1436:	0100                	addi	x8,x2,128
    1438:	0705                	addi	x14,x14,1
    143a:	0306                	slli	x6,x6,0x1
                        bsg_cuda_print_stat_start(temp);
    143c:	7faa                	flw	f31,168(x2)
    143e:	0809                	addi	x16,x16,2
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1440:	0100                	addi	x8,x2,128
    1442:	0b05                	addi	x22,x22,1
    1444:	0306                	slli	x6,x6,0x1
    1446:	0901                	addi	x18,x18,0
    1448:	0000                	unimp
    144a:	0501                	addi	x10,x10,0
    144c:	030a                	slli	x6,x6,0x2
    144e:	0900                	addi	x8,x2,144
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1450:	0004                	0x4
    1452:	0501                	addi	x10,x10,0
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1454:	097f0307          	0x97f0307
    1458:	0004                	0x4
    145a:	0601                	addi	x12,x12,0
    145c:	04090103          	lb	x2,64(x18)
    1460:	0100                	addi	x8,x2,128
    1462:	0b05                	addi	x22,x22,1
                        bsg_cuda_print_stat_start(temp);
    1464:	0306                	slli	x6,x6,0x1
    1466:	0900                	addi	x8,x2,144
    1468:	0000                	unimp
    146a:	0501                	addi	x10,x10,0
                int8_t C_local[A_HEIGHT * B_WIDTH];
    146c:	030a                	slli	x6,x6,0x2
    146e:	0900                	addi	x8,x2,144
                int rc, temp = IGNORE_TAG;
    1470:	0004                	0x4
    1472:	0501                	addi	x10,x10,0
                        bsg_cuda_print_stat_start(temp);
    1474:	060c                	addi	x11,x2,768
    1476:	08090203          	lb	x4,128(x18)
    147a:	0100                	addi	x8,x2,128
    147c:	0f05                	addi	x30,x30,1
    147e:	0306                	slli	x6,x6,0x1
    1480:	0900                	addi	x8,x2,144
    1482:	0000                	unimp
                        temp = tag;
    1484:	0501                	addi	x10,x10,0
    1486:	097d0307          	0x97d0307
                        bsg_cuda_print_stat_start(temp);
    148a:	0008                	0x8
    148c:	0501                	addi	x10,x10,0
    148e:	0324                	addi	x9,x2,392
    1490:	0908                	addi	x10,x2,144
    1492:	0004                	0x4
    1494:	0501                	addi	x10,x10,0
    1496:	7cdc0307          	0x7cdc0307
    149a:	0809                	addi	x16,x16,2
    149c:	0100                	addi	x8,x2,128
    149e:	0905                	addi	x18,x18,1
    14a0:	04090103          	lb	x2,64(x18)
    14a4:	0100                	addi	x8,x2,128
    14a6:	1905                	addi	x18,x18,-31
    14a8:	0306                	slli	x6,x6,0x1
    14aa:	0900                	addi	x8,x2,144
    14ac:	0004                	0x4
    14ae:	0501                	addi	x10,x10,0
    14b0:	061e                	slli	x12,x12,0x7
    14b2:	00090003          	lb	x0,0(x18)
    14b6:	0100                	addi	x8,x2,128
    14b8:	2a05                	jal	15e8 <kernel_matrix_multiply_float+0x48>
    14ba:	08090003          	lb	x0,128(x18)
    14be:	0100                	addi	x8,x2,128
    14c0:	1e05                	addi	x28,x28,-31
    14c2:	04090003          	lb	x0,64(x18)
    14c6:	0100                	addi	x8,x2,128
    14c8:	2205                	jal	15e8 <kernel_matrix_multiply_float+0x48>
    14ca:	04090003          	lb	x0,64(x18)
    14ce:	0100                	addi	x8,x2,128
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14d0:	0a05                	addi	x20,x20,1
    14d2:	04090003          	lb	x0,64(x18)
    14d6:	0100                	addi	x8,x2,128
    14d8:	1b05                	addi	x22,x22,-31
    14da:	04090003          	lb	x0,64(x18)
    14de:	0100                	addi	x8,x2,128
    14e0:	0905                	addi	x18,x18,1
    14e2:	0306                	slli	x6,x6,0x1
    14e4:	0900                	addi	x8,x2,144
    14e6:	0004                	0x4
                for(int i = 0; i <= iter; ++i){
    14e8:	0501                	addi	x10,x10,0
    14ea:	060a                	slli	x12,x12,0x2
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14ec:	00090003          	lb	x0,0(x18)
                        bsg_cuda_print_stat_end(temp);
    14f0:	0100                	addi	x8,x2,128
    14f2:	0905                	addi	x18,x18,1
    14f4:	04090003          	lb	x0,64(x18)
    14f8:	0100                	addi	x8,x2,128
    14fa:	0705                	addi	x14,x14,1
    14fc:	0306                	slli	x6,x6,0x1
    14fe:	038e                	slli	x7,x7,0x3
    1500:	0c09                	addi	x24,x24,2
    1502:	0100                	addi	x8,x2,128
    1504:	1305                	addi	x6,x6,-31
    1506:	0306                	slli	x6,x6,0x1
    1508:	0901                	addi	x18,x18,0
    150a:	0000                	unimp
    150c:	0501                	addi	x10,x10,0
    150e:	030a                	slli	x6,x6,0x2
    1510:	097f                	0x97f
    1512:	0008                	0x8
    1514:	0501                	addi	x10,x10,0
    1516:	01030607          	0x1030607
    151a:	0409                	addi	x8,x8,2
    151c:	0100                	addi	x8,x2,128
    151e:	00090103          	lb	x2,0(x18)
    1522:	0100                	addi	x8,x2,128
    1524:	1305                	addi	x6,x6,-31
    1526:	0306                	slli	x6,x6,0x1
    1528:	097f                	0x97f
    152a:	0000                	unimp
    152c:	0501                	addi	x10,x10,0
    152e:	030a                	slli	x6,x6,0x2
    1530:	0901                	addi	x18,x18,0
    1532:	0004                	0x4
    1534:	0501                	addi	x10,x10,0
    1536:	0609                	addi	x12,x12,2
                for(int i = 0; i <= iter; ++i){
    1538:	04090203          	lb	x4,64(x18)
                        bsg_cuda_print_stat_end(temp);
    153c:	0100                	addi	x8,x2,128
    153e:	1505                	addi	x10,x10,-31
                for(int i = 0; i <= iter; ++i){
    1540:	0306                	slli	x6,x6,0x1
    1542:	0900                	addi	x8,x2,144
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1544:	0000                	unimp
    1546:	0501                	addi	x10,x10,0
                for(int i = 0; i <= iter; ++i){
    1548:	0609                	addi	x12,x12,2
    154a:	04090103          	lb	x2,64(x18)
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    154e:	0100                	addi	x8,x2,128
    1550:	0f05                	addi	x30,x30,1
    1552:	0306                	slli	x6,x6,0x1
    1554:	0900                	addi	x8,x2,144
    1556:	0000                	unimp
    1558:	0501                	addi	x10,x10,0
    155a:	0605                	addi	x12,x12,1
        }
    155c:	0900e603          	0x900e603
    1560:	0008                	0x8
    1562:	0501                	addi	x10,x10,0
    1564:	060e                	slli	x12,x12,0x3
    1566:	04096503          	0x4096503
    156a:	0100                	addi	x8,x2,128
    156c:	0a05                	addi	x20,x20,1
    156e:	0306                	slli	x6,x6,0x1
    1570:	091d                	addi	x18,x18,7
    1572:	0004                	0x4
    1574:	0501                	addi	x10,x10,0
    1576:	09030307          	0x9030307
    157a:	0000                	unimp
    157c:	0501                	addi	x10,x10,0
    157e:	0003060b          	0x3060b
    1582:	0409                	addi	x8,x8,2
    1584:	0100                	addi	x8,x2,128
    1586:	0505                	addi	x10,x10,1
    1588:	0306                	slli	x6,x6,0x1
    158a:	0902                	c.slli64	x18
    158c:	0004                	0x4
    158e:	0501                	addi	x10,x10,0
    1590:	0003060b          	0x3060b
    1594:	0009                	c.nop	2
    1596:	0100                	addi	x8,x2,128
    1598:	1905                	addi	x18,x18,-31
    159a:	0306                	slli	x6,x6,0x1
    159c:	0c097ef3          	csrrci	x29,0xc0,18
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    15a0:	0100                	addi	x8,x2,128
    15a2:	1305                	addi	x6,x6,-31
    15a4:	00090003          	lb	x0,0(x18)
    15a8:	0100                	addi	x8,x2,128
    15aa:	0305                	addi	x6,x6,1
    15ac:	0306                	slli	x6,x6,0x1
    15ae:	0900                	addi	x8,x2,144
    15b0:	0000                	unimp
    15b2:	0501                	addi	x10,x10,0
    15b4:	0605                	addi	x12,x12,1
    15b6:	09018603          	lb	x12,144(x3)
    15ba:	0008                	0x8
    15bc:	0501                	addi	x10,x10,0
    15be:	0615                	addi	x12,x12,5
    15c0:	097faf03          	lw	x30,151(x31)
    15c4:	0004                	0x4
    15c6:	0501                	addi	x10,x10,0
    15c8:	030a                	slli	x6,x6,0x2
    15ca:	00080903          	lb	x18,0(x16)
    15ce:	0501                	addi	x10,x10,0
    15d0:	0609                	addi	x12,x12,2
    15d2:	04090f03          	lb	x30,64(x18)
    15d6:	0100                	addi	x8,x2,128
    15d8:	0b05                	addi	x22,x22,1
    15da:	0306                	slli	x6,x6,0x1
    15dc:	0900                	addi	x8,x2,144
    15de:	0000                	unimp
    15e0:	0501                	addi	x10,x10,0
    15e2:	0609                	addi	x12,x12,2
                float A_local[A_HEIGHT * A_WIDTH];
    15e4:	08090103          	lb	x2,128(x18)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    15e8:	0100                	addi	x8,x2,128
    15ea:	0c05                	addi	x24,x24,1
    15ec:	0306                	slli	x6,x6,0x1
    15ee:	0900                	addi	x8,x2,144
    15f0:	0000                	unimp
    15f2:	0501                	addi	x10,x10,0
    15f4:	0609                	addi	x12,x12,2
    15f6:	04090103          	lb	x2,64(x18)
    15fa:	0100                	addi	x8,x2,128
    15fc:	0305                	addi	x6,x6,1
    15fe:	097cbc03          	0x97cbc03
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1602:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1604:	0301                	addi	x6,x6,0
    1606:	0901                	addi	x18,x18,0
    1608:	0000                	unimp
    160a:	0501                	addi	x10,x10,0
                float B_local[A_WIDTH * B_WIDTH];
    160c:	0310                	addi	x12,x2,384
    160e:	0900                	addi	x8,x2,144
                float A_local[A_HEIGHT * A_WIDTH];
    1610:	0000                	unimp
    1612:	0501                	addi	x10,x10,0
    1614:	00030603          	lb	x12,0(x6)
    1618:	0009                	c.nop	2
    161a:	0100                	addi	x8,x2,128
    161c:	1c05                	addi	x24,x24,-31
    161e:	08090003          	lb	x0,128(x18)
    1622:	0100                	addi	x8,x2,128
    1624:	2d05                	jal	1c54 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x278>
    1626:	0306                	slli	x6,x6,0x1
                for(int i = 0; i <= iter; ++i){
    1628:	0900                	addi	x8,x2,144
    162a:	0014                	0x14
    162c:	0501                	addi	x10,x10,0
    162e:	0328                	addi	x10,x2,392
    1630:	0900                	addi	x8,x2,144
    1632:	0000                	unimp
                float C_local[A_HEIGHT * B_WIDTH];
    1634:	0501                	addi	x10,x10,0
    1636:	00030603          	lb	x12,0(x6)
                float B_local[A_WIDTH * B_WIDTH];
    163a:	0009                	c.nop	2
    163c:	0100                	addi	x8,x2,128
    163e:	2805                	jal	166e <kernel_matrix_multiply_float+0xce>
    1640:	04090003          	lb	x0,64(x18)
    1644:	0100                	addi	x8,x2,128
    1646:	1005                	c.nop	-31
    1648:	0306                	slli	x6,x6,0x1
    164a:	0900                	addi	x8,x2,144
    164c:	0004                	0x4
    164e:	0501                	addi	x10,x10,0
    1650:	00030603          	lb	x12,0(x6)
                float C_local[A_HEIGHT * B_WIDTH];
    1654:	0009                	c.nop	2
    1656:	0100                	addi	x8,x2,128
    1658:	0306                	slli	x6,x6,0x1
    165a:	0901                	addi	x18,x18,0
    165c:	0004                	0x4
    165e:	0501                	addi	x10,x10,0
    1660:	0615                	addi	x12,x12,5
    1662:	0903c303          	lbu	x6,144(x7)
    1666:	0000                	unimp
    1668:	0501                	addi	x10,x10,0
    166a:	030d                	addi	x6,x6,3
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    166c:	7cbd                	lui	x25,0xfffef
    166e:	0409                	addi	x8,x8,2
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1670:	0100                	addi	x8,x2,128
    1672:	0905                	addi	x18,x18,1
    1674:	0306                	slli	x6,x6,0x1
    1676:	040903c3          	0x40903c3
    167a:	0100                	addi	x8,x2,128
    167c:	0c05                	addi	x24,x24,1
    167e:	0306                	slli	x6,x6,0x1
                        bsg_cuda_print_stat_start(temp);
    1680:	0900                	addi	x8,x2,144
    1682:	0000                	unimp
    1684:	0501                	addi	x10,x10,0
    1686:	0609                	addi	x12,x12,2
                float C_local[A_HEIGHT * B_WIDTH];
    1688:	04090103          	lb	x2,64(x18)
                int rc, temp = IGNORE_TAG;
    168c:	0100                	addi	x8,x2,128
    168e:	1505                	addi	x10,x10,-31
    1690:	00090003          	lb	x0,0(x18)
                        bsg_cuda_print_stat_start(temp);
    1694:	0100                	addi	x8,x2,128
    1696:	0905                	addi	x18,x18,1
    1698:	0306                	slli	x6,x6,0x1
    169a:	0900                	addi	x8,x2,144
    169c:	0000                	unimp
    169e:	0501                	addi	x10,x10,0
    16a0:	00030623          	sb	x0,12(x6)
    16a4:	0c09                	addi	x24,x24,2
    16a6:	0100                	addi	x8,x2,128
                        temp = tag;
    16a8:	2c05                	jal	18d8 <_gp+0xd8>
    16aa:	0306                	slli	x6,x6,0x1
                        bsg_cuda_print_stat_start(temp);
    16ac:	0900                	addi	x8,x2,144
    16ae:	0000                	unimp
    16b0:	0501                	addi	x10,x10,0
    16b2:	032e                	slli	x6,x6,0xb
    16b4:	0900                	addi	x8,x2,144
    16b6:	0004                	0x4
    16b8:	0501                	addi	x10,x10,0
    16ba:	09000327          	0x9000327
    16be:	0004                	0x4
    16c0:	0501                	addi	x10,x10,0
    16c2:	032a                	slli	x6,x6,0xa
    16c4:	0900                	addi	x8,x2,144
    16c6:	0004                	0x4
    16c8:	0501                	addi	x10,x10,0
    16ca:	061e                	slli	x12,x12,0x7
    16cc:	04090003          	lb	x0,64(x18)
    16d0:	0100                	addi	x8,x2,128
    16d2:	1505                	addi	x10,x10,-31
    16d4:	00090003          	lb	x0,0(x18)
    16d8:	0100                	addi	x8,x2,128
    16da:	0905                	addi	x18,x18,1
    16dc:	0306                	slli	x6,x6,0x1
    16de:	0900                	addi	x8,x2,144
    16e0:	0000                	unimp
    16e2:	0501                	addi	x10,x10,0
    16e4:	0103060f          	0x103060f
    16e8:	0809                	addi	x16,x16,2
    16ea:	0100                	addi	x8,x2,128
    16ec:	2c05                	jal	191c <__init_param+0x20>
    16ee:	0306                	slli	x6,x6,0x1
    16f0:	0900                	addi	x8,x2,144
    16f2:	000c                	0xc
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    16f4:	0501                	addi	x10,x10,0
    16f6:	0900030f          	0x900030f
    16fa:	0004                	0x4
    16fc:	0501                	addi	x10,x10,0
    16fe:	0625                	addi	x12,x12,9
    1700:	04090003          	lb	x0,64(x18)
    1704:	0100                	addi	x8,x2,128
    1706:	2905                	jal	1b36 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x15a>
    1708:	0306                	slli	x6,x6,0x1
    170a:	0900                	addi	x8,x2,144
                for(int i = 0; i <= iter; ++i){
    170c:	0000                	unimp
    170e:	0501                	addi	x10,x10,0
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1710:	032c                	addi	x11,x2,392
    1712:	0900                	addi	x8,x2,144
                        bsg_cuda_print_stat_end(temp);
    1714:	0004                	0x4
    1716:	0501                	addi	x10,x10,0
    1718:	0003060f          	0x3060f
    171c:	0409                	addi	x8,x8,2
    171e:	0100                	addi	x8,x2,128
    1720:	1905                	addi	x18,x18,-31
    1722:	097fb403          	0x97fb403
    1726:	0008                	0x8
    1728:	0501                	addi	x10,x10,0
    172a:	09000313          	li	x6,144
    172e:	0000                	unimp
    1730:	0501                	addi	x10,x10,0
    1732:	00030603          	lb	x12,0(x6)
    1736:	0009                	c.nop	2
    1738:	0100                	addi	x8,x2,128
    173a:	0a05                	addi	x20,x20,1
    173c:	08093803          	0x8093803
    1740:	0100                	addi	x8,x2,128
    1742:	0905                	addi	x18,x18,1
    1744:	0306                	slli	x6,x6,0x1
    1746:	0918                	addi	x14,x2,144
    1748:	0004                	0x4
    174a:	0501                	addi	x10,x10,0
    174c:	060c                	addi	x11,x2,768
    174e:	00090003          	lb	x0,0(x18)
    1752:	0100                	addi	x8,x2,128
    1754:	0905                	addi	x18,x18,1
    1756:	0306                	slli	x6,x6,0x1
                for(int i = 0; i <= iter; ++i){
    1758:	0905                	addi	x18,x18,1
    175a:	0008                	0x8
                        bsg_cuda_print_stat_end(temp);
    175c:	0501                	addi	x10,x10,0
    175e:	0003060f          	0x3060f
    1762:	0009                	c.nop	2
                for(int i = 0; i <= iter; ++i){
    1764:	0100                	addi	x8,x2,128
    1766:	2b05                	jal	1c96 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x1a>
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1768:	08090003          	lb	x0,128(x18)
                for(int i = 0; i <= iter; ++i){
    176c:	0100                	addi	x8,x2,128
    176e:	0f05                	addi	x30,x30,1
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1770:	04090003          	lb	x0,64(x18)
    1774:	0100                	addi	x8,x2,128
    1776:	0905                	addi	x18,x18,1
    1778:	0306                	slli	x6,x6,0x1
    177a:	0901                	addi	x18,x18,0
    177c:	0008                	0x8
    177e:	0501                	addi	x10,x10,0
        }
    1780:	0319                	addi	x6,x6,6
    1782:	7faa                	flw	f31,168(x2)
    1784:	0409                	addi	x8,x8,2
    1786:	0100                	addi	x8,x2,128
    1788:	1305                	addi	x6,x6,-31
    178a:	00090003          	lb	x0,0(x18)
    178e:	0100                	addi	x8,x2,128
    1790:	0305                	addi	x6,x6,1
    1792:	0306                	slli	x6,x6,0x1
    1794:	0900                	addi	x8,x2,144
    1796:	0000                	unimp
    1798:	0501                	addi	x10,x10,0
    179a:	0609                	addi	x12,x12,2
    179c:	0900e403          	0x900e403
    17a0:	0008                	0x8
    17a2:	0301                	addi	x6,x6,0
    17a4:	0901                	addi	x18,x18,0
    17a6:	0000                	unimp
    17a8:	0501                	addi	x10,x10,0
    17aa:	0305                	addi	x6,x6,1
    17ac:	0921                	addi	x18,x18,8
    17ae:	0000                	unimp
    17b0:	0501                	addi	x10,x10,0
    17b2:	060e                	slli	x12,x12,0x3
    17b4:	04095e03          	lhu	x28,64(x18)
    17b8:	0100                	addi	x8,x2,128
    17ba:	0905                	addi	x18,x18,1
    17bc:	0306                	slli	x6,x6,0x1
    17be:	090c                	addi	x11,x2,144
    17c0:	0008                	0x8
    17c2:	0501                	addi	x10,x10,0
    17c4:	0003060f          	0x3060f
    17c8:	0009                	c.nop	2
    17ca:	0100                	addi	x8,x2,128
    17cc:	0505                	addi	x10,x10,1
    17ce:	0306                	slli	x6,x6,0x1
    17d0:	0916                	slli	x18,x18,0x5
    17d2:	0004                	0x4
    17d4:	0501                	addi	x10,x10,0
    17d6:	060a                	slli	x12,x12,0x2
    17d8:	097fb603          	0x97fb603
    17dc:	0004                	0x4
    17de:	0301                	addi	x6,x6,0
    17e0:	097c                	addi	x15,x2,156
    17e2:	0008                	0x8
    17e4:	0501                	addi	x10,x10,0
    17e6:	0609                	addi	x12,x12,2
    17e8:	04090903          	lb	x18,64(x18)
    17ec:	0100                	addi	x8,x2,128
    17ee:	1505                	addi	x10,x10,-31
    17f0:	0306                	slli	x6,x6,0x1
    17f2:	0900                	addi	x8,x2,144
    17f4:	0000                	unimp
    17f6:	0501                	addi	x10,x10,0
    17f8:	030c                	addi	x11,x2,384
    17fa:	0900                	addi	x8,x2,144
    17fc:	0008                	0x8
    17fe:	0501                	addi	x10,x10,0
    1800:	0609                	addi	x12,x12,2
    1802:	04090103          	lb	x2,64(x18)
    1806:	0100                	addi	x8,x2,128
    1808:	1205                	addi	x4,x4,-31
    180a:	0306                	slli	x6,x6,0x1
    180c:	0900                	addi	x8,x2,144
    180e:	0000                	unimp
    1810:	0501                	addi	x10,x10,0
    1812:	030d                	addi	x6,x6,3
    1814:	0900                	addi	x8,x2,144
    1816:	0004                	0x4
    1818:	0501                	addi	x10,x10,0
    181a:	0312                	slli	x6,x6,0x4
    181c:	0900                	addi	x8,x2,144
    181e:	0008                	0x8
    1820:	0501                	addi	x10,x10,0
    1822:	0322                	slli	x6,x6,0x8
    1824:	0900                	addi	x8,x2,144
    1826:	0004                	0x4
    1828:	0501                	addi	x10,x10,0
    182a:	0609                	addi	x12,x12,2
    182c:	04090103          	lb	x2,64(x18)
    1830:	0100                	addi	x8,x2,128
    1832:	0f05                	addi	x30,x30,1
    1834:	00090003          	lb	x0,0(x18)
    1838:	0100                	addi	x8,x2,128
    183a:	0d05                	addi	x26,x26,1
    183c:	0306                	slli	x6,x6,0x1
    183e:	097f                	0x97f
    1840:	0008                	0x8
    1842:	0501                	addi	x10,x10,0
    1844:	032a                	slli	x6,x6,0xa
    1846:	0901                	addi	x18,x18,0
    1848:	0004                	0x4
    184a:	0501                	addi	x10,x10,0
    184c:	0900030f          	0x900030f
    1850:	0004                	0x4
    1852:	0501                	addi	x10,x10,0
    1854:	00030623          	sb	x0,12(x6)
    1858:	0409                	addi	x8,x8,2
    185a:	0100                	addi	x8,x2,128
    185c:	2705                	jal	1f7c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EaaaEiPT0_PT1_PT2_mmm+0x28>
    185e:	0306                	slli	x6,x6,0x1
    1860:	0900                	addi	x8,x2,144
    1862:	0000                	unimp
    1864:	0501                	addi	x10,x10,0
    1866:	032a                	slli	x6,x6,0xa
    1868:	0900                	addi	x8,x2,144
    186a:	0004                	0x4
    186c:	0501                	addi	x10,x10,0
    186e:	0003060f          	0x3060f
    1872:	0409                	addi	x8,x8,2
    1874:	0100                	addi	x8,x2,128
    1876:	1905                	addi	x18,x18,-31
    1878:	097fbd03          	0x97fbd03
    187c:	000c                	0xc
    187e:	0501                	addi	x10,x10,0
    1880:	09000313          	li	x6,144
    1884:	0000                	unimp
    1886:	0501                	addi	x10,x10,0
    1888:	00030603          	lb	x12,0(x6)
    188c:	0009                	c.nop	2
    188e:	0100                	addi	x8,x2,128
    1890:	0905                	addi	x18,x18,1
    1892:	0306                	slli	x6,x6,0x1
    1894:	00e8                	addi	x10,x2,76
    1896:	0809                	addi	x16,x16,2
    1898:	0100                	addi	x8,x2,128
    189a:	0f05                	addi	x30,x30,1
    189c:	0306                	slli	x6,x6,0x1
    189e:	0900                	addi	x8,x2,144
    18a0:	0000                	unimp
    18a2:	0501                	addi	x10,x10,0
    18a4:	0605                	addi	x12,x12,1
    18a6:	04091e03          	lh	x28,64(x18)
    18aa:	0100                	addi	x8,x2,128
    18ac:	0e05                	addi	x28,x28,1
    18ae:	0306                	slli	x6,x6,0x1
    18b0:	0965                	addi	x18,x18,25
    18b2:	0004                	0x4
    18b4:	0501                	addi	x10,x10,0
    18b6:	0609                	addi	x12,x12,2
    18b8:	08096e03          	0x8096e03
    18bc:	0100                	addi	x8,x2,128
    18be:	0f05                	addi	x30,x30,1
    18c0:	0306                	slli	x6,x6,0x1
    18c2:	0900                	addi	x8,x2,144
    18c4:	0004                	0x4
    18c6:	0501                	addi	x10,x10,0
    18c8:	0609                	addi	x12,x12,2
    18ca:	04090303          	lb	x6,64(x18)
    18ce:	0100                	addi	x8,x2,128
    18d0:	0b05                	addi	x22,x22,1
    18d2:	04090303          	lb	x6,64(x18)
    18d6:	0100                	addi	x8,x2,128
    18d8:	0f05                	addi	x30,x30,1
    18da:	097d9b03          	lh	x22,151(x27)
    18de:	0000                	unimp
        __wait_until_valid_func();
    18e0:	0501                	addi	x10,x10,0
    18e2:	0305                	addi	x6,x6,1
    18e4:	0902                	c.slli64	x18
    18e6:	0000                	unimp
    18e8:	0501                	addi	x10,x10,0
    18ea:	01030607          	0x1030607
    18ee:	0009                	c.nop	2
    18f0:	0100                	addi	x8,x2,128
    18f2:	04097c03          	0x4097c03
    18f6:	0100                	addi	x8,x2,128
    18f8:	0a05                	addi	x20,x20,1
    18fa:	08090a03          	lb	x20,128(x18)
    18fe:	0100                	addi	x8,x2,128
    1900:	0f05                	addi	x30,x30,1
    1902:	04090703          	lb	x14,64(x18)
    1906:	0100                	addi	x8,x2,128
    1908:	1f05                	addi	x30,x30,-31
    190a:	04090203          	lb	x4,64(x18)
    190e:	0100                	addi	x8,x2,128
    1910:	04097903          	0x4097903
    1914:	0100                	addi	x8,x2,128
    1916:	1205                	addi	x4,x4,-31
    1918:	04097b03          	0x4097b03
    191c:	0100                	addi	x8,x2,128
    191e:	1c05                	addi	x24,x24,-31
    1920:	04097c03          	0x4097c03
    1924:	0100                	addi	x8,x2,128
    1926:	0505                	addi	x10,x10,1
    1928:	0306                	slli	x6,x6,0x1
    192a:	0901                	addi	x18,x18,0
    192c:	0004                	0x4
    192e:	0301                	addi	x6,x6,0
    1930:	0902                	c.slli64	x18
    1932:	0000                	unimp
    1934:	0501                	addi	x10,x10,0
    1936:	0608                	addi	x10,x2,768
    1938:	04090003          	lb	x0,64(x18)
    193c:	0100                	addi	x8,x2,128
    193e:	0705                	addi	x14,x14,1
    1940:	0306                	slli	x6,x6,0x1
    1942:	0901                	addi	x18,x18,0
    1944:	0004                	0x4
    1946:	0501                	addi	x10,x10,0
    1948:	0612                	slli	x12,x12,0x4
    194a:	00090003          	lb	x0,0(x18)
    194e:	0100                	addi	x8,x2,128
    1950:	1605                	addi	x12,x12,-31
    1952:	0306                	slli	x6,x6,0x1
    1954:	097a                	slli	x18,x18,0x1e
    1956:	000c                	0xc
    1958:	0501                	addi	x10,x10,0
    195a:	0900030f          	0x900030f
    195e:	0000                	unimp
    1960:	0501                	addi	x10,x10,0
    1962:	00030603          	lb	x12,0(x6)
    1966:	0409                	addi	x8,x8,2
    1968:	0100                	addi	x8,x2,128
    196a:	0505                	addi	x10,x10,1
    196c:	0306                	slli	x6,x6,0x1
    196e:	0902                	c.slli64	x18
    1970:	0004                	0x4
    1972:	0501                	addi	x10,x10,0
    1974:	0311                	addi	x6,x6,4
    1976:	0900                	addi	x8,x2,144
    1978:	0000                	unimp
    197a:	0501                	addi	x10,x10,0
    197c:	061c                	addi	x15,x2,768
    197e:	00090003          	lb	x0,0(x18)
    1982:	0100                	addi	x8,x2,128
    1984:	0705                	addi	x14,x14,1
    1986:	0c090103          	lb	x2,192(x18)
    198a:	0100                	addi	x8,x2,128
    198c:	1805                	addi	x16,x16,-31
    198e:	04097f03          	0x4097f03
    1992:	0100                	addi	x8,x2,128
    1994:	0505                	addi	x10,x10,1
    1996:	0306                	slli	x6,x6,0x1
    1998:	0901                	addi	x18,x18,0
    199a:	0004                	0x4
    199c:	0301                	addi	x6,x6,0
    199e:	0902                	c.slli64	x18
    19a0:	0000                	unimp
    19a2:	0501                	addi	x10,x10,0
    19a4:	0608                	addi	x10,x2,768
    19a6:	04090003          	lb	x0,64(x18)
    19aa:	0100                	addi	x8,x2,128
    19ac:	0705                	addi	x14,x14,1
    19ae:	0306                	slli	x6,x6,0x1
  if (__bsg_id == 0) 
    19b0:	0904                	addi	x9,x2,144
    19b2:	0004                	0x4
    19b4:	0501                	addi	x10,x10,0
    19b6:	060a                	slli	x12,x12,0x2
    19b8:	00090003          	lb	x0,0(x18)
     *signal_ptr = cuda_finish_signal_val;     
    19bc:	0100                	addi	x8,x2,128
    19be:	0905                	addi	x18,x18,1
    19c0:	0306                	slli	x6,x6,0x1
    19c2:	0902                	c.slli64	x18
    19c4:	0004                	0x4
    19c6:	0501                	addi	x10,x10,0
    19c8:	0103060b          	0x103060b
    19cc:	0009                	c.nop	2
    19ce:	0100                	addi	x8,x2,128
    19d0:	1405                	addi	x8,x8,-31
    19d2:	04097f03          	0x4097f03
}
    19d6:	0100                	addi	x8,x2,128
    19d8:	08090203          	lb	x4,128(x18)
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19dc:	0100                	addi	x8,x2,128
    19de:	1005                	c.nop	-31
    19e0:	04090003          	lb	x0,64(x18)
    19e4:	0100                	addi	x8,x2,128
    19e6:	1f05                	addi	x30,x30,-31
        uint32_t incr = A_WIDTH * (F-1);
    19e8:	08097e03          	0x8097e03
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19ec:	0100                	addi	x8,x2,128
    19ee:	04090203          	lb	x4,64(x18)
        uint32_t incr = A_WIDTH * (F-1);
    19f2:	0100                	addi	x8,x2,128
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19f4:	1c05                	addi	x24,x24,-31
    19f6:	04097e03          	0x4097e03
    19fa:	0100                	addi	x8,x2,128
    19fc:	1405                	addi	x8,x8,-31
    19fe:	04090003          	lb	x0,64(x18)
    1a02:	0100                	addi	x8,x2,128
    1a04:	0905                	addi	x18,x18,1
    1a06:	0306                	slli	x6,x6,0x1
    1a08:	0901                	addi	x18,x18,0
    1a0a:	0008                	0x8
    1a0c:	0301                	addi	x6,x6,0
    1a0e:	0901                	addi	x18,x18,0
    1a10:	0000                	unimp
    1a12:	0501                	addi	x10,x10,0
    1a14:	0103060b          	0x103060b
    1a18:	0009                	c.nop	2
    1a1a:	0100                	addi	x8,x2,128
    1a1c:	1c05                	addi	x24,x24,-31
    1a1e:	04097f03          	0x4097f03
    1a22:	0100                	addi	x8,x2,128
    1a24:	1405                	addi	x8,x8,-31
    1a26:	04090003          	lb	x0,64(x18)
    1a2a:	0100                	addi	x8,x2,128
    1a2c:	0905                	addi	x18,x18,1
    1a2e:	0306                	slli	x6,x6,0x1
        uint32_t incr = A_WIDTH * (F-1);
    1a30:	0901                	addi	x18,x18,0
    1a32:	0008                	0x8
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1a34:	0501                	addi	x10,x10,0
    1a36:	09080307          	0x9080307
    1a3a:	0000                	unimp
    1a3c:	0501                	addi	x10,x10,0
    1a3e:	061a                	slli	x12,x12,0x6
    1a40:	00090003          	lb	x0,0(x18)
    1a44:	0100                	addi	x8,x2,128
    1a46:	1205                	addi	x4,x4,-31
    1a48:	04090003          	lb	x0,64(x18)
    1a4c:	0100                	addi	x8,x2,128
    1a4e:	1605                	addi	x12,x12,-31
    1a50:	0306                	slli	x6,x6,0x1
    1a52:	096a                	slli	x18,x18,0x1a
    1a54:	0010                	0x10
    1a56:	0501                	addi	x10,x10,0
    1a58:	0900030f          	0x900030f
    1a5c:	0000                	unimp
    1a5e:	0501                	addi	x10,x10,0
    1a60:	00030603          	lb	x12,0(x6)
    1a64:	0409                	addi	x8,x8,2
    1a66:	0100                	addi	x8,x2,128
    1a68:	0306                	slli	x6,x6,0x1
    1a6a:	091a                	slli	x18,x18,0x6
    1a6c:	0004                	0x4
    1a6e:	0501                	addi	x10,x10,0
    1a70:	060e                	slli	x12,x12,0x3
    1a72:	00090003          	lb	x0,0(x18)
    1a76:	0100                	addi	x8,x2,128
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1a78:	0605                	addi	x12,x12,1
    1a7a:	08090003          	lb	x0,128(x18)
    1a7e:	0100                	addi	x8,x2,128
    1a80:	1d05                	addi	x26,x26,-31
    1a82:	0306                	slli	x6,x6,0x1
    1a84:	0900                	addi	x8,x2,144
    1a86:	0004                	0x4
    1a88:	0501                	addi	x10,x10,0
    1a8a:	00030633          	add	x12,x6,x0
    1a8e:	0809                	addi	x16,x16,2
    1a90:	0100                	addi	x8,x2,128
    1a92:	1d05                	addi	x26,x26,-31
    1a94:	04090003          	lb	x0,64(x18)
    1a98:	0100                	addi	x8,x2,128
    1a9a:	2c05                	jal	1cca <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x4e>
    1a9c:	0306                	slli	x6,x6,0x1
    1a9e:	0900                	addi	x8,x2,144
    1aa0:	0004                	0x4
    1aa2:	0501                	addi	x10,x10,0
    1aa4:	0630                	addi	x12,x2,776
    1aa6:	00090003          	lb	x0,0(x18)
    1aaa:	0100                	addi	x8,x2,128
    1aac:	3305                	jal	17cc <memcpy+0x8>
    1aae:	04090003          	lb	x0,64(x18)
    1ab2:	0100                	addi	x8,x2,128
    1ab4:	1d05                	addi	x26,x26,-31
    1ab6:	0306                	slli	x6,x6,0x1
                boff = 0;
    1ab8:	0900                	addi	x8,x2,144
    1aba:	0004                	0x4
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1abc:	0501                	addi	x10,x10,0
    1abe:	09010303          	lb	x6,144(x2)
    1ac2:	0010                	0x10
    1ac4:	0501                	addi	x10,x10,0
    1ac6:	0900030f          	0x900030f
    1aca:	0000                	unimp
    1acc:	0501                	addi	x10,x10,0
    1ace:	031d                	addi	x6,x6,7
                        TC sum[F] = {{init}};
    1ad0:	0900                	addi	x8,x2,144
    1ad2:	0008                	0x8
    1ad4:	0501                	addi	x10,x10,0
    1ad6:	0624                	addi	x9,x2,776
    1ad8:	00090003          	lb	x0,0(x18)
    1adc:	0100                	addi	x8,x2,128
    1ade:	2105                	jal	1efe <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x282>
    1ae0:	04090003          	lb	x0,64(x18)
    1ae4:	0100                	addi	x8,x2,128
    1ae6:	2405                	jal	1d06 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x8a>
    1ae8:	08090003          	lb	x0,128(x18)
    1aec:	0100                	addi	x8,x2,128
    1aee:	1805                	addi	x16,x16,-31
    1af0:	0306                	slli	x6,x6,0x1
    1af2:	0900                	addi	x8,x2,144
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1af4:	0004                	0x4
    1af6:	0501                	addi	x10,x10,0
                        TC sum[F] = {{init}};
    1af8:	0900030f          	0x900030f
    1afc:	0000                	unimp
    1afe:	0501                	addi	x10,x10,0
    1b00:	00030603          	lb	x12,0(x6)
    1b04:	0009                	c.nop	2
    1b06:	0100                	addi	x8,x2,128
    1b08:	0905                	addi	x18,x18,1
    1b0a:	0306                	slli	x6,x6,0x1
    1b0c:	0901                	addi	x18,x18,0
    1b0e:	0004                	0x4
    1b10:	0501                	addi	x10,x10,0
    1b12:	061f 0003 0809      	0x8090003061f
                                        sum[f] += A[aoff] * BT[bofff];
    1b18:	0100                	addi	x8,x2,128
    1b1a:	0905                	addi	x18,x18,1
    1b1c:	04090003          	lb	x0,64(x18)
    1b20:	0100                	addi	x8,x2,128
    1b22:	1805                	addi	x16,x16,-31
    1b24:	0306                	slli	x6,x6,0x1
    1b26:	0900                	addi	x8,x2,144
    1b28:	0004                	0x4
    1b2a:	0501                	addi	x10,x10,0
    1b2c:	061c                	addi	x15,x2,768
    1b2e:	00090003          	lb	x0,0(x18)
    1b32:	0100                	addi	x8,x2,128
    1b34:	0905                	addi	x18,x18,1
    1b36:	04090003          	lb	x0,64(x18)
    1b3a:	0100                	addi	x8,x2,128
    1b3c:	1f05                	addi	x30,x30,-31
    1b3e:	0c090003          	lb	x0,192(x18)
    1b42:	0100                	addi	x8,x2,128
    1b44:	0905                	addi	x18,x18,1
    1b46:	0306                	slli	x6,x6,0x1
    1b48:	0900                	addi	x8,x2,144
    1b4a:	0004                	0x4
    1b4c:	0501                	addi	x10,x10,0
    1b4e:	09020303          	lb	x6,144(x4) # ffff9090 <_end+0x7eff9038>
    1b52:	0010                	0x10
    1b54:	0501                	addi	x10,x10,0
    1b56:	0309                	addi	x6,x6,2
    1b58:	02d8                	addi	x14,x2,324
    1b5a:	0409                	addi	x8,x8,2
    1b5c:	0100                	addi	x8,x2,128
    1b5e:	0f05                	addi	x30,x30,1
    1b60:	0306                	slli	x6,x6,0x1
    1b62:	0900                	addi	x8,x2,144
    1b64:	0000                	unimp
    1b66:	0501                	addi	x10,x10,0
    1b68:	030a                	slli	x6,x6,0x2
    1b6a:	094c                	addi	x11,x2,148
    1b6c:	0004                	0x4
    1b6e:	0501                	addi	x10,x10,0
    1b70:	0605                	addi	x12,x12,1
    1b72:	0900ca03          	lbu	x20,144(x1)
    1b76:	0004                	0x4
    1b78:	0501                	addi	x10,x10,0
    1b7a:	0608                	addi	x10,x2,768
    1b7c:	00090003          	lb	x0,0(x18)
    1b80:	0100                	addi	x8,x2,128
    1b82:	0705                	addi	x14,x14,1
    1b84:	0306                	slli	x6,x6,0x1
    1b86:	0901                	addi	x18,x18,0
    1b88:	000c                	0xc
    1b8a:	0501                	addi	x10,x10,0
    1b8c:	060a                	slli	x12,x12,0x2
    1b8e:	097fb103          	0x97fb103
    1b92:	0004                	0x4
    1b94:	0501                	addi	x10,x10,0
    1b96:	0609                	addi	x12,x12,2
    1b98:	0c092c03          	lw	x24,192(x18)
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1b9c:	0100                	addi	x8,x2,128
    1b9e:	00090103          	lb	x2,0(x18)
    1ba2:	0100                	addi	x8,x2,128
                        boff += incr;
    1ba4:	0e05                	addi	x28,x28,1
    1ba6:	0306                	slli	x6,x6,0x1
                                C[coff + f] = sum[f];
    1ba8:	097f                	0x97f
    1baa:	0000                	unimp
    1bac:	0501                	addi	x10,x10,0
    1bae:	0309                	addi	x6,x6,2
                        boff += incr;
    1bb0:	0901                	addi	x18,x18,0
    1bb2:	0004                	0x4
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1bb4:	0601                	addi	x12,x12,0
    1bb6:	04090303          	lb	x6,64(x18)
                                C[coff + f] = sum[f];
    1bba:	0100                	addi	x8,x2,128
    1bbc:	0f05                	addi	x30,x30,1
    1bbe:	0306                	slli	x6,x6,0x1
    1bc0:	0900                	addi	x8,x2,144
    1bc2:	0000                	unimp
    1bc4:	0501                	addi	x10,x10,0
    1bc6:	030e                	slli	x6,x6,0x3
    1bc8:	00040903          	lb	x18,0(x8)
    1bcc:	0501                	addi	x10,x10,0
    1bce:	0609                	addi	x12,x12,2
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1bd0:	08096e03          	0x8096e03
    1bd4:	0100                	addi	x8,x2,128
    1bd6:	0f05                	addi	x30,x30,1
    1bd8:	0306                	slli	x6,x6,0x1
    1bda:	0900                	addi	x8,x2,144
    1bdc:	0000                	unimp
    1bde:	0501                	addi	x10,x10,0
    1be0:	0609                	addi	x12,x12,2
    1be2:	04090303          	lb	x6,64(x18)
    1be6:	0100                	addi	x8,x2,128
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1be8:	0c05                	addi	x24,x24,1
    1bea:	0306                	slli	x6,x6,0x1
    1bec:	0900                	addi	x8,x2,144
    1bee:	0000                	unimp
    1bf0:	0501                	addi	x10,x10,0
    1bf2:	0103060b          	0x103060b
    1bf6:	1009                	c.nop	-30
    1bf8:	0100                	addi	x8,x2,128
    1bfa:	0305                	addi	x6,x6,1
    1bfc:	097d8303          	lb	x6,151(x27)
    1c00:	0000                	unimp
    1c02:	0301                	addi	x6,x6,0
    1c04:	0901                	addi	x18,x18,0
    1c06:	0000                	unimp
    1c08:	0301                	addi	x6,x6,0
    1c0a:	0901                	addi	x18,x18,0
    1c0c:	0000                	unimp
    1c0e:	0301                	addi	x6,x6,0
    1c10:	0902                	c.slli64	x18
    1c12:	0000                	unimp
    1c14:	0501                	addi	x10,x10,0
    1c16:	060c                	addi	x11,x2,768
    1c18:	00090003          	lb	x0,0(x18)
}
    1c1c:	0100                	addi	x8,x2,128
    1c1e:	0905                	addi	x18,x18,1
    1c20:	04097d03          	0x4097d03
    1c24:	0100                	addi	x8,x2,128
    1c26:	0605                	addi	x12,x12,1
    1c28:	04090303          	lb	x6,64(x18)
    1c2c:	0100                	addi	x8,x2,128
    1c2e:	1e05                	addi	x28,x28,-31
    1c30:	04090003          	lb	x0,64(x18)
    1c34:	0100                	addi	x8,x2,128
    1c36:	0305                	addi	x6,x6,1
    1c38:	0306                	slli	x6,x6,0x1
    1c3a:	0901                	addi	x18,x18,0
    1c3c:	0008                	0x8
    1c3e:	0301                	addi	x6,x6,0
    1c40:	0901                	addi	x18,x18,0
    1c42:	0000                	unimp
    1c44:	0501                	addi	x10,x10,0
    1c46:	0900030f          	0x900030f
    1c4a:	0000                	unimp
    1c4c:	0501                	addi	x10,x10,0
    1c4e:	0305                	addi	x6,x6,1
    1c50:	0902                	c.slli64	x18
    1c52:	0000                	unimp
    1c54:	0501                	addi	x10,x10,0
    1c56:	061e                	slli	x12,x12,0x7
                        TC sum[F] = {{init}};
    1c58:	08097c03          	0x8097c03
    1c5c:	0100                	addi	x8,x2,128
    1c5e:	1c05                	addi	x24,x24,-31
    1c60:	04090403          	lb	x8,64(x18)
    1c64:	0100                	addi	x8,x2,128
    1c66:	0505                	addi	x10,x10,1
    1c68:	0306                	slli	x6,x6,0x1
    1c6a:	0900                	addi	x8,x2,144
    1c6c:	0008                	0x8
    1c6e:	0501                	addi	x10,x10,0
    1c70:	0311                	addi	x6,x6,4
    1c72:	0900                	addi	x8,x2,144
    1c74:	0000                	unimp
    1c76:	0501                	addi	x10,x10,0
    1c78:	061c                	addi	x15,x2,768
    1c7a:	00090003          	lb	x0,0(x18)
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c7e:	0100                	addi	x8,x2,128
        uint32_t incr = A_WIDTH * (F-1);
    1c80:	0505                	addi	x10,x10,1
    1c82:	0306                	slli	x6,x6,0x1
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c84:	0901                	addi	x18,x18,0
    1c86:	0004                	0x4
        uint32_t incr = A_WIDTH * (F-1);
    1c88:	0501                	addi	x10,x10,0
    1c8a:	061a                	slli	x12,x12,0x6
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c8c:	00090003          	lb	x0,0(x18)
    1c90:	0100                	addi	x8,x2,128
    1c92:	1e05                	addi	x28,x28,-31
    1c94:	0c090003          	lb	x0,192(x18)
    1c98:	0100                	addi	x8,x2,128
    1c9a:	04090103          	lb	x2,64(x18)
    1c9e:	0100                	addi	x8,x2,128
    1ca0:	1505                	addi	x10,x10,-31
    1ca2:	04097f03          	0x4097f03
    1ca6:	0100                	addi	x8,x2,128
    1ca8:	04090103          	lb	x2,64(x18)
    1cac:	0100                	addi	x8,x2,128
    1cae:	1005                	c.nop	-31
    1cb0:	04097f03          	0x4097f03
    1cb4:	0100                	addi	x8,x2,128
    1cb6:	04090103          	lb	x2,64(x18)
    1cba:	0100                	addi	x8,x2,128
    1cbc:	04097f03          	0x4097f03
    1cc0:	0100                	addi	x8,x2,128
    1cc2:	0505                	addi	x10,x10,1
    1cc4:	0306                	slli	x6,x6,0x1
    1cc6:	0901                	addi	x18,x18,0
    1cc8:	0004                	0x4
    1cca:	0501                	addi	x10,x10,0
        uint32_t incr = A_WIDTH * (F-1);
    1ccc:	0610                	addi	x12,x2,768
    1cce:	00090003          	lb	x0,0(x18)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1cd2:	0100                	addi	x8,x2,128
    1cd4:	1605                	addi	x12,x12,-31
    1cd6:	0306                	slli	x6,x6,0x1
    1cd8:	097c                	addi	x15,x2,156
    1cda:	0004                	0x4
    1cdc:	0501                	addi	x10,x10,0
    1cde:	0900030f          	0x900030f
    1ce2:	0000                	unimp
    1ce4:	0501                	addi	x10,x10,0
    1ce6:	00030603          	lb	x12,0(x6)
    1cea:	0009                	c.nop	2
    1cec:	0100                	addi	x8,x2,128
    1cee:	0306                	slli	x6,x6,0x1
    1cf0:	00040907          	0x40907
    1cf4:	0501                	addi	x10,x10,0
    1cf6:	060e                	slli	x12,x12,0x3
    1cf8:	00090003          	lb	x0,0(x18)
    1cfc:	0100                	addi	x8,x2,128
    1cfe:	0605                	addi	x12,x12,1
    1d00:	08090003          	lb	x0,128(x18)
    1d04:	0100                	addi	x8,x2,128
    1d06:	1d05                	addi	x26,x26,-31
    1d08:	0306                	slli	x6,x6,0x1
    1d0a:	0900                	addi	x8,x2,144
    1d0c:	0004                	0x4
    1d0e:	0501                	addi	x10,x10,0
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1d10:	00030633          	add	x12,x6,x0
    1d14:	0c09                	addi	x24,x24,2
    1d16:	0100                	addi	x8,x2,128
    1d18:	1d05                	addi	x26,x26,-31
    1d1a:	04090003          	lb	x0,64(x18)
    1d1e:	0100                	addi	x8,x2,128
    1d20:	2c05                	jal	1f50 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x2d4>
    1d22:	0306                	slli	x6,x6,0x1
    1d24:	0900                	addi	x8,x2,144
    1d26:	0004                	0x4
    1d28:	0501                	addi	x10,x10,0
    1d2a:	0630                	addi	x12,x2,776
    1d2c:	00090003          	lb	x0,0(x18)
    1d30:	0100                	addi	x8,x2,128
    1d32:	3305                	jal	1a52 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x76>
    1d34:	04090003          	lb	x0,64(x18)
    1d38:	0100                	addi	x8,x2,128
    1d3a:	1d05                	addi	x26,x26,-31
    1d3c:	0306                	slli	x6,x6,0x1
    1d3e:	0900                	addi	x8,x2,144
    1d40:	0004                	0x4
    1d42:	0501                	addi	x10,x10,0
    1d44:	09010303          	lb	x6,144(x2)
    1d48:	000c                	0xc
    1d4a:	0501                	addi	x10,x10,0
    1d4c:	0900030f          	0x900030f
                boff = 0;
    1d50:	0000                	unimp
    1d52:	0501                	addi	x10,x10,0
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1d54:	031d                	addi	x6,x6,7
    1d56:	0900                	addi	x8,x2,144
    1d58:	0008                	0x8
    1d5a:	0501                	addi	x10,x10,0
    1d5c:	0624                	addi	x9,x2,776
    1d5e:	00090003          	lb	x0,0(x18)
    1d62:	0100                	addi	x8,x2,128
    1d64:	1805                	addi	x16,x16,-31
    1d66:	0306                	slli	x6,x6,0x1
                        TC sum[F] = {{init}};
    1d68:	0900                	addi	x8,x2,144
    1d6a:	0010                	0x10
    1d6c:	0501                	addi	x10,x10,0
    1d6e:	0900030f          	0x900030f
    1d72:	0000                	unimp
    1d74:	0501                	addi	x10,x10,0
    1d76:	00030603          	lb	x12,0(x6)
    1d7a:	0009                	c.nop	2
    1d7c:	0100                	addi	x8,x2,128
    1d7e:	0905                	addi	x18,x18,1
    1d80:	04090103          	lb	x2,64(x18)
    1d84:	0100                	addi	x8,x2,128
    1d86:	0306                	slli	x6,x6,0x1
    1d88:	0900                	addi	x8,x2,144
    1d8a:	0008                	0x8
    1d8c:	0501                	addi	x10,x10,0
    1d8e:	0621                	addi	x12,x12,8
    1d90:	04097f03          	0x4097f03
    1d94:	0100                	addi	x8,x2,128
    1d96:	1f05                	addi	x30,x30,-31
    1d98:	04090103          	lb	x2,64(x18)
    1d9c:	0100                	addi	x8,x2,128
    1d9e:	0905                	addi	x18,x18,1
    1da0:	04090003          	lb	x0,64(x18)
    1da4:	0100                	addi	x8,x2,128
    1da6:	1805                	addi	x16,x16,-31
    1da8:	0306                	slli	x6,x6,0x1
    1daa:	0900                	addi	x8,x2,144
                                        sum[f] += A[aoff] * BT[bofff];
    1dac:	0008                	0x8
    1dae:	0501                	addi	x10,x10,0
    1db0:	061c                	addi	x15,x2,768
    1db2:	00090003          	lb	x0,0(x18)
    1db6:	0100                	addi	x8,x2,128
    1db8:	0905                	addi	x18,x18,1
    1dba:	04090003          	lb	x0,64(x18)
    1dbe:	0100                	addi	x8,x2,128
    1dc0:	1f05                	addi	x30,x30,-31
    1dc2:	0c090003          	lb	x0,192(x18)
    1dc6:	0100                	addi	x8,x2,128
    1dc8:	0905                	addi	x18,x18,1
    1dca:	0306                	slli	x6,x6,0x1
    1dcc:	0900                	addi	x8,x2,144
    1dce:	0004                	0x4
    1dd0:	0501                	addi	x10,x10,0
    1dd2:	09020303          	lb	x6,144(x4) # 90 <bsg_group_size+0x8f>
    1dd6:	0018                	0x18
    1dd8:	0501                	addi	x10,x10,0
    1dda:	0319                	addi	x6,x6,6
    1ddc:	0809028f          	0x809028f
    1de0:	0100                	addi	x8,x2,128
    1de2:	1305                	addi	x6,x6,-31
    1de4:	00090003          	lb	x0,0(x18)
    1de8:	0100                	addi	x8,x2,128
    1dea:	0305                	addi	x6,x6,1
    1dec:	0306                	slli	x6,x6,0x1
    1dee:	0900                	addi	x8,x2,144
    1df0:	0000                	unimp
    1df2:	0501                	addi	x10,x10,0
    1df4:	060c                	addi	x11,x2,768
    1df6:	097e8a03          	lb	x20,151(x29)
    1dfa:	0008                	0x8
    1dfc:	0501                	addi	x10,x10,0
    1dfe:	0003060f          	0x3060f
    1e02:	0409                	addi	x8,x8,2
    1e04:	0100                	addi	x8,x2,128
    1e06:	0905                	addi	x18,x18,1
    1e08:	0306                	slli	x6,x6,0x1
    1e0a:	0902                	c.slli64	x18
    1e0c:	0004                	0x4
    1e0e:	0501                	addi	x10,x10,0
    1e10:	061f 0003 0009      	0x90003061f
    1e16:	0100                	addi	x8,x2,128
    1e18:	1405                	addi	x8,x8,-31
    1e1a:	04090003          	lb	x0,64(x18)
    1e1e:	0100                	addi	x8,x2,128
    1e20:	1005                	c.nop	-31
    1e22:	08090003          	lb	x0,128(x18)
    1e26:	0100                	addi	x8,x2,128
    1e28:	0b05                	addi	x22,x22,1
    1e2a:	04090103          	lb	x2,64(x18)
    1e2e:	0100                	addi	x8,x2,128
    1e30:	1c05                	addi	x24,x24,-31
    1e32:	04097f03          	0x4097f03
    1e36:	0100                	addi	x8,x2,128
    1e38:	1405                	addi	x8,x8,-31
    1e3a:	04090003          	lb	x0,64(x18)
    1e3e:	0100                	addi	x8,x2,128
    1e40:	0b05                	addi	x22,x22,1
    1e42:	04090103          	lb	x2,64(x18)
    1e46:	0100                	addi	x8,x2,128
    1e48:	1405                	addi	x8,x8,-31
    1e4a:	04097f03          	0x4097f03
    1e4e:	0100                	addi	x8,x2,128
    1e50:	0905                	addi	x18,x18,1
    1e52:	0306                	slli	x6,x6,0x1
    1e54:	0901                	addi	x18,x18,0
    1e56:	0004                	0x4
    1e58:	0501                	addi	x10,x10,0
    1e5a:	ff030607          	0xff030607
    1e5e:	097e                	slli	x18,x18,0x1f
    1e60:	0004                	0x4
    1e62:	0501                	addi	x10,x10,0
    1e64:	0309                	addi	x6,x6,2
    1e66:	0901                	addi	x18,x18,0
    1e68:	0004                	0x4
    1e6a:	0501                	addi	x10,x10,0
    1e6c:	0619                	addi	x12,x12,6
    1e6e:	04090003          	lb	x0,64(x18)
    1e72:	0100                	addi	x8,x2,128
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1e74:	1e05                	addi	x28,x28,-31
    1e76:	0306                	slli	x6,x6,0x1
    1e78:	0900                	addi	x8,x2,144
    1e7a:	0000                	unimp
                        boff += incr;
    1e7c:	0501                	addi	x10,x10,0
    1e7e:	032a                	slli	x6,x6,0xa
                                C[coff + f] = sum[f];
    1e80:	0900                	addi	x8,x2,144
    1e82:	0008                	0x8
    1e84:	0501                	addi	x10,x10,0
    1e86:	031e                	slli	x6,x6,0x7
                        boff += incr;
    1e88:	0900                	addi	x8,x2,144
    1e8a:	0004                	0x4
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1e8c:	0501                	addi	x10,x10,0
    1e8e:	0322                	slli	x6,x6,0x8
                                C[coff + f] = sum[f];
    1e90:	0900                	addi	x8,x2,144
    1e92:	0004                	0x4
    1e94:	0501                	addi	x10,x10,0
    1e96:	030a                	slli	x6,x6,0x2
    1e98:	0900                	addi	x8,x2,144
    1e9a:	0004                	0x4
    1e9c:	0501                	addi	x10,x10,0
    1e9e:	0900031b          	0x900031b
    1ea2:	0004                	0x4
    1ea4:	0501                	addi	x10,x10,0
    1ea6:	0609                	addi	x12,x12,2
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1ea8:	04090003          	lb	x0,64(x18)
    1eac:	0100                	addi	x8,x2,128
    1eae:	0a05                	addi	x20,x20,1
    1eb0:	0306                	slli	x6,x6,0x1
    1eb2:	0900                	addi	x8,x2,144
    1eb4:	0000                	unimp
    1eb6:	0501                	addi	x10,x10,0
    1eb8:	0309                	addi	x6,x6,2
    1eba:	0900                	addi	x8,x2,144
    1ebc:	0004                	0x4
    1ebe:	0501                	addi	x10,x10,0
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1ec0:	032a                	slli	x6,x6,0xa
    1ec2:	0900                	addi	x8,x2,144
    1ec4:	0008                	0x8
    1ec6:	0501                	addi	x10,x10,0
    1ec8:	0609                	addi	x12,x12,2
    1eca:	0903a003          	lw	x0,144(x7)
    1ece:	0014                	0x14
    1ed0:	0301                	addi	x6,x6,0
    1ed2:	0901                	addi	x18,x18,0
    1ed4:	0000                	unimp
    1ed6:	0501                	addi	x10,x10,0
    1ed8:	00030613          	mv	x12,x6
    1edc:	0809                	addi	x16,x16,2
    1ede:	0100                	addi	x8,x2,128
    1ee0:	0905                	addi	x18,x18,1
    1ee2:	10097f03          	0x10097f03
    1ee6:	0100                	addi	x8,x2,128
    1ee8:	0705                	addi	x14,x14,1
    1eea:	0306                	slli	x6,x6,0x1
    1eec:	00040903          	lb	x18,0(x8)
    1ef0:	0501                	addi	x10,x10,0
    1ef2:	7de80303          	lb	x6,2014(x16)
}
    1ef6:	1009                	c.nop	-30
    1ef8:	0100                	addi	x8,x2,128
    1efa:	0905                	addi	x18,x18,1
    1efc:	0902e703          	0x902e703
    1f00:	0004                	0x4
    1f02:	0501                	addi	x10,x10,0
    1f04:	060d                	addi	x12,x12,3
    1f06:	00090003          	lb	x0,0(x18)
    1f0a:	0100                	addi	x8,x2,128
    1f0c:	0b05                	addi	x22,x22,1
    1f0e:	0306                	slli	x6,x6,0x1
    1f10:	0901                	addi	x18,x18,0
    1f12:	0010                	0x10
    1f14:	0501                	addi	x10,x10,0
    1f16:	0612                	slli	x12,x12,0x4
    1f18:	00090003          	lb	x0,0(x18)
    1f1c:	0100                	addi	x8,x2,128
    1f1e:	1905                	addi	x18,x18,-31
    1f20:	0306                	slli	x6,x6,0x1
    1f22:	7f80                	flw	f8,56(x15)
    1f24:	0c09                	addi	x24,x24,2
    1f26:	0100                	addi	x8,x2,128
    1f28:	1305                	addi	x6,x6,-31
    1f2a:	00090003          	lb	x0,0(x18)
    1f2e:	0100                	addi	x8,x2,128
                        TC sum[F] = {{init}};
    1f30:	0305                	addi	x6,x6,1
    1f32:	0306                	slli	x6,x6,0x1
    1f34:	0900                	addi	x8,x2,144
    1f36:	0000                	unimp
    1f38:	0501                	addi	x10,x10,0
    1f3a:	d203060b          	0xd203060b
    1f3e:	0900                	addi	x8,x2,144
    1f40:	0008                	0x8
    1f42:	0301                	addi	x6,x6,0
    1f44:	0901                	addi	x18,x18,0
    1f46:	0000                	unimp
    1f48:	0501                	addi	x10,x10,0
    1f4a:	0611                	addi	x12,x12,4
    1f4c:	00090003          	lb	x0,0(x18)
    1f50:	0100                	addi	x8,x2,128
    1f52:	1705                	addi	x14,x14,-31
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f54:	04097f03          	0x4097f03
    1f58:	0100                	addi	x8,x2,128
    1f5a:	1305                	addi	x6,x6,-31
        uint32_t incr = A_WIDTH * (F-1);
    1f5c:	08097603          	0x8097603
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f60:	0100                	addi	x8,x2,128
    1f62:	2405                	jal	2182 <_bsg_elf_stack_ptr+0x186>
        uint32_t incr = A_WIDTH * (F-1);
    1f64:	0306                	slli	x6,x6,0x1
    1f66:	0979                	addi	x18,x18,30
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f68:	000c                	0xc
    1f6a:	0501                	addi	x10,x10,0
    1f6c:	0003063f 01000409 	0x10004090003063f
    1f74:	2405                	jal	2194 <_bsg_elf_stack_ptr+0x198>
    1f76:	04090003          	lb	x0,64(x18)
    1f7a:	0100                	addi	x8,x2,128
    1f7c:	3805                	jal	17ac <kernel_matrix_multiply_float+0x20c>
    1f7e:	0306                	slli	x6,x6,0x1
    1f80:	0900                	addi	x8,x2,144
    1f82:	0004                	0x4
    1f84:	0501                	addi	x10,x10,0
    1f86:	063c                	addi	x15,x2,776
    1f88:	00090003          	lb	x0,0(x18)
    1f8c:	0100                	addi	x8,x2,128
    1f8e:	3f05                	jal	1ebe <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x242>
    1f90:	04090003          	lb	x0,64(x18)
    1f94:	0100                	addi	x8,x2,128
    1f96:	2405                	jal	21b6 <_bsg_elf_stack_ptr+0x1ba>
    1f98:	0306                	slli	x6,x6,0x1
    1f9a:	0900                	addi	x8,x2,144
    1f9c:	0004                	0x4
    1f9e:	0501                	addi	x10,x10,0
    1fa0:	dd030607          	0xdd030607
        uint32_t incr = A_WIDTH * (F-1);
    1fa4:	0900                	addi	x8,x2,144
    1fa6:	000c                	0xc
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1fa8:	0501                	addi	x10,x10,0
    1faa:	030c                	addi	x11,x2,384
    1fac:	7ee2                	flw	f29,56(x2)
    1fae:	0809                	addi	x16,x16,2
    1fb0:	0100                	addi	x8,x2,128
    1fb2:	2405                	jal	21d2 <_bsg_elf_stack_ptr+0x1d6>
    1fb4:	0306                	slli	x6,x6,0x1
    1fb6:	00ca                	slli	x1,x1,0x12
    1fb8:	0c09                	addi	x24,x24,2
    1fba:	0100                	addi	x8,x2,128
    1fbc:	3605                	jal	1adc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x100>
    1fbe:	0306                	slli	x6,x6,0x1
    1fc0:	0900                	addi	x8,x2,144
    1fc2:	0000                	unimp
    1fc4:	0501                	addi	x10,x10,0
    1fc6:	0324                	addi	x9,x2,392
    1fc8:	0900                	addi	x8,x2,144
    1fca:	0004                	0x4
    1fcc:	0501                	addi	x10,x10,0
    1fce:	0341                	addi	x6,x6,16
    1fd0:	0900                	addi	x8,x2,144
    1fd2:	000c                	0xc
    1fd4:	0501                	addi	x10,x10,0
    1fd6:	063a                	slli	x12,x12,0xe
    1fd8:	04090003          	lb	x0,64(x18)
    1fdc:	0100                	addi	x8,x2,128
    1fde:	3e05                	jal	1b0e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x132>
    1fe0:	0306                	slli	x6,x6,0x1
    1fe2:	0900                	addi	x8,x2,144
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1fe4:	0000                	unimp
    1fe6:	0501                	addi	x10,x10,0
    1fe8:	0341                	addi	x6,x6,16
    1fea:	0900                	addi	x8,x2,144
    1fec:	0004                	0x4
    1fee:	0501                	addi	x10,x10,0
    1ff0:	0624                	addi	x9,x2,776
    1ff2:	04090003          	lb	x0,64(x18)
    1ff6:	0100                	addi	x8,x2,128
    1ff8:	0a05                	addi	x20,x20,1
    1ffa:	0306                	slli	x6,x6,0x1
                boff = 0;
    1ffc:	096e                	slli	x18,x18,0x1b
    1ffe:	0010                	0x10
    2000:	0501                	addi	x10,x10,0
    2002:	030e                	slli	x6,x6,0x3
    2004:	00080933          	add	x18,x16,x0
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2008:	0501                	addi	x10,x10,0
    200a:	030d                	addi	x6,x6,3
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    200c:	00080953          	fadd.s	f18,f16,f0,rne
    2010:	0501                	addi	x10,x10,0
    2012:	c9030603          	lb	x12,-880(x6)
    2016:	097c                	addi	x15,x2,156
    2018:	0008                	0x8
    201a:	0501                	addi	x10,x10,0
    201c:	0309                	addi	x6,x6,2
    201e:	000903c3          	fmadd.s	f7,f18,f0,f0,rne
    2022:	0100                	addi	x8,x2,128
    2024:	1505                	addi	x10,x10,-31
    2026:	0306                	slli	x6,x6,0x1
    2028:	0900                	addi	x8,x2,144
    202a:	0000                	unimp
                        TC sum[F] = {{init}};
    202c:	0501                	addi	x10,x10,0
    202e:	030c                	addi	x11,x2,384
    2030:	0900                	addi	x8,x2,144
    2032:	0004                	0x4
    2034:	0501                	addi	x10,x10,0
    2036:	030d                	addi	x6,x6,3
    2038:	7cbd                	lui	x25,0xfffef
    203a:	0809                	addi	x16,x16,2
    203c:	0100                	addi	x8,x2,128
    203e:	0905                	addi	x18,x18,1
    2040:	0306                	slli	x6,x6,0x1
    2042:	080903bb          	0x80903bb
    2046:	0100                	addi	x8,x2,128
    2048:	1205                	addi	x4,x4,-31
    204a:	0306                	slli	x6,x6,0x1
    204c:	0900                	addi	x8,x2,144
    204e:	0000                	unimp
    2050:	0501                	addi	x10,x10,0
    2052:	030d                	addi	x6,x6,3
                                        sum[f] += A[aoff] * BT[bofff];
    2054:	0900                	addi	x8,x2,144
    2056:	0004                	0x4
    2058:	0501                	addi	x10,x10,0
    205a:	0322                	slli	x6,x6,0x8
    205c:	0900                	addi	x8,x2,144
    205e:	0004                	0x4
    2060:	0501                	addi	x10,x10,0
    2062:	0312                	slli	x6,x6,0x4
    2064:	0900                	addi	x8,x2,144
    2066:	0004                	0x4
    2068:	0501                	addi	x10,x10,0
    206a:	0609                	addi	x12,x12,2
    206c:	04090103          	lb	x2,64(x18)
    2070:	0100                	addi	x8,x2,128
    2072:	0f05                	addi	x30,x30,1
    2074:	00090003          	lb	x0,0(x18)
    2078:	0100                	addi	x8,x2,128
    207a:	0306                	slli	x6,x6,0x1
    207c:	0909                	addi	x18,x18,2
    207e:	0008                	0x8
    2080:	0501                	addi	x10,x10,0
    2082:	0619                	addi	x12,x12,6
    2084:	097fb403          	0x97fb403
    2088:	0004                	0x4
    208a:	0501                	addi	x10,x10,0
    208c:	09000313          	li	x6,144
    2090:	0000                	unimp
    2092:	0501                	addi	x10,x10,0
    2094:	00030603          	lb	x12,0(x6)
    2098:	0009                	c.nop	2
    209a:	0100                	addi	x8,x2,128
    209c:	0a05                	addi	x20,x20,1
    209e:	08093803          	0x8093803
    20a2:	0100                	addi	x8,x2,128
    20a4:	2805                	jal	20d4 <_bsg_elf_stack_ptr+0xd8>
    20a6:	097ddc03          	lhu	x24,151(x27)
    20aa:	0014                	0x14
    20ac:	0501                	addi	x10,x10,0
    20ae:	031d                	addi	x6,x6,7
    20b0:	0900                	addi	x8,x2,144
    20b2:	0004                	0x4
    20b4:	0501                	addi	x10,x10,0
    20b6:	0328                	addi	x10,x2,392
    20b8:	0959                	addi	x18,x18,22
    20ba:	000c                	0xc
    20bc:	0501                	addi	x10,x10,0
    20be:	031d                	addi	x6,x6,7
    20c0:	0900                	addi	x8,x2,144
    20c2:	0004                	0x4
    20c4:	0501                	addi	x10,x10,0
    20c6:	0309                	addi	x6,x6,2
    20c8:	02de                	slli	x5,x5,0x17
    20ca:	0809                	addi	x16,x16,2
    20cc:	0100                	addi	x8,x2,128
    20ce:	2405                	jal	22ee <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xfa>
    20d0:	0306                	slli	x6,x6,0x1
    20d2:	097f                	0x97f
    20d4:	0008                	0x8
    20d6:	0501                	addi	x10,x10,0
    20d8:	0636                	slli	x12,x12,0xd
    20da:	00090003          	lb	x0,0(x18)
    20de:	0100                	addi	x8,x2,128
    20e0:	2405                	jal	2300 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x10c>
    20e2:	04090003          	lb	x0,64(x18)
    20e6:	0100                	addi	x8,x2,128
    20e8:	3605                	jal	1c08 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x22c>
    20ea:	04090003          	lb	x0,64(x18)
    20ee:	0100                	addi	x8,x2,128
    20f0:	2405                	jal	2310 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x11c>
    20f2:	04090003          	lb	x0,64(x18)
    20f6:	0100                	addi	x8,x2,128
    20f8:	3605                	jal	1c18 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x23c>
    20fa:	08090003          	lb	x0,128(x18)
    20fe:	0100                	addi	x8,x2,128
    2100:	0809                	addi	x16,x16,2
    2102:	0000                	unimp
    2104:	0101                	addi	x2,x2,0
    2106:	00001e73          	csrrw	x28,ustatus,x0
    210a:	06370003          	lb	x0,99(x14)
    210e:	0000                	unimp
    2110:	0101                	addi	x2,x2,0
    2112:	000d0efb          	0xd0efb
    2116:	0101                	addi	x2,x2,0
    2118:	0101                	addi	x2,x2,0
    211a:	0000                	unimp
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    211c:	0100                	addi	x8,x2,128
    211e:	0000                	unimp
                        for (uint32_t f = 0; f < F; f++){
    2120:	2f01                	jal	2830 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x63c>
    2122:	6e6d                	lui	x28,0x1b
                        boff += incr;
    2124:	2f74                	fld	f13,216(x14)
    2126:	7375                	lui	x6,0xffffd
                                C[coff + f] = sum[f];
    2128:	7265                	lui	x4,0xffff9
    212a:	70732f73          	csrrs	x30,0x707,x6
                        for (uint32_t f = 0; f < F; f++){
    212e:	6e69                	lui	x28,0x1a
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2130:	2f30                	fld	f12,88(x14)
    2132:	6f6e                	flw	f30,216(x2)
                        boff += incr;
    2134:	625f 6361 756b      	0x756b6361625f
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    213a:	2f70                	fld	f12,216(x14)
                                C[coff + f] = sum[f];
    213c:	7264                	flw	f9,100(x12)
    213e:	6369                	lui	x6,0x1a
    2140:	6d68                	flw	f10,92(x10)
    2142:	2f646e6f          	jal	x28,48438 <_bsg_elf_vcache_size+0x28438>
    2146:	6552                	flw	f10,20(x2)
    2148:	72616573          	csrrsi	x10,0x726,2
    214c:	722f6863          	bltu	x30,x2,287c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x688>
    2150:	7065                	c.lui	x0,0xffff9
    2152:	7469736f          	jal	x6,99898 <_bsg_elf_vcache_size+0x79898>
    2156:	6569726f          	jal	x4,997ac <_bsg_elf_vcache_size+0x797ac>
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    215a:	69672f73          	csrrs	x30,0x696,x14
    215e:	2f74                	fld	f13,216(x14)
    2160:	7362                	flw	f6,56(x2)
    2162:	6c625f67          	0x6c625f67
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    2166:	6461                	lui	x8,0x18
    2168:	7265                	lui	x4,0xffff9
    216a:	6e75                	lui	x28,0x1d
    216c:	656e                	flw	f10,216(x2)
    216e:	2f72                	fld	f30,280(x2)
    2170:	7362                	flw	f6,56(x2)
    2172:	616d5f67          	0x616d5f67
    2176:	796e                	flw	f18,248(x2)
    2178:	65726f63          	bltu	x4,x23,27d6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x5e2>
    217c:	666f732f          	0x666f732f
    2180:	7774                	flw	f13,108(x14)
    2182:	7261                	lui	x4,0xffff8
    2184:	2f65                	jal	293c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x748>
    2186:	7362                	flw	f6,56(x2)
    2188:	616d5f67          	0x616d5f67
    218c:	796e                	flw	f18,248(x2)
    218e:	65726f63          	bltu	x4,x23,27ec <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x5f8>
    2192:	6c5f 6269 2f00      	0x2f0062696c5f
}
    2198:	6e6d                	lui	x28,0x1b
    219a:	2f74                	fld	f13,216(x14)
    219c:	7375                	lui	x6,0xffffd
    219e:	7265                	lui	x4,0xffff9
    21a0:	70732f73          	csrrs	x30,0x707,x6
    21a4:	6e69                	lui	x28,0x1a
    21a6:	2f30                	fld	f12,88(x14)
    21a8:	6f6e                	flw	f30,216(x2)
    21aa:	625f 6361 756b      	0x756b6361625f
    21b0:	2f70                	fld	f12,216(x14)
    21b2:	7264                	flw	f9,100(x12)
    21b4:	6369                	lui	x6,0x1a
    21b6:	6d68                	flw	f10,92(x10)
    21b8:	2f646e6f          	jal	x28,484ae <_bsg_elf_vcache_size+0x284ae>
    21bc:	6552                	flw	f10,20(x2)
    21be:	72616573          	csrrsi	x10,0x726,2
    21c2:	722f6863          	bltu	x30,x2,28f2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x6fe>
    21c6:	7065                	c.lui	x0,0xffff9
    21c8:	7469736f          	jal	x6,9990e <_bsg_elf_vcache_size+0x7990e>
    21cc:	6569726f          	jal	x4,99822 <_bsg_elf_vcache_size+0x79822>
                        TC sum[F] = {{init}};
    21d0:	69672f73          	csrrs	x30,0x696,x14
    21d4:	2f74                	fld	f13,216(x14)
    21d6:	7362                	flw	f6,56(x2)
    21d8:	6c625f67          	0x6c625f67
    21dc:	6461                	lui	x8,0x18
    21de:	7265                	lui	x4,0xffff9
    21e0:	6e75                	lui	x28,0x1d
    21e2:	656e                	flw	f10,216(x2)
    21e4:	2f72                	fld	f30,280(x2)
    21e6:	6162                	flw	f2,24(x2)
    21e8:	696c6573          	csrrsi	x10,0x696,24
    21ec:	656e                	flw	f10,216(x2)
    21ee:	6178652f          	0x6178652f
    21f2:	706d                	c.lui	x0,0xffffb
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    21f4:	656c                	flw	f11,76(x10)
    21f6:	616d2f73          	csrrs	x30,0x616,x26
    21fa:	7274                	flw	f13,100(x12)
    21fc:	7869                	lui	x16,0xffffa
    21fe:	6d5f 7461 6972      	0x697274616d5f
    2204:	5f78                	lw	x14,124(x14)
    2206:	756d                	lui	x10,0xffffb
    2208:	746c                	flw	f11,108(x8)
    220a:	7069                	c.lui	x0,0xffffa
    220c:	796c                	flw	f11,116(x10)
    220e:	656b2f2f          	amoand.w.aq	x30,x22,(x22)
    2212:	6e72                	flw	f28,28(x2)
    2214:	6c65                	lui	x24,0x19
    2216:	636e692f          	0x636e692f
    221a:	756c                	flw	f11,108(x10)
    221c:	6564                	flw	f9,76(x10)
    221e:	6b00                	flw	f8,16(x14)
    2220:	7265                	lui	x4,0xffff9
    2222:	656e                	flw	f10,216(x2)
    2224:	2f6c                	fld	f11,216(x14)
    2226:	3876                	fld	f16,376(x2)
    2228:	2f00                	fld	f8,24(x14)
    222a:	6e6d                	lui	x28,0x1b
        uint32_t incr = A_WIDTH * (F-1);
    222c:	2f74                	fld	f13,216(x14)
    222e:	7375                	lui	x6,0xffffd
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    2230:	7265                	lui	x4,0xffff9
    2232:	70732f73          	csrrs	x30,0x707,x6
    2236:	6e69                	lui	x28,0x1a
    2238:	2f30                	fld	f12,88(x14)
    223a:	6f6e                	flw	f30,216(x2)
    223c:	625f 6361 756b      	0x756b6361625f
    2242:	2f70                	fld	f12,216(x14)
    2244:	7264                	flw	f9,100(x12)
    2246:	6369                	lui	x6,0x1a
    2248:	6d68                	flw	f10,92(x10)
    224a:	2f646e6f          	jal	x28,48540 <_bsg_elf_vcache_size+0x28540>
    224e:	6552                	flw	f10,20(x2)
    2250:	72616573          	csrrsi	x10,0x726,2
    2254:	722f6863          	bltu	x30,x2,2984 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x790>
    2258:	7065                	c.lui	x0,0xffff9
    225a:	7469736f          	jal	x6,999a0 <_bsg_elf_vcache_size+0x799a0>
    225e:	6569726f          	jal	x4,998b4 <_bsg_elf_vcache_size+0x798b4>
    2262:	69672f73          	csrrs	x30,0x696,x14
    2266:	2f74                	fld	f13,216(x14)
    2268:	7362                	flw	f6,56(x2)
    226a:	6c625f67          	0x6c625f67
    226e:	6461                	lui	x8,0x18
    2270:	7265                	lui	x4,0xffff9
    2272:	6e75                	lui	x28,0x1d
    2274:	656e                	flw	f10,216(x2)
    2276:	2f72                	fld	f30,280(x2)
    2278:	7362                	flw	f6,56(x2)
    227a:	616d5f67          	0x616d5f67
    227e:	796e                	flw	f18,248(x2)
    2280:	65726f63          	bltu	x4,x23,28de <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x6ea>
    2284:	666f732f          	0x666f732f
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2288:	7774                	flw	f13,108(x14)
    228a:	7261                	lui	x4,0xffff8
    228c:	2f65                	jal	2a44 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x850>
    228e:	6972                	flw	f18,28(x2)
    2290:	2d766373          	csrrsi	x6,0x2d7,12
    2294:	6f74                	flw	f13,92(x14)
    2296:	2f736c6f          	jal	x24,38d8c <_bsg_elf_vcache_size+0x18d8c>
    229a:	6972                	flw	f18,28(x2)
    229c:	2d766373          	csrrsi	x6,0x2d7,12
    22a0:	6e69                	lui	x28,0x1a
    22a2:	6c617473          	csrrci	x8,0x6c6,2
    22a6:	2f6c                	fld	f11,216(x14)
    22a8:	6972                	flw	f18,28(x2)
    22aa:	33766373          	csrrsi	x6,mhpmevent23,12
                boff = 0;
    22ae:	2d32                	fld	f26,264(x2)
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    22b0:	6e75                	lui	x28,0x1d
    22b2:	776f6e6b          	0x776f6e6b
                        TC sum[F] = {{init}};
    22b6:	2d6e                	fld	f26,216(x2)
    22b8:	6c65                	lui	x24,0x19
    22ba:	2d66                	fld	f26,88(x2)
    22bc:	7264                	flw	f9,100(x12)
    22be:	6d61                	lui	x26,0x18
    22c0:	7366                	flw	f6,120(x2)
    22c2:	636e692f          	0x636e692f
    22c6:	756c                	flw	f11,108(x10)
    22c8:	6564                	flw	f9,76(x10)
    22ca:	2b2b632f          	0x2b2b632f
    22ce:	322e392f          	0x322e392f
    22d2:	302e                	fld	f0,232(x2)
    22d4:	2f00                	fld	f8,24(x14)
    22d6:	6e6d                	lui	x28,0x1b
    22d8:	2f74                	fld	f13,216(x14)
    22da:	7375                	lui	x6,0xffffd
    22dc:	7265                	lui	x4,0xffff9
    22de:	70732f73          	csrrs	x30,0x707,x6
    22e2:	6e69                	lui	x28,0x1a
    22e4:	2f30                	fld	f12,88(x14)
    22e6:	6f6e                	flw	f30,216(x2)
    22e8:	625f 6361 756b      	0x756b6361625f
    22ee:	2f70                	fld	f12,216(x14)
    22f0:	7264                	flw	f9,100(x12)
    22f2:	6369                	lui	x6,0x1a
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    22f4:	6d68                	flw	f10,92(x10)
    22f6:	2f646e6f          	jal	x28,485ec <_bsg_elf_vcache_size+0x285ec>
                                        sum[f] += A[aoff] * BT[bofff];
    22fa:	6552                	flw	f10,20(x2)
    22fc:	72616573          	csrrsi	x10,0x726,2
    2300:	722f6863          	bltu	x30,x2,2a30 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x83c>
    2304:	7065                	c.lui	x0,0xffff9
    2306:	7469736f          	jal	x6,99a4c <_bsg_elf_vcache_size+0x79a4c>
    230a:	6569726f          	jal	x4,99960 <_bsg_elf_vcache_size+0x79960>
    230e:	69672f73          	csrrs	x30,0x696,x14
    2312:	2f74                	fld	f13,216(x14)
    2314:	7362                	flw	f6,56(x2)
    2316:	6c625f67          	0x6c625f67
    231a:	6461                	lui	x8,0x18
    231c:	7265                	lui	x4,0xffff9
    231e:	6e75                	lui	x28,0x1d
    2320:	656e                	flw	f10,216(x2)
    2322:	2f72                	fld	f30,280(x2)
    2324:	7362                	flw	f6,56(x2)
    2326:	616d5f67          	0x616d5f67
    232a:	796e                	flw	f18,248(x2)
    232c:	65726f63          	bltu	x4,x23,298a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x796>
    2330:	666f732f          	0x666f732f
    2334:	7774                	flw	f13,108(x14)
    2336:	7261                	lui	x4,0xffff8
    2338:	2f65                	jal	2af0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x8fc>
    233a:	6972                	flw	f18,28(x2)
    233c:	2d766373          	csrrsi	x6,0x2d7,12
    2340:	6f74                	flw	f13,92(x14)
    2342:	2f736c6f          	jal	x24,38e38 <_bsg_elf_vcache_size+0x18e38>
    2346:	6972                	flw	f18,28(x2)
    2348:	2d766373          	csrrsi	x6,0x2d7,12
    234c:	6e69                	lui	x28,0x1a
    234e:	6c617473          	csrrci	x8,0x6c6,2
    2352:	2f6c                	fld	f11,216(x14)
    2354:	6972                	flw	f18,28(x2)
    2356:	33766373          	csrrsi	x6,mhpmevent23,12
    235a:	2d32                	fld	f26,264(x2)
    235c:	6e75                	lui	x28,0x1d
    235e:	776f6e6b          	0x776f6e6b
    2362:	2d6e                	fld	f26,216(x2)
    2364:	6c65                	lui	x24,0x19
    2366:	2d66                	fld	f26,88(x2)
    2368:	7264                	flw	f9,100(x12)
    236a:	6d61                	lui	x26,0x18
    236c:	7366                	flw	f6,120(x2)
    236e:	636e692f          	0x636e692f
    2372:	756c                	flw	f11,108(x10)
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    2374:	6564                	flw	f9,76(x10)
    2376:	2b2b632f          	0x2b2b632f
    237a:	322e392f          	0x322e392f
    237e:	302e                	fld	f0,232(x2)
    2380:	7369722f          	0x7369722f
    2384:	32337663          	bgeu	x6,x3,26b0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x4bc>
                                C[coff + f] = sum[f];
    2388:	752d                	lui	x10,0xfffeb
    238a:	6b6e                	flw	f22,216(x2)
    238c:	6f6e                	flw	f30,216(x2)
    238e:	652d6e77          	0x652d6e77
    2392:	666c                	flw	f11,76(x12)
    2394:	642d                	lui	x8,0xb
    2396:	6172                	flw	f2,28(x2)
    2398:	666d                	lui	x12,0x1b
    239a:	69622f73          	csrrs	x30,0x696,x4
    239e:	7374                	flw	f13,100(x14)
    23a0:	2f00                	fld	f8,24(x14)
    23a2:	6e6d                	lui	x28,0x1b
    23a4:	2f74                	fld	f13,216(x14)
    23a6:	7375                	lui	x6,0xffffd
                        for (uint32_t f = 0; f < F; f++){
    23a8:	7265                	lui	x4,0xffff9
    23aa:	70732f73          	csrrs	x30,0x707,x6
                        boff += incr;
    23ae:	6e69                	lui	x28,0x1a
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    23b0:	2f30                	fld	f12,88(x14)
    23b2:	6f6e                	flw	f30,216(x2)
    23b4:	625f 6361 756b      	0x756b6361625f
    23ba:	2f70                	fld	f12,216(x14)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    23bc:	7264                	flw	f9,100(x12)
    23be:	6369                	lui	x6,0x1a
    23c0:	6d68                	flw	f10,92(x10)
    23c2:	2f646e6f          	jal	x28,486b8 <_bsg_elf_vcache_size+0x286b8>
    23c6:	6552                	flw	f10,20(x2)
    23c8:	72616573          	csrrsi	x10,0x726,2
    23cc:	722f6863          	bltu	x30,x2,2afc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x908>
}
    23d0:	7065                	c.lui	x0,0xffff9
    23d2:	7469736f          	jal	x6,99b18 <_bsg_elf_vcache_size+0x79b18>
    23d6:	6569726f          	jal	x4,99a2c <_bsg_elf_vcache_size+0x79a2c>
    23da:	69672f73          	csrrs	x30,0x696,x14
    23de:	2f74                	fld	f13,216(x14)
    23e0:	7362                	flw	f6,56(x2)
    23e2:	6c625f67          	0x6c625f67
    23e6:	6461                	lui	x8,0x18
    23e8:	7265                	lui	x4,0xffff9
    23ea:	6e75                	lui	x28,0x1d
    23ec:	656e                	flw	f10,216(x2)
    23ee:	2f72                	fld	f30,280(x2)
    23f0:	7362                	flw	f6,56(x2)
    23f2:	616d5f67          	0x616d5f67
    23f6:	796e                	flw	f18,248(x2)
    23f8:	65726f63          	bltu	x4,x23,2a56 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x862>
    23fc:	666f732f          	0x666f732f
    2400:	7774                	flw	f13,108(x14)
    2402:	7261                	lui	x4,0xffff8
    2404:	2f65                	jal	2bbc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x9c8>
    2406:	6972                	flw	f18,28(x2)
    2408:	2d766373          	csrrsi	x6,0x2d7,12
                        TC sum[F] = {{init}};
    240c:	6f74                	flw	f13,92(x14)
    240e:	2f736c6f          	jal	x24,38f04 <_bsg_elf_vcache_size+0x18f04>
    2412:	6972                	flw	f18,28(x2)
    2414:	2d766373          	csrrsi	x6,0x2d7,12
    2418:	6e69                	lui	x28,0x1a
    241a:	6c617473          	csrrci	x8,0x6c6,2
    241e:	2f6c                	fld	f11,216(x14)
    2420:	6972                	flw	f18,28(x2)
    2422:	33766373          	csrrsi	x6,mhpmevent23,12
    2426:	2d32                	fld	f26,264(x2)
    2428:	6e75                	lui	x28,0x1d
    242a:	776f6e6b          	0x776f6e6b
    242e:	2d6e                	fld	f26,216(x2)
    2430:	6c65                	lui	x24,0x19
    2432:	2d66                	fld	f26,88(x2)
    2434:	7264                	flw	f9,100(x12)
    2436:	6d61                	lui	x26,0x18
    2438:	7366                	flw	f6,120(x2)
    243a:	636e692f          	0x636e692f
    243e:	756c                	flw	f11,108(x10)
    2440:	6564                	flw	f9,76(x10)
    2442:	63616d2f          	0x63616d2f
    2446:	6968                	flw	f10,84(x10)
    2448:	656e                	flw	f10,216(x2)
    244a:	2f00                	fld	f8,24(x14)
    244c:	6e6d                	lui	x28,0x1b
    244e:	2f74                	fld	f13,216(x14)
    2450:	7375                	lui	x6,0xffffd
    2452:	7265                	lui	x4,0xffff9
    2454:	70732f73          	csrrs	x30,0x707,x6
    2458:	6e69                	lui	x28,0x1a
    245a:	2f30                	fld	f12,88(x14)
    245c:	6f6e                	flw	f30,216(x2)
    245e:	625f 6361 756b      	0x756b6361625f
    2464:	2f70                	fld	f12,216(x14)
    2466:	7264                	flw	f9,100(x12)
    2468:	6369                	lui	x6,0x1a
    246a:	6d68                	flw	f10,92(x10)
    246c:	2f646e6f          	jal	x28,48762 <_bsg_elf_vcache_size+0x28762>
    2470:	6552                	flw	f10,20(x2)
    2472:	72616573          	csrrsi	x10,0x726,2
    2476:	722f6863          	bltu	x30,x2,2ba6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x9b2>
    247a:	7065                	c.lui	x0,0xffff9
    247c:	7469736f          	jal	x6,99bc2 <_bsg_elf_vcache_size+0x79bc2>
    2480:	6569726f          	jal	x4,99ad6 <_bsg_elf_vcache_size+0x79ad6>
    2484:	69672f73          	csrrs	x30,0x696,x14
    2488:	2f74                	fld	f13,216(x14)
    248a:	7362                	flw	f6,56(x2)
    248c:	6c625f67          	0x6c625f67
    2490:	6461                	lui	x8,0x18
    2492:	7265                	lui	x4,0xffff9
    2494:	6e75                	lui	x28,0x1d
    2496:	656e                	flw	f10,216(x2)
    2498:	2f72                	fld	f30,280(x2)
    249a:	7362                	flw	f6,56(x2)
    249c:	616d5f67          	0x616d5f67
    24a0:	796e                	flw	f18,248(x2)
    24a2:	65726f63          	bltu	x4,x23,2b00 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x90c>
    24a6:	666f732f          	0x666f732f
    24aa:	7774                	flw	f13,108(x14)
    24ac:	7261                	lui	x4,0xffff8
    24ae:	2f65                	jal	2c66 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xa72>
    24b0:	6972                	flw	f18,28(x2)
    24b2:	2d766373          	csrrsi	x6,0x2d7,12
    24b6:	6f74                	flw	f13,92(x14)
    24b8:	2f736c6f          	jal	x24,38fae <_bsg_elf_vcache_size+0x18fae>
    24bc:	6972                	flw	f18,28(x2)
    24be:	2d766373          	csrrsi	x6,0x2d7,12
    24c2:	6e69                	lui	x28,0x1a
    24c4:	6c617473          	csrrci	x8,0x6c6,2
    24c8:	2f6c                	fld	f11,216(x14)
    24ca:	6972                	flw	f18,28(x2)
    24cc:	33766373          	csrrsi	x6,mhpmevent23,12
    24d0:	2d32                	fld	f26,264(x2)
    24d2:	6e75                	lui	x28,0x1d
    24d4:	776f6e6b          	0x776f6e6b
    24d8:	2d6e                	fld	f26,216(x2)
    24da:	6c65                	lui	x24,0x19
    24dc:	2d66                	fld	f26,88(x2)
    24de:	7264                	flw	f9,100(x12)
    24e0:	6d61                	lui	x26,0x18
    24e2:	7366                	flw	f6,120(x2)
    24e4:	636e692f          	0x636e692f
    24e8:	756c                	flw	f11,108(x10)
    24ea:	6564                	flw	f9,76(x10)
    24ec:	7379732f          	0x7379732f
    24f0:	2f00                	fld	f8,24(x14)
    24f2:	6e6d                	lui	x28,0x1b
    24f4:	2f74                	fld	f13,216(x14)
    24f6:	7375                	lui	x6,0xffffd
    24f8:	7265                	lui	x4,0xffff9
    24fa:	70732f73          	csrrs	x30,0x707,x6
    24fe:	6e69                	lui	x28,0x1a
    2500:	2f30                	fld	f12,88(x14)
    2502:	6f6e                	flw	f30,216(x2)
    2504:	625f 6361 756b      	0x756b6361625f
    250a:	2f70                	fld	f12,216(x14)
    250c:	7264                	flw	f9,100(x12)
    250e:	6369                	lui	x6,0x1a
    2510:	6d68                	flw	f10,92(x10)
    2512:	2f646e6f          	jal	x28,48808 <_bsg_elf_vcache_size+0x28808>
    2516:	6552                	flw	f10,20(x2)
    2518:	72616573          	csrrsi	x10,0x726,2
    251c:	722f6863          	bltu	x30,x2,2c4c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xa58>
    2520:	7065                	c.lui	x0,0xffff9
    2522:	7469736f          	jal	x6,99c68 <_bsg_elf_vcache_size+0x79c68>
    2526:	6569726f          	jal	x4,99b7c <_bsg_elf_vcache_size+0x79b7c>
    252a:	69672f73          	csrrs	x30,0x696,x14
    252e:	2f74                	fld	f13,216(x14)
    2530:	7362                	flw	f6,56(x2)
    2532:	6c625f67          	0x6c625f67
    2536:	6461                	lui	x8,0x18
    2538:	7265                	lui	x4,0xffff9
    253a:	6e75                	lui	x28,0x1d
    253c:	656e                	flw	f10,216(x2)
    253e:	2f72                	fld	f30,280(x2)
    2540:	7362                	flw	f6,56(x2)
    2542:	616d5f67          	0x616d5f67
    2546:	796e                	flw	f18,248(x2)
    2548:	65726f63          	bltu	x4,x23,2ba6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x9b2>
    254c:	666f732f          	0x666f732f
    2550:	7774                	flw	f13,108(x14)
    2552:	7261                	lui	x4,0xffff8
    2554:	2f65                	jal	2d0c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xb18>
    2556:	6972                	flw	f18,28(x2)
    2558:	2d766373          	csrrsi	x6,0x2d7,12
    255c:	6f74                	flw	f13,92(x14)
    255e:	2f736c6f          	jal	x24,39054 <_bsg_elf_vcache_size+0x19054>
    2562:	6972                	flw	f18,28(x2)
    2564:	2d766373          	csrrsi	x6,0x2d7,12
    2568:	6e69                	lui	x28,0x1a
    256a:	6c617473          	csrrci	x8,0x6c6,2
    256e:	2f6c                	fld	f11,216(x14)
    2570:	6972                	flw	f18,28(x2)
    2572:	33766373          	csrrsi	x6,mhpmevent23,12
    2576:	2d32                	fld	f26,264(x2)
    2578:	6e75                	lui	x28,0x1d
    257a:	776f6e6b          	0x776f6e6b
    257e:	2d6e                	fld	f26,216(x2)
    2580:	6c65                	lui	x24,0x19
    2582:	2d66                	fld	f26,88(x2)
    2584:	7264                	flw	f9,100(x12)
    2586:	6d61                	lui	x26,0x18
    2588:	7366                	flw	f6,120(x2)
    258a:	636e692f          	0x636e692f
    258e:	756c                	flw	f11,108(x10)
    2590:	6564                	flw	f9,76(x10)
    2592:	2f00                	fld	f8,24(x14)
    2594:	6e6d                	lui	x28,0x1b
    2596:	2f74                	fld	f13,216(x14)
    2598:	7375                	lui	x6,0xffffd
    259a:	7265                	lui	x4,0xffff9
    259c:	70732f73          	csrrs	x30,0x707,x6
    25a0:	6e69                	lui	x28,0x1a
    25a2:	2f30                	fld	f12,88(x14)
    25a4:	6f6e                	flw	f30,216(x2)
    25a6:	625f 6361 756b      	0x756b6361625f
    25ac:	2f70                	fld	f12,216(x14)
    25ae:	7264                	flw	f9,100(x12)
    25b0:	6369                	lui	x6,0x1a
    25b2:	6d68                	flw	f10,92(x10)
    25b4:	2f646e6f          	jal	x28,488aa <_bsg_elf_vcache_size+0x288aa>
    25b8:	6552                	flw	f10,20(x2)
    25ba:	72616573          	csrrsi	x10,0x726,2
    25be:	722f6863          	bltu	x30,x2,2cee <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xafa>
    25c2:	7065                	c.lui	x0,0xffff9
    25c4:	7469736f          	jal	x6,99d0a <_bsg_elf_vcache_size+0x79d0a>
    25c8:	6569726f          	jal	x4,99c1e <_bsg_elf_vcache_size+0x79c1e>
    25cc:	69672f73          	csrrs	x30,0x696,x14
    25d0:	2f74                	fld	f13,216(x14)
    25d2:	7362                	flw	f6,56(x2)
    25d4:	6c625f67          	0x6c625f67
    25d8:	6461                	lui	x8,0x18
    25da:	7265                	lui	x4,0xffff9
    25dc:	6e75                	lui	x28,0x1d
    25de:	656e                	flw	f10,216(x2)
    25e0:	2f72                	fld	f30,280(x2)
    25e2:	7362                	flw	f6,56(x2)
    25e4:	616d5f67          	0x616d5f67
    25e8:	796e                	flw	f18,248(x2)
    25ea:	65726f63          	bltu	x4,x23,2c48 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xa54>
    25ee:	666f732f          	0x666f732f
    25f2:	7774                	flw	f13,108(x14)
    25f4:	7261                	lui	x4,0xffff8
    25f6:	2f65                	jal	2dae <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xbba>
    25f8:	6972                	flw	f18,28(x2)
    25fa:	2d766373          	csrrsi	x6,0x2d7,12
    25fe:	6f74                	flw	f13,92(x14)
    2600:	2f736c6f          	jal	x24,390f6 <_bsg_elf_vcache_size+0x190f6>
    2604:	6972                	flw	f18,28(x2)
    2606:	2d766373          	csrrsi	x6,0x2d7,12
    260a:	6e69                	lui	x28,0x1a
    260c:	6c617473          	csrrci	x8,0x6c6,2
    2610:	2f6c                	fld	f11,216(x14)
    2612:	696c                	flw	f11,84(x10)
    2614:	2f62                	fld	f30,24(x2)
    2616:	2f636367          	0x2f636367
    261a:	6972                	flw	f18,28(x2)
    261c:	33766373          	csrrsi	x6,mhpmevent23,12
    2620:	2d32                	fld	f26,264(x2)
    2622:	6e75                	lui	x28,0x1d
    2624:	776f6e6b          	0x776f6e6b
    2628:	2d6e                	fld	f26,216(x2)
    262a:	6c65                	lui	x24,0x19
    262c:	2d66                	fld	f26,88(x2)
    262e:	7264                	flw	f9,100(x12)
    2630:	6d61                	lui	x26,0x18
    2632:	7366                	flw	f6,120(x2)
    2634:	322e392f          	0x322e392f
    2638:	302e                	fld	f0,232(x2)
    263a:	636e692f          	0x636e692f
    263e:	756c                	flw	f11,108(x10)
    2640:	6564                	flw	f9,76(x10)
    2642:	0000                	unimp
    2644:	7362                	flw	f6,56(x2)
    2646:	69745f67          	0x69745f67
    264a:	656c                	flw	f11,76(x10)
    264c:	675f 6f72 7075      	0x70756f72675f
    2652:	625f 7261 6972      	0x69727261625f
    2658:	7265                	lui	x4,0xffff9
    265a:	682e                	flw	f16,200(x2)
    265c:	0100                	addi	x8,x2,128
    265e:	0000                	unimp
    2660:	7362                	flw	f6,56(x2)
    2662:	616d5f67          	0x616d5f67
    2666:	796e                	flw	f18,248(x2)
    2668:	65726f63          	bltu	x4,x23,2cc6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xad2>
    266c:	682e                	flw	f16,200(x2)
    266e:	0100                	addi	x8,x2,128
    2670:	0000                	unimp
    2672:	616d                	addi	x2,x2,240
    2674:	7274                	flw	f13,100(x12)
    2676:	7869                	lui	x16,0xffffa
    2678:	6d5f 6c75 6974      	0x69746c756d5f
    267e:	6c70                	flw	f12,92(x8)
    2680:	2e79                	jal	2a1e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x82a>
    2682:	7068                	flw	f10,100(x8)
    2684:	0070                	addi	x12,x2,12
    2686:	0002                	c.slli64	x0
    2688:	6b00                	flw	f8,16(x14)
    268a:	7265                	lui	x4,0xffff9
    268c:	656e                	flw	f10,216(x2)
    268e:	2e6c                	fld	f11,216(x12)
    2690:	00707063          	bgeu	x0,x7,2690 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x49c>
    2694:	62000003          	lb	x0,1568(x0) # 620 <bsg_printf+0x154>
    2698:	735f6773          	csrrsi	x14,0x735,30
    269c:	7465                	lui	x8,0xffff9
    269e:	745f 6c69 5f65      	0x5f656c69745f
    26a4:	5f78                	lw	x14,124(x14)
    26a6:	2e79                	jal	2a44 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x850>
    26a8:	0068                	addi	x10,x2,12
    26aa:	0001                	nop
    26ac:	6300                	flw	f8,0(x14)
    26ae:	69647473          	csrrci	x8,0x696,8
    26b2:	746e                	flw	f8,248(x2)
    26b4:	0400                	addi	x8,x2,512
    26b6:	0000                	unimp
    26b8:	72747363          	bgeu	x8,x7,2dde <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xbea>
    26bc:	6e69                	lui	x28,0x1a
    26be:	00040067          	jr	x8 # ffff9000 <_end+0x7eff8fa8>
    26c2:	6300                	flw	f8,0(x14)
    26c4:	6f632b2b          	0x6f632b2b
    26c8:	666e                	flw	f12,216(x2)
    26ca:	6769                	lui	x14,0x1a
    26cc:	682e                	flw	f16,200(x2)
    26ce:	0500                	addi	x8,x2,640
    26d0:	0000                	unimp
    26d2:	645f 6665 7561      	0x75616665645f
    26d8:	746c                	flw	f11,108(x8)
    26da:	745f 7079 7365      	0x73657079745f
    26e0:	682e                	flw	f16,200(x2)
    26e2:	0600                	addi	x8,x2,768
    26e4:	0000                	unimp
    26e6:	735f 6474 6e69      	0x6e696474735f
    26ec:	2e74                	fld	f13,216(x12)
    26ee:	0068                	addi	x10,x2,12
    26f0:	73000007          	0x73000007
    26f4:	6474                	flw	f13,76(x8)
    26f6:	6e69                	lui	x28,0x1a
    26f8:	2e74                	fld	f13,216(x12)
    26fa:	0068                	addi	x10,x2,12
    26fc:	0008                	0x8
    26fe:	7300                	flw	f8,32(x14)
    2700:	6474                	flw	f13,76(x8)
    2702:	6564                	flw	f9,76(x10)
    2704:	2e66                	fld	f28,88(x2)
    2706:	0068                	addi	x10,x2,12
    2708:	0009                	c.nop	2
    270a:	6c00                	flw	f8,24(x8)
    270c:	2e6b636f          	jal	x6,b89f2 <_bsg_elf_vcache_size+0x989f2>
    2710:	0068                	addi	x10,x2,12
    2712:	5f000007          	0x5f000007
    2716:	7974                	flw	f13,116(x10)
    2718:	6570                	flw	f12,76(x10)
    271a:	00682e73          	csrrs	x28,0x6,x16
    271e:	72000007          	0x72000007
    2722:	6565                	lui	x10,0x19
    2724:	746e                	flw	f8,248(x2)
    2726:	682e                	flw	f16,200(x2)
    2728:	0700                	addi	x8,x2,896
    272a:	0000                	unimp
    272c:	69727473          	csrrci	x8,0x697,4
    2730:	676e                	flw	f14,216(x2)
    2732:	682e                	flw	f16,200(x2)
    2734:	0800                	addi	x8,x2,16
    2736:	0000                	unimp
    2738:	623c                	flw	f15,64(x12)
    273a:	6975                	lui	x18,0x1d
    273c:	746c                	flw	f11,108(x8)
    273e:	692d                	lui	x18,0xb
    2740:	3e6e                	fld	f28,248(x2)
    2742:	0000                	unimp
    2744:	0000                	unimp
    2746:	0500                	addi	x8,x2,640
    2748:	0051                	c.nop	20
    274a:	0205                	addi	x4,x4,1
    274c:	0d68                	addi	x10,x2,668
    274e:	0000                	unimp
    2750:	0101ab03          	lw	x22,16(x3)
    2754:	0905                	addi	x18,x18,1
    2756:	00090103          	lb	x2,0(x18) # b000 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x8e0c>
    275a:	0100                	addi	x8,x2,128
    275c:	2705                	jal	2e7c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc88>
    275e:	0306                	slli	x6,x6,0x1
    2760:	0900                	addi	x8,x2,144
    2762:	0000                	unimp
    2764:	0501                	addi	x10,x10,0
    2766:	0340                	addi	x8,x2,388
    2768:	0900                	addi	x8,x2,144
    276a:	0004                	0x4
    276c:	0501                	addi	x10,x10,0
    276e:	0342                	slli	x6,x6,0x10
    2770:	04097faf          	0x4097faf
    2774:	0100                	addi	x8,x2,128
    2776:	3505                	jal	2596 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x3a2>
    2778:	0900d103          	lhu	x2,144(x1)
    277c:	0008                	0x8
    277e:	0501                	addi	x10,x10,0
    2780:	032d                	addi	x6,x6,11
    2782:	04097fb3          	0x4097fb3
    2786:	0100                	addi	x8,x2,128
    2788:	0d05                	addi	x26,x26,1
    278a:	0900cd03          	lbu	x26,144(x1)
    278e:	0004                	0x4
    2790:	0501                	addi	x10,x10,0
    2792:	0609                	addi	x12,x12,2
    2794:	04090203          	lb	x4,64(x18)
    2798:	0100                	addi	x8,x2,128
    279a:	2d05                	jal	2dca <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xbd6>
    279c:	0306                	slli	x6,x6,0x1
    279e:	7fb1                	lui	x31,0xfffec
    27a0:	0009                	c.nop	2
    27a2:	0100                	addi	x8,x2,128
    27a4:	4205                	li	x4,1
    27a6:	04097c03          	0x4097c03
    27aa:	0100                	addi	x8,x2,128
    27ac:	2d05                	jal	2ddc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xbe8>
    27ae:	14090403          	lb	x8,320(x18)
    27b2:	0100                	addi	x8,x2,128
    27b4:	4205                	li	x4,1
    27b6:	04097c03          	0x4097c03
    27ba:	0100                	addi	x8,x2,128
    27bc:	4805                	li	x16,1
    27be:	04090403          	lb	x8,64(x18)
    27c2:	0100                	addi	x8,x2,128
    27c4:	2705                	jal	2ee4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xcf0>
    27c6:	0900cf03          	lbu	x30,144(x1)
    27ca:	0008                	0x8
    27cc:	0501                	addi	x10,x10,0
    27ce:	0340                	addi	x8,x2,388
    27d0:	0900                	addi	x8,x2,144
    27d2:	0004                	0x4
    27d4:	0501                	addi	x10,x10,0
    27d6:	0609                	addi	x12,x12,2
    27d8:	04090803          	lb	x16,64(x18)
    27dc:	0100                	addi	x8,x2,128
    27de:	097fa403          	lw	x8,151(x31) # fffec097 <_end+0x7efec03f>
    27e2:	0000                	unimp
    27e4:	0301                	addi	x6,x6,0
    27e6:	0901                	addi	x18,x18,0
    27e8:	0000                	unimp
    27ea:	0301                	addi	x6,x6,0
    27ec:	0904                	addi	x9,x2,144
    27ee:	0000                	unimp
    27f0:	0501                	addi	x10,x10,0
    27f2:	0648                	addi	x10,x2,772
    27f4:	00090003          	lb	x0,0(x18)
    27f8:	0100                	addi	x8,x2,128
    27fa:	0905                	addi	x18,x18,1
    27fc:	0306                	slli	x6,x6,0x1
    27fe:	00da                	slli	x1,x1,0x16
    2800:	0409                	addi	x8,x8,2
    2802:	0100                	addi	x8,x2,128
    2804:	08090903          	lb	x18,128(x18)
    2808:	0100                	addi	x8,x2,128
    280a:	00096103          	0x96103
    280e:	0100                	addi	x8,x2,128
    2810:	2505                	jal	2e30 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc3c>
    2812:	0306                	slli	x6,x6,0x1
    2814:	0900                	addi	x8,x2,144
    2816:	0000                	unimp
    2818:	0501                	addi	x10,x10,0
    281a:	0309                	addi	x6,x6,2
    281c:	00cd                	addi	x1,x1,19
    281e:	0409                	addi	x8,x8,2
    2820:	0100                	addi	x8,x2,128
    2822:	0204                	addi	x9,x2,256
    2824:	6805                	lui	x16,0x1
    2826:	097f8203          	lb	x4,151(x31)
    282a:	0008                	0x8
    282c:	0501                	addi	x10,x10,0
    282e:	066a                	slli	x12,x12,0x1a
    2830:	04090003          	lb	x0,64(x18)
    2834:	0100                	addi	x8,x2,128
    2836:	0104                	addi	x9,x2,128
    2838:	0d05                	addi	x26,x26,1
    283a:	09018103          	lb	x2,144(x3)
    283e:	0000                	unimp
    2840:	0501                	addi	x10,x10,0
    2842:	0305                	addi	x6,x6,1
    2844:	097a                	slli	x18,x18,0x1e
    2846:	0004                	0x4
    2848:	0301                	addi	x6,x6,0
    284a:	0901                	addi	x18,x18,0
    284c:	0000                	unimp
    284e:	0501                	addi	x10,x10,0
    2850:	0309                	addi	x6,x6,2
    2852:	0901                	addi	x18,x18,0
    2854:	0000                	unimp
    2856:	0401                	addi	x8,x8,0
    2858:	0502                	c.slli64	x10
    285a:	0320                	addi	x8,x2,392
    285c:	7f82                	flw	f31,32(x2)
    285e:	0009                	c.nop	2
    2860:	0100                	addi	x8,x2,128
    2862:	2905                	jal	2c92 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xa9e>
    2864:	00090003          	lb	x0,0(x18)
    2868:	0100                	addi	x8,x2,128
    286a:	6805                	lui	x16,0x1
    286c:	0306                	slli	x6,x6,0x1
    286e:	0900                	addi	x8,x2,144
    2870:	0000                	unimp
    2872:	0501                	addi	x10,x10,0
    2874:	066a                	slli	x12,x12,0x1a
    2876:	04090003          	lb	x0,64(x18)
    287a:	0100                	addi	x8,x2,128
    287c:	0104                	addi	x9,x2,128
    287e:	0905                	addi	x18,x18,1
    2880:	0900ff03          	0x900ff03
    2884:	0000                	unimp
    2886:	0501                	addi	x10,x10,0
    2888:	030d                	addi	x6,x6,3
    288a:	0902                	c.slli64	x18
    288c:	0000                	unimp
    288e:	0401                	addi	x8,x8,0
    2890:	0502                	c.slli64	x10
    2892:	0320                	addi	x8,x2,392
    2894:	7f80                	flw	f8,56(x15)
    2896:	0009                	c.nop	2
    2898:	0100                	addi	x8,x2,128
    289a:	2905                	jal	2cca <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xad6>
    289c:	00090003          	lb	x0,0(x18)
    28a0:	0100                	addi	x8,x2,128
    28a2:	0104                	addi	x9,x2,128
    28a4:	0905                	addi	x18,x18,1
    28a6:	0306                	slli	x6,x6,0x1
    28a8:	00fe                	slli	x1,x1,0x1f
    28aa:	0009                	c.nop	2
    28ac:	0100                	addi	x8,x2,128
    28ae:	0306                	slli	x6,x6,0x1
    28b0:	7fb5                	lui	x31,0xfffed
    28b2:	0409                	addi	x8,x8,2
    28b4:	0100                	addi	x8,x2,128
    28b6:	1f05                	addi	x30,x30,-31
    28b8:	0306                	slli	x6,x6,0x1
    28ba:	0900                	addi	x8,x2,144
    28bc:	0000                	unimp
    28be:	0501                	addi	x10,x10,0
    28c0:	0301                	addi	x6,x6,0
    28c2:	00040923          	sb	x0,18(x8)
    28c6:	0501                	addi	x10,x10,0
    28c8:	0335                	addi	x6,x6,13
    28ca:	0966                	slli	x18,x18,0x19
    28cc:	0004                	0x4
    28ce:	0501                	addi	x10,x10,0
    28d0:	0321                	addi	x6,x6,8
    28d2:	04097fbb          	0x4097fbb
    28d6:	0100                	addi	x8,x2,128
    28d8:	3805                	jal	2108 <_bsg_elf_stack_ptr+0x10c>
    28da:	04090003          	lb	x0,64(x18)
    28de:	0100                	addi	x8,x2,128
    28e0:	0d05                	addi	x26,x26,1
    28e2:	0900c503          	lbu	x10,144(x1)
    28e6:	0004                	0x4
    28e8:	0501                	addi	x10,x10,0
    28ea:	0611                	addi	x12,x12,4
    28ec:	04090c03          	lb	x24,64(x18)
    28f0:	0100                	addi	x8,x2,128
    28f2:	0905                	addi	x18,x18,1
    28f4:	097fab03          	lw	x22,151(x31) # fffed097 <_end+0x7efed03f>
    28f8:	0000                	unimp
    28fa:	0301                	addi	x6,x6,0
    28fc:	0901                	addi	x18,x18,0
    28fe:	0000                	unimp
    2900:	0501                	addi	x10,x10,0
    2902:	0642                	slli	x12,x12,0x10
    2904:	00090003          	lb	x0,0(x18)
    2908:	0100                	addi	x8,x2,128
    290a:	0905                	addi	x18,x18,1
    290c:	0306                	slli	x6,x6,0x1
    290e:	00100903          	lb	x18,1(x0) # 1 <bsg_group_size>
    2912:	0501                	addi	x10,x10,0
    2914:	060d                	addi	x12,x12,3
    2916:	00090003          	lb	x0,0(x18)
    291a:	0100                	addi	x8,x2,128
    291c:	0905                	addi	x18,x18,1
    291e:	0306                	slli	x6,x6,0x1
    2920:	0901                	addi	x18,x18,0
    2922:	0004                	0x4
    2924:	0301                	addi	x6,x6,0
    2926:	000900e3          	beqz	x18,3126 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xf32>
    292a:	0100                	addi	x8,x2,128
    292c:	00090103          	lb	x2,0(x18)
    2930:	0100                	addi	x8,x2,128
    2932:	1105                	addi	x2,x2,-31
    2934:	00090103          	lb	x2,0(x18)
    2938:	0100                	addi	x8,x2,128
    293a:	1e05                	addi	x28,x28,-31
    293c:	00090003          	lb	x0,0(x18)
    2940:	0100                	addi	x8,x2,128
    2942:	1705                	addi	x14,x14,-31
    2944:	0306                	slli	x6,x6,0x1
    2946:	0900                	addi	x8,x2,144
    2948:	0004                	0x4
    294a:	0501                	addi	x10,x10,0
    294c:	0619                	addi	x12,x12,6
    294e:	04090103          	lb	x2,64(x18)
    2952:	0100                	addi	x8,x2,128
    2954:	1105                	addi	x2,x2,-31
    2956:	00097f03          	0x97f03
    295a:	0100                	addi	x8,x2,128
    295c:	2305                	jal	2e7c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc88>
    295e:	0306                	slli	x6,x6,0x1
    2960:	0901                	addi	x18,x18,0
    2962:	0000                	unimp
    2964:	0501                	addi	x10,x10,0
    2966:	0319                	addi	x6,x6,6
    2968:	0900                	addi	x8,x2,144
    296a:	0004                	0x4
    296c:	0501                	addi	x10,x10,0
    296e:	0311                	addi	x6,x6,4
    2970:	097f                	0x97f
    2972:	0004                	0x4
    2974:	0501                	addi	x10,x10,0
    2976:	061e                	slli	x12,x12,0x7
    2978:	04090003          	lb	x0,64(x18)
    297c:	0100                	addi	x8,x2,128
    297e:	1905                	addi	x18,x18,-31
    2980:	0306                	slli	x6,x6,0x1
    2982:	0901                	addi	x18,x18,0
    2984:	0000                	unimp
    2986:	0501                	addi	x10,x10,0
    2988:	031e                	slli	x6,x6,0x7
    298a:	097f                	0x97f
    298c:	0004                	0x4
    298e:	0501                	addi	x10,x10,0
    2990:	0614                	addi	x13,x2,768
    2992:	04090303          	lb	x6,64(x18)
    2996:	0100                	addi	x8,x2,128
    2998:	0905                	addi	x18,x18,1
    299a:	097f9a03          	lh	x20,151(x31)
    299e:	0000                	unimp
    29a0:	0501                	addi	x10,x10,0
    29a2:	0639                	addi	x12,x12,14
    29a4:	00090003          	lb	x0,0(x18)
    29a8:	0100                	addi	x8,x2,128
    29aa:	2d05                	jal	2fda <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xde6>
    29ac:	04090003          	lb	x0,64(x18)
    29b0:	0100                	addi	x8,x2,128
    29b2:	4805                	li	x16,1
    29b4:	08090003          	lb	x0,128(x18)
    29b8:	0100                	addi	x8,x2,128
    29ba:	0905                	addi	x18,x18,1
    29bc:	0306                	slli	x6,x6,0x1
    29be:	00d0                	addi	x12,x2,68
    29c0:	0c09                	addi	x24,x24,2
    29c2:	0100                	addi	x8,x2,128
    29c4:	1305                	addi	x6,x6,-31
    29c6:	0306                	slli	x6,x6,0x1
    29c8:	0900                	addi	x8,x2,144
    29ca:	0000                	unimp
    29cc:	0501                	addi	x10,x10,0
    29ce:	0309                	addi	x6,x6,2
    29d0:	0900                	addi	x8,x2,144
    29d2:	0004                	0x4
    29d4:	0501                	addi	x10,x10,0
    29d6:	0024                	addi	x9,x2,8
    29d8:	0402                	c.slli64	x8
    29da:	0301                	addi	x6,x6,0
    29dc:	0900                	addi	x8,x2,144
    29de:	0004                	0x4
    29e0:	0501                	addi	x10,x10,0
    29e2:	0609                	addi	x12,x12,2
    29e4:	08090303          	lb	x6,128(x18)
    29e8:	0100                	addi	x8,x2,128
    29ea:	1105                	addi	x2,x2,-31
    29ec:	00090103          	lb	x2,0(x18)
    29f0:	0100                	addi	x8,x2,128
    29f2:	0905                	addi	x18,x18,1
    29f4:	00094c03          	lbu	x24,0(x18)
    29f8:	0100                	addi	x8,x2,128
    29fa:	00090103          	lb	x2,0(x18)
    29fe:	0100                	addi	x8,x2,128
    2a00:	2105                	jal	2e20 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc2c>
    2a02:	0306                	slli	x6,x6,0x1
    2a04:	0900                	addi	x8,x2,144
    2a06:	0000                	unimp
    2a08:	0501                	addi	x10,x10,0
    2a0a:	0338                	addi	x14,x2,392
    2a0c:	0900                	addi	x8,x2,144
    2a0e:	0004                	0x4
    2a10:	0501                	addi	x10,x10,0
    2a12:	0325                	addi	x6,x6,9
    2a14:	0902                	c.slli64	x18
    2a16:	0004                	0x4
    2a18:	0501                	addi	x10,x10,0
    2a1a:	0309                	addi	x6,x6,2
    2a1c:	00e1                	addi	x1,x1,24
    2a1e:	0409                	addi	x8,x8,2
    2a20:	0100                	addi	x8,x2,128
    2a22:	0d05                	addi	x26,x26,1
    2a24:	097f9d03          	lh	x26,151(x31)
    2a28:	0004                	0x4
    2a2a:	0501                	addi	x10,x10,0
    2a2c:	0609                	addi	x12,x12,2
    2a2e:	04090203          	lb	x4,64(x18)
    2a32:	0100                	addi	x8,x2,128
    2a34:	0204                	addi	x9,x2,256
    2a36:	6805                	lui	x16,0x1
    2a38:	0306                	slli	x6,x6,0x1
    2a3a:	00040963          	beqz	x8,2a4c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x858>
    2a3e:	0501                	addi	x10,x10,0
    2a40:	066a                	slli	x12,x12,0x1a
    2a42:	04090003          	lb	x0,64(x18)
    2a46:	0100                	addi	x8,x2,128
    2a48:	0104                	addi	x9,x2,128
    2a4a:	0d05                	addi	x26,x26,1
    2a4c:	09018103          	lb	x2,144(x3)
    2a50:	0000                	unimp
    2a52:	0501                	addi	x10,x10,0
    2a54:	0305                	addi	x6,x6,1
    2a56:	097a                	slli	x18,x18,0x1e
    2a58:	0004                	0x4
    2a5a:	0301                	addi	x6,x6,0
    2a5c:	0901                	addi	x18,x18,0
    2a5e:	0000                	unimp
    2a60:	0501                	addi	x10,x10,0
    2a62:	0309                	addi	x6,x6,2
    2a64:	0901                	addi	x18,x18,0
    2a66:	0000                	unimp
    2a68:	0401                	addi	x8,x8,0
    2a6a:	0502                	c.slli64	x10
    2a6c:	0320                	addi	x8,x2,392
    2a6e:	7f82                	flw	f31,32(x2)
    2a70:	0009                	c.nop	2
    2a72:	0100                	addi	x8,x2,128
    2a74:	2905                	jal	2ea4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xcb0>
    2a76:	00090003          	lb	x0,0(x18)
    2a7a:	0100                	addi	x8,x2,128
    2a7c:	6805                	lui	x16,0x1
    2a7e:	0306                	slli	x6,x6,0x1
    2a80:	0900                	addi	x8,x2,144
    2a82:	0000                	unimp
    2a84:	0501                	addi	x10,x10,0
    2a86:	066a                	slli	x12,x12,0x1a
    2a88:	04090003          	lb	x0,64(x18)
    2a8c:	0100                	addi	x8,x2,128
    2a8e:	0104                	addi	x9,x2,128
    2a90:	0905                	addi	x18,x18,1
    2a92:	0900ff03          	0x900ff03
    2a96:	0000                	unimp
    2a98:	0501                	addi	x10,x10,0
    2a9a:	030d                	addi	x6,x6,3
    2a9c:	0902                	c.slli64	x18
    2a9e:	0000                	unimp
    2aa0:	0401                	addi	x8,x8,0
    2aa2:	0502                	c.slli64	x10
    2aa4:	0320                	addi	x8,x2,392
    2aa6:	7f80                	flw	f8,56(x15)
    2aa8:	0009                	c.nop	2
    2aaa:	0100                	addi	x8,x2,128
    2aac:	2905                	jal	2edc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xce8>
    2aae:	00090003          	lb	x0,0(x18)
    2ab2:	0100                	addi	x8,x2,128
    2ab4:	0104                	addi	x9,x2,128
    2ab6:	0905                	addi	x18,x18,1
    2ab8:	0306                	slli	x6,x6,0x1
    2aba:	00fe                	slli	x1,x1,0x1f
    2abc:	0009                	c.nop	2
    2abe:	0100                	addi	x8,x2,128
    2ac0:	2c05                	jal	2cf0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xafc>
    2ac2:	0306                	slli	x6,x6,0x1
    2ac4:	00040973          	0x40973
    2ac8:	0501                	addi	x10,x10,0
    2aca:	01030637          	lui	x12,0x1030
    2ace:	0409                	addi	x8,x8,2
    2ad0:	0100                	addi	x8,x2,128
    2ad2:	2f05                	jal	3202 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x100e>
    2ad4:	08090303          	lb	x6,128(x18)
    2ad8:	0100                	addi	x8,x2,128
    2ada:	3705                	jal	29fa <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x806>
    2adc:	04097d03          	0x4097d03
    2ae0:	0100                	addi	x8,x2,128
    2ae2:	1005                	c.nop	-31
    2ae4:	0306                	slli	x6,x6,0x1
    2ae6:	0900                	addi	x8,x2,144
    2ae8:	0004                	0x4
    2aea:	0301                	addi	x6,x6,0
    2aec:	00000903          	lb	x18,0(x0) # 0 <_start>
    2af0:	0501                	addi	x10,x10,0
    2af2:	7d030637          	lui	x12,0x7d030
    2af6:	0009                	c.nop	2
    2af8:	0100                	addi	x8,x2,128
    2afa:	2f05                	jal	322a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1036>
    2afc:	10090303          	lb	x6,256(x18)
    2b00:	0100                	addi	x8,x2,128
    2b02:	0905                	addi	x18,x18,1
    2b04:	0306                	slli	x6,x6,0x1
    2b06:	097c                	addi	x15,x2,156
    2b08:	0004                	0x4
    2b0a:	0501                	addi	x10,x10,0
    2b0c:	0639                	addi	x12,x12,14
    2b0e:	00090003          	lb	x0,0(x18)
    2b12:	0100                	addi	x8,x2,128
    2b14:	0905                	addi	x18,x18,1
    2b16:	04090003          	lb	x0,64(x18)
    2b1a:	0100                	addi	x8,x2,128
    2b1c:	2c05                	jal	2d4c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xb58>
    2b1e:	0306                	slli	x6,x6,0x1
    2b20:	0900                	addi	x8,x2,144
    2b22:	0004                	0x4
    2b24:	0501                	addi	x10,x10,0
    2b26:	0316                	slli	x6,x6,0x5
    2b28:	7fb5                	lui	x31,0xfffed
    2b2a:	0409                	addi	x8,x8,2
    2b2c:	0100                	addi	x8,x2,128
    2b2e:	0905                	addi	x18,x18,1
    2b30:	04090403          	lb	x8,64(x18)
    2b34:	0100                	addi	x8,x2,128
    2b36:	2105                	jal	2f56 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xd62>
    2b38:	0306                	slli	x6,x6,0x1
    2b3a:	0900                	addi	x8,x2,144
    2b3c:	0000                	unimp
    2b3e:	0501                	addi	x10,x10,0
    2b40:	0301                	addi	x6,x6,0
    2b42:	0901                	addi	x18,x18,0
    2b44:	0004                	0x4
    2b46:	0501                	addi	x10,x10,0
    2b48:	7c03060f          	0x7c03060f
    2b4c:	0409                	addi	x8,x8,2
    2b4e:	0100                	addi	x8,x2,128
    2b50:	2805                	jal	2b80 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x98c>
    2b52:	0306                	slli	x6,x6,0x1
    2b54:	0900                	addi	x8,x2,144
    2b56:	0000                	unimp
    2b58:	0501                	addi	x10,x10,0
    2b5a:	0609                	addi	x12,x12,2
    2b5c:	04097f03          	0x4097f03
    2b60:	0100                	addi	x8,x2,128
    2b62:	1605                	addi	x12,x12,-31
    2b64:	00090003          	lb	x0,0(x18)
    2b68:	0100                	addi	x8,x2,128
    2b6a:	0905                	addi	x18,x18,1
    2b6c:	00090403          	lb	x8,0(x18)
    2b70:	0100                	addi	x8,x2,128
    2b72:	2105                	jal	2f92 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xd9e>
    2b74:	0306                	slli	x6,x6,0x1
    2b76:	0900                	addi	x8,x2,144
    2b78:	0000                	unimp
    2b7a:	0501                	addi	x10,x10,0
    2b7c:	0611                	addi	x12,x12,4
    2b7e:	08092103          	lw	x2,128(x18)
    2b82:	0100                	addi	x8,x2,128
    2b84:	0905                	addi	x18,x18,1
    2b86:	097fbb03          	0x97fbb03
    2b8a:	0000                	unimp
    2b8c:	0301                	addi	x6,x6,0
    2b8e:	0901                	addi	x18,x18,0
    2b90:	0000                	unimp
    2b92:	0501                	addi	x10,x10,0
    2b94:	0621                	addi	x12,x12,8
    2b96:	00090003          	lb	x0,0(x18)
    2b9a:	0100                	addi	x8,x2,128
    2b9c:	3805                	jal	23cc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1d8>
    2b9e:	04090003          	lb	x0,64(x18)
    2ba2:	0100                	addi	x8,x2,128
    2ba4:	1e05                	addi	x28,x28,-31
    2ba6:	0900d603          	lhu	x12,144(x1)
    2baa:	0004                	0x4
    2bac:	0501                	addi	x10,x10,0
    2bae:	030d                	addi	x6,x6,3
    2bb0:	7faa                	flw	f31,168(x2)
    2bb2:	0809                	addi	x16,x16,2
    2bb4:	0100                	addi	x8,x2,128
    2bb6:	0905                	addi	x18,x18,1
    2bb8:	0306                	slli	x6,x6,0x1
    2bba:	0901                	addi	x18,x18,0
    2bbc:	0004                	0x4
    2bbe:	0301                	addi	x6,x6,0
    2bc0:	000900d3          	fadd.s	f1,f18,f0,rne
    2bc4:	0100                	addi	x8,x2,128
    2bc6:	00090103          	lb	x2,0(x18)
    2bca:	0100                	addi	x8,x2,128
    2bcc:	1105                	addi	x2,x2,-31
    2bce:	00090103          	lb	x2,0(x18)
    2bd2:	0100                	addi	x8,x2,128
    2bd4:	1e05                	addi	x28,x28,-31
    2bd6:	00090003          	lb	x0,0(x18)
    2bda:	0100                	addi	x8,x2,128
    2bdc:	1905                	addi	x18,x18,-31
    2bde:	08090103          	lb	x2,128(x18)
    2be2:	0100                	addi	x8,x2,128
    2be4:	1105                	addi	x2,x2,-31
    2be6:	00097f03          	0x97f03
    2bea:	0100                	addi	x8,x2,128
    2bec:	1e05                	addi	x28,x28,-31
    2bee:	00090003          	lb	x0,0(x18)
    2bf2:	0100                	addi	x8,x2,128
    2bf4:	1905                	addi	x18,x18,-31
    2bf6:	0306                	slli	x6,x6,0x1
    2bf8:	0901                	addi	x18,x18,0
    2bfa:	0000                	unimp
    2bfc:	0501                	addi	x10,x10,0
    2bfe:	031e                	slli	x6,x6,0x7
    2c00:	097f                	0x97f
    2c02:	0008                	0x8
    2c04:	0501                	addi	x10,x10,0
    2c06:	0319                	addi	x6,x6,6
    2c08:	0901                	addi	x18,x18,0
    2c0a:	0004                	0x4
    2c0c:	0501                	addi	x10,x10,0
    2c0e:	031e                	slli	x6,x6,0x7
    2c10:	097f                	0x97f
    2c12:	0004                	0x4
    2c14:	0501                	addi	x10,x10,0
    2c16:	062c                	addi	x11,x2,776
    2c18:	04090903          	lb	x18,64(x18)
    2c1c:	0100                	addi	x8,x2,128
    2c1e:	3705                	jal	2b3e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x94a>
    2c20:	0306                	slli	x6,x6,0x1
    2c22:	0901                	addi	x18,x18,0
    2c24:	0004                	0x4
    2c26:	0501                	addi	x10,x10,0
    2c28:	0903032f          	0x903032f
    2c2c:	0008                	0x8
    2c2e:	0501                	addi	x10,x10,0
    2c30:	0610                	addi	x12,x2,768
    2c32:	04097d03          	0x4097d03
    2c36:	0100                	addi	x8,x2,128
    2c38:	00090303          	lb	x6,0(x18)
    2c3c:	0100                	addi	x8,x2,128
    2c3e:	3705                	jal	2b5e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x96a>
    2c40:	0306                	slli	x6,x6,0x1
    2c42:	097d                	addi	x18,x18,31
    2c44:	0000                	unimp
    2c46:	0501                	addi	x10,x10,0
    2c48:	0903032f          	0x903032f
    2c4c:	0010                	0x10
    2c4e:	0501                	addi	x10,x10,0
    2c50:	0609                	addi	x12,x12,2
    2c52:	04097c03          	0x4097c03
    2c56:	0100                	addi	x8,x2,128
    2c58:	3905                	jal	2888 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x694>
    2c5a:	0306                	slli	x6,x6,0x1
    2c5c:	0900                	addi	x8,x2,144
    2c5e:	0000                	unimp
    2c60:	0501                	addi	x10,x10,0
    2c62:	0309                	addi	x6,x6,2
    2c64:	0900                	addi	x8,x2,144
    2c66:	0004                	0x4
    2c68:	0501                	addi	x10,x10,0
    2c6a:	062c                	addi	x11,x2,776
    2c6c:	04090003          	lb	x0,64(x18)
    2c70:	0100                	addi	x8,x2,128
    2c72:	1605                	addi	x12,x12,-31
    2c74:	097faa03          	lw	x20,151(x31) # fffed097 <_end+0x7efed03f>
    2c78:	0004                	0x4
    2c7a:	0501                	addi	x10,x10,0
    2c7c:	0901030f          	0x901030f
    2c80:	0004                	0x4
    2c82:	0501                	addi	x10,x10,0
    2c84:	0628                	addi	x10,x2,776
    2c86:	00090003          	lb	x0,0(x18)
    2c8a:	0100                	addi	x8,x2,128
    2c8c:	0905                	addi	x18,x18,1
    2c8e:	0306                	slli	x6,x6,0x1
    2c90:	097f                	0x97f
    2c92:	0004                	0x4
    2c94:	0501                	addi	x10,x10,0
    2c96:	0316                	slli	x6,x6,0x5
    2c98:	0900                	addi	x8,x2,144
    2c9a:	0000                	unimp
    2c9c:	0501                	addi	x10,x10,0
    2c9e:	0309                	addi	x6,x6,2
    2ca0:	093d                	addi	x18,x18,15
    2ca2:	0000                	unimp
    2ca4:	0501                	addi	x10,x10,0
    2ca6:	032c                	addi	x11,x2,392
    2ca8:	0919                	addi	x18,x18,6
    2caa:	000c                	0xc
    2cac:	0401                	addi	x8,x8,0
    2cae:	0504                	addi	x9,x2,640
    2cb0:	0346                	slli	x6,x6,0x11
    2cb2:	7ebd                	lui	x29,0xfffef
    2cb4:	0809                	addi	x16,x16,2
    2cb6:	0100                	addi	x8,x2,128
    2cb8:	0306                	slli	x6,x6,0x1
    2cba:	0900                	addi	x8,x2,144
    2cbc:	003c                	addi	x15,x2,8
    2cbe:	0501                	addi	x10,x10,0
    2cc0:	0611                	addi	x12,x12,4
    2cc2:	08090103          	lb	x2,128(x18)
    2cc6:	0100                	addi	x8,x2,128
    2cc8:	00090303          	lb	x6,0(x18)
    2ccc:	0100                	addi	x8,x2,128
    2cce:	1505                	addi	x10,x10,-31
    2cd0:	0306                	slli	x6,x6,0x1
    2cd2:	0900                	addi	x8,x2,144
    2cd4:	0000                	unimp
    2cd6:	0501                	addi	x10,x10,0
    2cd8:	0346                	slli	x6,x6,0x11
    2cda:	097c                	addi	x15,x2,156
    2cdc:	0004                	0x4
    2cde:	0501                	addi	x10,x10,0
    2ce0:	0318                	addi	x14,x2,384
    2ce2:	0908                	addi	x10,x2,144
    2ce4:	0018                	0x18
    2ce6:	0501                	addi	x10,x10,0
    2ce8:	0346                	slli	x6,x6,0x11
    2cea:	0978                	addi	x14,x2,156
    2cec:	0004                	0x4
    2cee:	0501                	addi	x10,x10,0
    2cf0:	0315                	addi	x6,x6,5
    2cf2:	0905                	addi	x18,x18,1
    2cf4:	0008                	0x8
    2cf6:	0301                	addi	x6,x6,0
    2cf8:	097f                	0x97f
    2cfa:	0004                	0x4
    2cfc:	0501                	addi	x10,x10,0
    2cfe:	0611                	addi	x12,x12,4
    2d00:	18090103          	lb	x2,384(x18)
    2d04:	0100                	addi	x8,x2,128
    2d06:	1905                	addi	x18,x18,-31
    2d08:	0306                	slli	x6,x6,0x1
    2d0a:	0906                	slli	x18,x18,0x1
    2d0c:	0000                	unimp
    2d0e:	0501                	addi	x10,x10,0
    2d10:	0315                	addi	x6,x6,5
    2d12:	000c097b          	0xc097b
    2d16:	0301                	addi	x6,x6,0
    2d18:	097f                	0x97f
    2d1a:	0004                	0x4
    2d1c:	0501                	addi	x10,x10,0
    2d1e:	0611                	addi	x12,x12,4
    2d20:	1c090103          	lb	x2,448(x18)
    2d24:	0100                	addi	x8,x2,128
    2d26:	1505                	addi	x10,x10,-31
    2d28:	0306                	slli	x6,x6,0x1
    2d2a:	0900                	addi	x8,x2,144
    2d2c:	0008                	0x8
    2d2e:	0501                	addi	x10,x10,0
    2d30:	0318                	addi	x14,x2,384
    2d32:	0902                	c.slli64	x18
    2d34:	0010                	0x10
    2d36:	0301                	addi	x6,x6,0
    2d38:	0901                	addi	x18,x18,0
    2d3a:	0004                	0x4
    2d3c:	0501                	addi	x10,x10,0
    2d3e:	0319                	addi	x6,x6,6
    2d40:	00100903          	lb	x18,1(x0) # 1 <bsg_group_size>
    2d44:	0501                	addi	x10,x10,0
    2d46:	0315                	addi	x6,x6,5
    2d48:	097a                	slli	x18,x18,0x1e
    2d4a:	0008                	0x8
    2d4c:	0501                	addi	x10,x10,0
    2d4e:	0611                	addi	x12,x12,4
    2d50:	04090203          	lb	x4,64(x18)
    2d54:	0100                	addi	x8,x2,128
    2d56:	00090103          	lb	x2,0(x18)
    2d5a:	0100                	addi	x8,x2,128
    2d5c:	00090203          	lb	x4,0(x18)
    2d60:	0100                	addi	x8,x2,128
    2d62:	2205                	jal	2e82 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc8e>
    2d64:	00090003          	lb	x0,0(x18)
    2d68:	0100                	addi	x8,x2,128
    2d6a:	1905                	addi	x18,x18,-31
    2d6c:	0306                	slli	x6,x6,0x1
    2d6e:	0976                	slli	x18,x18,0x1d
    2d70:	0000                	unimp
    2d72:	0301                	addi	x6,x6,0
    2d74:	0008090b          	0x8090b
    2d78:	0501                	addi	x10,x10,0
    2d7a:	031e                	slli	x6,x6,0x7
    2d7c:	0904                	addi	x9,x2,144
    2d7e:	0014                	0x14
    2d80:	0501                	addi	x10,x10,0
    2d82:	0019                	c.nop	6
    2d84:	0402                	c.slli64	x8
    2d86:	0602                	c.slli64	x12
    2d88:	04097c03          	0x4097c03
    2d8c:	0100                	addi	x8,x2,128
    2d8e:	0200                	addi	x8,x2,256
    2d90:	0204                	addi	x9,x2,256
    2d92:	00090003          	lb	x0,0(x18)
    2d96:	0100                	addi	x8,x2,128
    2d98:	0200                	addi	x8,x2,256
    2d9a:	0204                	addi	x9,x2,256
    2d9c:	44090003          	lb	x0,1088(x18)
    2da0:	0100                	addi	x8,x2,128
    2da2:	0200                	addi	x8,x2,256
    2da4:	0204                	addi	x9,x2,256
    2da6:	00090003          	lb	x0,0(x18)
    2daa:	0100                	addi	x8,x2,128
    2dac:	0200                	addi	x8,x2,256
    2dae:	0204                	addi	x9,x2,256
    2db0:	00090003          	lb	x0,0(x18)
    2db4:	0100                	addi	x8,x2,128
    2db6:	0200                	addi	x8,x2,256
    2db8:	0204                	addi	x9,x2,256
    2dba:	04090103          	lb	x2,64(x18)
    2dbe:	0100                	addi	x8,x2,128
    2dc0:	5305                	li	x6,-31
    2dc2:	0200                	addi	x8,x2,256
    2dc4:	0204                	addi	x9,x2,256
    2dc6:	0306                	slli	x6,x6,0x1
    2dc8:	0900                	addi	x8,x2,144
    2dca:	0000                	unimp
    2dcc:	0501                	addi	x10,x10,0
    2dce:	0011                	c.nop	4
    2dd0:	0402                	c.slli64	x8
    2dd2:	0302                	c.slli64	x6
    2dd4:	097e                	slli	x18,x18,0x1f
    2dd6:	0018                	0x18
    2dd8:	0501                	addi	x10,x10,0
    2dda:	04020053          	0x4020053
    2dde:	0302                	c.slli64	x6
    2de0:	0902                	c.slli64	x18
    2de2:	0004                	0x4
    2de4:	0501                	addi	x10,x10,0
    2de6:	0019                	c.nop	6
    2de8:	0402                	c.slli64	x8
    2dea:	0302                	c.slli64	x6
    2dec:	0902                	c.slli64	x18
    2dee:	0004                	0x4
    2df0:	0501                	addi	x10,x10,0
    2df2:	0022                	c.slli	x0,0x8
    2df4:	0402                	c.slli64	x8
    2df6:	0302                	c.slli64	x6
    2df8:	097c                	addi	x15,x2,156
    2dfa:	0044                	addi	x9,x2,4
    2dfc:	0501                	addi	x10,x10,0
    2dfe:	0019                	c.nop	6
    2e00:	0402                	c.slli64	x8
    2e02:	0302                	c.slli64	x6
    2e04:	0904                	addi	x9,x2,144
    2e06:	0004                	0x4
    2e08:	0501                	addi	x10,x10,0
    2e0a:	0022                	c.slli	x0,0x8
    2e0c:	0402                	c.slli64	x8
    2e0e:	0302                	c.slli64	x6
    2e10:	097c                	addi	x15,x2,156
    2e12:	0008                	0x8
    2e14:	0501                	addi	x10,x10,0
    2e16:	04020053          	0x4020053
    2e1a:	0302                	c.slli64	x6
    2e1c:	0902                	c.slli64	x18
    2e1e:	0004                	0x4
    2e20:	0501                	addi	x10,x10,0
    2e22:	0019                	c.nop	6
    2e24:	0402                	c.slli64	x8
    2e26:	0602                	c.slli64	x12
    2e28:	04090203          	lb	x4,64(x18)
    2e2c:	0100                	addi	x8,x2,128
    2e2e:	0200                	addi	x8,x2,256
    2e30:	0204                	addi	x9,x2,256
    2e32:	00090003          	lb	x0,0(x18)
    2e36:	0100                	addi	x8,x2,128
    2e38:	0200                	addi	x8,x2,256
    2e3a:	0204                	addi	x9,x2,256
    2e3c:	00090003          	lb	x0,0(x18)
    2e40:	0100                	addi	x8,x2,128
    2e42:	0200                	addi	x8,x2,256
    2e44:	0204                	addi	x9,x2,256
    2e46:	00090003          	lb	x0,0(x18)
    2e4a:	0100                	addi	x8,x2,128
    2e4c:	0200                	addi	x8,x2,256
    2e4e:	0204                	addi	x9,x2,256
    2e50:	00090003          	lb	x0,0(x18)
    2e54:	0100                	addi	x8,x2,128
    2e56:	0200                	addi	x8,x2,256
    2e58:	0204                	addi	x9,x2,256
    2e5a:	00090103          	lb	x2,0(x18)
    2e5e:	0100                	addi	x8,x2,128
    2e60:	1105                	addi	x2,x2,-31
    2e62:	0200                	addi	x8,x2,256
    2e64:	0204                	addi	x9,x2,256
    2e66:	00097b03          	0x97b03
    2e6a:	0100                	addi	x8,x2,128
    2e6c:	2205                	jal	2f8c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xd98>
    2e6e:	0200                	addi	x8,x2,256
    2e70:	0204                	addi	x9,x2,256
    2e72:	00090003          	lb	x0,0(x18)
    2e76:	0100                	addi	x8,x2,128
    2e78:	1105                	addi	x2,x2,-31
    2e7a:	04090803          	lb	x16,64(x18)
    2e7e:	0100                	addi	x8,x2,128
    2e80:	1805                	addi	x16,x16,-31
    2e82:	0306                	slli	x6,x6,0x1
    2e84:	0900                	addi	x8,x2,144
    2e86:	0000                	unimp
    2e88:	0501                	addi	x10,x10,0
    2e8a:	0611                	addi	x12,x12,4
    2e8c:	10090203          	lb	x4,256(x18)
    2e90:	0100                	addi	x8,x2,128
    2e92:	0905                	addi	x18,x18,1
    2e94:	0306                	slli	x6,x6,0x1
    2e96:	0901                	addi	x18,x18,0
    2e98:	0000                	unimp
    2e9a:	0501                	addi	x10,x10,0
    2e9c:	0646                	slli	x12,x12,0x11
    2e9e:	44090403          	lb	x8,1088(x18)
    2ea2:	0100                	addi	x8,x2,128
    2ea4:	0306                	slli	x6,x6,0x1
    2ea6:	0900                	addi	x8,x2,144
    2ea8:	003c                	addi	x15,x2,8
    2eaa:	0501                	addi	x10,x10,0
    2eac:	0611                	addi	x12,x12,4
    2eae:	08090103          	lb	x2,128(x18)
    2eb2:	0100                	addi	x8,x2,128
    2eb4:	00090303          	lb	x6,0(x18)
    2eb8:	0100                	addi	x8,x2,128
    2eba:	1905                	addi	x18,x18,-31
    2ebc:	0306                	slli	x6,x6,0x1
    2ebe:	0900                	addi	x8,x2,144
    2ec0:	0000                	unimp
    2ec2:	0501                	addi	x10,x10,0
    2ec4:	0346                	slli	x6,x6,0x11
    2ec6:	097c                	addi	x15,x2,156
    2ec8:	0004                	0x4
    2eca:	0501                	addi	x10,x10,0
    2ecc:	0318                	addi	x14,x2,384
    2ece:	0908                	addi	x10,x2,144
    2ed0:	0018                	0x18
    2ed2:	0501                	addi	x10,x10,0
    2ed4:	0346                	slli	x6,x6,0x11
    2ed6:	0978                	addi	x14,x2,156
    2ed8:	0004                	0x4
    2eda:	0501                	addi	x10,x10,0
    2edc:	0319                	addi	x6,x6,6
    2ede:	0905                	addi	x18,x18,1
    2ee0:	0008                	0x8
    2ee2:	0301                	addi	x6,x6,0
    2ee4:	097f                	0x97f
    2ee6:	0004                	0x4
    2ee8:	0501                	addi	x10,x10,0
    2eea:	0611                	addi	x12,x12,4
    2eec:	18090103          	lb	x2,384(x18)
    2ef0:	0100                	addi	x8,x2,128
    2ef2:	1905                	addi	x18,x18,-31
    2ef4:	0306                	slli	x6,x6,0x1
    2ef6:	0906                	slli	x18,x18,0x1
    2ef8:	0000                	unimp
    2efa:	0301                	addi	x6,x6,0
    2efc:	000c097b          	0xc097b
    2f00:	0301                	addi	x6,x6,0
    2f02:	097f                	0x97f
    2f04:	0004                	0x4
    2f06:	0501                	addi	x10,x10,0
    2f08:	0611                	addi	x12,x12,4
    2f0a:	1c090103          	lb	x2,448(x18)
    2f0e:	0100                	addi	x8,x2,128
    2f10:	1905                	addi	x18,x18,-31
    2f12:	0306                	slli	x6,x6,0x1
    2f14:	0900                	addi	x8,x2,144
    2f16:	0008                	0x8
    2f18:	0501                	addi	x10,x10,0
    2f1a:	0318                	addi	x14,x2,384
    2f1c:	0902                	c.slli64	x18
    2f1e:	0010                	0x10
    2f20:	0301                	addi	x6,x6,0
    2f22:	0901                	addi	x18,x18,0
    2f24:	0004                	0x4
    2f26:	0501                	addi	x10,x10,0
    2f28:	0319                	addi	x6,x6,6
    2f2a:	00100903          	lb	x18,1(x0) # 1 <bsg_group_size>
    2f2e:	0301                	addi	x6,x6,0
    2f30:	097a                	slli	x18,x18,0x1e
    2f32:	0008                	0x8
    2f34:	0501                	addi	x10,x10,0
    2f36:	0611                	addi	x12,x12,4
    2f38:	04090203          	lb	x4,64(x18)
    2f3c:	0100                	addi	x8,x2,128
    2f3e:	00090103          	lb	x2,0(x18)
    2f42:	0100                	addi	x8,x2,128
    2f44:	00090203          	lb	x4,0(x18)
    2f48:	0100                	addi	x8,x2,128
    2f4a:	2205                	jal	306a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xe76>
    2f4c:	00090003          	lb	x0,0(x18)
    2f50:	0100                	addi	x8,x2,128
    2f52:	1905                	addi	x18,x18,-31
    2f54:	0306                	slli	x6,x6,0x1
    2f56:	0976                	slli	x18,x18,0x1d
    2f58:	0000                	unimp
    2f5a:	0301                	addi	x6,x6,0
    2f5c:	0008090b          	0x8090b
    2f60:	0501                	addi	x10,x10,0
    2f62:	031e                	slli	x6,x6,0x7
    2f64:	0904                	addi	x9,x2,144
    2f66:	0014                	0x14
    2f68:	0501                	addi	x10,x10,0
    2f6a:	0019                	c.nop	6
    2f6c:	0402                	c.slli64	x8
    2f6e:	0602                	c.slli64	x12
    2f70:	04097c03          	0x4097c03
    2f74:	0100                	addi	x8,x2,128
    2f76:	0200                	addi	x8,x2,256
    2f78:	0204                	addi	x9,x2,256
    2f7a:	00090003          	lb	x0,0(x18)
    2f7e:	0100                	addi	x8,x2,128
    2f80:	0200                	addi	x8,x2,256
    2f82:	0204                	addi	x9,x2,256
    2f84:	44090003          	lb	x0,1088(x18)
    2f88:	0100                	addi	x8,x2,128
    2f8a:	0200                	addi	x8,x2,256
    2f8c:	0204                	addi	x9,x2,256
    2f8e:	00090003          	lb	x0,0(x18)
    2f92:	0100                	addi	x8,x2,128
    2f94:	0200                	addi	x8,x2,256
    2f96:	0204                	addi	x9,x2,256
    2f98:	00090003          	lb	x0,0(x18)
    2f9c:	0100                	addi	x8,x2,128
    2f9e:	0200                	addi	x8,x2,256
    2fa0:	0204                	addi	x9,x2,256
    2fa2:	04090103          	lb	x2,64(x18)
    2fa6:	0100                	addi	x8,x2,128
    2fa8:	5305                	li	x6,-31
    2faa:	0200                	addi	x8,x2,256
    2fac:	0204                	addi	x9,x2,256
    2fae:	0306                	slli	x6,x6,0x1
    2fb0:	0900                	addi	x8,x2,144
    2fb2:	0000                	unimp
    2fb4:	0501                	addi	x10,x10,0
    2fb6:	0011                	c.nop	4
    2fb8:	0402                	c.slli64	x8
    2fba:	0302                	c.slli64	x6
    2fbc:	097e                	slli	x18,x18,0x1f
    2fbe:	0018                	0x18
    2fc0:	0501                	addi	x10,x10,0
    2fc2:	04020053          	0x4020053
    2fc6:	0302                	c.slli64	x6
    2fc8:	0902                	c.slli64	x18
    2fca:	0004                	0x4
    2fcc:	0501                	addi	x10,x10,0
    2fce:	0019                	c.nop	6
    2fd0:	0402                	c.slli64	x8
    2fd2:	0302                	c.slli64	x6
    2fd4:	0902                	c.slli64	x18
    2fd6:	0004                	0x4
    2fd8:	0501                	addi	x10,x10,0
    2fda:	0022                	c.slli	x0,0x8
    2fdc:	0402                	c.slli64	x8
    2fde:	0302                	c.slli64	x6
    2fe0:	097c                	addi	x15,x2,156
    2fe2:	0044                	addi	x9,x2,4
    2fe4:	0501                	addi	x10,x10,0
    2fe6:	0019                	c.nop	6
    2fe8:	0402                	c.slli64	x8
    2fea:	0302                	c.slli64	x6
    2fec:	0904                	addi	x9,x2,144
    2fee:	0004                	0x4
    2ff0:	0501                	addi	x10,x10,0
    2ff2:	0022                	c.slli	x0,0x8
    2ff4:	0402                	c.slli64	x8
    2ff6:	0302                	c.slli64	x6
    2ff8:	097c                	addi	x15,x2,156
    2ffa:	0008                	0x8
    2ffc:	0501                	addi	x10,x10,0
    2ffe:	04020053          	0x4020053
    3002:	0302                	c.slli64	x6
    3004:	0902                	c.slli64	x18
    3006:	0004                	0x4
    3008:	0501                	addi	x10,x10,0
    300a:	0019                	c.nop	6
    300c:	0402                	c.slli64	x8
    300e:	0602                	c.slli64	x12
    3010:	04090203          	lb	x4,64(x18)
    3014:	0100                	addi	x8,x2,128
    3016:	0200                	addi	x8,x2,256
    3018:	0204                	addi	x9,x2,256
    301a:	00090003          	lb	x0,0(x18)
    301e:	0100                	addi	x8,x2,128
    3020:	0200                	addi	x8,x2,256
    3022:	0204                	addi	x9,x2,256
    3024:	00090003          	lb	x0,0(x18)
    3028:	0100                	addi	x8,x2,128
    302a:	0200                	addi	x8,x2,256
    302c:	0204                	addi	x9,x2,256
    302e:	00090003          	lb	x0,0(x18)
    3032:	0100                	addi	x8,x2,128
    3034:	0200                	addi	x8,x2,256
    3036:	0204                	addi	x9,x2,256
    3038:	00090003          	lb	x0,0(x18)
    303c:	0100                	addi	x8,x2,128
    303e:	0200                	addi	x8,x2,256
    3040:	0204                	addi	x9,x2,256
    3042:	00090103          	lb	x2,0(x18)
    3046:	0100                	addi	x8,x2,128
    3048:	1105                	addi	x2,x2,-31
    304a:	0200                	addi	x8,x2,256
    304c:	0204                	addi	x9,x2,256
    304e:	00097b03          	0x97b03
    3052:	0100                	addi	x8,x2,128
    3054:	2205                	jal	3174 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xf80>
    3056:	0200                	addi	x8,x2,256
    3058:	0204                	addi	x9,x2,256
    305a:	00090003          	lb	x0,0(x18)
    305e:	0100                	addi	x8,x2,128
    3060:	1105                	addi	x2,x2,-31
    3062:	04090803          	lb	x16,64(x18)
    3066:	0100                	addi	x8,x2,128
    3068:	1805                	addi	x16,x16,-31
    306a:	0306                	slli	x6,x6,0x1
    306c:	0900                	addi	x8,x2,144
    306e:	0000                	unimp
    3070:	0501                	addi	x10,x10,0
    3072:	0611                	addi	x12,x12,4
    3074:	10090203          	lb	x4,256(x18)
    3078:	0100                	addi	x8,x2,128
    307a:	0905                	addi	x18,x18,1
    307c:	0306                	slli	x6,x6,0x1
    307e:	0901                	addi	x18,x18,0
    3080:	0000                	unimp
    3082:	0501                	addi	x10,x10,0
    3084:	0646                	slli	x12,x12,0x11
    3086:	44090403          	lb	x8,1088(x18)
    308a:	0100                	addi	x8,x2,128
    308c:	0306                	slli	x6,x6,0x1
    308e:	0900                	addi	x8,x2,144
    3090:	003c                	addi	x15,x2,8
    3092:	0501                	addi	x10,x10,0
    3094:	0329                	addi	x6,x6,10
    3096:	0904                	addi	x9,x2,144
    3098:	0008                	0x8
    309a:	0501                	addi	x10,x10,0
    309c:	0346                	slli	x6,x6,0x11
    309e:	097c                	addi	x15,x2,156
    30a0:	0004                	0x4
    30a2:	0501                	addi	x10,x10,0
    30a4:	0328                	addi	x10,x2,392
    30a6:	0905                	addi	x18,x18,1
    30a8:	0004                	0x4
    30aa:	0501                	addi	x10,x10,0
    30ac:	0346                	slli	x6,x6,0x11
    30ae:	0004097b          	0x4097b
    30b2:	0501                	addi	x10,x10,0
    30b4:	0611                	addi	x12,x12,4
    30b6:	04090103          	lb	x2,64(x18)
    30ba:	0100                	addi	x8,x2,128
    30bc:	00090303          	lb	x6,0(x18)
    30c0:	0100                	addi	x8,x2,128
    30c2:	4605                	li	x12,1
    30c4:	0306                	slli	x6,x6,0x1
    30c6:	097c                	addi	x15,x2,156
    30c8:	0000                	unimp
    30ca:	0501                	addi	x10,x10,0
    30cc:	0318                	addi	x14,x2,384
    30ce:	0908                	addi	x10,x2,144
    30d0:	0004                	0x4
    30d2:	0501                	addi	x10,x10,0
    30d4:	0346                	slli	x6,x6,0x11
    30d6:	0978                	addi	x14,x2,156
    30d8:	0004                	0x4
    30da:	0501                	addi	x10,x10,0
    30dc:	0319                	addi	x6,x6,6
    30de:	0008090b          	0x8090b
    30e2:	0501                	addi	x10,x10,0
    30e4:	0328                	addi	x10,x2,392
    30e6:	097a                	slli	x18,x18,0x1e
    30e8:	0008                	0x8
    30ea:	0501                	addi	x10,x10,0
    30ec:	0318                	addi	x14,x2,384
    30ee:	097f                	0x97f
    30f0:	0004                	0x4
    30f2:	0301                	addi	x6,x6,0
    30f4:	0904                	addi	x9,x2,144
    30f6:	0018                	0x18
    30f8:	0301                	addi	x6,x6,0
    30fa:	097c                	addi	x15,x2,156
    30fc:	0004                	0x4
    30fe:	0501                	addi	x10,x10,0
    3100:	0611                	addi	x12,x12,4
    3102:	04090103          	lb	x2,64(x18)
    3106:	0100                	addi	x8,x2,128
    3108:	2905                	jal	3538 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1344>
    310a:	0306                	slli	x6,x6,0x1
    310c:	0901                	addi	x18,x18,0
    310e:	0004                	0x4
    3110:	0501                	addi	x10,x10,0
    3112:	0318                	addi	x14,x2,384
    3114:	097f                	0x97f
    3116:	0004                	0x4
    3118:	0501                	addi	x10,x10,0
    311a:	0611                	addi	x12,x12,4
    311c:	14090103          	lb	x2,320(x18)
    3120:	0100                	addi	x8,x2,128
    3122:	1905                	addi	x18,x18,-31
    3124:	0306                	slli	x6,x6,0x1
    3126:	0906                	slli	x18,x18,0x1
    3128:	000c                	0xc
    312a:	0501                	addi	x10,x10,0
    312c:	0318                	addi	x14,x2,384
    312e:	097a                	slli	x18,x18,0x1e
    3130:	0004                	0x4
    3132:	0501                	addi	x10,x10,0
    3134:	0329                	addi	x6,x6,10
    3136:	0900                	addi	x8,x2,144
    3138:	000c                	0xc
    313a:	0501                	addi	x10,x10,0
    313c:	0318                	addi	x14,x2,384
    313e:	0902                	c.slli64	x18
    3140:	0004                	0x4
    3142:	0301                	addi	x6,x6,0
    3144:	0901                	addi	x18,x18,0
    3146:	0004                	0x4
    3148:	0501                	addi	x10,x10,0
    314a:	0319                	addi	x6,x6,6
    314c:	00100903          	lb	x18,1(x0) # 1 <bsg_group_size>
    3150:	0501                	addi	x10,x10,0
    3152:	0318                	addi	x14,x2,384
    3154:	097a                	slli	x18,x18,0x1e
    3156:	0008                	0x8
    3158:	0501                	addi	x10,x10,0
    315a:	0611                	addi	x12,x12,4
    315c:	04090203          	lb	x4,64(x18)
    3160:	0100                	addi	x8,x2,128
    3162:	00090103          	lb	x2,0(x18)
    3166:	0100                	addi	x8,x2,128
    3168:	00090203          	lb	x4,0(x18)
    316c:	0100                	addi	x8,x2,128
    316e:	2205                	jal	328e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x109a>
    3170:	00090003          	lb	x0,0(x18)
    3174:	0100                	addi	x8,x2,128
    3176:	1905                	addi	x18,x18,-31
    3178:	0306                	slli	x6,x6,0x1
    317a:	0976                	slli	x18,x18,0x1d
    317c:	0000                	unimp
    317e:	0301                	addi	x6,x6,0
    3180:	0004090b          	0x4090b
    3184:	0501                	addi	x10,x10,0
    3186:	031e                	slli	x6,x6,0x7
    3188:	0904                	addi	x9,x2,144
    318a:	0010                	0x10
    318c:	0501                	addi	x10,x10,0
    318e:	0019                	c.nop	6
    3190:	0402                	c.slli64	x8
    3192:	0602                	c.slli64	x12
    3194:	04097c03          	0x4097c03
    3198:	0100                	addi	x8,x2,128
    319a:	0200                	addi	x8,x2,256
    319c:	0204                	addi	x9,x2,256
    319e:	00090003          	lb	x0,0(x18)
    31a2:	0100                	addi	x8,x2,128
    31a4:	0200                	addi	x8,x2,256
    31a6:	0204                	addi	x9,x2,256
    31a8:	44090003          	lb	x0,1088(x18)
    31ac:	0100                	addi	x8,x2,128
    31ae:	0200                	addi	x8,x2,256
    31b0:	0204                	addi	x9,x2,256
    31b2:	00090003          	lb	x0,0(x18)
    31b6:	0100                	addi	x8,x2,128
    31b8:	0200                	addi	x8,x2,256
    31ba:	0204                	addi	x9,x2,256
    31bc:	00090003          	lb	x0,0(x18)
    31c0:	0100                	addi	x8,x2,128
    31c2:	0200                	addi	x8,x2,256
    31c4:	0204                	addi	x9,x2,256
    31c6:	04090103          	lb	x2,64(x18)
    31ca:	0100                	addi	x8,x2,128
    31cc:	5305                	li	x6,-31
    31ce:	0200                	addi	x8,x2,256
    31d0:	0204                	addi	x9,x2,256
    31d2:	0306                	slli	x6,x6,0x1
    31d4:	0900                	addi	x8,x2,144
    31d6:	0000                	unimp
    31d8:	0501                	addi	x10,x10,0
    31da:	0011                	c.nop	4
    31dc:	0402                	c.slli64	x8
    31de:	0302                	c.slli64	x6
    31e0:	097e                	slli	x18,x18,0x1f
    31e2:	0018                	0x18
    31e4:	0501                	addi	x10,x10,0
    31e6:	04020053          	0x4020053
    31ea:	0302                	c.slli64	x6
    31ec:	0902                	c.slli64	x18
    31ee:	0004                	0x4
    31f0:	0501                	addi	x10,x10,0
    31f2:	0019                	c.nop	6
    31f4:	0402                	c.slli64	x8
    31f6:	0302                	c.slli64	x6
    31f8:	0902                	c.slli64	x18
    31fa:	0004                	0x4
    31fc:	0501                	addi	x10,x10,0
    31fe:	0022                	c.slli	x0,0x8
    3200:	0402                	c.slli64	x8
    3202:	0302                	c.slli64	x6
    3204:	097c                	addi	x15,x2,156
    3206:	0048                	addi	x10,x2,4
    3208:	0501                	addi	x10,x10,0
    320a:	0019                	c.nop	6
    320c:	0402                	c.slli64	x8
    320e:	0302                	c.slli64	x6
    3210:	0904                	addi	x9,x2,144
    3212:	0004                	0x4
    3214:	0501                	addi	x10,x10,0
    3216:	0022                	c.slli	x0,0x8
    3218:	0402                	c.slli64	x8
    321a:	0302                	c.slli64	x6
    321c:	097c                	addi	x15,x2,156
    321e:	0004                	0x4
    3220:	0501                	addi	x10,x10,0
    3222:	04020053          	0x4020053
    3226:	0302                	c.slli64	x6
    3228:	0902                	c.slli64	x18
    322a:	0004                	0x4
    322c:	0501                	addi	x10,x10,0
    322e:	0019                	c.nop	6
    3230:	0402                	c.slli64	x8
    3232:	0602                	c.slli64	x12
    3234:	04090203          	lb	x4,64(x18)
    3238:	0100                	addi	x8,x2,128
    323a:	0200                	addi	x8,x2,256
    323c:	0204                	addi	x9,x2,256
    323e:	00090003          	lb	x0,0(x18)
    3242:	0100                	addi	x8,x2,128
    3244:	0200                	addi	x8,x2,256
    3246:	0204                	addi	x9,x2,256
    3248:	00090003          	lb	x0,0(x18)
    324c:	0100                	addi	x8,x2,128
    324e:	0200                	addi	x8,x2,256
    3250:	0204                	addi	x9,x2,256
    3252:	00090003          	lb	x0,0(x18)
    3256:	0100                	addi	x8,x2,128
    3258:	0200                	addi	x8,x2,256
    325a:	0204                	addi	x9,x2,256
    325c:	00090003          	lb	x0,0(x18)
    3260:	0100                	addi	x8,x2,128
    3262:	0200                	addi	x8,x2,256
    3264:	0204                	addi	x9,x2,256
    3266:	00090103          	lb	x2,0(x18)
    326a:	0100                	addi	x8,x2,128
    326c:	1105                	addi	x2,x2,-31
    326e:	0200                	addi	x8,x2,256
    3270:	0204                	addi	x9,x2,256
    3272:	00097b03          	0x97b03
    3276:	0100                	addi	x8,x2,128
    3278:	2205                	jal	3398 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x11a4>
    327a:	0200                	addi	x8,x2,256
    327c:	0204                	addi	x9,x2,256
    327e:	00090003          	lb	x0,0(x18)
    3282:	0100                	addi	x8,x2,128
    3284:	1105                	addi	x2,x2,-31
    3286:	04090803          	lb	x16,64(x18)
    328a:	0100                	addi	x8,x2,128
    328c:	1805                	addi	x16,x16,-31
    328e:	0306                	slli	x6,x6,0x1
    3290:	0900                	addi	x8,x2,144
    3292:	0000                	unimp
    3294:	0501                	addi	x10,x10,0
    3296:	0611                	addi	x12,x12,4
    3298:	10090203          	lb	x4,256(x18)
    329c:	0100                	addi	x8,x2,128
    329e:	0905                	addi	x18,x18,1
    32a0:	0306                	slli	x6,x6,0x1
    32a2:	0901                	addi	x18,x18,0
    32a4:	0000                	unimp
    32a6:	0501                	addi	x10,x10,0
    32a8:	0646                	slli	x12,x12,0x11
    32aa:	44090403          	lb	x8,1088(x18)
    32ae:	0100                	addi	x8,x2,128
    32b0:	0306                	slli	x6,x6,0x1
    32b2:	0900                	addi	x8,x2,144
    32b4:	003c                	addi	x15,x2,8
    32b6:	0501                	addi	x10,x10,0
    32b8:	0611                	addi	x12,x12,4
    32ba:	08090103          	lb	x2,128(x18)
    32be:	0100                	addi	x8,x2,128
    32c0:	00090303          	lb	x6,0(x18)
    32c4:	0100                	addi	x8,x2,128
    32c6:	1705                	addi	x14,x14,-31
    32c8:	0306                	slli	x6,x6,0x1
    32ca:	0900                	addi	x8,x2,144
    32cc:	0000                	unimp
    32ce:	0501                	addi	x10,x10,0
    32d0:	0346                	slli	x6,x6,0x11
    32d2:	097c                	addi	x15,x2,156
    32d4:	0004                	0x4
    32d6:	0501                	addi	x10,x10,0
    32d8:	0318                	addi	x14,x2,384
    32da:	0908                	addi	x10,x2,144
    32dc:	0018                	0x18
    32de:	0501                	addi	x10,x10,0
    32e0:	0346                	slli	x6,x6,0x11
    32e2:	0978                	addi	x14,x2,156
    32e4:	0004                	0x4
    32e6:	0501                	addi	x10,x10,0
    32e8:	09050317          	auipc	x6,0x9050
    32ec:	0008                	0x8
    32ee:	0301                	addi	x6,x6,0
    32f0:	097f                	0x97f
    32f2:	0004                	0x4
    32f4:	0501                	addi	x10,x10,0
    32f6:	0611                	addi	x12,x12,4
    32f8:	18090103          	lb	x2,384(x18)
    32fc:	0100                	addi	x8,x2,128
    32fe:	1905                	addi	x18,x18,-31
    3300:	0306                	slli	x6,x6,0x1
    3302:	0906                	slli	x18,x18,0x1
    3304:	0000                	unimp
    3306:	0501                	addi	x10,x10,0
    3308:	097b0317          	auipc	x6,0x97b0
    330c:	000c                	0xc
    330e:	0301                	addi	x6,x6,0
    3310:	097f                	0x97f
    3312:	0004                	0x4
    3314:	0501                	addi	x10,x10,0
    3316:	0611                	addi	x12,x12,4
    3318:	1c090103          	lb	x2,448(x18)
    331c:	0100                	addi	x8,x2,128
    331e:	1705                	addi	x14,x14,-31
    3320:	0306                	slli	x6,x6,0x1
    3322:	0900                	addi	x8,x2,144
    3324:	0008                	0x8
    3326:	0501                	addi	x10,x10,0
    3328:	0318                	addi	x14,x2,384
    332a:	0902                	c.slli64	x18
    332c:	0010                	0x10
    332e:	0301                	addi	x6,x6,0
    3330:	0901                	addi	x18,x18,0
    3332:	0004                	0x4
    3334:	0501                	addi	x10,x10,0
    3336:	0319                	addi	x6,x6,6
    3338:	00100903          	lb	x18,1(x0) # 1 <bsg_group_size>
    333c:	0501                	addi	x10,x10,0
    333e:	097a0317          	auipc	x6,0x97a0
    3342:	0008                	0x8
    3344:	0501                	addi	x10,x10,0
    3346:	0611                	addi	x12,x12,4
    3348:	04090203          	lb	x4,64(x18)
    334c:	0100                	addi	x8,x2,128
    334e:	00090103          	lb	x2,0(x18)
    3352:	0100                	addi	x8,x2,128
    3354:	00090203          	lb	x4,0(x18)
    3358:	0100                	addi	x8,x2,128
    335a:	2205                	jal	347a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1286>
    335c:	00090003          	lb	x0,0(x18)
    3360:	0100                	addi	x8,x2,128
    3362:	1905                	addi	x18,x18,-31
    3364:	0306                	slli	x6,x6,0x1
    3366:	0976                	slli	x18,x18,0x1d
    3368:	0000                	unimp
    336a:	0301                	addi	x6,x6,0
    336c:	0008090b          	0x8090b
    3370:	0501                	addi	x10,x10,0
    3372:	031e                	slli	x6,x6,0x7
    3374:	0904                	addi	x9,x2,144
    3376:	0014                	0x14
    3378:	0501                	addi	x10,x10,0
    337a:	0019                	c.nop	6
    337c:	0402                	c.slli64	x8
    337e:	0602                	c.slli64	x12
    3380:	04097c03          	0x4097c03
    3384:	0100                	addi	x8,x2,128
    3386:	0200                	addi	x8,x2,256
    3388:	0204                	addi	x9,x2,256
    338a:	00090003          	lb	x0,0(x18)
    338e:	0100                	addi	x8,x2,128
    3390:	0200                	addi	x8,x2,256
    3392:	0204                	addi	x9,x2,256
    3394:	44090003          	lb	x0,1088(x18)
    3398:	0100                	addi	x8,x2,128
    339a:	0200                	addi	x8,x2,256
    339c:	0204                	addi	x9,x2,256
    339e:	00090003          	lb	x0,0(x18)
    33a2:	0100                	addi	x8,x2,128
    33a4:	0200                	addi	x8,x2,256
    33a6:	0204                	addi	x9,x2,256
    33a8:	00090003          	lb	x0,0(x18)
    33ac:	0100                	addi	x8,x2,128
    33ae:	0200                	addi	x8,x2,256
    33b0:	0204                	addi	x9,x2,256
    33b2:	04090103          	lb	x2,64(x18)
    33b6:	0100                	addi	x8,x2,128
    33b8:	5305                	li	x6,-31
    33ba:	0200                	addi	x8,x2,256
    33bc:	0204                	addi	x9,x2,256
    33be:	0306                	slli	x6,x6,0x1
    33c0:	0900                	addi	x8,x2,144
    33c2:	0000                	unimp
    33c4:	0501                	addi	x10,x10,0
    33c6:	0011                	c.nop	4
    33c8:	0402                	c.slli64	x8
    33ca:	0302                	c.slli64	x6
    33cc:	097e                	slli	x18,x18,0x1f
    33ce:	0018                	0x18
    33d0:	0501                	addi	x10,x10,0
    33d2:	04020053          	0x4020053
    33d6:	0302                	c.slli64	x6
    33d8:	0902                	c.slli64	x18
    33da:	0004                	0x4
    33dc:	0501                	addi	x10,x10,0
    33de:	0019                	c.nop	6
    33e0:	0402                	c.slli64	x8
    33e2:	0302                	c.slli64	x6
    33e4:	0902                	c.slli64	x18
    33e6:	0004                	0x4
    33e8:	0501                	addi	x10,x10,0
    33ea:	0022                	c.slli	x0,0x8
    33ec:	0402                	c.slli64	x8
    33ee:	0302                	c.slli64	x6
    33f0:	097c                	addi	x15,x2,156
    33f2:	0044                	addi	x9,x2,4
    33f4:	0501                	addi	x10,x10,0
    33f6:	0019                	c.nop	6
    33f8:	0402                	c.slli64	x8
    33fa:	0302                	c.slli64	x6
    33fc:	0904                	addi	x9,x2,144
    33fe:	0004                	0x4
    3400:	0501                	addi	x10,x10,0
    3402:	0022                	c.slli	x0,0x8
    3404:	0402                	c.slli64	x8
    3406:	0302                	c.slli64	x6
    3408:	097c                	addi	x15,x2,156
    340a:	0008                	0x8
    340c:	0501                	addi	x10,x10,0
    340e:	04020053          	0x4020053
    3412:	0302                	c.slli64	x6
    3414:	0902                	c.slli64	x18
    3416:	0004                	0x4
    3418:	0501                	addi	x10,x10,0
    341a:	0019                	c.nop	6
    341c:	0402                	c.slli64	x8
    341e:	0602                	c.slli64	x12
    3420:	04090203          	lb	x4,64(x18)
    3424:	0100                	addi	x8,x2,128
    3426:	0200                	addi	x8,x2,256
    3428:	0204                	addi	x9,x2,256
    342a:	00090003          	lb	x0,0(x18)
    342e:	0100                	addi	x8,x2,128
    3430:	0200                	addi	x8,x2,256
    3432:	0204                	addi	x9,x2,256
    3434:	00090003          	lb	x0,0(x18)
    3438:	0100                	addi	x8,x2,128
    343a:	0200                	addi	x8,x2,256
    343c:	0204                	addi	x9,x2,256
    343e:	00090003          	lb	x0,0(x18)
    3442:	0100                	addi	x8,x2,128
    3444:	0200                	addi	x8,x2,256
    3446:	0204                	addi	x9,x2,256
    3448:	00090003          	lb	x0,0(x18)
    344c:	0100                	addi	x8,x2,128
    344e:	0200                	addi	x8,x2,256
    3450:	0204                	addi	x9,x2,256
    3452:	00090103          	lb	x2,0(x18)
    3456:	0100                	addi	x8,x2,128
    3458:	1105                	addi	x2,x2,-31
    345a:	0200                	addi	x8,x2,256
    345c:	0204                	addi	x9,x2,256
    345e:	00097b03          	0x97b03
    3462:	0100                	addi	x8,x2,128
    3464:	2205                	jal	3584 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1390>
    3466:	0200                	addi	x8,x2,256
    3468:	0204                	addi	x9,x2,256
    346a:	00090003          	lb	x0,0(x18)
    346e:	0100                	addi	x8,x2,128
    3470:	1105                	addi	x2,x2,-31
    3472:	04090803          	lb	x16,64(x18)
    3476:	0100                	addi	x8,x2,128
    3478:	1805                	addi	x16,x16,-31
    347a:	0306                	slli	x6,x6,0x1
    347c:	0900                	addi	x8,x2,144
    347e:	0000                	unimp
    3480:	0501                	addi	x10,x10,0
    3482:	0611                	addi	x12,x12,4
    3484:	10090203          	lb	x4,256(x18)
    3488:	0100                	addi	x8,x2,128
    348a:	0905                	addi	x18,x18,1
    348c:	0306                	slli	x6,x6,0x1
    348e:	0901                	addi	x18,x18,0
    3490:	0000                	unimp
    3492:	0901                	addi	x18,x18,0
    3494:	0044                	addi	x9,x2,4
    3496:	0100                	addi	x8,x2,128
    3498:	0401                	addi	x8,x8,0
    349a:	00200503          	lb	x10,2(x0) # 2 <bsg_group_size+0x1>
    349e:	0205                	addi	x4,x4,1
    34a0:	19dc                	addi	x15,x2,244
    34a2:	0000                	unimp
    34a4:	01018603          	lb	x12,16(x3)
    34a8:	1205                	addi	x4,x4,-31
    34aa:	0306                	slli	x6,x6,0x1
    34ac:	0905                	addi	x18,x18,1
    34ae:	000c                	0xc
    34b0:	0501                	addi	x10,x10,0
    34b2:	0320                	addi	x8,x2,392
    34b4:	0004097b          	0x4097b
    34b8:	0501                	addi	x10,x10,0
    34ba:	0312                	slli	x6,x6,0x4
    34bc:	0905                	addi	x18,x18,1
    34be:	0004                	0x4
    34c0:	0501                	addi	x10,x10,0
    34c2:	0320                	addi	x8,x2,392
    34c4:	0004097b          	0x4097b
    34c8:	0301                	addi	x6,x6,0
    34ca:	0900                	addi	x8,x2,144
    34cc:	0030                	addi	x12,x2,8
    34ce:	0501                	addi	x10,x10,0
    34d0:	0312                	slli	x6,x6,0x4
    34d2:	0905                	addi	x18,x18,1
    34d4:	000c                	0xc
    34d6:	0501                	addi	x10,x10,0
    34d8:	0103063f 01000409 	0x10004090103063f
    34e0:	3305                	jal	3200 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x100c>
    34e2:	0306                	slli	x6,x6,0x1
    34e4:	0900                	addi	x8,x2,144
    34e6:	0034                	addi	x13,x2,8
    34e8:	0501                	addi	x10,x10,0
    34ea:	031e                	slli	x6,x6,0x7
    34ec:	0900                	addi	x8,x2,144
    34ee:	0004                	0x4
    34f0:	0501                	addi	x10,x10,0
    34f2:	09000317          	auipc	x6,0x9000
    34f6:	0004                	0x4
    34f8:	0501                	addi	x10,x10,0
    34fa:	0628                	addi	x10,x2,776
    34fc:	08090203          	lb	x4,128(x18)
    3500:	0100                	addi	x8,x2,128
    3502:	1105                	addi	x2,x2,-31
    3504:	0306                	slli	x6,x6,0x1
    3506:	097f                	0x97f
    3508:	0040                	addi	x8,x2,4
    350a:	0501                	addi	x10,x10,0
    350c:	063a                	slli	x12,x12,0xe
    350e:	04090403          	lb	x8,64(x18)
    3512:	0100                	addi	x8,x2,128
    3514:	1c05                	addi	x24,x24,-31
    3516:	0306                	slli	x6,x6,0x1
    3518:	097f                	0x97f
    351a:	0014                	0x14
    351c:	0501                	addi	x10,x10,0
    351e:	033a                	slli	x6,x6,0xe
    3520:	0901                	addi	x18,x18,0
    3522:	0024                	addi	x9,x2,8
    3524:	0501                	addi	x10,x10,0
    3526:	031c                	addi	x15,x2,384
    3528:	097f                	0x97f
    352a:	0004                	0x4
    352c:	0501                	addi	x10,x10,0
    352e:	0634                	addi	x13,x2,776
    3530:	1c090403          	lb	x8,448(x18)
    3534:	0100                	addi	x8,x2,128
    3536:	3f05                	jal	3466 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1272>
    3538:	0306                	slli	x6,x6,0x1
    353a:	0901                	addi	x18,x18,0
    353c:	0000                	unimp
    353e:	0501                	addi	x10,x10,0
    3540:	0334                	addi	x13,x2,392
    3542:	0900                	addi	x8,x2,144
    3544:	0014                	0x14
    3546:	0501                	addi	x10,x10,0
    3548:	0900033b          	0x900033b
    354c:	0004                	0x4
    354e:	0501                	addi	x10,x10,0
    3550:	0330                	addi	x12,x2,392
    3552:	0900                	addi	x8,x2,144
    3554:	0038                	addi	x14,x2,8
    3556:	0501                	addi	x10,x10,0
    3558:	0634                	addi	x13,x2,776
    355a:	04097f03          	0x4097f03
    355e:	0100                	addi	x8,x2,128
    3560:	00090003          	lb	x0,0(x18)
    3564:	0100                	addi	x8,x2,128
    3566:	3b05                	jal	3296 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x10a2>
    3568:	0306                	slli	x6,x6,0x1
    356a:	0901                	addi	x18,x18,0
    356c:	0000                	unimp
    356e:	0501                	addi	x10,x10,0
    3570:	0330                	addi	x12,x2,392
    3572:	0900                	addi	x8,x2,144
    3574:	0004                	0x4
    3576:	0501                	addi	x10,x10,0
    3578:	0634                	addi	x13,x2,776
    357a:	04097f03          	0x4097f03
    357e:	0100                	addi	x8,x2,128
    3580:	00090003          	lb	x0,0(x18)
    3584:	0100                	addi	x8,x2,128
    3586:	3b05                	jal	32b6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x10c2>
    3588:	0306                	slli	x6,x6,0x1
    358a:	0901                	addi	x18,x18,0
    358c:	0000                	unimp
    358e:	0501                	addi	x10,x10,0
    3590:	0330                	addi	x12,x2,392
    3592:	0900                	addi	x8,x2,144
    3594:	0004                	0x4
    3596:	0501                	addi	x10,x10,0
    3598:	0634                	addi	x13,x2,776
    359a:	04097f03          	0x4097f03
    359e:	0100                	addi	x8,x2,128
    35a0:	00090003          	lb	x0,0(x18)
    35a4:	0100                	addi	x8,x2,128
    35a6:	3b05                	jal	32d6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x10e2>
    35a8:	0306                	slli	x6,x6,0x1
    35aa:	0901                	addi	x18,x18,0
    35ac:	0000                	unimp
    35ae:	0501                	addi	x10,x10,0
    35b0:	0330                	addi	x12,x2,392
    35b2:	0900                	addi	x8,x2,144
    35b4:	0004                	0x4
    35b6:	0501                	addi	x10,x10,0
    35b8:	0634                	addi	x13,x2,776
    35ba:	04097f03          	0x4097f03
    35be:	0100                	addi	x8,x2,128
    35c0:	00090003          	lb	x0,0(x18)
    35c4:	0100                	addi	x8,x2,128
    35c6:	3b05                	jal	32f6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1102>
    35c8:	0306                	slli	x6,x6,0x1
    35ca:	0901                	addi	x18,x18,0
    35cc:	0000                	unimp
    35ce:	0501                	addi	x10,x10,0
    35d0:	0330                	addi	x12,x2,392
    35d2:	0900                	addi	x8,x2,144
    35d4:	0004                	0x4
    35d6:	0501                	addi	x10,x10,0
    35d8:	0634                	addi	x13,x2,776
    35da:	04097f03          	0x4097f03
    35de:	0100                	addi	x8,x2,128
    35e0:	00090003          	lb	x0,0(x18)
    35e4:	0100                	addi	x8,x2,128
    35e6:	3b05                	jal	3316 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1122>
    35e8:	0306                	slli	x6,x6,0x1
    35ea:	0901                	addi	x18,x18,0
    35ec:	0000                	unimp
    35ee:	0501                	addi	x10,x10,0
    35f0:	0330                	addi	x12,x2,392
    35f2:	0900                	addi	x8,x2,144
    35f4:	0004                	0x4
    35f6:	0501                	addi	x10,x10,0
    35f8:	0634                	addi	x13,x2,776
    35fa:	04097f03          	0x4097f03
    35fe:	0100                	addi	x8,x2,128
    3600:	00090003          	lb	x0,0(x18)
    3604:	0100                	addi	x8,x2,128
    3606:	3b05                	jal	3336 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1142>
    3608:	0306                	slli	x6,x6,0x1
    360a:	0901                	addi	x18,x18,0
    360c:	0000                	unimp
    360e:	0501                	addi	x10,x10,0
    3610:	0330                	addi	x12,x2,392
    3612:	0900                	addi	x8,x2,144
    3614:	0004                	0x4
    3616:	0501                	addi	x10,x10,0
    3618:	0634                	addi	x13,x2,776
    361a:	04097f03          	0x4097f03
    361e:	0100                	addi	x8,x2,128
    3620:	00090003          	lb	x0,0(x18)
    3624:	0100                	addi	x8,x2,128
    3626:	3005                	jal	2e46 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc52>
    3628:	0306                	slli	x6,x6,0x1
    362a:	0901                	addi	x18,x18,0
    362c:	0000                	unimp
    362e:	0501                	addi	x10,x10,0
    3630:	0634                	addi	x13,x2,776
    3632:	04097f03          	0x4097f03
    3636:	0100                	addi	x8,x2,128
    3638:	00090003          	lb	x0,0(x18)
    363c:	0100                	addi	x8,x2,128
    363e:	1905                	addi	x18,x18,-31
    3640:	00097d03          	0x97d03
    3644:	0100                	addi	x8,x2,128
    3646:	3a05                	jal	2f76 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xd82>
    3648:	00090003          	lb	x0,0(x18)
    364c:	0100                	addi	x8,x2,128
    364e:	2c05                	jal	387e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x168a>
    3650:	08090903          	lb	x18,128(x18)
    3654:	0100                	addi	x8,x2,128
    3656:	1905                	addi	x18,x18,-31
    3658:	0306                	slli	x6,x6,0x1
    365a:	00000903          	lb	x18,0(x0) # 0 <_start>
    365e:	0501                	addi	x10,x10,0
    3660:	0321                	addi	x6,x6,8
    3662:	097e                	slli	x18,x18,0x1f
    3664:	0004                	0x4
    3666:	0501                	addi	x10,x10,0
    3668:	062c                	addi	x11,x2,776
    366a:	04097f03          	0x4097f03
    366e:	0100                	addi	x8,x2,128
    3670:	00090003          	lb	x0,0(x18)
    3674:	0100                	addi	x8,x2,128
    3676:	2105                	jal	3a96 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x18a2>
    3678:	0306                	slli	x6,x6,0x1
    367a:	0901                	addi	x18,x18,0
    367c:	0000                	unimp
    367e:	0501                	addi	x10,x10,0
    3680:	062c                	addi	x11,x2,776
    3682:	04097f03          	0x4097f03
    3686:	0100                	addi	x8,x2,128
    3688:	00090003          	lb	x0,0(x18)
    368c:	0100                	addi	x8,x2,128
    368e:	1905                	addi	x18,x18,-31
    3690:	0306                	slli	x6,x6,0x1
    3692:	00000903          	lb	x18,0(x0) # 0 <_start>
    3696:	0501                	addi	x10,x10,0
    3698:	0328                	addi	x10,x2,392
    369a:	0971                	addi	x18,x18,28
    369c:	0004                	0x4
    369e:	0501                	addi	x10,x10,0
    36a0:	0321                	addi	x6,x6,8
    36a2:	090d                	addi	x18,x18,3
    36a4:	0004                	0x4
    36a6:	0501                	addi	x10,x10,0
    36a8:	062c                	addi	x11,x2,776
    36aa:	04097f03          	0x4097f03
    36ae:	0100                	addi	x8,x2,128
    36b0:	00090003          	lb	x0,0(x18)
    36b4:	0100                	addi	x8,x2,128
    36b6:	2105                	jal	3ad6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x18e2>
    36b8:	0306                	slli	x6,x6,0x1
    36ba:	0901                	addi	x18,x18,0
    36bc:	0000                	unimp
    36be:	0501                	addi	x10,x10,0
    36c0:	062c                	addi	x11,x2,776
    36c2:	04097f03          	0x4097f03
    36c6:	0100                	addi	x8,x2,128
    36c8:	00090003          	lb	x0,0(x18)
    36cc:	0100                	addi	x8,x2,128
    36ce:	2105                	jal	3aee <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x18fa>
    36d0:	0306                	slli	x6,x6,0x1
    36d2:	0901                	addi	x18,x18,0
    36d4:	0000                	unimp
    36d6:	0501                	addi	x10,x10,0
    36d8:	062c                	addi	x11,x2,776
    36da:	04097f03          	0x4097f03
    36de:	0100                	addi	x8,x2,128
    36e0:	00090003          	lb	x0,0(x18)
    36e4:	0100                	addi	x8,x2,128
    36e6:	2105                	jal	3b06 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1912>
    36e8:	0306                	slli	x6,x6,0x1
    36ea:	0901                	addi	x18,x18,0
    36ec:	0000                	unimp
    36ee:	0501                	addi	x10,x10,0
    36f0:	062c                	addi	x11,x2,776
    36f2:	04097f03          	0x4097f03
    36f6:	0100                	addi	x8,x2,128
    36f8:	00090003          	lb	x0,0(x18)
    36fc:	0100                	addi	x8,x2,128
    36fe:	2105                	jal	3b1e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x192a>
    3700:	0306                	slli	x6,x6,0x1
    3702:	0901                	addi	x18,x18,0
    3704:	0000                	unimp
    3706:	0501                	addi	x10,x10,0
    3708:	062c                	addi	x11,x2,776
    370a:	04097f03          	0x4097f03
    370e:	0100                	addi	x8,x2,128
    3710:	00090003          	lb	x0,0(x18)
    3714:	0100                	addi	x8,x2,128
    3716:	2105                	jal	3b36 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1942>
    3718:	0306                	slli	x6,x6,0x1
    371a:	0901                	addi	x18,x18,0
    371c:	0000                	unimp
    371e:	0501                	addi	x10,x10,0
    3720:	062c                	addi	x11,x2,776
    3722:	04097f03          	0x4097f03
    3726:	0100                	addi	x8,x2,128
    3728:	00090003          	lb	x0,0(x18)
    372c:	0100                	addi	x8,x2,128
    372e:	1105                	addi	x2,x2,-31
    3730:	00097403          	0x97403
    3734:	0100                	addi	x8,x2,128
    3736:	2805                	jal	3766 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1572>
    3738:	00090003          	lb	x0,0(x18)
    373c:	0100                	addi	x8,x2,128
    373e:	0905                	addi	x18,x18,1
    3740:	0200                	addi	x8,x2,256
    3742:	0204                	addi	x9,x2,256
    3744:	18097e03          	0x18097e03
    3748:	0100                	addi	x8,x2,128
    374a:	3f05                	jal	367a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1486>
    374c:	0200                	addi	x8,x2,256
    374e:	0204                	addi	x9,x2,256
    3750:	24090003          	lb	x0,576(x18)
    3754:	0100                	addi	x8,x2,128
    3756:	0105                	addi	x2,x2,1
    3758:	0306                	slli	x6,x6,0x1
    375a:	0916                	slli	x18,x18,0x5
    375c:	0010                	0x10
    375e:	0501                	addi	x10,x10,0
    3760:	031c                	addi	x15,x2,384
    3762:	096e                	slli	x18,x18,0x1b
    3764:	003c                	addi	x15,x2,8
    3766:	0901                	addi	x18,x18,0
    3768:	0024                	addi	x9,x2,8
    376a:	0100                	addi	x8,x2,128
    376c:	0401                	addi	x8,x8,0
    376e:	00200503          	lb	x10,2(x0) # 2 <bsg_group_size+0x1>
    3772:	0205                	addi	x4,x4,1
    3774:	1c7c                	addi	x15,x2,572
    3776:	0000                	unimp
    3778:	01018603          	lb	x12,16(x3)
    377c:	1205                	addi	x4,x4,-31
    377e:	0306                	slli	x6,x6,0x1
    3780:	0905                	addi	x18,x18,1
    3782:	0004                	0x4
    3784:	0501                	addi	x10,x10,0
    3786:	0320                	addi	x8,x2,392
    3788:	0004097b          	0x4097b
    378c:	0501                	addi	x10,x10,0
    378e:	0312                	slli	x6,x6,0x4
    3790:	0905                	addi	x18,x18,1
    3792:	0004                	0x4
    3794:	0501                	addi	x10,x10,0
    3796:	0320                	addi	x8,x2,392
    3798:	0004097b          	0x4097b
    379c:	0301                	addi	x6,x6,0
    379e:	0900                	addi	x8,x2,144
    37a0:	0030                	addi	x12,x2,8
    37a2:	0501                	addi	x10,x10,0
    37a4:	0312                	slli	x6,x6,0x4
    37a6:	0905                	addi	x18,x18,1
    37a8:	0010                	0x10
    37aa:	0501                	addi	x10,x10,0
    37ac:	0103063f 01000409 	0x10004090103063f
    37b4:	3305                	jal	34d4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x12e0>
    37b6:	0306                	slli	x6,x6,0x1
    37b8:	0900                	addi	x8,x2,144
    37ba:	0030                	addi	x12,x2,8
    37bc:	0501                	addi	x10,x10,0
    37be:	031e                	slli	x6,x6,0x7
    37c0:	0900                	addi	x8,x2,144
    37c2:	0004                	0x4
    37c4:	0501                	addi	x10,x10,0
    37c6:	09000317          	auipc	x6,0x9000
    37ca:	0004                	0x4
    37cc:	0501                	addi	x10,x10,0
    37ce:	0628                	addi	x10,x2,776
    37d0:	08090203          	lb	x4,128(x18)
    37d4:	0100                	addi	x8,x2,128
    37d6:	1105                	addi	x2,x2,-31
    37d8:	0306                	slli	x6,x6,0x1
    37da:	097f                	0x97f
    37dc:	0040                	addi	x8,x2,4
    37de:	0501                	addi	x10,x10,0
    37e0:	063a                	slli	x12,x12,0xe
    37e2:	04090403          	lb	x8,64(x18)
    37e6:	0100                	addi	x8,x2,128
    37e8:	1c05                	addi	x24,x24,-31
    37ea:	0306                	slli	x6,x6,0x1
    37ec:	097f                	0x97f
    37ee:	0014                	0x14
    37f0:	0501                	addi	x10,x10,0
    37f2:	0634                	addi	x13,x2,776
    37f4:	44090403          	lb	x8,1088(x18)
    37f8:	0100                	addi	x8,x2,128
    37fa:	3f05                	jal	372a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1536>
    37fc:	0306                	slli	x6,x6,0x1
    37fe:	0901                	addi	x18,x18,0
    3800:	0000                	unimp
    3802:	0501                	addi	x10,x10,0
    3804:	0334                	addi	x13,x2,392
    3806:	0900                	addi	x8,x2,144
    3808:	0014                	0x14
    380a:	0501                	addi	x10,x10,0
    380c:	0900033b          	0x900033b
    3810:	0004                	0x4
    3812:	0501                	addi	x10,x10,0
    3814:	0330                	addi	x12,x2,392
    3816:	0900                	addi	x8,x2,144
    3818:	0038                	addi	x14,x2,8
    381a:	0501                	addi	x10,x10,0
    381c:	0634                	addi	x13,x2,776
    381e:	0c097f03          	0xc097f03
    3822:	0100                	addi	x8,x2,128
    3824:	00090003          	lb	x0,0(x18)
    3828:	0100                	addi	x8,x2,128
    382a:	3b05                	jal	355a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1366>
    382c:	0306                	slli	x6,x6,0x1
    382e:	0901                	addi	x18,x18,0
    3830:	0000                	unimp
    3832:	0501                	addi	x10,x10,0
    3834:	0330                	addi	x12,x2,392
    3836:	0900                	addi	x8,x2,144
    3838:	0004                	0x4
    383a:	0501                	addi	x10,x10,0
    383c:	0634                	addi	x13,x2,776
    383e:	0c097f03          	0xc097f03
    3842:	0100                	addi	x8,x2,128
    3844:	00090003          	lb	x0,0(x18)
    3848:	0100                	addi	x8,x2,128
    384a:	3b05                	jal	357a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1386>
    384c:	0306                	slli	x6,x6,0x1
    384e:	0901                	addi	x18,x18,0
    3850:	0000                	unimp
    3852:	0501                	addi	x10,x10,0
    3854:	0330                	addi	x12,x2,392
    3856:	0900                	addi	x8,x2,144
    3858:	0004                	0x4
    385a:	0501                	addi	x10,x10,0
    385c:	0634                	addi	x13,x2,776
    385e:	0c097f03          	0xc097f03
    3862:	0100                	addi	x8,x2,128
    3864:	00090003          	lb	x0,0(x18)
    3868:	0100                	addi	x8,x2,128
    386a:	3b05                	jal	359a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x13a6>
    386c:	0306                	slli	x6,x6,0x1
    386e:	0901                	addi	x18,x18,0
    3870:	0000                	unimp
    3872:	0501                	addi	x10,x10,0
    3874:	0330                	addi	x12,x2,392
    3876:	0900                	addi	x8,x2,144
    3878:	0004                	0x4
    387a:	0501                	addi	x10,x10,0
    387c:	0634                	addi	x13,x2,776
    387e:	0c097f03          	0xc097f03
    3882:	0100                	addi	x8,x2,128
    3884:	00090003          	lb	x0,0(x18)
    3888:	0100                	addi	x8,x2,128
    388a:	3b05                	jal	35ba <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x13c6>
    388c:	0306                	slli	x6,x6,0x1
    388e:	0901                	addi	x18,x18,0
    3890:	0000                	unimp
    3892:	0501                	addi	x10,x10,0
    3894:	0330                	addi	x12,x2,392
    3896:	0900                	addi	x8,x2,144
    3898:	0004                	0x4
    389a:	0501                	addi	x10,x10,0
    389c:	0634                	addi	x13,x2,776
    389e:	0c097f03          	0xc097f03
    38a2:	0100                	addi	x8,x2,128
    38a4:	00090003          	lb	x0,0(x18)
    38a8:	0100                	addi	x8,x2,128
    38aa:	3b05                	jal	35da <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x13e6>
    38ac:	0306                	slli	x6,x6,0x1
    38ae:	0901                	addi	x18,x18,0
    38b0:	0000                	unimp
    38b2:	0501                	addi	x10,x10,0
    38b4:	0330                	addi	x12,x2,392
    38b6:	0900                	addi	x8,x2,144
    38b8:	0004                	0x4
    38ba:	0501                	addi	x10,x10,0
    38bc:	0634                	addi	x13,x2,776
    38be:	0c097f03          	0xc097f03
    38c2:	0100                	addi	x8,x2,128
    38c4:	00090003          	lb	x0,0(x18)
    38c8:	0100                	addi	x8,x2,128
    38ca:	3b05                	jal	35fa <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1406>
    38cc:	0306                	slli	x6,x6,0x1
    38ce:	0901                	addi	x18,x18,0
    38d0:	0000                	unimp
    38d2:	0501                	addi	x10,x10,0
    38d4:	0330                	addi	x12,x2,392
    38d6:	0900                	addi	x8,x2,144
    38d8:	0004                	0x4
    38da:	0501                	addi	x10,x10,0
    38dc:	0634                	addi	x13,x2,776
    38de:	0c097f03          	0xc097f03
    38e2:	0100                	addi	x8,x2,128
    38e4:	00090003          	lb	x0,0(x18)
    38e8:	0100                	addi	x8,x2,128
    38ea:	3005                	jal	310a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xf16>
    38ec:	0306                	slli	x6,x6,0x1
    38ee:	0901                	addi	x18,x18,0
    38f0:	0000                	unimp
    38f2:	0501                	addi	x10,x10,0
    38f4:	0634                	addi	x13,x2,776
    38f6:	0c097f03          	0xc097f03
    38fa:	0100                	addi	x8,x2,128
    38fc:	00090003          	lb	x0,0(x18)
    3900:	0100                	addi	x8,x2,128
    3902:	1905                	addi	x18,x18,-31
    3904:	00097d03          	0x97d03
    3908:	0100                	addi	x8,x2,128
    390a:	3a05                	jal	323a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1046>
    390c:	00090003          	lb	x0,0(x18)
    3910:	0100                	addi	x8,x2,128
    3912:	2c05                	jal	3b42 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x194e>
    3914:	08090903          	lb	x18,128(x18)
    3918:	0100                	addi	x8,x2,128
    391a:	1905                	addi	x18,x18,-31
    391c:	0306                	slli	x6,x6,0x1
    391e:	00000903          	lb	x18,0(x0) # 0 <_start>
    3922:	0501                	addi	x10,x10,0
    3924:	0321                	addi	x6,x6,8
    3926:	097e                	slli	x18,x18,0x1f
    3928:	0004                	0x4
    392a:	0501                	addi	x10,x10,0
    392c:	062c                	addi	x11,x2,776
    392e:	04097f03          	0x4097f03
    3932:	0100                	addi	x8,x2,128
    3934:	00090003          	lb	x0,0(x18)
    3938:	0100                	addi	x8,x2,128
    393a:	2105                	jal	3d5a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1b66>
    393c:	0306                	slli	x6,x6,0x1
    393e:	0901                	addi	x18,x18,0
    3940:	0000                	unimp
    3942:	0501                	addi	x10,x10,0
    3944:	062c                	addi	x11,x2,776
    3946:	04097f03          	0x4097f03
    394a:	0100                	addi	x8,x2,128
    394c:	00090003          	lb	x0,0(x18)
    3950:	0100                	addi	x8,x2,128
    3952:	1905                	addi	x18,x18,-31
    3954:	0306                	slli	x6,x6,0x1
    3956:	00000903          	lb	x18,0(x0) # 0 <_start>
    395a:	0501                	addi	x10,x10,0
    395c:	0328                	addi	x10,x2,392
    395e:	0971                	addi	x18,x18,28
    3960:	0004                	0x4
    3962:	0501                	addi	x10,x10,0
    3964:	0321                	addi	x6,x6,8
    3966:	090d                	addi	x18,x18,3
    3968:	0004                	0x4
    396a:	0501                	addi	x10,x10,0
    396c:	062c                	addi	x11,x2,776
    396e:	04097f03          	0x4097f03
    3972:	0100                	addi	x8,x2,128
    3974:	00090003          	lb	x0,0(x18)
    3978:	0100                	addi	x8,x2,128
    397a:	2105                	jal	3d9a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1ba6>
    397c:	0306                	slli	x6,x6,0x1
    397e:	0901                	addi	x18,x18,0
    3980:	0000                	unimp
    3982:	0501                	addi	x10,x10,0
    3984:	062c                	addi	x11,x2,776
    3986:	04097f03          	0x4097f03
    398a:	0100                	addi	x8,x2,128
    398c:	00090003          	lb	x0,0(x18)
    3990:	0100                	addi	x8,x2,128
    3992:	2105                	jal	3db2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1bbe>
    3994:	0306                	slli	x6,x6,0x1
    3996:	0901                	addi	x18,x18,0
    3998:	0000                	unimp
    399a:	0501                	addi	x10,x10,0
    399c:	062c                	addi	x11,x2,776
    399e:	04097f03          	0x4097f03
    39a2:	0100                	addi	x8,x2,128
    39a4:	00090003          	lb	x0,0(x18)
    39a8:	0100                	addi	x8,x2,128
    39aa:	2105                	jal	3dca <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1bd6>
    39ac:	0306                	slli	x6,x6,0x1
    39ae:	0901                	addi	x18,x18,0
    39b0:	0000                	unimp
    39b2:	0501                	addi	x10,x10,0
    39b4:	062c                	addi	x11,x2,776
    39b6:	04097f03          	0x4097f03
    39ba:	0100                	addi	x8,x2,128
    39bc:	00090003          	lb	x0,0(x18)
    39c0:	0100                	addi	x8,x2,128
    39c2:	2105                	jal	3de2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1bee>
    39c4:	0306                	slli	x6,x6,0x1
    39c6:	0901                	addi	x18,x18,0
    39c8:	0000                	unimp
    39ca:	0501                	addi	x10,x10,0
    39cc:	062c                	addi	x11,x2,776
    39ce:	04097f03          	0x4097f03
    39d2:	0100                	addi	x8,x2,128
    39d4:	00090003          	lb	x0,0(x18)
    39d8:	0100                	addi	x8,x2,128
    39da:	2105                	jal	3dfa <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1c06>
    39dc:	0306                	slli	x6,x6,0x1
    39de:	0901                	addi	x18,x18,0
    39e0:	0000                	unimp
    39e2:	0501                	addi	x10,x10,0
    39e4:	062c                	addi	x11,x2,776
    39e6:	04097f03          	0x4097f03
    39ea:	0100                	addi	x8,x2,128
    39ec:	00090003          	lb	x0,0(x18)
    39f0:	0100                	addi	x8,x2,128
    39f2:	1105                	addi	x2,x2,-31
    39f4:	00097403          	0x97403
    39f8:	0100                	addi	x8,x2,128
    39fa:	2805                	jal	3a2a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1836>
    39fc:	00090003          	lb	x0,0(x18)
    3a00:	0100                	addi	x8,x2,128
    3a02:	0905                	addi	x18,x18,1
    3a04:	0200                	addi	x8,x2,256
    3a06:	0204                	addi	x9,x2,256
    3a08:	18097e03          	0x18097e03
    3a0c:	0100                	addi	x8,x2,128
    3a0e:	3f05                	jal	393e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x174a>
    3a10:	0200                	addi	x8,x2,256
    3a12:	0204                	addi	x9,x2,256
    3a14:	24090003          	lb	x0,576(x18)
    3a18:	0100                	addi	x8,x2,128
    3a1a:	0105                	addi	x2,x2,1
    3a1c:	0306                	slli	x6,x6,0x1
    3a1e:	0916                	slli	x18,x18,0x5
    3a20:	0010                	0x10
    3a22:	0501                	addi	x10,x10,0
    3a24:	031c                	addi	x15,x2,384
    3a26:	096e                	slli	x18,x18,0x1b
    3a28:	003c                	addi	x15,x2,8
    3a2a:	0901                	addi	x18,x18,0
    3a2c:	0024                	addi	x9,x2,8
    3a2e:	0100                	addi	x8,x2,128
    3a30:	0401                	addi	x8,x8,0
    3a32:	00200503          	lb	x10,2(x0) # 2 <bsg_group_size+0x1>
    3a36:	0205                	addi	x4,x4,1
    3a38:	1f54                	addi	x13,x2,948
    3a3a:	0000                	unimp
    3a3c:	01018603          	lb	x12,16(x3)
    3a40:	1205                	addi	x4,x4,-31
    3a42:	0306                	slli	x6,x6,0x1
    3a44:	0905                	addi	x18,x18,1
    3a46:	0008                	0x8
    3a48:	0501                	addi	x10,x10,0
    3a4a:	0320                	addi	x8,x2,392
    3a4c:	0004097b          	0x4097b
    3a50:	0501                	addi	x10,x10,0
    3a52:	0312                	slli	x6,x6,0x4
    3a54:	0905                	addi	x18,x18,1
    3a56:	0004                	0x4
    3a58:	0501                	addi	x10,x10,0
    3a5a:	0320                	addi	x8,x2,392
    3a5c:	0004097b          	0x4097b
    3a60:	0301                	addi	x6,x6,0
    3a62:	0900                	addi	x8,x2,144
    3a64:	0030                	addi	x12,x2,8
    3a66:	0501                	addi	x10,x10,0
    3a68:	0312                	slli	x6,x6,0x4
    3a6a:	0905                	addi	x18,x18,1
    3a6c:	000c                	0xc
    3a6e:	0501                	addi	x10,x10,0
    3a70:	0103063f 01000409 	0x10004090103063f
    3a78:	3305                	jal	3798 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x15a4>
    3a7a:	0306                	slli	x6,x6,0x1
    3a7c:	0900                	addi	x8,x2,144
    3a7e:	002c                	addi	x11,x2,8
    3a80:	0501                	addi	x10,x10,0
    3a82:	031e                	slli	x6,x6,0x7
    3a84:	0900                	addi	x8,x2,144
    3a86:	0004                	0x4
    3a88:	0501                	addi	x10,x10,0
    3a8a:	09000317          	auipc	x6,0x9000
    3a8e:	0004                	0x4
    3a90:	0501                	addi	x10,x10,0
    3a92:	0628                	addi	x10,x2,776
    3a94:	08090203          	lb	x4,128(x18)
    3a98:	0100                	addi	x8,x2,128
    3a9a:	1105                	addi	x2,x2,-31
    3a9c:	0306                	slli	x6,x6,0x1
    3a9e:	097f                	0x97f
    3aa0:	0018                	0x18
    3aa2:	0501                	addi	x10,x10,0
    3aa4:	0328                	addi	x10,x2,392
    3aa6:	0901                	addi	x18,x18,0
    3aa8:	000c                	0xc
    3aaa:	0501                	addi	x10,x10,0
    3aac:	063a                	slli	x12,x12,0xe
    3aae:	04090303          	lb	x6,64(x18)
    3ab2:	0100                	addi	x8,x2,128
    3ab4:	1c05                	addi	x24,x24,-31
    3ab6:	0306                	slli	x6,x6,0x1
    3ab8:	097f                	0x97f
    3aba:	0020                	addi	x8,x2,8
    3abc:	0501                	addi	x10,x10,0
    3abe:	0634                	addi	x13,x2,776
    3ac0:	28090403          	lb	x8,640(x18)
    3ac4:	0100                	addi	x8,x2,128
    3ac6:	3f05                	jal	39f6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1802>
    3ac8:	0306                	slli	x6,x6,0x1
    3aca:	0901                	addi	x18,x18,0
    3acc:	0000                	unimp
    3ace:	0501                	addi	x10,x10,0
    3ad0:	0334                	addi	x13,x2,392
    3ad2:	0900                	addi	x8,x2,144
    3ad4:	0018                	0x18
    3ad6:	0501                	addi	x10,x10,0
    3ad8:	0900033b          	0x900033b
    3adc:	0004                	0x4
    3ade:	0501                	addi	x10,x10,0
    3ae0:	0330                	addi	x12,x2,392
    3ae2:	0900                	addi	x8,x2,144
    3ae4:	0034                	addi	x13,x2,8
    3ae6:	0501                	addi	x10,x10,0
    3ae8:	0634                	addi	x13,x2,776
    3aea:	0c097f03          	0xc097f03
    3aee:	0100                	addi	x8,x2,128
    3af0:	00090003          	lb	x0,0(x18)
    3af4:	0100                	addi	x8,x2,128
    3af6:	3b05                	jal	3826 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1632>
    3af8:	0306                	slli	x6,x6,0x1
    3afa:	0901                	addi	x18,x18,0
    3afc:	0000                	unimp
    3afe:	0501                	addi	x10,x10,0
    3b00:	0330                	addi	x12,x2,392
    3b02:	0900                	addi	x8,x2,144
    3b04:	0004                	0x4
    3b06:	0501                	addi	x10,x10,0
    3b08:	0634                	addi	x13,x2,776
    3b0a:	0c097f03          	0xc097f03
    3b0e:	0100                	addi	x8,x2,128
    3b10:	00090003          	lb	x0,0(x18)
    3b14:	0100                	addi	x8,x2,128
    3b16:	3b05                	jal	3846 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1652>
    3b18:	0306                	slli	x6,x6,0x1
    3b1a:	0901                	addi	x18,x18,0
    3b1c:	0000                	unimp
    3b1e:	0501                	addi	x10,x10,0
    3b20:	0330                	addi	x12,x2,392
    3b22:	0900                	addi	x8,x2,144
    3b24:	0004                	0x4
    3b26:	0501                	addi	x10,x10,0
    3b28:	0634                	addi	x13,x2,776
    3b2a:	0c097f03          	0xc097f03
    3b2e:	0100                	addi	x8,x2,128
    3b30:	00090003          	lb	x0,0(x18)
    3b34:	0100                	addi	x8,x2,128
    3b36:	3b05                	jal	3866 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1672>
    3b38:	0306                	slli	x6,x6,0x1
    3b3a:	0901                	addi	x18,x18,0
    3b3c:	0000                	unimp
    3b3e:	0501                	addi	x10,x10,0
    3b40:	0330                	addi	x12,x2,392
    3b42:	0900                	addi	x8,x2,144
    3b44:	0004                	0x4
    3b46:	0501                	addi	x10,x10,0
    3b48:	0634                	addi	x13,x2,776
    3b4a:	0c097f03          	0xc097f03
    3b4e:	0100                	addi	x8,x2,128
    3b50:	00090003          	lb	x0,0(x18)
    3b54:	0100                	addi	x8,x2,128
    3b56:	3b05                	jal	3886 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1692>
    3b58:	0306                	slli	x6,x6,0x1
    3b5a:	0901                	addi	x18,x18,0
    3b5c:	0000                	unimp
    3b5e:	0501                	addi	x10,x10,0
    3b60:	0330                	addi	x12,x2,392
    3b62:	0900                	addi	x8,x2,144
    3b64:	0004                	0x4
    3b66:	0501                	addi	x10,x10,0
    3b68:	0634                	addi	x13,x2,776
    3b6a:	0c097f03          	0xc097f03
    3b6e:	0100                	addi	x8,x2,128
    3b70:	00090003          	lb	x0,0(x18)
    3b74:	0100                	addi	x8,x2,128
    3b76:	3b05                	jal	38a6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x16b2>
    3b78:	0306                	slli	x6,x6,0x1
    3b7a:	0901                	addi	x18,x18,0
    3b7c:	0000                	unimp
    3b7e:	0501                	addi	x10,x10,0
    3b80:	0330                	addi	x12,x2,392
    3b82:	0900                	addi	x8,x2,144
    3b84:	0004                	0x4
    3b86:	0501                	addi	x10,x10,0
    3b88:	0634                	addi	x13,x2,776
    3b8a:	0c097f03          	0xc097f03
    3b8e:	0100                	addi	x8,x2,128
    3b90:	00090003          	lb	x0,0(x18)
    3b94:	0100                	addi	x8,x2,128
    3b96:	3b05                	jal	38c6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x16d2>
    3b98:	0306                	slli	x6,x6,0x1
    3b9a:	0901                	addi	x18,x18,0
    3b9c:	0000                	unimp
    3b9e:	0501                	addi	x10,x10,0
    3ba0:	0330                	addi	x12,x2,392
    3ba2:	0900                	addi	x8,x2,144
    3ba4:	0004                	0x4
    3ba6:	0501                	addi	x10,x10,0
    3ba8:	0634                	addi	x13,x2,776
    3baa:	0c097f03          	0xc097f03
    3bae:	0100                	addi	x8,x2,128
    3bb0:	00090003          	lb	x0,0(x18)
    3bb4:	0100                	addi	x8,x2,128
    3bb6:	3005                	jal	33d6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x11e2>
    3bb8:	0306                	slli	x6,x6,0x1
    3bba:	0901                	addi	x18,x18,0
    3bbc:	0000                	unimp
    3bbe:	0501                	addi	x10,x10,0
    3bc0:	0634                	addi	x13,x2,776
    3bc2:	0c097f03          	0xc097f03
    3bc6:	0100                	addi	x8,x2,128
    3bc8:	00090003          	lb	x0,0(x18)
    3bcc:	0100                	addi	x8,x2,128
    3bce:	1905                	addi	x18,x18,-31
    3bd0:	00097d03          	0x97d03
    3bd4:	0100                	addi	x8,x2,128
    3bd6:	3a05                	jal	3506 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1312>
    3bd8:	00090003          	lb	x0,0(x18)
    3bdc:	0100                	addi	x8,x2,128
    3bde:	2c05                	jal	3e0e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1c1a>
    3be0:	04090903          	lb	x18,64(x18)
    3be4:	0100                	addi	x8,x2,128
    3be6:	1905                	addi	x18,x18,-31
    3be8:	0306                	slli	x6,x6,0x1
    3bea:	00040903          	lb	x18,0(x8)
    3bee:	0501                	addi	x10,x10,0
    3bf0:	0321                	addi	x6,x6,8
    3bf2:	097e                	slli	x18,x18,0x1f
    3bf4:	0004                	0x4
    3bf6:	0501                	addi	x10,x10,0
    3bf8:	062c                	addi	x11,x2,776
    3bfa:	04097f03          	0x4097f03
    3bfe:	0100                	addi	x8,x2,128
    3c00:	00090003          	lb	x0,0(x18)
    3c04:	0100                	addi	x8,x2,128
    3c06:	2805                	jal	3c36 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1a42>
    3c08:	0306                	slli	x6,x6,0x1
    3c0a:	0974                	addi	x13,x2,156
    3c0c:	0004                	0x4
    3c0e:	0501                	addi	x10,x10,0
    3c10:	0319                	addi	x6,x6,6
    3c12:	0004090f          	0x4090f
    3c16:	0501                	addi	x10,x10,0
    3c18:	0328                	addi	x10,x2,392
    3c1a:	0971                	addi	x18,x18,28
    3c1c:	0004                	0x4
    3c1e:	0501                	addi	x10,x10,0
    3c20:	0321                	addi	x6,x6,8
    3c22:	090d                	addi	x18,x18,3
    3c24:	0004                	0x4
    3c26:	0501                	addi	x10,x10,0
    3c28:	062c                	addi	x11,x2,776
    3c2a:	04097f03          	0x4097f03
    3c2e:	0100                	addi	x8,x2,128
    3c30:	00090003          	lb	x0,0(x18)
    3c34:	0100                	addi	x8,x2,128
    3c36:	2105                	jal	4056 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1e62>
    3c38:	0306                	slli	x6,x6,0x1
    3c3a:	0901                	addi	x18,x18,0
    3c3c:	0000                	unimp
    3c3e:	0501                	addi	x10,x10,0
    3c40:	062c                	addi	x11,x2,776
    3c42:	04097f03          	0x4097f03
    3c46:	0100                	addi	x8,x2,128
    3c48:	00090003          	lb	x0,0(x18)
    3c4c:	0100                	addi	x8,x2,128
    3c4e:	2105                	jal	406e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1e7a>
    3c50:	0306                	slli	x6,x6,0x1
    3c52:	0901                	addi	x18,x18,0
    3c54:	0000                	unimp
    3c56:	0501                	addi	x10,x10,0
    3c58:	062c                	addi	x11,x2,776
    3c5a:	04097f03          	0x4097f03
    3c5e:	0100                	addi	x8,x2,128
    3c60:	00090003          	lb	x0,0(x18)
    3c64:	0100                	addi	x8,x2,128
    3c66:	2105                	jal	4086 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1e92>
    3c68:	0306                	slli	x6,x6,0x1
    3c6a:	0901                	addi	x18,x18,0
    3c6c:	0000                	unimp
    3c6e:	0501                	addi	x10,x10,0
    3c70:	062c                	addi	x11,x2,776
    3c72:	04097f03          	0x4097f03
    3c76:	0100                	addi	x8,x2,128
    3c78:	00090003          	lb	x0,0(x18)
    3c7c:	0100                	addi	x8,x2,128
    3c7e:	2105                	jal	409e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1eaa>
    3c80:	0306                	slli	x6,x6,0x1
    3c82:	0901                	addi	x18,x18,0
    3c84:	0000                	unimp
    3c86:	0501                	addi	x10,x10,0
    3c88:	062c                	addi	x11,x2,776
    3c8a:	04097f03          	0x4097f03
    3c8e:	0100                	addi	x8,x2,128
    3c90:	00090003          	lb	x0,0(x18)
    3c94:	0100                	addi	x8,x2,128
    3c96:	2105                	jal	40b6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1ec2>
    3c98:	0306                	slli	x6,x6,0x1
    3c9a:	0901                	addi	x18,x18,0
    3c9c:	0000                	unimp
    3c9e:	0501                	addi	x10,x10,0
    3ca0:	062c                	addi	x11,x2,776
    3ca2:	04097f03          	0x4097f03
    3ca6:	0100                	addi	x8,x2,128
    3ca8:	00090003          	lb	x0,0(x18)
    3cac:	0100                	addi	x8,x2,128
    3cae:	2105                	jal	40ce <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1eda>
    3cb0:	0306                	slli	x6,x6,0x1
    3cb2:	0901                	addi	x18,x18,0
    3cb4:	0000                	unimp
    3cb6:	0501                	addi	x10,x10,0
    3cb8:	062c                	addi	x11,x2,776
    3cba:	04097f03          	0x4097f03
    3cbe:	0100                	addi	x8,x2,128
    3cc0:	00090003          	lb	x0,0(x18)
    3cc4:	0100                	addi	x8,x2,128
    3cc6:	1105                	addi	x2,x2,-31
    3cc8:	00097403          	0x97403
    3ccc:	0100                	addi	x8,x2,128
    3cce:	2805                	jal	3cfe <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1b0a>
    3cd0:	00090003          	lb	x0,0(x18)
    3cd4:	0100                	addi	x8,x2,128
    3cd6:	0905                	addi	x18,x18,1
    3cd8:	0200                	addi	x8,x2,256
    3cda:	0204                	addi	x9,x2,256
    3cdc:	0c097e03          	0xc097e03
    3ce0:	0100                	addi	x8,x2,128
    3ce2:	3f05                	jal	3c12 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1a1e>
    3ce4:	0200                	addi	x8,x2,256
    3ce6:	0204                	addi	x9,x2,256
    3ce8:	20090003          	lb	x0,512(x18)
    3cec:	0100                	addi	x8,x2,128
    3cee:	0105                	addi	x2,x2,1
    3cf0:	0306                	slli	x6,x6,0x1
    3cf2:	0916                	slli	x18,x18,0x5
    3cf4:	0010                	0x10
    3cf6:	0501                	addi	x10,x10,0
    3cf8:	031c                	addi	x15,x2,384
    3cfa:	096e                	slli	x18,x18,0x1b
    3cfc:	003c                	addi	x15,x2,8
    3cfe:	0901                	addi	x18,x18,0
    3d00:	0024                	addi	x9,x2,8
    3d02:	0100                	addi	x8,x2,128
    3d04:	0401                	addi	x8,x8,0
    3d06:	00200503          	lb	x10,2(x0) # 2 <bsg_group_size+0x1>
    3d0a:	0205                	addi	x4,x4,1
    3d0c:	21f4                	fld	f13,192(x11)
    3d0e:	0000                	unimp
    3d10:	01018603          	lb	x12,16(x3)
    3d14:	1205                	addi	x4,x4,-31
    3d16:	0306                	slli	x6,x6,0x1
    3d18:	0905                	addi	x18,x18,1
    3d1a:	000c                	0xc
    3d1c:	0501                	addi	x10,x10,0
    3d1e:	0320                	addi	x8,x2,392
    3d20:	0004097b          	0x4097b
    3d24:	0501                	addi	x10,x10,0
    3d26:	0312                	slli	x6,x6,0x4
    3d28:	0905                	addi	x18,x18,1
    3d2a:	0028                	addi	x10,x2,8
    3d2c:	0501                	addi	x10,x10,0
    3d2e:	0103063f 01000409 	0x10004090103063f
    3d36:	3305                	jal	3a56 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1862>
    3d38:	0306                	slli	x6,x6,0x1
    3d3a:	0900                	addi	x8,x2,144
    3d3c:	0048                	addi	x10,x2,4
    3d3e:	0501                	addi	x10,x10,0
    3d40:	031e                	slli	x6,x6,0x7
    3d42:	0900                	addi	x8,x2,144
    3d44:	0004                	0x4
    3d46:	0501                	addi	x10,x10,0
    3d48:	09000317          	auipc	x6,0x9000
    3d4c:	0004                	0x4
    3d4e:	0501                	addi	x10,x10,0
    3d50:	0628                	addi	x10,x2,776
    3d52:	08090203          	lb	x4,128(x18)
    3d56:	0100                	addi	x8,x2,128
    3d58:	1105                	addi	x2,x2,-31
    3d5a:	0306                	slli	x6,x6,0x1
    3d5c:	097f                	0x97f
    3d5e:	0024                	addi	x9,x2,8
    3d60:	0501                	addi	x10,x10,0
    3d62:	063a                	slli	x12,x12,0xe
    3d64:	04090403          	lb	x8,64(x18)
    3d68:	0100                	addi	x8,x2,128
    3d6a:	1c05                	addi	x24,x24,-31
    3d6c:	0306                	slli	x6,x6,0x1
    3d6e:	097f                	0x97f
    3d70:	0004                	0x4
    3d72:	0501                	addi	x10,x10,0
    3d74:	033a                	slli	x6,x6,0xe
    3d76:	0901                	addi	x18,x18,0
    3d78:	0040                	addi	x8,x2,4
    3d7a:	0501                	addi	x10,x10,0
    3d7c:	0634                	addi	x13,x2,776
    3d7e:	04090303          	lb	x6,64(x18)
    3d82:	0100                	addi	x8,x2,128
    3d84:	3f05                	jal	3cb4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1ac0>
    3d86:	0306                	slli	x6,x6,0x1
    3d88:	0901                	addi	x18,x18,0
    3d8a:	0000                	unimp
    3d8c:	0501                	addi	x10,x10,0
    3d8e:	0334                	addi	x13,x2,392
    3d90:	0900                	addi	x8,x2,144
    3d92:	0014                	0x14
    3d94:	0501                	addi	x10,x10,0
    3d96:	0900033b          	0x900033b
    3d9a:	0004                	0x4
    3d9c:	0501                	addi	x10,x10,0
    3d9e:	0330                	addi	x12,x2,392
    3da0:	0900                	addi	x8,x2,144
    3da2:	0044                	addi	x9,x2,4
    3da4:	0501                	addi	x10,x10,0
    3da6:	0634                	addi	x13,x2,776
    3da8:	04097f03          	0x4097f03
    3dac:	0100                	addi	x8,x2,128
    3dae:	00090003          	lb	x0,0(x18)
    3db2:	0100                	addi	x8,x2,128
    3db4:	3005                	jal	35d4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x13e0>
    3db6:	0306                	slli	x6,x6,0x1
    3db8:	0901                	addi	x18,x18,0
    3dba:	0000                	unimp
    3dbc:	0501                	addi	x10,x10,0
    3dbe:	0634                	addi	x13,x2,776
    3dc0:	04097f03          	0x4097f03
    3dc4:	0100                	addi	x8,x2,128
    3dc6:	00090003          	lb	x0,0(x18)
    3dca:	0100                	addi	x8,x2,128
    3dcc:	3005                	jal	35ec <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x13f8>
    3dce:	0306                	slli	x6,x6,0x1
    3dd0:	0901                	addi	x18,x18,0
    3dd2:	0000                	unimp
    3dd4:	0501                	addi	x10,x10,0
    3dd6:	0634                	addi	x13,x2,776
    3dd8:	04097f03          	0x4097f03
    3ddc:	0100                	addi	x8,x2,128
    3dde:	00090003          	lb	x0,0(x18)
    3de2:	0100                	addi	x8,x2,128
    3de4:	3005                	jal	3604 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1410>
    3de6:	0306                	slli	x6,x6,0x1
    3de8:	0901                	addi	x18,x18,0
    3dea:	0000                	unimp
    3dec:	0501                	addi	x10,x10,0
    3dee:	0634                	addi	x13,x2,776
    3df0:	04097f03          	0x4097f03
    3df4:	0100                	addi	x8,x2,128
    3df6:	00090003          	lb	x0,0(x18)
    3dfa:	0100                	addi	x8,x2,128
    3dfc:	3005                	jal	361c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1428>
    3dfe:	0306                	slli	x6,x6,0x1
    3e00:	0901                	addi	x18,x18,0
    3e02:	0000                	unimp
    3e04:	0501                	addi	x10,x10,0
    3e06:	0634                	addi	x13,x2,776
    3e08:	04097f03          	0x4097f03
    3e0c:	0100                	addi	x8,x2,128
    3e0e:	00090003          	lb	x0,0(x18)
    3e12:	0100                	addi	x8,x2,128
    3e14:	3005                	jal	3634 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1440>
    3e16:	0306                	slli	x6,x6,0x1
    3e18:	0901                	addi	x18,x18,0
    3e1a:	0000                	unimp
    3e1c:	0501                	addi	x10,x10,0
    3e1e:	0634                	addi	x13,x2,776
    3e20:	04097f03          	0x4097f03
    3e24:	0100                	addi	x8,x2,128
    3e26:	00090003          	lb	x0,0(x18)
    3e2a:	0100                	addi	x8,x2,128
    3e2c:	3005                	jal	364c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1458>
    3e2e:	0306                	slli	x6,x6,0x1
    3e30:	0901                	addi	x18,x18,0
    3e32:	0000                	unimp
    3e34:	0501                	addi	x10,x10,0
    3e36:	0634                	addi	x13,x2,776
    3e38:	04097f03          	0x4097f03
    3e3c:	0100                	addi	x8,x2,128
    3e3e:	00090003          	lb	x0,0(x18)
    3e42:	0100                	addi	x8,x2,128
    3e44:	3005                	jal	3664 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1470>
    3e46:	0306                	slli	x6,x6,0x1
    3e48:	0901                	addi	x18,x18,0
    3e4a:	0000                	unimp
    3e4c:	0501                	addi	x10,x10,0
    3e4e:	0634                	addi	x13,x2,776
    3e50:	04097f03          	0x4097f03
    3e54:	0100                	addi	x8,x2,128
    3e56:	00090003          	lb	x0,0(x18)
    3e5a:	0100                	addi	x8,x2,128
    3e5c:	1905                	addi	x18,x18,-31
    3e5e:	00097d03          	0x97d03
    3e62:	0100                	addi	x8,x2,128
    3e64:	3a05                	jal	3794 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x15a0>
    3e66:	00090003          	lb	x0,0(x18)
    3e6a:	0100                	addi	x8,x2,128
    3e6c:	2c05                	jal	409c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1ea8>
    3e6e:	14090903          	lb	x18,320(x18)
    3e72:	0100                	addi	x8,x2,128
    3e74:	2105                	jal	4294 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x20a0>
    3e76:	0306                	slli	x6,x6,0x1
    3e78:	0901                	addi	x18,x18,0
    3e7a:	0000                	unimp
    3e7c:	0501                	addi	x10,x10,0
    3e7e:	062c                	addi	x11,x2,776
    3e80:	04097f03          	0x4097f03
    3e84:	0100                	addi	x8,x2,128
    3e86:	00090003          	lb	x0,0(x18)
    3e8a:	0100                	addi	x8,x2,128
    3e8c:	2105                	jal	42ac <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x20b8>
    3e8e:	0306                	slli	x6,x6,0x1
    3e90:	0901                	addi	x18,x18,0
    3e92:	0000                	unimp
    3e94:	0501                	addi	x10,x10,0
    3e96:	062c                	addi	x11,x2,776
    3e98:	04097f03          	0x4097f03
    3e9c:	0100                	addi	x8,x2,128
    3e9e:	00090003          	lb	x0,0(x18)
    3ea2:	0100                	addi	x8,x2,128
    3ea4:	2105                	jal	42c4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x20d0>
    3ea6:	0306                	slli	x6,x6,0x1
    3ea8:	0901                	addi	x18,x18,0
    3eaa:	0000                	unimp
    3eac:	0501                	addi	x10,x10,0
    3eae:	062c                	addi	x11,x2,776
    3eb0:	04097f03          	0x4097f03
    3eb4:	0100                	addi	x8,x2,128
    3eb6:	00090003          	lb	x0,0(x18)
    3eba:	0100                	addi	x8,x2,128
    3ebc:	2105                	jal	42dc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x20e8>
    3ebe:	0306                	slli	x6,x6,0x1
    3ec0:	0901                	addi	x18,x18,0
    3ec2:	0000                	unimp
    3ec4:	0501                	addi	x10,x10,0
    3ec6:	062c                	addi	x11,x2,776
    3ec8:	04097f03          	0x4097f03
    3ecc:	0100                	addi	x8,x2,128
    3ece:	00090003          	lb	x0,0(x18)
    3ed2:	0100                	addi	x8,x2,128
    3ed4:	2105                	jal	42f4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x2100>
    3ed6:	0306                	slli	x6,x6,0x1
    3ed8:	0901                	addi	x18,x18,0
    3eda:	0000                	unimp
    3edc:	0501                	addi	x10,x10,0
    3ede:	062c                	addi	x11,x2,776
    3ee0:	04097f03          	0x4097f03
    3ee4:	0100                	addi	x8,x2,128
    3ee6:	00090003          	lb	x0,0(x18)
    3eea:	0100                	addi	x8,x2,128
    3eec:	2105                	jal	430c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x2118>
    3eee:	0306                	slli	x6,x6,0x1
    3ef0:	0901                	addi	x18,x18,0
    3ef2:	0000                	unimp
    3ef4:	0501                	addi	x10,x10,0
    3ef6:	062c                	addi	x11,x2,776
    3ef8:	04097f03          	0x4097f03
    3efc:	0100                	addi	x8,x2,128
    3efe:	00090003          	lb	x0,0(x18)
    3f02:	0100                	addi	x8,x2,128
    3f04:	2105                	jal	4324 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x2130>
    3f06:	0306                	slli	x6,x6,0x1
    3f08:	0901                	addi	x18,x18,0
    3f0a:	0000                	unimp
    3f0c:	0501                	addi	x10,x10,0
    3f0e:	062c                	addi	x11,x2,776
    3f10:	04097f03          	0x4097f03
    3f14:	0100                	addi	x8,x2,128
    3f16:	00090003          	lb	x0,0(x18)
    3f1a:	0100                	addi	x8,x2,128
    3f1c:	2105                	jal	433c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x2148>
    3f1e:	0306                	slli	x6,x6,0x1
    3f20:	0901                	addi	x18,x18,0
    3f22:	0000                	unimp
    3f24:	0501                	addi	x10,x10,0
    3f26:	062c                	addi	x11,x2,776
    3f28:	04097f03          	0x4097f03
    3f2c:	0100                	addi	x8,x2,128
    3f2e:	00090003          	lb	x0,0(x18)
    3f32:	0100                	addi	x8,x2,128
    3f34:	1905                	addi	x18,x18,-31
    3f36:	0306                	slli	x6,x6,0x1
    3f38:	00040903          	lb	x18,0(x8)
    3f3c:	0501                	addi	x10,x10,0
    3f3e:	0611                	addi	x12,x12,4
    3f40:	04097103          	0x4097103
    3f44:	0100                	addi	x8,x2,128
    3f46:	2805                	jal	3f76 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1d82>
    3f48:	00090003          	lb	x0,0(x18)
    3f4c:	0100                	addi	x8,x2,128
    3f4e:	0905                	addi	x18,x18,1
    3f50:	0200                	addi	x8,x2,256
    3f52:	0204                	addi	x9,x2,256
    3f54:	0c097e03          	0xc097e03
    3f58:	0100                	addi	x8,x2,128
    3f5a:	3f05                	jal	3e8a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1c96>
    3f5c:	0200                	addi	x8,x2,256
    3f5e:	0204                	addi	x9,x2,256
    3f60:	04090003          	lb	x0,64(x18)
    3f64:	0100                	addi	x8,x2,128
    3f66:	0105                	addi	x2,x2,1
    3f68:	0306                	slli	x6,x6,0x1
    3f6a:	0916                	slli	x18,x18,0x5
    3f6c:	0010                	0x10
    3f6e:	0501                	addi	x10,x10,0
    3f70:	031c                	addi	x15,x2,384
    3f72:	096e                	slli	x18,x18,0x1b
    3f74:	003c                	addi	x15,x2,8
    3f76:	0901                	addi	x18,x18,0
    3f78:	0024                	addi	x9,x2,8
    3f7a:	0100                	addi	x8,x2,128
    3f7c:	01              	Address 0x0000000000003f7c is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
  li  x1, 0
       0:	0022                	c.slli	x0,0x8
       2:	0000                	unimp
  li  x3, 0
       4:	0002                	c.slli64	x0
       6:	0000                	unimp
  li  x4, 0
       8:	0000                	unimp
       a:	0104                	addi	x9,x2,128
	...
  li  x7, 0
      14:	012c                	addi	x11,x2,136
      16:	0000                	unimp
  li  x8, 0
      18:	0000                	unimp
      1a:	0000                	unimp
  li  x9, 0
      1c:	0079                	c.nop	30
      1e:	0000                	unimp
  li  x10,0
      20:	00ec                	addi	x11,x2,76
      22:	0000                	unimp
  li  x11,0
      24:	8001                	c.srli64	x8
      26:	0235                	addi	x4,x4,13
  li  x12,0
      28:	0000                	unimp
      2a:	0004                	0x4
  li  x13,0
      2c:	0014                	0x14
      2e:	0000                	unimp
  li  x14,0
      30:	0104                	addi	x9,x2,128
      32:	0255                	addi	x4,x4,21
  li  x15,0
      34:	0000                	unimp
      36:	740c                	flw	f11,40(x8)
  li  x16,0
      38:	0001                	nop
      3a:	7900                	flw	f8,48(x10)
	...
  li  x19,0
      44:	0000                	unimp
      46:	5100                	lw	x8,32(x10)
  li  x20,0
      48:	0002                	c.slli64	x0
      4a:	0200                	addi	x8,x2,256
  li  x21,0
      4c:	0504                	addi	x9,x2,640
      4e:	6e69                	lui	x28,0x1a
  li  x22,0
      50:	0074                	addi	x13,x2,12
      52:	eb040403          	lb	x8,-336(x8)
  li  x23,0
      56:	0011                	c.nop	4
  li  x24,0
      58:	0300                	addi	x8,x2,384
      5a:	0801                	addi	x16,x16,0
  li  x25,0
      5c:	0202                	c.slli64	x4
      5e:	0000                	unimp
  li  x26,0
      60:	27070203          	lb	x4,624(x14) # 1a270 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1807c>
  li  x27,0
      64:	0002                	c.slli64	x0
      66:	0300                	addi	x8,x2,384
  li  x28,0
      68:	0704                	addi	x9,x2,896
      6a:	035d                	addi	x6,x6,23
  li  x29,0
      6c:	0000                	unimp
      6e:	f404                	fsw	f9,40(x8)
  li  x30,0
      70:	0002                	c.slli64	x0
      72:	0300                	addi	x8,x2,384
  li  x31,0
      74:	0c01                	addi	x24,x24,0
      76:	0025                	c.nop	9
  li t0, 0x00003000 # mstatus.FS
      78:	0000                	unimp
      7a:	fc04                	fsw	f9,56(x8)
  csrs mstatus, t0 # enable FPU
      7c:	0002                	c.slli64	x0
      7e:	0300                	addi	x8,x2,384
  fscsr x0
      80:	0c02                	c.slli64	x24
      82:	0025                	c.nop	9
  li t0, 0
      84:	0000                	unimp
      86:	4004                	lw	x9,0(x8)
  fcvt.s.w f0, x0 
      88:	03000003          	lb	x0,48(x0) # 30 <bsg_group_size+0x2f>
  fcvt.s.w f1, x0 
      8c:	00250c03          	lb	x24,2(x10) # 19002 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x16e0e>
  fcvt.s.w f2, x0 
      90:	0000                	unimp
      92:	d404                	sw	x9,40(x8)
  fcvt.s.w f3, x0 
      94:	0002                	c.slli64	x0
      96:	0300                	addi	x8,x2,384
  fcvt.s.w f4, x0 
      98:	0c04                	addi	x9,x2,528
      9a:	0025                	c.nop	9
  fcvt.s.w f5, x0 
      9c:	0000                	unimp
      9e:	e404                	fsw	f9,8(x8)
  fcvt.s.w f6, x0 
      a0:	0002                	c.slli64	x0
      a2:	0300                	addi	x8,x2,384
  fcvt.s.w f7, x0 
      a4:	0c05                	addi	x24,x24,1
      a6:	0025                	c.nop	9
  fcvt.s.w f8, x0 
      a8:	0000                	unimp
      aa:	0e04                	addi	x9,x2,784
  fcvt.s.w f9, x0 
      ac:	0001                	nop
      ae:	0300                	addi	x8,x2,384
  fcvt.s.w f10,x0 
      b0:	0c06                	slli	x24,x24,0x1
      b2:	0025                	c.nop	9
  fcvt.s.w f11,x0 
      b4:	0000                	unimp
      b6:	1f04                	addi	x9,x2,944
  fcvt.s.w f12,x0 
      b8:	0001                	nop
      ba:	0300                	addi	x8,x2,384
  fcvt.s.w f13,x0 
      bc:	00250c07          	0x250c07
  fcvt.s.w f14,x0 
      c0:	0000                	unimp
      c2:	8504                	0x8504
  fcvt.s.w f15,x0 
      c4:	03000003          	lb	x0,48(x0) # 30 <bsg_group_size+0x2f>
  fcvt.s.w f16,x0 
      c8:	0c08                	addi	x10,x2,528
      ca:	0025                	c.nop	9
  fcvt.s.w f17,x0 
      cc:	0000                	unimp
      ce:	f804                	fsw	f9,48(x8)
  fcvt.s.w f18,x0 
      d0:	0000                	unimp
      d2:	0300                	addi	x8,x2,384
  fcvt.s.w f19,x0 
      d4:	0c09                	addi	x24,x24,2
      d6:	0025                	c.nop	9
  fcvt.s.w f20,x0 
      d8:	0000                	unimp
      da:	5204                	lw	x9,32(x12)
  fcvt.s.w f21,x0 
      dc:	0001                	nop
      de:	0300                	addi	x8,x2,384
  fcvt.s.w f22,x0 
      e0:	0c0a                	slli	x24,x24,0x2
      e2:	0025                	c.nop	9
  fcvt.s.w f23,x0 
      e4:	0000                	unimp
      e6:	04060103          	lb	x2,64(x12) # 7d030040 <_bsg_elf_vcache_size+0x7d010040>
  fcvt.s.w f24,x0 
      ea:	0002                	c.slli64	x0
  fcvt.s.w f25,x0 
      ec:	0300                	addi	x8,x2,384
      ee:	0502                	c.slli64	x10
  fcvt.s.w f26,x0 
      f0:	0326                	slli	x6,x6,0x9
      f2:	0000                	unimp
  fcvt.s.w f27,x0 
      f4:	3005                	jal	fffff914 <_end+0x7efff8bc>
      f6:	0001                	nop
  fcvt.s.w f28,x0 
      f8:	0400                	addi	x8,x2,512
      fa:	184d                	addi	x16,x16,-13
  fcvt.s.w f29,x0 
      fc:	00da                	slli	x1,x1,0x16
      fe:	0000                	unimp
  fcvt.s.w f30,x0 
     100:	09050403          	lb	x8,144(x10)
  fcvt.s.w f31,x0 
     104:	05000003          	lb	x0,80(x0) # 50 <bsg_group_size+0x4f>
  la gp, _gp
     108:	0245                	addi	x4,x4,17
     10a:	0000                	unimp
     10c:	4f04                	lw	x9,24(x14)
     10e:	ed19                	bnez	x10,12c <write_finish_signal>
  la  tp, _bsg_data_end_addr + 63
     110:	0000                	unimp
     112:	0300                	addi	x8,x2,384
     114:	0704                	addi	x9,x2,896
     116:	0358                	addi	x14,x2,388
  and tp, tp, -64
     118:	0000                	unimp
     11a:	04050803          	lb	x16,64(x10)
  la sp, _sp
     11e:	03000003          	lb	x0,48(x0) # 30 <bsg_group_size+0x2f>
     122:	0708                	addi	x10,x2,896
  j main
     124:	00000353          	fadd.s	f6,f0,f0,rne
  j 2b
     128:	3205                	jal	fffffa48 <_end+0x7efff9f0>
     12a:	0001                	nop
  if (__bsg_id == 0) 
     12c:	0500                	addi	x8,x2,640
     12e:	132c                	addi	x11,x2,424
     130:	00ce                	slli	x1,x1,0x13
     132:	0000                	unimp
     134:	4705                	li	x14,1
     136:	0002                	c.slli64	x0
     *signal_ptr = cuda_finish_signal_val;     
     138:	0500                	addi	x8,x2,640
     13a:	1430                	addi	x12,x2,552
     13c:	00e1                	addi	x1,x1,24
     13e:	0000                	unimp
     140:	3006                	fld	f0,96(x2)
     142:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
     146:	0918                	addi	x14,x2,144
     148:	0102                	c.slli64	x2
     14a:	0000                	unimp
}
     14c:	0305                	addi	x6,x6,1
     14e:	103c                	addi	x15,x2,40
  bsg_remote_store(0,0,bsg_x_v,0);
     150:	0000                	unimp
     152:	4906                	lw	x18,64(x2)
     154:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
     158:	0a1a                	slli	x20,x20,0x6
     15a:	010e                	slli	x2,x2,0x3
  bsg_remote_store(0,0,bsg_y_v,0);
     15c:	0000                	unimp
     15e:	0305                	addi	x6,x6,1
  bsg_remote_store(0,0,bsg_x_v,0);
     160:	1038                	addi	x14,x2,40
     162:	0000                	unimp
  bsg_remote_store(0,0,bsg_y_v,0);
     164:	6606                	flw	f12,64(x2)
     166:	0001                	nop
  bsg_remote_store(0,0,bsg_x_v,0);
     168:	0100                	addi	x8,x2,128
     16a:	0a1c                	addi	x15,x2,272
  bsg_remote_store(0,0,bsg_y_v,0);
     16c:	010e                	slli	x2,x2,0x3
     16e:	0000                	unimp
     170:	0305                	addi	x6,x6,1
     172:	1034                	addi	x13,x2,40
  bsg_wait_while(*bsg_x_v < 0);
     174:	0000                	unimp
     176:	3a06                	fld	f20,96(x2)
     178:	0001                	nop
     17a:	0100                	addi	x8,x2,128
  bsg_wait_while(*bsg_y_v < 0);
     17c:	0a1e                	slli	x20,x20,0x7
     17e:	010e                	slli	x2,x2,0x3
     180:	0000                	unimp
     182:	0305                	addi	x6,x6,1
  if (!*bsg_x_v && !*bsg_y_v)
     184:	1030                	addi	x12,x2,40
     186:	0000                	unimp
     188:	1006                	c.slli	x0,0x21
     18a:	0002                	c.slli64	x0
     18c:	0100                	addi	x8,x2,128
     18e:	0a20                	addi	x8,x2,280
     190:	010e                	slli	x2,x2,0x3
     192:	0000                	unimp
        bsg_remote_store(x,y,bsg_x_v,x);
     194:	0305                	addi	x6,x6,1
     196:	102c                	addi	x11,x2,40
        bsg_remote_store(x,y,bsg_y_v,y);
     198:	0000                	unimp
     19a:	6a06                	flw	f20,64(x2)
  grp_org_x_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_X );
     19c:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
     1a0:	0a22                	slli	x20,x20,0x8
     1a2:	010e                	slli	x2,x2,0x3
     1a4:	0000                	unimp
     1a6:	0305                	addi	x6,x6,1
     1a8:	1028                	addi	x10,x2,40
     1aa:	0000                	unimp
     1ac:	00025007          	0x25007
     1b0:	0200                	addi	x8,x2,256
     1b2:	0506                	slli	x10,x10,0x1
     1b4:	0025                	c.nop	9
     1b6:	0000                	unimp
     1b8:	18e0                	addi	x8,x2,124
     1ba:	0000                	unimp
  __bsg_grp_org_x  = * grp_org_x_p;
     1bc:	00fc                	addi	x15,x2,76
     1be:	0000                	unimp
  grp_org_y_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_Y );
     1c0:	9c01                	0x9c01
     1c2:	01da                	slli	x3,x3,0x16
     1c4:	0000                	unimp
     1c6:	da08                	sw	x10,48(x12)
  __bsg_grp_org_x  = * grp_org_x_p;
     1c8:	0001                	nop
     1ca:	b000                	fsd	f8,32(x8)
     1cc:	0019                	c.nop	6
     1ce:	2000                	fld	f8,0(x8)
  __bsg_grp_org_y  = * grp_org_y_p;
     1d0:	0000                	unimp
     1d2:	0200                	addi	x8,x2,256
     1d4:	0908                	addi	x10,x2,144
     1d6:	da08                	sw	x10,48(x12)
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1d8:	0001                	nop
     1da:	bc00                	fsd	f8,56(x8)
  __bsg_grp_org_y  = * grp_org_y_p;
     1dc:	0019                	c.nop	6
     1de:	1400                	addi	x8,x2,544
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e0:	0000                	unimp
     1e2:	0100                	addi	x8,x2,128
  __bsg_grid_dim_x = 1;
     1e4:	0544                	addi	x9,x2,644
     1e6:	eb09                	bnez	x14,1f8 <bsg_set_tile_x_y+0xa8>
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e8:	0001                	nop
     1ea:	bc00                	fsd	f8,56(x8)
  __bsg_grid_dim_x = 1;
     1ec:	0019                	c.nop	6
     1ee:	1400                	addi	x8,x2,544
     1f0:	0000                	unimp
     1f2:	0a00                	addi	x8,x2,272
  __bsg_grid_dim_y = 1;
     1f4:	01ec                	addi	x11,x2,204
	...
  __bsg_tile_group_id_x = 0;
     1fe:	0000                	unimp
     200:	0003120b          	0x3120b
  __bsg_tile_group_id_y = 0;
     204:	0100                	addi	x8,x2,128
     206:	0544                	addi	x9,x2,644
     208:	0025                	c.nop	9
     20a:	0000                	unimp
  __bsg_tile_group_id = 0;
     20c:	fa01                	bnez	x12,11c <bsg_group_size+0x11b>
     20e:	0001                	nop
     210:	0c00                	addi	x8,x2,528
     212:	3a0d                	jal	fffffb44 <_end+0x7efffaec>
}
     214:	0002                	c.slli64	x0
     216:	0100                	addi	x8,x2,128
{
     218:	0b48                	addi	x10,x2,404
     21a:	01fa                	slli	x3,x3,0x1e
     21c:	0000                	unimp
     21e:	0000                	unimp
     220:	040e                	slli	x8,x8,0x3
     222:	0025                	c.nop	9
  if (type & UPPERCASE)  dig = upper_digits;
     224:	0000                	unimp
     226:	0001da0f          	0x1da0f
     22a:	2c00                	fld	f8,24(x8)
     22c:	0001                	nop
     22e:	2400                	fld	f8,8(x8)
  if (type & LEFT) type &= ~ZEROPAD;
     230:	0000                	unimp
     232:	0100                	addi	x8,x2,128
  if (type & UPPERCASE)  dig = upper_digits;
     234:	089c                	addi	x15,x2,80
     236:	01da                	slli	x3,x3,0x16
  if (type & LEFT) type &= ~ZEROPAD;
     238:	0000                	unimp
     23a:	0138                	addi	x14,x2,136
     23c:	0000                	unimp
     23e:	0014                	0x14
     240:	0000                	unimp
     242:	4401                	li	x8,0
  if (type & SIGN)
     244:	0905                	addi	x18,x18,1
     246:	000001eb          	0x1eb
  c = (type & ZEROPAD) ? '0' : ' ';
     24a:	0138                	addi	x14,x2,136
  if (type & SIGN)
     24c:	0000                	unimp
     24e:	0014                	0x14
     250:	0000                	unimp
     252:	ec0a                	fsw	f2,24(x2)
    if (num < 0)
     254:	0001                	nop
     256:	1700                	addi	x8,x2,928
    else if (type & PLUS)
     258:	0000                	unimp
     25a:	0000                	unimp
     25c:	0000                	unimp
     25e:	9900                	0x9900
    else if (type & SPACE)
     260:	0001                	nop
     262:	0400                	addi	x8,x2,512
  sign = 0;
     264:	f600                	fsw	f8,40(x12)
     266:	0000                	unimp
    else if (type & SPACE)
     268:	0400                	addi	x8,x2,512
     26a:	5501                	li	x10,-32
      size--;
     26c:	0002                	c.slli64	x0
     26e:	0c00                	addi	x8,x2,528
      sign = ' ';
     270:	03ac                	addi	x11,x2,456
     272:	0000                	unimp
  if (type & HEX_PREP)
     274:	0079                	c.nop	30
     276:	0000                	unimp
    if (base == 16)
     278:	0150                	addi	x12,x2,132
     27a:	0000                	unimp
     27c:	00c8                	addi	x10,x2,68
     27e:	0000                	unimp
      size--;
     280:	05d5                	addi	x11,x11,21
     282:	0000                	unimp
     284:	4902                	lw	x18,0(x2)
     286:	0004                	0x4
     288:	0200                	addi	x8,x2,256
     28a:	1910                	addi	x12,x2,176
  if (num == 0)
     28c:	0031                	c.nop	12
     28e:	0000                	unimp
    tmp[i++] = '0';
     290:	003e0403          	lb	x8,3(x28) # 1a003 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x17e0f>
     294:	0000                	unimp
     296:	0404                	addi	x9,x2,512
     298:	6905                	lui	x18,0x1
     29a:	746e                	flw	f8,248(x2)
     29c:	0500                	addi	x8,x2,640
     29e:	00000037          	lui	x0,0x0
     2a2:	0406                	slli	x8,x8,0x1
     2a4:	eb04                	fsw	f9,16(x14)
     2a6:	0011                	c.nop	4
  if (i > precision) precision = i;
     2a8:	0600                	addi	x8,x2,768
     2aa:	0801                	addi	x16,x16,0
     2ac:	0202                	c.slli64	x4
     2ae:	0000                	unimp
     2b0:	0206                	slli	x4,x4,0x1
     2b2:	00022707          	flw	f14,0(x4) # ffff9000 <_end+0x7eff8fa8>
  size -= precision;
     2b6:	0600                	addi	x8,x2,768
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     2b8:	0704                	addi	x9,x2,896
     2ba:	035d                	addi	x6,x6,23
     2bc:	0000                	unimp
     2be:	0002f407          	0x2f407
     2c2:	0100                	addi	x8,x2,128
     2c4:	0508                	addi	x10,x2,640
     2c6:	00000037          	lui	x0,0x0
     2ca:	0305                	addi	x6,x6,1
     2cc:	1024                	addi	x9,x2,40
     2ce:	0000                	unimp
     2d0:	0002fc07          	0x2fc07
     2d4:	0100                	addi	x8,x2,128
     2d6:	0509                	addi	x10,x10,2
     2d8:	00000037          	lui	x0,0x0
     2dc:	0305                	addi	x6,x6,1
     2de:	1020                	addi	x8,x2,40
  if (sign) *str++ = sign;
     2e0:	0000                	unimp
     2e2:	00034007          	flq	f0,0(x6) # 9003d48 <_bsg_elf_vcache_size+0x8fe3d48>
     2e6:	0100                	addi	x8,x2,128
     2e8:	050a                	slli	x10,x10,0x2
     2ea:	00000037          	lui	x0,0x0
  if (type & HEX_PREP)
     2ee:	0305                	addi	x6,x6,1
    if (base == 8)
     2f0:	101c                	addi	x15,x2,32
     2f2:	0000                	unimp
     2f4:	0002d407          	0x2d407
    else if (base == 16)
     2f8:	0100                	addi	x8,x2,128
     2fa:	0037050b          	0x37050b
     2fe:	0000                	unimp
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     300:	0305                	addi	x6,x6,1
     302:	1018                	addi	x14,x2,32
     304:	0000                	unimp
     306:	0002e407          	0x2e407
     30a:	0100                	addi	x8,x2,128
     30c:	050c                	addi	x11,x2,640
     30e:	00000037          	lui	x0,0x0
     312:	0305                	addi	x6,x6,1
     314:	1014                	addi	x13,x2,32
     316:	0000                	unimp
     318:	00010e07          	0x10e07
     31c:	0100                	addi	x8,x2,128
     31e:	050d                	addi	x10,x10,3
     320:	00000037          	lui	x0,0x0
     324:	0305                	addi	x6,x6,1
     326:	1010                	addi	x12,x2,32
     328:	0000                	unimp
     32a:	00011f07          	0x11f07
     32e:	0100                	addi	x8,x2,128
     330:	050e                	slli	x10,x10,0x3
     332:	00000037          	lui	x0,0x0
     336:	0305                	addi	x6,x6,1
     338:	100c                	addi	x11,x2,32
     33a:	0000                	unimp
     33c:	00038507          	0x38507
     340:	0100                	addi	x8,x2,128
     342:	0037050f          	0x37050f
     346:	0000                	unimp
  while (i < precision--) *str++ = '0';
     348:	0305                	addi	x6,x6,1
     34a:	1008                	addi	x10,x2,32
     34c:	0000                	unimp
     34e:	0000f807          	0xf807
     352:	0100                	addi	x8,x2,128
     354:	0510                	addi	x12,x2,640
     356:	00000037          	lui	x0,0x0
     35a:	0305                	addi	x6,x6,1
     35c:	1004                	addi	x9,x2,32
     35e:	0000                	unimp
     360:	00015207          	0x15207
  while (i-- > 0) *str++ = tmp[i];
     364:	0100                	addi	x8,x2,128
     366:	0511                	addi	x10,x10,4
  while (i < precision--) *str++ = '0';
     368:	00000037          	lui	x0,0x0
  while (i-- > 0) *str++ = tmp[i];
     36c:	0305                	addi	x6,x6,1
     36e:	1000                	addi	x8,x2,32
     370:	0000                	unimp
     372:	9b08                	0x9b08
     374:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
     378:	01500613          	li	x12,21
     37c:	0000                	unimp
     37e:	00c8                	addi	x10,x2,68
     380:	0000                	unimp
     382:	9c01                	0x9c01
     384:	5c09                	li	x24,-30
     386:	0004                	0x4
     388:	0100                	addi	x8,x2,128
     38a:	1115                	addi	x2,x2,-27
     38c:	0031                	c.nop	12
     38e:	0000                	unimp
     390:	0306                	slli	x6,x6,0x1
     392:	1024                	addi	x9,x2,40
     394:	0000                	unimp
     396:	099f 0435 0000      	0x435099f
  while (size-- > 0) *str++ = ' ';
     39c:	1601                	addi	x12,x12,-32
     39e:	3111                	jal	ffffffa2 <_end+0x7effff4a>
  while (i-- > 0) *str++ = tmp[i];
     3a0:	0000                	unimp
     3a2:	0600                	addi	x8,x2,768
  while (size-- > 0) *str++ = ' ';
     3a4:	00102003          	lw	x0,1(x0) # 1 <bsg_group_size>
     3a8:	9f00                	0x9f00
     3aa:	3d0a                	fld	f26,160(x2)
     3ac:	0004                	0x4
     3ae:	0100                	addi	x8,x2,128
     3b0:	1618                	addi	x14,x2,800
     3b2:	0025                	c.nop	9
     3b4:	0000                	unimp
     3b6:	002e                	c.slli	x0,0xb
     3b8:	0000                	unimp
     3ba:	640a                	flw	f8,128(x2)
     3bc:	0004                	0x4
     3be:	0100                	addi	x8,x2,128
     3c0:	1619                	addi	x12,x12,-26
     3c2:	0025                	c.nop	9
     3c4:	0000                	unimp
     3c6:	009c                	addi	x15,x2,64
     3c8:	0000                	unimp
     3ca:	0001940b          	0x1940b
     3ce:	0800                	addi	x8,x2,16
     3d0:	0000                	unimp
     3d2:	0c00                	addi	x8,x2,528
     3d4:	0078                	addi	x14,x2,12
     3d6:	2301                	jal	8d6 <bsg_printf+0x40a>
}
     3d8:	370e                	fld	f14,224(x2)
     3da:	0000                	unimp
     3dc:	cd00                	sw	x8,24(x10)
     3de:	0000                	unimp
     3e0:	0b00                	addi	x8,x2,400
     3e2:	0194                	addi	x13,x2,192
     3e4:	0000                	unimp
     3e6:	0008                	0x8
  char *dig = digits;
     3e8:	0000                	unimp
     3ea:	790c                	flw	f11,48(x10)
  if (type & LEFT) type &= ~ZEROPAD;
     3ec:	0100                	addi	x8,x2,128
     3ee:	1024                	addi	x9,x2,40
  char *dig = digits;
     3f0:	00000037          	lui	x0,0x0
  if (type & LEFT) type &= ~ZEROPAD;
     3f4:	00cd                	addi	x1,x1,19
     3f6:	0000                	unimp
  c = (type & ZEROPAD) ? '0' : ' ';
     3f8:	0000                	unimp
     3fa:	0000                	unimp
     3fc:	081c                	addi	x15,x2,16
     3fe:	0000                	unimp
     400:	0004                	0x4
     402:	01a6                	slli	x3,x3,0x9
     404:	0000                	unimp
     406:	0104                	addi	x9,x2,128
  if (type & SIGN)
     408:	0255                	addi	x4,x4,21
     40a:	0000                	unimp
     40c:	780c                	flw	f11,48(x8)
     40e:	0004                	0x4
     410:	7900                	flw	f8,48(x10)
     412:	0000                	unimp
  sign = 0;
     414:	1800                	addi	x8,x2,48
     416:	0002                	c.slli64	x0
     418:	5000                	lw	x8,32(x8)
     41a:	cf00000b          	0xcf00000b
      num = -num;
     41e:	0008                	0x8
      size--;
     420:	0200                	addi	x8,x2,256
     422:	0449                	addi	x8,x8,18
      sign = '-';
     424:	0000                	unimp
     426:	31191003          	lh	x0,785(x18) # 1311 <kernel_matrix_multiply_int16+0x1b1>
  if (type & HEX_PREP)
     42a:	0000                	unimp
  if (base < 2 || base > 36) return 0;
     42c:	0300                	addi	x8,x2,384
     42e:	3e04                	fld	f9,56(x12)
     430:	0000                	unimp
     432:	0400                	addi	x8,x2,512
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     434:	0504                	addi	x9,x2,640
     436:	6e69                	lui	x28,0x1a
     438:	0074                	addi	x13,x2,12
     43a:	3705                	jal	35a <number+0x142>
     43c:	0000                	unimp
     43e:	0600                	addi	x8,x2,768
     440:	0404                	addi	x9,x2,512
     442:	000011eb          	0x11eb
     446:	c302                	sw	x0,132(x2)
     448:	0005                	c.nop	1
     44a:	0300                	addi	x8,x2,384
     44c:	2212                	fld	f4,256(x2)
     44e:	0056                	c.slli	x0,0x15
      num = ((unsigned long) num) / (unsigned) base;
     450:	0000                	unimp
     452:	00630403          	lb	x8,6(x6)
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     456:	0000                	unimp
    while (num != 0)
     458:	0106                	slli	x2,x2,0x1
     45a:	0208                	addi	x10,x2,256
     45c:	0002                	c.slli64	x0
     45e:	0500                	addi	x8,x2,640
      size--;
     460:	005c                	addi	x15,x2,4
     462:	0000                	unimp
      sign = '+';
     464:	0206                	slli	x4,x4,0x1
     466:	00022707          	flw	f14,0(x4) # 0 <_start>
     46a:	0600                	addi	x8,x2,768
      *str++ = '0';
     46c:	0704                	addi	x9,x2,896
     46e:	035d                	addi	x6,x6,23
     470:	0000                	unimp
     472:	ec02                	fsw	f0,24(x2)
      *str++ = digits[33];
     474:	0005                	c.nop	1
     476:	0200                	addi	x8,x2,256
     478:	1f12                	slli	x30,x30,0x24
     47a:	0025                	c.nop	9
     47c:	0000                	unimp
     47e:	6f040707          	0x6f040707
     482:	0000                	unimp
      size -= 2;
     484:	0200                	addi	x8,x2,256
     486:	0e14                	addi	x13,x2,784
     488:	009d                	addi	x1,x1,7
     48a:	0000                	unimp
      *str++ = '0';
     48c:	2308                	fld	f10,0(x14)
     48e:	0005                	c.nop	1
     490:	0100                	addi	x8,x2,128
     492:	1c08                	addi	x10,x2,560
     494:	0006                	c.slli	x0,0x1
     496:	0000                	unimp
     498:	0200                	addi	x8,x2,256
     49a:	00000537          	lui	x10,0x0
  while (i < precision--) *str++ = '0';
     49e:	1602                	slli	x12,x12,0x20
     4a0:	8210                	0x8210
     4a2:	0000                	unimp
     4a4:	0200                	addi	x8,x2,256
     4a6:	0000055b          	0x55b
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     4aa:	2804                	fld	f9,16(x8)
     4ac:	0000b51b          	0xb51b
     4b0:	0900                	addi	x8,x2,144
     4b2:	fb04                	fsw	f9,48(x14)
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     4b4:	0004                	0x4
     4b6:	0200                	addi	x8,x2,256
     4b8:	0562                	slli	x10,x10,0x18
     4ba:	0000                	unimp
     4bc:	6304                	flw	f9,0(x14)
     4be:	a918                	fsd	f14,16(x10)
bsg_putchar( c );
     4c0:	0000                	unimp
     4c2:	0a00                	addi	x8,x2,272
     4c4:	0000063b          	0x63b
}
     4c8:	2601                	jal	7c8 <bsg_printf+0x2fc>
     4ca:	0000251b          	0x251b
{
     4ce:	0a00                	addi	x8,x2,272
     4d0:	05de                	slli	x11,x11,0x17
     4d2:	0000                	unimp
     4d4:	2801                	jal	4e4 <bsg_printf+0x18>
     4d6:	df0e                	sw	x3,188(x2)
     4d8:	0000                	unimp
     4da:	0300                	addi	x8,x2,384
     4dc:	e504                	fsw	f9,8(x10)
     4de:	0000                	unimp
     4e0:	0600                	addi	x8,x2,768
     4e2:	0801                	addi	x16,x16,0
     4e4:	0000020b          	0x20b
     4e8:	0000e50b          	0xe50b
     4ec:	0a00                	addi	x8,x2,272
     4ee:	05d8                	addi	x14,x2,708
     4f0:	0000                	unimp
     4f2:	2901                	jal	902 <bsg_printf+0x436>
     4f4:	df0e                	sw	x3,188(x2)
     4f6:	0000                	unimp
     4f8:	0c00                	addi	x8,x2,528
     4fa:	0648                	addi	x10,x2,772
     4fc:	0000                	unimp
     4fe:	4301                	li	x6,0
     500:	0502                	c.slli64	x10
     502:	00000037          	lui	x0,0x0
     506:	04cc                	addi	x11,x2,580
     508:	0000                	unimp
     50a:	089c                	addi	x15,x2,80
     50c:	0000                	unimp
     50e:	9c01                	0x9c01
     510:	00000413          	li	x8,0
     514:	660d                	lui	x12,0x3
     516:	746d                	lui	x8,0xffffb
  for (str = buf; *fmt; fmt++)
     518:	0100                	addi	x8,x2,128
     51a:	131c0243          	fmadd.d	f4,f24,f17,f2,rne
  va_start(args, fmt);
     51e:	0004                	0x4
     520:	e100                	fsw	f8,0(x10)
     522:	0000                	unimp
  for (str = buf; *fmt; fmt++)
     524:	0e00                	addi	x8,x2,784
     526:	6675620f          	0x6675620f
     52a:	0100                	addi	x8,x2,128
     52c:	0245                	addi	x4,x4,17
     52e:	1908                	addi	x10,x2,176
     530:	0004                	0x4
     532:	0300                	addi	x8,x2,384
     534:	b091                	j	fffffd78 <_end+0x7efffd20>
     536:	107d                	c.nop	-1
     538:	0070                	addi	x12,x2,12
     53a:	4501                	li	x10,0
     53c:	1202                	slli	x4,x4,0x20
     53e:	00df 0000 0126      	0x126000000df
     544:	0000                	unimp
     546:	7611                	lui	x12,0xfffe4
     548:	0008                	0x8
     54a:	0100                	addi	x8,x2,128
    if (*fmt != '%')
     54c:	0246                	slli	x4,x4,0x11
     54e:	0000bb0b          	0xbb0b
     552:	0300                	addi	x8,x2,384
      *str++ = *fmt;
     554:	9491                	srai	x9,x9,0x24
     556:	107d                	c.nop	-1
      continue;
     558:	006e                	c.slli	x0,0x1b
     55a:	4701                	li	x14,0
      *str++ = *fmt;
     55c:	0702                	c.slli64	x14
     55e:	00000037          	lui	x0,0x0
      continue;
     562:	0000014f          	fnmadd.s	f2,f0,f0,f0,rne
  for (str = buf; *fmt; fmt++)
     566:	5212                	lw	x4,36(x2)
  *str = '\0';
     568:	0004                	0x4
     56a:	1800                	addi	x8,x2,48
    asm volatile ("amoswap.w.aq %[result], %[swap_val], 0(%[addr]);"  \
     56c:	0005                	c.nop	1
     56e:	1800                	addi	x8,x2,48
     570:	0000                	unimp
     572:	0100                	addi	x8,x2,128
     574:	024a                	slli	x4,x4,0x12
     576:	00035903          	lhu	x18,0(x6)
    }while( result == bsg_mutex_lock_fail);
     57a:	1300                	addi	x8,x2,416
  while (*p) {
     57c:	047e                	slli	x8,x8,0x1f
     57e:	0000                	unimp
     580:	018d                	addi	x3,x3,3
     582:	0000                	unimp
     584:	00047113          	andi	x2,x8,0
  p=buf;
     588:	ec00                	fsw	f8,24(x8)
     58a:	0002                	c.slli64	x0
bsg_putchar( c );
     58c:	1300                	addi	x8,x2,416
     58e:	0464                	addi	x9,x2,524
     590:	0000                	unimp
     592:	00000473          	0x473
     596:	1814                	addi	x13,x2,48
  while (*p) {
     598:	0000                	unimp
     59a:	1500                	addi	x8,x2,672
     59c:	0000048b          	0x48b
	p++;
     5a0:	04b8                	addi	x14,x2,584
     5a2:	0000                	unimp
  while (*p) {
     5a4:	9816                	add	x16,x16,x5
     5a6:	0004                	0x4
    asm volatile ("amoswap.w.rl x0, x0, 0(%[addr]);"   \
     5a8:	1500                	addi	x8,x2,672
     5aa:	04a5                	addi	x9,x9,9
     5ac:	0000                	unimp
     5ae:	04f9                	addi	x9,x9,30
}
     5b0:	0000                	unimp
     5b2:	b015                	j	fffffdd6 <_end+0x7efffd7e>
     5b4:	0004                	0x4
     5b6:	1900                	addi	x8,x2,176
     5b8:	0005                	c.nop	1
     5ba:	1500                	addi	x8,x2,672
     5bc:	04bd                	addi	x9,x9,15
     5be:	0000                	unimp
     5c0:	05df 0000 ca15      	0xca15000005df
     5c6:	0004                	0x4
     5c8:	ca00                	sw	x8,16(x12)
     5ca:	15000007          	0x15000007
     5ce:	04d5                	addi	x9,x9,21
     5d0:	0000                	unimp
     5d2:	07fe                	slli	x15,x15,0x1f
     5d4:	0000                	unimp
     5d6:	e215                	bnez	x12,5fa <bsg_printf+0x12e>
     5d8:	0004                	0x4
     5da:	8a00                	0x8a00
     5dc:	0008                	0x8
     5de:	1500                	addi	x8,x2,672
     5e0:	000004ef          	jal	x9,5e0 <bsg_printf+0x114>
    flags = 0;
     5e4:	0000093b          	0x93b
     5e8:	fc15                	bnez	x8,524 <bsg_printf+0x58>
     5ea:	0004                	0x4
    switch (*fmt)
     5ec:	7700                	flw	f8,40(x14)
     5ee:	0009                	c.nop	2
    fmt++; // This also skips first '%'
     5f0:	1700                	addi	x8,x2,928
     5f2:	0509                	addi	x10,x10,2
    switch (*fmt)
     5f4:	0000                	unimp
     5f6:	0418                	addi	x14,x2,512
     5f8:	24000007          	0x24000007
     5fc:	34000007          	0x34000007
     600:	0000                	unimp
     602:	0100                	addi	x8,x2,128
     604:	01c1                	addi	x3,x3,16
     606:	1e15                	addi	x28,x28,-27
     608:	0002                	c.slli64	x0
     60a:	1900                	addi	x8,x2,176
     60c:	0715                	addi	x14,x14,5
     60e:	0000                	unimp
    if (is_digit(*fmt))
     610:	1f15                	addi	x30,x30,-27
     612:	4d000007          	0x4d000007
     616:	000a                	c.slli	x0,0x2
     618:	0000                	unimp
     61a:	3012                	fld	f0,288(x2)
     61c:	b8000007          	0xb8000007
    else if (*fmt == '*')
     620:	40000007          	0x40000007
    field_width = -1;
     624:	0000                	unimp
     626:	0100                	addi	x8,x2,128
    else if (*fmt == '*')
     628:	01f2                	slli	x3,x3,0x1c
     62a:	0002510f          	0x2510f
    if (*fmt == '.')
     62e:	1900                	addi	x8,x2,176
    precision = -1;
     630:	0000074b          	fnmsub.s	f14,f0,f0,f0,rne
    if (*fmt == '.')
     634:	00074113          	xori	x2,x14,0
    if (*fmt == 'l' || *fmt == 'L')
     638:	6d00                	flw	f8,24(x10)
     63a:	000a                	c.slli	x0,0x2
     63c:	1400                	addi	x8,x2,544
     63e:	0040                	addi	x8,x2,4
     640:	0000                	unimp
     642:	5715                	li	x14,-27
    switch (*fmt)
     644:	80000007          	0x80000007
     648:	000a                	c.slli	x0,0x2
     64a:	0000                	unimp
     64c:	1200                	addi	x8,x2,288
     64e:	051a                	slli	x10,x10,0x6
     650:	0000                	unimp
     652:	08f4                	addi	x13,x2,92
     654:	0000                	unimp
     656:	0068                	addi	x10,x2,12
     658:	0000                	unimp
     65a:	0801                	addi	x16,x16,0
     65c:	1102                	slli	x2,x2,0x20
     65e:	02b6                	slli	x5,x5,0xd
     660:	0000                	unimp
     662:	4f19                	li	x30,6
      case '0': flags |= ZEROPAD; goto repeat;
     664:	0005                	c.nop	1
     666:	1300                	addi	x8,x2,416
  for (str = buf; *fmt; fmt++)
     668:	0000055b          	0x55b
     66c:	0a9e                	slli	x21,x21,0x7
     66e:	0000                	unimp
      case '-': flags |= LEFT; goto repeat;
     670:	00054313          	xori	x6,x10,0
  for (str = buf; *fmt; fmt++)
     674:	bc00                	fsd	f8,56(x8)
     676:	000a                	c.slli	x0,0x2
     678:	1900                	addi	x8,x2,176
     67a:	00000537          	lui	x10,0x0
      case '+': flags |= PLUS; goto repeat;
     67e:	00052b13          	slti	x22,x10,0
  for (str = buf; *fmt; fmt++)
     682:	4b00                	lw	x8,16(x14)
     684:	1400000b          	0x1400000b
      case '#': flags |= HEX_PREP; goto repeat;
     688:	0068                	addi	x10,x2,12
     68a:	0000                	unimp
  for (str = buf; *fmt; fmt++)
     68c:	671a                	flw	f14,132(x2)
     68e:	0005                	c.nop	1
     690:	0300                	addi	x8,x2,384
     692:	9891                	andi	x9,x9,-28
      case ' ': flags |= SPACE; goto repeat;
     694:	157d                	addi	x10,x10,-1
     696:	00000573          	0x573
  for (str = buf; *fmt; fmt++)
     69a:	0ba4                	addi	x9,x2,472
     69c:	0000                	unimp
     69e:	7d15                	lui	x26,0xfffe5
    switch (*fmt)
     6a0:	0005                	c.nop	1
     6a2:	3200                	fld	f8,32(x12)
     6a4:	000c                	0xc
     6a6:	1500                	addi	x8,x2,672
      fmt++;
     6a8:	00000587          	0x587
    switch (*fmt)
     6ac:	0c7c                	addi	x15,x2,540
     6ae:	0000                	unimp
     6b0:	0000                	unimp
     6b2:	aa12                	fsd	f4,272(x2)
     6b4:	0005                	c.nop	1
     6b6:	8000                	0x8000
     6b8:	000a                	c.slli	x0,0x2
     6ba:	9000                	0x9000
     6bc:	0000                	unimp
     6be:	0100                	addi	x8,x2,128
     6c0:	0206                	slli	x4,x4,0x1
     6c2:	1b11                	addi	x22,x22,-28
     6c4:	19000003          	lb	x0,400(x0) # 190 <bsg_set_tile_x_y+0x40>
     6c8:	05df 0000 eb13      	0xeb13000005df
     6ce:	0005                	c.nop	1
     6d0:	3600                	fld	f8,40(x12)
     6d2:	000d                	c.nop	3
      fmt++;
     6d4:	1300                	addi	x8,x2,416
     6d6:	000005d3          	fadd.s	f11,f0,f0,rne
        if (*fmt != '%') *str++ = '%';
     6da:	0d49                	addi	x26,x26,18
     6dc:	0000                	unimp
     6de:	c719                	beqz	x14,6ec <bsg_printf+0x220>
     6e0:	0005                	c.nop	1
     6e2:	1300                	addi	x8,x2,416
     6e4:	000005bb          	0x5bb
        if (*fmt)
     6e8:	0dc4                	addi	x9,x2,724
     6ea:	0000                	unimp
     6ec:	9014                	0x9014
     6ee:	0000                	unimp
        if (*fmt != '%') *str++ = '%';
     6f0:	1a00                	addi	x8,x2,304
     6f2:	000005f7          	0x5f7
     6f6:	7d989103          	lh	x2,2009(x17)
      if (is_digit(*fmt))
     6fa:	0315                	addi	x6,x6,5
     6fc:	0006                	c.slli	x0,0x1
     6fe:	1000                	addi	x8,x2,32
      ++fmt;    
     700:	000e                	c.slli	x0,0x3
     702:	1500                	addi	x8,x2,672
      if (is_digit(*fmt))
     704:	0000060f          	0x60f
     708:	0e3e                	slli	x28,x28,0xf
     70a:	0000                	unimp
     70c:	1915                	addi	x18,x18,-27
     70e:	0006                	c.slli	x0,0x1
      else if (*fmt == '*')
     710:	8400                	0x8400
     712:	000e                	c.slli	x0,0x3
     714:	0000                	unimp
     716:	1800                	addi	x8,x2,48
      ++fmt;    
     718:	0704                	addi	x9,x2,896
     71a:	0000                	unimp
      if (precision < 0) precision = 0;
     71c:	0bb4                	addi	x13,x2,472
     71e:	0000                	unimp
     720:	0044                	addi	x9,x2,4
     722:	0000                	unimp
  int i = 0;
     724:	d301                	beqz	x14,624 <bsg_printf+0x158>
     726:	1501                	addi	x10,x10,-32
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     728:	0000033f 00071519 	0x715190000033f
     730:	1500                	addi	x8,x2,672
     732:	071f 0000 0ed1      	0xed10000071f
     738:	0000                	unimp
     73a:	1b00                	addi	x8,x2,432
     73c:	078c                	addi	x11,x2,960
     73e:	0000                	unimp
     740:	0626                	slli	x12,x12,0x9
     742:	0000                	unimp
     744:	581c                	lw	x15,48(x8)
     746:	0008                	0x8
     748:	2600                	fld	f8,8(x12)
     74a:	0006                	c.slli	x0,0x1
     74c:	1d00                	addi	x8,x2,688
     74e:	5c01                	li	x24,-32
     750:	4001                	c.li	x0,0
     752:	0000                	unimp
     754:	1800                	addi	x8,x2,48
     756:	0789                	addi	x15,x15,2
      field_width = va_arg(args, int);
     758:	0000                	unimp
     75a:	056c                	addi	x11,x2,652
     75c:	0000                	unimp
     75e:	0010                	0x10
      fmt++;
     760:	0000                	unimp
     762:	4e01                	li	x28,0
      field_width = va_arg(args, int);
     764:	0302                	c.slli64	x6
     766:	03bc                	addi	x15,x2,456
      if (field_width < 0)
     768:	0000                	unimp
     76a:	00079613          	slli	x12,x15,0x0
        field_width = -field_width;
     76e:	f100                	fsw	f8,32(x10)
        flags |= LEFT;
     770:	000e                	c.slli	x0,0x3
     772:	1500                	addi	x8,x2,672
     774:	07a2                	slli	x15,x15,0x8
     776:	0000                	unimp
    if (qualifier == 'l')
     778:	00000f07          	0xf07
        base = 16;
     77c:	af1e                	fsd	f7,408(x2)
     77e:	6c000007          	0x6c000007
      num = va_arg(args, unsigned int);
     782:	0005                	c.nop	1
     784:	a800                	fsd	f8,16(x8)
     786:	0000                	unimp
    str = number(str, num, base, field_width, precision, flags);
     788:	0200                	addi	x8,x2,256
     78a:	c013123f 26000007 	0x26000007c013123f
     792:	1400000f          	0x1400000f
  for (str = buf; *fmt; fmt++)
     796:	00a8                	addi	x10,x2,72
     798:	0000                	unimp
     79a:	cc15                	beqz	x8,7d6 <bsg_printf+0x30a>
    if (qualifier == 'l')
     79c:	3c000007          	0x3c000007
    if (*fmt == 'l' || *fmt == 'L')
     7a0:	1500000f          	0x1500000f
     7a4:	07d8                	addi	x14,x2,964
     7a6:	0000                	unimp
      fmt++;
     7a8:	0f26                	slli	x30,x30,0x9
     7aa:	0000                	unimp
        s = va_arg(args, char *);
     7ac:	e415                	bnez	x8,7d8 <bsg_printf+0x30c>
     7ae:	50000007          	0x50000007
     7b2:	0000000f          	fence	unknown,unknown
        if (!s) s = "<NULL>";
     7b6:	0000                	unimp
  for (sc = s; *sc != '\0' && count--; ++sc);
     7b8:	2912                	fld	f18,256(x2)
     7ba:	0004                	0x4
     7bc:	8c00                	0x8c00
     7be:	0005                	c.nop	1
     7c0:	c000                	sw	x8,0(x8)
     7c2:	0000                	unimp
     7c4:	0100                	addi	x8,x2,128
     7c6:	0250                	addi	x12,x2,260
     7c8:	ee02                	fsw	f0,28(x2)
     7ca:	13000003          	lb	x0,304(x0) # 130 <write_finish_signal+0x4>
     7ce:	00000437          	lui	x8,0x0
     7d2:	0f70                	addi	x12,x2,924
     7d4:	0000                	unimp
     7d6:	421f 0004 c000      	0xc0000004421f
     7dc:	0000                	unimp
     7de:	1500                	addi	x8,x2,672
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e0:	00000443          	fmadd.s	f8,f0,f0,f0,rne
  return sc - s;
     7e4:	00000f83          	lb	x31,0(x0) # 0 <_start>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e8:	0000                	unimp
     7ea:	6320                	flw	f8,64(x14)
        for (i = 0; i < len; ++i) *str++ = *s++;
     7ec:	a8000007          	0xa8000007
     7f0:	0005                	c.nop	1
     7f2:	0800                	addi	x8,x2,16
     7f4:	0000                	unimp
     7f6:	0100                	addi	x8,x2,128
     7f8:	0254                	addi	x13,x2,260
     7fa:	07701303          	lh	x6,119(x0) # 77 <bsg_group_size+0x76>
     7fe:	0000                	unimp
     800:	00000f9b          	0xf9b
     804:	7c15                	lui	x24,0xfffe5
     806:	9b000007          	0x9b000007
     80a:	0000000f          	fence	unknown,unknown
     80e:	0300                	addi	x8,x2,384
        while (len < field_width--) *str++ = ' ';
     810:	ec04                	fsw	f9,24(x8)
     812:	0000                	unimp
     814:	2100                	fld	f8,0(x10)
     816:	00e5                	addi	x1,x1,25
     818:	0000                	unimp
     81a:	0429                	addi	x8,x8,10
     81c:	0000                	unimp
     81e:	6f22                	flw	f30,8(x2)
     820:	0000                	unimp
     822:	ff00                	fsw	f8,56(x14)
     824:	2300                	fld	f8,0(x14)
     826:	0589                	addi	x11,x11,2
     828:	0000                	unimp
     82a:	3d01                	jal	63a <bsg_printf+0x16e>
     82c:	0602                	c.slli64	x12
     82e:	5201                	li	x4,-32
     830:	0004                	0x4
     832:	2400                	fld	f8,8(x8)
  for (str = buf; *fmt; fmt++)
     834:	3d010063          	beq	x2,x16,bf4 <bsg_printf+0x728>
     838:	1a02                	slli	x20,x20,0x20
     83a:	00e5                	addi	x1,x1,25
      fmt++;
     83c:	0000                	unimp
     83e:	2625                	jal	b66 <bsg_printf+0x69a>
        if (field_width == -1)
     840:	7470                	flw	f12,108(x8)
     842:	0072                	c.slli	x0,0x1c
     844:	3f01                	jal	754 <bsg_printf+0x288>
     846:	0102                	c.slli64	x2
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
     848:	004a                	c.slli	x0,0x12
     84a:	0000                	unimp
     84c:	0000                	unimp
     84e:	00051727          	0x51727
     852:	0100                	addi	x8,x2,128
     854:	370c019b          	0x370c019b
     858:	0000                	unimp
     85a:	0100                	addi	x8,x2,128
        continue;
     85c:	00000513          	li	x10,0
  for (str = buf; *fmt; fmt++)
     860:	6224                	flw	f9,64(x12)
     862:	6675                	lui	x12,0x1d
     864:	0100                	addi	x8,x2,128
     866:	df1e019b          	0xdf1e019b
    if (qualifier == 'l')
     86a:	0000                	unimp
        base = 8;
     86c:	2400                	fld	f8,8(x8)
     86e:	6d66                	flw	f26,88(x2)
     870:	0074                	addi	x13,x2,12
     872:	9b01                	andi	x14,x14,-32
        flags |= SIGN;
     874:	2f01                	jal	f84 <kernel_matrix_multiply_int+0x48>
     876:	00000413          	li	x8,0
    if (qualifier == 'l')
     87a:	7628                	flw	f10,104(x12)
    base = 10;
     87c:	0008                	0x8
     87e:	0100                	addi	x8,x2,128
     880:	bb3c019b          	0xbb3c019b
      fmt++;
     884:	0000                	unimp
     886:	2600                	fld	f8,8(x12)
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     888:	656c                	flw	f11,76(x10)
     88a:	006e                	c.slli	x0,0x1b
     88c:	9d01                	0x9d01
     88e:	0701                	addi	x14,x14,0
     890:	00000037          	lui	x0,0x0
        *str++ = (unsigned char) va_arg(args, int);
     894:	6e26                	flw	f28,72(x2)
     896:	6d75                	lui	x26,0x1d
     898:	0100                	addi	x8,x2,128
     89a:	019e                	slli	x3,x3,0x7
     89c:	1311                	addi	x6,x6,-28
     89e:	0005                	c.nop	1
     8a0:	2600                	fld	f8,8(x12)
     8a2:	0069                	c.nop	26
     8a4:	9f01                	0x9f01
     8a6:	0701                	addi	x14,x14,0
        while (--field_width > 0) *str++ = ' ';
     8a8:	00000037          	lui	x0,0x0
     8ac:	6329                	lui	x6,0xa
     8ae:	0008                	0x8
        *str++ = (unsigned char) va_arg(args, int);
     8b0:	0100                	addi	x8,x2,128
     8b2:	019f 370a 0000      	0x370a019f
        while (--field_width > 0) *str++ = ' ';
     8b8:	2600                	fld	f8,8(x12)
     8ba:	00727473          	csrrci	x8,0x7,4
     8be:	a001                	j	8be <bsg_printf+0x3f2>
     8c0:	0901                	addi	x18,x18,0
     8c2:	00df 0000 7326      	0x7326000000df
     8c8:	0100                	addi	x8,x2,128
     8ca:	01a1                	addi	x3,x3,8
     8cc:	df09                	beqz	x14,7e6 <bsg_printf+0x31a>
     8ce:	0000                	unimp
  for (str = buf; *fmt; fmt++)
     8d0:	2900                	fld	f8,16(x10)
     8d2:	08b6                	slli	x17,x17,0xd
     8d4:	0000                	unimp
     8d6:	a301                	j	dd6 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x6e>
        flags |= UPPERCASE;
     8d8:	0701                	addi	x14,x14,0
     8da:	00000037          	lui	x0,0x0
    if (qualifier == 'l')
     8de:	0b29                	addi	x22,x22,10
        base = 16;
     8e0:	0006                	c.slli	x0,0x1
     8e2:	0100                	addi	x8,x2,128
     8e4:	01a5                	addi	x3,x3,9
     8e6:	00003707          	fld	f14,0(x0) # 0 <_start>
        flags |= UPPERCASE;
     8ea:	2900                	fld	f8,16(x10)
     8ec:	056a                	slli	x10,x10,0x1a
     8ee:	0000                	unimp
        if (qualifier == 'l')
     8f0:	a601                	j	bf0 <bsg_printf+0x724>
     8f2:	0701                	addi	x14,x14,0
    n = addr[i];
     8f4:	00000037          	lui	x0,0x0
  len = 0;
     8f8:	0129                	addi	x2,x2,10
     8fa:	0006                	c.slli	x0,0x1
     8fc:	0100                	addi	x8,x2,128
     8fe:	370701a7          	0x370701a7
      if (n >= 100) 
     902:	0000                	unimp
      else if (n >= 10) 
     904:	2a00                	fld	f8,16(x12)
     906:	05e5                	addi	x11,x11,25
        tmp[len++] = digits[n / 10];
     908:	0000                	unimp
     90a:	b301                	j	60a <bsg_printf+0x13e>
        tmp[len++] = digits[n / 100];
     90c:	0101                	addi	x2,x2,0
     90e:	0600                	addi	x8,x2,768
      tmp[len++] = digits[0];
     910:	0704                	addi	x9,x2,896
     912:	0358                	addi	x14,x2,388
    if (i != 0) tmp[len++] = '.';
     914:	0000                	unimp
     916:	00057d2b          	0x57d2b
    if (n == 0)
     91a:	0100                	addi	x8,x2,128
     91c:	0e9d                	addi	x29,x29,7
     91e:	00df 0000 9401      	0x9401000000df
      tmp[len++] = digits[0];
     924:	0005                	c.nop	1
     926:	2c00                	fld	f8,24(x8)
     928:	00727473          	csrrci	x8,0x7,4
  for (i = 0; i < 4; i++)
     92c:	9d01                	0x9d01
     92e:	df1a                	sw	x6,188(x2)
     930:	0000                	unimp
     932:	2d00                	fld	f8,24(x10)
    if (i != 0) tmp[len++] = '.';
     934:	014d                	addi	x2,x2,19
     936:	0000                	unimp
     938:	9d01                	0x9d01
     93a:	942e                	add	x8,x8,x11
     93c:	0005                	c.nop	1
     93e:	2d00                	fld	f8,24(x10)
    n = addr[i];
     940:	000006b3          	add	x13,x0,x0
    if (i != 0) tmp[len++] = '.';
     944:	9d01                	0x9d01
     946:	3738                	fld	f14,104(x14)
    if (n == 0)
     948:	0000                	unimp
     94a:	2d00                	fld	f8,24(x10)
     94c:	056a                	slli	x10,x10,0x1a
     94e:	0000                	unimp
      if (n >= 100) 
     950:	9d01                	0x9d01
     952:	3742                	fld	f14,48(x2)
        n = n % 100;
     954:	0000                	unimp
     956:	2d00                	fld	f8,24(x10)
        tmp[len++] = digits[n / 100];
     958:	00000617          	auipc	x12,0x0
     95c:	9d01                	0x9d01
     95e:	3751                	jal	8e2 <bsg_printf+0x416>
        tmp[len++] = digits[n / 10];
     960:	0000                	unimp
     962:	2e00                	fld	f8,24(x12)
     964:	6d74                	flw	f13,92(x10)
     966:	0070                	addi	x12,x2,12
     968:	9f01                	0x9f01
     96a:	9a08                	0x9a08
        tmp[len++] = digits[n / 100];
     96c:	0005                	c.nop	1
     96e:	2e00                	fld	f8,24(x12)
        tmp[len++] = digits[n / 10];
     970:	0069                	c.nop	26
     972:	a001                	j	972 <bsg_printf+0x4a6>
        tmp[len++] = digits[n / 100];
     974:	00003707          	fld	f14,0(x0) # 0 <_start>
     978:	2e00                	fld	f8,24(x12)
     97a:	006e                	c.slli	x0,0x1b
     97c:	a001                	j	97c <bsg_printf+0x4b0>
     97e:	370a                	fld	f14,160(x2)
        n = n % 10;
     980:	0000                	unimp
     982:	2e00                	fld	f8,24(x12)
        tmp[len++] = digits[n / 10];
     984:	656c                	flw	f11,76(x10)
     986:	006e                	c.slli	x0,0x1b
     988:	a001                	j	988 <bsg_printf+0x4bc>
     98a:	370d                	jal	8ac <bsg_printf+0x3e0>
     98c:	0000                	unimp
     98e:	0000                	unimp
      tmp[len++] = digits[n];
     990:	005c0403          	lb	x8,5(x24) # fffe5005 <_end+0x7efe4fad>
     994:	0000                	unimp
     996:	e521                	bnez	x10,9de <bsg_printf+0x512>
     998:	0000                	unimp
     99a:	aa00                	fsd	f8,16(x12)
     99c:	0005                	c.nop	1
     99e:	2200                	fld	f8,0(x12)
     9a0:	0000006f          	j	9a0 <bsg_printf+0x4d4>
  for (i = 0; i < 4; i++)
     9a4:	832b0017          	auipc	x0,0x832b0
     9a8:	0005                	c.nop	1
     9aa:	0100                	addi	x8,x2,128
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     9ac:	00df0e87          	0xdf0e87
     9b0:	0000                	unimp
     9b2:	2601                	jal	cb2 <bsg_printf+0x7e6>
     9b4:	0006                	c.slli	x0,0x1
     9b6:	2c00                	fld	f8,24(x8)
     9b8:	00727473          	csrrci	x8,0x7,4
     9bc:	8701                	c.srai64	x14
     9be:	df1a                	sw	x6,188(x2)
     9c0:	0000                	unimp
     9c2:	2d00                	fld	f8,24(x10)
     9c4:	014d                	addi	x2,x2,19
     9c6:	0000                	unimp
     9c8:	8701                	c.srai64	x14
     9ca:	942e                	add	x8,x8,x11
     9cc:	0005                	c.nop	1
     9ce:	2d00                	fld	f8,24(x10)
     9d0:	000006b3          	add	x13,x0,x0
     9d4:	8701                	c.srai64	x14
     9d6:	3738                	fld	f14,104(x14)
     9d8:	0000                	unimp
     9da:	2d00                	fld	f8,24(x10)
     9dc:	056a                	slli	x10,x10,0x1a
     9de:	0000                	unimp
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     9e0:	8701                	c.srai64	x14
     9e2:	3742                	fld	f14,48(x2)
     9e4:	0000                	unimp
     9e6:	2d00                	fld	f8,24(x10)
     9e8:	00000617          	auipc	x12,0x0
     9ec:	8701                	c.srai64	x14
     9ee:	3751                	jal	972 <bsg_printf+0x4a6>
     9f0:	0000                	unimp
     9f2:	2e00                	fld	f8,24(x12)
     9f4:	6d74                	flw	f13,92(x10)
     9f6:	0070                	addi	x12,x2,12
     9f8:	8901                	andi	x10,x10,0
     9fa:	9a08                	0x9a08
  while (len < size--) *str++ = ' ';
     9fc:	0005                	c.nop	1
     9fe:	2e00                	fld	f8,24(x12)
     a00:	6964                	flw	f9,84(x10)
     a02:	8a010067          	jr	-1888(x2)
     a06:	df09                	beqz	x14,920 <bsg_printf+0x454>
     a08:	0000                	unimp
     a0a:	2e00                	fld	f8,24(x12)
     a0c:	0069                	c.nop	26
     a0e:	8b01                	andi	x14,x14,0
     a10:	00003707          	fld	f14,0(x0) # 0 <_start>
     a14:	2e00                	fld	f8,24(x12)
     a16:	656c                	flw	f11,76(x10)
     a18:	006e                	c.slli	x0,0x1b
     a1a:	8b01                	andi	x14,x14,0
     a1c:	370a                	fld	f14,160(x2)
     a1e:	0000                	unimp
     a20:	0000                	unimp
     a22:	0005fa2f          	0x5fa2f
     a26:	0100                	addi	x8,x2,128
     a28:	0e3a                	slli	x28,x28,0xe
     a2a:	00df 0000 0218      	0x218000000df
  return str;
     a30:	0000                	unimp
     a32:	02a8                	addi	x10,x2,328
        flags |= SIGN;
     a34:	0000                	unimp
     a36:	9c01                	0x9c01
    base = 10;
     a38:	06ed                	addi	x13,x13,27
     a3a:	0000                	unimp
    if (qualifier == 'l')
     a3c:	7330                	flw	f12,96(x14)
     a3e:	7274                	flw	f13,100(x12)
     a40:	0100                	addi	x8,x2,128
     a42:	1b3a                	slli	x22,x22,0x2e
     a44:	00df 0000 0fb1      	0xfb1000000df
      num = va_arg(args, unsigned long);
     a4a:	0000                	unimp
      fmt++;
     a4c:	6e30                	flw	f12,88(x12)
     a4e:	6d75                	lui	x26,0x1d
     a50:	0100                	addi	x8,x2,128
     a52:	253a                	fld	f10,392(x2)
     a54:	06ed                	addi	x13,x13,27
     a56:	0000                	unimp
        base = 8;
     a58:	1071                	c.nop	-4
     a5a:	0000                	unimp
        break;
     a5c:	6331                	lui	x6,0xc
     a5e:	0008                	0x8
        flags |= UPPERCASE;
     a60:	0100                	addi	x8,x2,128
     a62:	2e3a                	fld	f28,392(x2)
        base = 16;
     a64:	00000037          	lui	x0,0x0
     a68:	10b0                	addi	x12,x2,104
     a6a:	0000                	unimp
        flags |= UPPERCASE;
     a6c:	b331                	j	778 <bsg_printf+0x2ac>
     a6e:	0006                	c.slli	x0,0x1
        if (qualifier == 'l')
     a70:	0100                	addi	x8,x2,128
     a72:	383a                	fld	f16,424(x2)
     a74:	00000037          	lui	x0,0x0
     a78:	00001103          	lh	x2,0(x0) # 0 <_start>
     a7c:	6a31                	lui	x20,0xc
     a7e:	0005                	c.nop	1
  if (type & UPPERCASE)  dig = upper_digits;
     a80:	0100                	addi	x8,x2,128
     a82:	423a                	lw	x4,140(x2)
  char *dig = digits;
     a84:	00000037          	lui	x0,0x0
  if (type & UPPERCASE)  dig = upper_digits;
     a88:	00001233          	sll	x4,x0,x0
     a8c:	1731                	addi	x14,x14,-20
     a8e:	0006                	c.slli	x0,0x1
     a90:	0100                	addi	x8,x2,128
     a92:	513a                	lw	x2,172(x2)
    if (i != 0) tmp[len++] = ':';
     a94:	00000037          	lui	x0,0x0
     a98:	12a2                	slli	x5,x5,0x28
     a9a:	0000                	unimp
  if (type & UPPERCASE)  dig = upper_digits;
     a9c:	6332                	flw	f6,12(x2)
     a9e:	0100                	addi	x8,x2,128
    if (i != 0) tmp[len++] = ':';
     aa0:	083c                	addi	x15,x2,24
     aa2:	00e5                	addi	x1,x1,25
     aa4:	0000                	unimp
     aa6:	12d6                	slli	x5,x5,0x35
     aa8:	0000                	unimp
     aaa:	00075b33          	srl	x22,x14,x0
    tmp[len++] = dig[addr[i] >> 4];
     aae:	0100                	addi	x8,x2,128
     ab0:	0b3c                	addi	x15,x2,408
     ab2:	00e5                	addi	x1,x1,25
     ab4:	0000                	unimp
     ab6:	12f4                	addi	x13,x2,364
     ab8:	0000                	unimp
     aba:	7434                	flw	f13,104(x8)
    tmp[len++] = dig[addr[i] & 0x0F];
     abc:	706d                	c.lui	x0,0xffffb
     abe:	0100                	addi	x8,x2,128
    tmp[len++] = dig[addr[i] >> 4];
     ac0:	113c                	addi	x15,x2,168
     ac2:	06f4                	addi	x13,x2,844
    tmp[len++] = dig[addr[i] & 0x0F];
     ac4:	0000                	unimp
     ac6:	7fac9103          	lh	x2,2042(x25) # fffef7fa <_end+0x7efef7a2>
    tmp[len++] = dig[addr[i] >> 4];
     aca:	6432                	flw	f8,12(x2)
    tmp[len++] = dig[addr[i] & 0x0F];
     acc:	6769                	lui	x14,0x1a
     ace:	0100                	addi	x8,x2,128
    tmp[len++] = dig[addr[i] >> 4];
     ad0:	093d                	addi	x18,x18,15
     ad2:	00df 0000 1346      	0x1346000000df
  for (i = 0; i < 6; i++)
     ad8:	0000                	unimp
     ada:	6932                	flw	f18,12(x2)
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     adc:	0100                	addi	x8,x2,128
     ade:	073e                	slli	x14,x14,0xf
     ae0:	00000037          	lui	x0,0x0
     ae4:	1384                	addi	x9,x2,480
     ae6:	0000                	unimp
     ae8:	0600                	addi	x8,x2,768
     aea:	0504                	addi	x9,x2,640
     aec:	0309                	addi	x6,x6,2
     aee:	0000                	unimp
     af0:	e521                	bnez	x10,b38 <bsg_printf+0x66c>
     af2:	0000                	unimp
     af4:	0400                	addi	x8,x2,512
     af6:	22000007          	0x22000007
     afa:	0000006f          	j	afa <bsg_printf+0x62e>
     afe:	0041                	c.nop	16
     b00:	00050d2b          	0x50d2b
     b04:	0100                	addi	x8,x2,128
     b06:	00370c33          	add	x24,x14,x3
     b0a:	0000                	unimp
     b0c:	2a01                	jal	c1c <bsg_printf+0x750>
     b0e:	2c000007          	0x2c000007
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b12:	33010073          	0x33010073
     b16:	00072a23          	sw	x0,20(x14) # 1a014 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x17e20>
     b1a:	2e00                	fld	f8,24(x12)
     b1c:	0069                	c.nop	26
     b1e:	3501                	jal	91e <bsg_printf+0x452>
     b20:	00003707          	fld	f14,0(x0) # 0 <_start>
     b24:	0000                	unimp
     b26:	04130403          	lb	x8,65(x6) # c041 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x9e4d>
     b2a:	0000                	unimp
  while (len < size--) *str++ = ' ';
     b2c:	0006332b          	0x6332b
     b30:	0100                	addi	x8,x2,128
     b32:	0f2c                	addi	x11,x2,920
     b34:	00000037          	lui	x0,0x0
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b38:	6301                	0x6301
     b3a:	2c000007          	0x2c000007
  while (len < size--) *str++ = ' ';
     b3e:	2c010073          	0x2c010073
     b42:	00041323          	sh	x0,6(x8) # 6 <bsg_group_size+0x5>
     b46:	2d00                	fld	f8,24(x10)
     b48:	0eec                	addi	x11,x2,860
     b4a:	0000                	unimp
     b4c:	2c01                	jal	d5c <bsg_printf+0x890>
     b4e:	372d                	jal	a78 <bsg_printf+0x5ac>
     b50:	0000                	unimp
     b52:	2e00                	fld	f8,24(x12)
     b54:	01006373          	csrrsi	x6,0x10,0
     b58:	0f2e                	slli	x30,x30,0xb
     b5a:	00000413          	li	x8,0
     b5e:	3500                	fld	f8,40(x10)
     b60:	000005a3          	sb	x0,11(x0) # b <bsg_group_size+0xa>
     b64:	4402                	lw	x8,0(x2)
     b66:	0314                	addi	x13,x2,384
     b68:	0789                	addi	x15,x15,2
     b6a:	0000                	unimp
     b6c:	702d                	c.lui	x0,0xfffeb
     b6e:	0004                	0x4
     b70:	0200                	addi	x8,x2,256
     b72:	3544                	fld	f9,168(x10)
  return str;
     b74:	0076                	c.slli	x0,0x1d
     b76:	0000                	unimp
     b78:	980a                	add	x16,x16,x2
     b7a:	0005                	c.nop	1
  for (str = buf; *fmt; fmt++)
     b7c:	0200                	addi	x8,x2,256
     b7e:	006f1247          	fmsub.s	f4,f30,f6,f0,rtz
     b82:	0000                	unimp
      else if (n >= 10) 
     b84:	3500                	fld	f8,40(x10)
     b86:	05b4                	addi	x13,x2,712
     b88:	0000                	unimp
     b8a:	3c02                	fld	f24,32(x2)
        tmp[len++] = digits[n / 10];
     b8c:	0314                	addi	x13,x2,384
     b8e:	000007af          	0x7af
     b92:	702d                	c.lui	x0,0xfffeb
     b94:	0004                	0x4
     b96:	0200                	addi	x8,x2,256
     b98:	333c                	fld	f15,96(x14)
     b9a:	0076                	c.slli	x0,0x1d
        n = n % 10;
     b9c:	0000                	unimp
     b9e:	180a                	slli	x16,x16,0x22
        tmp[len++] = digits[n / 10];
     ba0:	0200000b          	0x200000b
     ba4:	093d                	addi	x18,x18,15
     ba6:	00000037          	lui	x0,0x0
        n = n % 10;
     baa:	2b00                	fld	f8,16(x14)
        tmp[len++] = digits[n / 10];
     bac:	0548                	addi	x10,x2,644
     bae:	0000                	unimp
        n = n % 10;
     bb0:	2d02                	fld	f26,0(x2)
     bb2:	00003713          	sltiu	x14,x0,0
  int i = 0;
     bb6:	0300                	addi	x8,x2,384
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     bb8:	07f1                	addi	x15,x15,28
     bba:	0000                	unimp
     bbc:	702d                	c.lui	x0,0xfffeb
     bbe:	0004                	0x4
     bc0:	0200                	addi	x8,x2,256
     bc2:	352d                	jal	9ec <bsg_printf+0x520>
     bc4:	0076                	c.slli	x0,0x1d
     bc6:	0000                	unimp
     bc8:	180a                	slli	x16,x16,0x22
     bca:	0200000b          	0x200000b
     bce:	009d162f          	0x9d162f
     bd2:	0000                	unimp
     bd4:	980a                	add	x16,x16,x2
     bd6:	0005                	c.nop	1
     bd8:	0200                	addi	x8,x2,256
     bda:	1231                	addi	x4,x4,-20
     bdc:	0000006f          	j	bdc <bsg_printf+0x710>
     be0:	740a                	flw	f8,160(x2)
     be2:	0005                	c.nop	1
     be4:	0200                	addi	x8,x2,256
     be6:	1232                	slli	x4,x4,0x2c
     be8:	0000006f          	j	be8 <bsg_printf+0x71c>
     bec:	3600                	fld	f8,40(x12)
     bee:	0429                	addi	x8,x8,10
     bf0:	0000                	unimp
     bf2:	04c0                	addi	x8,x2,580
     bf4:	0000                	unimp
     bf6:	000c                	0xc
        precision = va_arg(args, int);
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
     bfc:	00043737          	lui	x14,0x43
     c00:	0100                	addi	x8,x2,128
     c02:	385a                	fld	f16,432(x2)
     c04:	0442                	slli	x8,x8,0x10
     c06:	0000                	unimp
     c08:	04c0                	addi	x8,x2,580
     c0a:	0000                	unimp
     c0c:	0008                	0x8
     c0e:	0000                	unimp
        ++fmt;
     c10:	4339                	li	x6,14
     c12:	0004                	0x4
      if (precision < 0) precision = 0;
     c14:	dc00                	sw	x8,56(x8)
     c16:	00ea                	slli	x1,x1,0x1a
     c18:	0040                	addi	x8,x2,4
     c1a:	0000                	unimp
     c1c:	00002383          	lw	x7,0(x0) # 0 <_start>
     c20:	0004                	0x4
     c22:	04b8                	addi	x14,x2,584
  return str;
     c24:	0000                	unimp
     c26:	0104                	addi	x9,x2,128
        if (*fmt)
     c28:	0b9a                	slli	x23,x23,0x6
     c2a:	0000                	unimp
     c2c:	a404                	fsd	f9,8(x8)
     c2e:	000d                	c.nop	3
     c30:	7900                	flw	f8,48(x10)
     c32:	0000                	unimp
     c34:	2800                	fld	f8,16(x8)
     c36:	0006                	c.slli	x0,0x1
          *str++ = *fmt;
     c38:	0000                	unimp
     c3a:	0000                	unimp
     c3c:	0600                	addi	x8,x2,768
     c3e:	0021                	c.nop	8
     c40:	0200                	addi	x8,x2,256
     c42:	0449                	addi	x8,x8,18
  for (str = buf; *fmt; fmt++)
     c44:	0000                	unimp
     c46:	1002                	c.slli	x0,0x20
     c48:	3119                	jal	84e <bsg_printf+0x382>
     c4a:	0000                	unimp
          flags |= ZEROPAD;
     c4c:	0300                	addi	x8,x2,384
     c4e:	3e04                	fld	f9,56(x12)
          field_width = 2 * sizeof(void *);
     c50:	0000                	unimp
     c52:	0400                	addi	x8,x2,512
     c54:	0504                	addi	x9,x2,640
     c56:	6e69                	lui	x28,0x1a
        if (!s) s = "<NULL>";
     c58:	0074                	addi	x13,x2,12
     c5a:	3705                	jal	b7a <bsg_printf+0x6ae>
     c5c:	0000                	unimp
     c5e:	0600                	addi	x8,x2,768
     c60:	0404                	addi	x9,x2,512
     c62:	000011eb          	0x11eb
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     c66:	0106                	slli	x2,x2,0x1
     c68:	0208                	addi	x10,x2,256
     c6a:	0002                	c.slli64	x0
     c6c:	0600                	addi	x8,x2,768
     c6e:	0702                	c.slli64	x14
     c70:	00000227          	0x227
     c74:	0406                	slli	x8,x8,0x1
     c76:	00035d07          	0x35d07
     c7a:	0700                	addi	x8,x2,896
     c7c:	02f4                	addi	x13,x2,332
     c7e:	0000                	unimp
     c80:	0105                	addi	x2,x2,1
     c82:	370c                	fld	f11,40(x14)
  int n=0;
     c84:	0000                	unimp
     c86:	0700                	addi	x8,x2,896
     c88:	02fc                	addi	x15,x2,332
     c8a:	0000                	unimp
  for (str = buf; *fmt; fmt++)
     c8c:	0205                	addi	x4,x4,1
     c8e:	370c                	fld	f11,40(x14)
     c90:	0000                	unimp
     c92:	0700                	addi	x8,x2,896
     c94:	0340                	addi	x8,x2,388
     c96:	0000                	unimp
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     c98:	0305                	addi	x6,x6,1
     c9a:	370c                	fld	f11,40(x14)
     c9c:	0000                	unimp
     c9e:	0700                	addi	x8,x2,896
     ca0:	02d4                	addi	x13,x2,324
     ca2:	0000                	unimp
     ca4:	0405                	addi	x8,x8,1
     ca6:	370c                	fld	f11,40(x14)
     ca8:	0000                	unimp
     caa:	0700                	addi	x8,x2,896
     cac:	02e4                	addi	x9,x2,332
     cae:	0000                	unimp
     cb0:	0505                	addi	x10,x10,1
     cb2:	370c                	fld	f11,40(x14)
     cb4:	0000                	unimp
     cb6:	0700                	addi	x8,x2,896
     cb8:	010e                	slli	x2,x2,0x3
     cba:	0000                	unimp
     cbc:	0605                	addi	x12,x12,1
     cbe:	370c                	fld	f11,40(x14)
     cc0:	0000                	unimp
     cc2:	0700                	addi	x8,x2,896
      fmt++;
     cc4:	011f 0000 0705      	0x7050000011f
     cca:	370c                	fld	f11,40(x14)
        base = 16;
     ccc:	0000                	unimp
     cce:	0700                	addi	x8,x2,896
     cd0:	0385                	addi	x7,x7,1
     cd2:	0000                	unimp
    switch (*fmt)
     cd4:	0805                	addi	x16,x16,1
     cd6:	370c                	fld	f11,40(x14)
     cd8:	0000                	unimp
     cda:	0700                	addi	x8,x2,896
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     cdc:	00f8                	addi	x14,x2,76
     cde:	0000                	unimp
     ce0:	0905                	addi	x18,x18,1
     ce2:	370c                	fld	f11,40(x14)
     ce4:	0000                	unimp
     ce6:	0700                	addi	x8,x2,896
  return sc - s;
     ce8:	0152                	slli	x2,x2,0x14
     cea:	0000                	unimp
     cec:	0a05                	addi	x20,x20,1
     cee:	370c                	fld	f11,40(x14)
        *str++ = (unsigned char) va_arg(args, int);
     cf0:	0000                	unimp
     cf2:	0800                	addi	x8,x2,16
     cf4:	121c                	addi	x15,x2,288
     cf6:	0000                	unimp
     cf8:	0108                	addi	x10,x2,128
     cfa:	0119102b          	0x119102b
     cfe:	0000                	unimp
        while (--field_width > 0) *str++ = ' ';
     d00:	a409                	j	f02 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x19a>
     d02:	000e                	c.slli	x0,0x3
     d04:	0100                	addi	x8,x2,128
     d06:	162c                	addi	x11,x2,808
        while (len < field_width--) *str++ = ' ';
     d08:	004a                	c.slli	x0,0x12
     d0a:	0000                	unimp
  for (str = buf; *fmt; fmt++)
     d0c:	0900                	addi	x8,x2,144
     d0e:	0f02                	c.slli64	x30
     d10:	0000                	unimp
     d12:	2d01                	jal	1322 <kernel_matrix_multiply_int16+0x1c2>
      fmt++;
     d14:	4a16                	lw	x20,68(x2)
     d16:	0000                	unimp
     d18:	0100                	addi	x8,x2,128
     d1a:	b909                	j	92c <bsg_printf+0x460>
     d1c:	000d                	c.nop	3
     d1e:	0100                	addi	x8,x2,128
     d20:	162e                	slli	x12,x12,0x2b
     d22:	0119                	addi	x2,x2,6
     d24:	0000                	unimp
     d26:	0902                	c.slli64	x18
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d28:	0000084f          	fnmadd.s	f16,f0,f0,f0,rne
     d2c:	2f01                	jal	143c <kernel_matrix_multiply_int8+0xb8>
     d2e:	5816                	lw	x16,100(x2)
     d30:	0000                	unimp
     d32:	0400                	addi	x8,x2,512
     d34:	0a00                	addi	x8,x2,272
     d36:	004a                	c.slli	x0,0x12
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d38:	0000                	unimp
     d3a:	0129                	addi	x2,x2,10
     d3c:	0000                	unimp
     d3e:	0000580b          	0x580b
     d42:	0000                	unimp
        for (i = 0; i < len; ++i) *str++ = *s++;
     d44:	0200                	addi	x8,x2,256
     d46:	122e                	slli	x4,x4,0x2b
     d48:	0000                	unimp
     d4a:	3001                	jal	54a <bsg_printf+0x7e>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     d4c:	0000d703          	lhu	x14,0(x1)
     d50:	0800                	addi	x8,x2,16
     d52:	0d64                	addi	x9,x2,668
     d54:	0000                	unimp
     d56:	0108                	addi	x10,x2,128
     d58:	1032                	c.slli	x0,0x2c
     d5a:	00000177          	0x177
     d5e:	8609                	srai	x12,x12,0x2
     d60:	01000007          	0x1000007
     d64:	004a1633          	sll	x12,x20,x4
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d68:	0000                	unimp
     d6a:	0900                	addi	x8,x2,144
     d6c:	00000f23          	sb	x0,30(x0) # 1e <bsg_group_size+0x1d>
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d70:	3401                	jal	770 <bsg_printf+0x2a4>
     d72:	4a16                	lw	x20,68(x2)
     d74:	0000                	unimp
     d76:	0100                	addi	x8,x2,128
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d78:	b909                	j	98a <bsg_printf+0x4be>
     d7a:	000d                	c.nop	3
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d7c:	0100                	addi	x8,x2,128
     d7e:	1635                	addi	x12,x12,-19
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d80:	0119                	addi	x2,x2,6
     d82:	0000                	unimp
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d84:	0902                	c.slli64	x18
     d86:	0000084f          	fnmadd.s	f16,f0,f0,f0,rne
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d8a:	3601                	jal	88a <bsg_printf+0x3be>
     d8c:	5816                	lw	x16,100(x2)
     d8e:	0000                	unimp
     d90:	0400                	addi	x8,x2,512
     d92:	0200                	addi	x8,x2,256
     d94:	0cbe                	slli	x25,x25,0xf
     d96:	0000                	unimp
     d98:	3701                	jal	c98 <bsg_printf+0x7cc>
     d9a:	00013503          	0x13503
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d9e:	0c00                	addi	x8,x2,528
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     da0:	00647473          	csrrci	x8,0x6,8
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     da4:	0011                	c.nop	4
     da6:	02a1                	addi	x5,x5,8
     da8:	0000                	unimp
     daa:	520d                	li	x4,-29
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     dac:	08000007          	0x8000007
     db0:	0114                	addi	x13,x2,128
     db2:	0e41                	addi	x28,x28,16
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     db4:	1408                	addi	x10,x2,544
     db6:	4101                	li	x2,0
        if( bsg_x == center_x_cord) 
     db8:	018e                	slli	x3,x3,0x3
     dba:	0000                	unimp
     dbc:	0b2f060f          	0xb2f060f
        bsg_wait_local_int( (int *) &(p_row_b->_local_alert), 1);
     dc0:	000003db          	0x3db
        if( tmp == cond ) return tmp;  //the data is ready
     dc4:	0b30060f          	0xb30060f
     dc8:	000003f3          	0x3f3
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dcc:	0b31060f          	0xb31060f
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     dd0:	0000040b          	0x40b
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dd4:	0b32060f          	0xb32060f
        if( tmp == cond ) return tmp;  //the data is ready
     dd8:	00000423          	sb	x0,8(x0) # 8 <bsg_group_size+0x7>
        p_row_b->_local_alert = 0;
     ddc:	0b34060f          	0xb34060f
}
     de0:	000004cb          	fnmsub.s	f9,f0,f0,f0,rne
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     de4:	0b35060f          	0xb35060f
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     de8:	000004e3          	beqz	x0,15f0 <kernel_matrix_multiply_float+0x50>
     dec:	0b36060f          	0xb36060f
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     df0:	000004fb          	0x4fb
        bsg_col_barrier * p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( center_x_cord,    \
     df4:	0b37060f          	0xb37060f
     df8:	00000513          	li	x10,0
     dfc:	0b39060f          	0xb39060f
     e00:	0000046b          	0x46b
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e04:	0b3a060f          	0xb3a060f
                for( i= 0; i <= range; i++) {
     e08:	00000483          	lb	x9,0(x0) # 0 <_start>
     e0c:	0b3b060f          	0xb3b060f
                        if ( p[ i ] == 0) break;
     e10:	0000049b          	0x49b
     e14:	0b3c060f          	0xb3c060f
                for( i= 0; i <= range; i++) {
     e18:	000004b3          	add	x9,x0,x0
                        if ( p[ i ] == 0) break;
     e1c:	0b3e060f          	0xb3e060f
                for( i= 0; i <= range; i++) {
     e20:	0000043b          	0x43b
        p_remote_barrier->_done_list[ bsg_y - p_col_b-> _y_cord_start] = 1; 
     e24:	0b3f060f          	0xb3f060f
     e28:	00000453          	fadd.s	f8,f0,f0,rne
     e2c:	0b41060f          	0xb41060f
     e30:	000003e7          	jalr	x7,x0 # 0 <_start>
     e34:	0b42060f          	0xb42060f
     e38:	03ff                	0x3ff
     e3a:	0000                	unimp
        if( bsg_x == center_x_cord && bsg_y == center_y_cord) 
     e3c:	0b43060f          	0xb43060f
     e40:	00000417          	auipc	x8,0x0
     e44:	0b44060f          	0xb44060f
     e48:	0000042f          	0x42f
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e4c:	0b46060f          	0xb46060f
     e50:	000004d7          	0x4d7
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e54:	0b47060f          	0xb47060f
        if( tmp == cond ) return tmp;  //the data is ready
     e58:	000004ef          	jal	x9,e58 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xf0>
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e5c:	0b48060f          	0xb48060f
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e60:	00000507          	0x507
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e64:	0b49060f          	0xb49060f
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     e68:	051f 0000 060f      	0x60f0000051f
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e6e:	04770b4b          	0x4770b4b
        if( tmp == cond ) return tmp;  //the data is ready
     e72:	0000                	unimp
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e74:	0b4c060f          	0xb4c060f
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e78:	0000048f          	0x48f
     e7c:	0b4d060f          	0xb4d060f
               p_remote_barrier->_local_alert = 1;
     e80:	000004a7          	0x4a7
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e84:	0b4e060f          	0xb4e060f
     e88:	000004bf 0b50060f 	0xb50060f000004bf
     e90:	00000447          	fmsub.s	f8,f0,f0,f0,rne
     e94:	0b51060f          	0xb51060f
               p_remote_barrier->_local_alert = 1;
     e98:	045f 0000 070f      	0x70f0000045f
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e9e:	0b54                	addi	x13,x2,404
     ea0:	0dda                	slli	x27,x27,0x16
     ea2:	0000                	unimp
     ea4:	0b57070f          	0xb57070f
        for( i= 0; i <= x_range; i++) {
     ea8:	0df5                	addi	x27,x27,29
     eaa:	0000                	unimp
        p_col_b -> _local_alert = 0;
     eac:	0b5d070f          	0xb5d070f
}
     eb0:	00000e0b          	0xe0b
              p_row_b->_done_list[ i ] = 0;
     eb4:	0b5e070f          	0xb5e070f
        p_col_b -> _local_alert = 0;
     eb8:	0e26                	slli	x28,x28,0x9
     eba:	0000                	unimp
     ebc:	1000                	addi	x8,x2,32
     ebe:	12ce                	slli	x5,x5,0x33
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ec0:	0000                	unimp
     ec2:	1608                	addi	x10,x2,800
     ec4:	0b01                	addi	x22,x22,0
     ec6:	02c1                	addi	x5,x5,16
                for( i= 0; i <= range; i++) {
     ec8:	0000                	unimp
     eca:	520d                	li	x4,-29
     ecc:	08000007          	0x8000007
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ed0:	0118                	addi	x14,x2,128
     ed2:	0e41                	addi	x28,x28,16
                for( i= 0; i <= range; i++) {
     ed4:	1808                	addi	x10,x2,48
     ed6:	4101                	li	x2,0
     ed8:	02ae                	slli	x5,x5,0xb
     eda:	0000                	unimp
                        if ( p[ i ] == 0) break;
     edc:	0200                	addi	x8,x2,256
     ede:	0000080b          	0x80b
     ee2:	2909                	jal	12f4 <kernel_matrix_multiply_int16+0x194>
                for( i= 0; i <= range; i++) {
     ee4:	0002cd17          	auipc	x26,0x2c
                        if ( p[ i ] == 0) break;
     ee8:	0600                	addi	x8,x2,768
     eea:	0601                	addi	x12,x12,0
                for( i= 0; i <= range; i++) {
     eec:	0204                	addi	x9,x2,256
     eee:	0000                	unimp
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     ef0:	6902                	flw	f18,0(x2)
     ef2:	09000007          	0x9000007
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     ef6:	004a182b          	0x4a182b
     efa:	0000                	unimp
               p_remote_barrier->_local_alert = 1;
     efc:	2102                	fld	f2,0(x2)
     efe:	000a                	c.slli	x0,0x2
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     f00:	0900                	addi	x8,x2,144
     f02:	02ec1837          	lui	x16,0x2ec1
     f06:	0000                	unimp
     f08:	0206                	slli	x4,x4,0x1
     f0a:	2605                	jal	122a <kernel_matrix_multiply_int16+0xca>
     f0c:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
               p_remote_barrier->_local_alert = 1;
     f10:	00000f4f          	fnmadd.s	f30,f0,f0,f0,rne
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f14:	3909                	jal	b26 <bsg_printf+0x65a>
     f16:	5119                	li	x2,-26
     f18:	0000                	unimp
     f1a:	0200                	addi	x8,x2,256
     f1c:	0130                	addi	x12,x2,136
     f1e:	0000                	unimp
        for( i= 0; i <= y_range; i++) {
     f20:	4d09                	li	x26,2
     f22:	0b18                	addi	x14,x2,400
              p_col_b->_done_list[ i ] = 0;
     f24:	06000003          	lb	x0,96(x0) # 60 <bsg_group_size+0x5f>
        if( bsg_x == center_x_cord)
     f28:	0504                	addi	x9,x2,640
     f2a:	0309                	addi	x6,x6,2
     f2c:	0000                	unimp
     f2e:	4502                	lw	x10,0(x2)
     f30:	0002                	c.slli64	x0
     f32:	0900                	addi	x8,x2,144
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f34:	031e194f          	fnmadd.d	f18,f28,f17,f0,rtz
     f38:	0000                	unimp
     f3a:	0406                	slli	x8,x8,0x1
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f3c:	00035807          	0x35807
     f40:	0200                	addi	x8,x2,256
     f42:	07f6                	slli	x15,x15,0x1d
     f44:	0000                	unimp
     f46:	6709                	lui	x14,0x2
     f48:	3118                	fld	f14,32(x10)
     f4a:	06000003          	lb	x0,96(x0) # 60 <bsg_group_size+0x5f>
     f4e:	0508                	addi	x10,x2,640
     f50:	0304                	addi	x9,x2,384
     f52:	0000                	unimp
     f54:	1e02                	slli	x28,x28,0x20
     f56:	000d                	c.nop	3
     f58:	0900                	addi	x8,x2,144
     f5a:	1969                	addi	x18,x18,-6
     f5c:	0344                	addi	x9,x2,388
     f5e:	0000                	unimp
     f60:	0806                	slli	x16,x16,0x1
     f62:	00035307          	0x35307
     f66:	0200                	addi	x8,x2,256
     f68:	000010eb          	0x10eb
     f6c:	8609                	srai	x12,x12,0x2
     f6e:	cd1d                	beqz	x10,fac <kernel_matrix_multiply_int+0x70>
     f70:	0002                	c.slli64	x0
     f72:	0200                	addi	x8,x2,256
     f74:	0a11                	addi	x20,x20,4
     f76:	0000                	unimp
     f78:	8809                	andi	x8,x8,2
     f7a:	4a1e                	lw	x20,196(x2)
     f7c:	0000                	unimp
     f7e:	0200                	addi	x8,x2,256
                int A_local[A_HEIGHT * A_WIDTH];
     f80:	0a45                	addi	x20,x20,17
     f82:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f84:	a009                	j	f86 <kernel_matrix_multiply_int+0x4a>
     f86:	ec1e                	fsw	f7,24(x2)
     f88:	0002                	c.slli64	x0
     f8a:	0200                	addi	x8,x2,256
     f8c:	0fdd                	addi	x31,x31,23
     f8e:	0000                	unimp
     f90:	a209                	j	1092 <_tls_data+0x52>
     f92:	511f 0000 0200      	0x2000000511f
     f98:	0fbc                	addi	x15,x2,984
     f9a:	0000                	unimp
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
     f9c:	b609                	j	a9e <bsg_printf+0x5d2>
     f9e:	0b1e                	slli	x22,x22,0x7
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     fa0:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
     fa4:	1102                	slli	x2,x2,0x20
     fa6:	0000                	unimp
                int B_local[A_WIDTH * B_WIDTH];
     fa8:	b809                	j	7ba <bsg_printf+0x2ee>
     faa:	1e1f 0003 0200      	0x20000031e1f
                int A_local[A_HEIGHT * A_WIDTH];
     fb0:	00000823          	sb	x0,16(x0) # 10 <bsg_group_size+0xf>
     fb4:	c809                	beqz	x8,fc6 <kernel_matrix_multiply_int+0x8a>
     fb6:	311e                	fld	f2,480(x2)
     fb8:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
     fbc:	00000dcb          	fnmsub.s	f27,f0,f0,f0,rne
     fc0:	ca09                	beqz	x12,fd2 <kernel_matrix_multiply_int+0x96>
     fc2:	441f 0003 0200      	0x2000003441f
                for(int i = 0; i <= iter; ++i){
     fc8:	0afe                	slli	x21,x21,0x1f
     fca:	0000                	unimp
     fcc:	d609                	beqz	x12,ed6 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x16e>
     fce:	3119                	jal	bd4 <bsg_printf+0x708>
                int C_local[A_HEIGHT * B_WIDTH];
     fd0:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
                int B_local[A_WIDTH * B_WIDTH];
     fd4:	00000fa3          	sb	x0,31(x0) # 1f <bsg_group_size+0x1e>
     fd8:	de09                	beqz	x12,ef2 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x18a>
     fda:	441a                	lw	x8,132(x2)
     fdc:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
     fe0:	0a06                	slli	x20,x20,0x1
     fe2:	0000                	unimp
     fe4:	e609                	bnez	x12,fee <kernel_matrix_multiply_int+0xb2>
     fe6:	3719                	jal	eec <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x184>
     fe8:	0000                	unimp
     fea:	0200                	addi	x8,x2,256
     fec:	0e64                	addi	x9,x2,796
     fee:	0000                	unimp
                int C_local[A_HEIGHT * B_WIDTH];
     ff0:	e809                	bnez	x8,1002 <_bsg_data_start_addr+0x2>
     ff2:	581a                	lw	x16,164(x2)
     ff4:	0000                	unimp
     ff6:	0200                	addi	x8,x2,256
     ff8:	080d                	addi	x16,x16,3
     ffa:	0000                	unimp
     ffc:	140a                	slli	x8,x8,0x22
     ffe:	c112                	sw	x4,128(x2)
    1000:	0002                	c.slli64	x0
    1002:	0200                	addi	x8,x2,256
    1004:	0000076b          	0x76b
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1008:	180a                	slli	x16,x16,0x22
    100a:	0002d413          	srli	x8,x5,0x0
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    100e:	0200                	addi	x8,x2,256
    1010:	00000a23          	sb	x0,20(x0) # 14 <bsg_group_size+0x13>
    1014:	200a                	fld	f0,128(x2)
    1016:	0002e013          	ori	x0,x5,0
    101a:	0200                	addi	x8,x2,256
                        bsg_cuda_print_stat_start(temp);
    101c:	0f51                	addi	x30,x30,20
    101e:	0000                	unimp
    1020:	240a                	fld	f8,128(x2)
    1022:	f314                	fsw	f13,32(x14)
                int C_local[A_HEIGHT * B_WIDTH];
    1024:	0002                	c.slli64	x0
    1026:	0200                	addi	x8,x2,256
                int rc, temp = IGNORE_TAG;
    1028:	0132                	slli	x2,x2,0xc
    102a:	0000                	unimp
    102c:	2c0a                	fld	f24,128(x2)
    102e:	0002ff13          	andi	x30,x5,0
                        bsg_cuda_print_stat_start(temp);
    1032:	0200                	addi	x8,x2,256
    1034:	00000247          	fmsub.s	f4,f0,f0,f0,rne
    1038:	300a                	fld	f0,160(x2)
    103a:	1214                	addi	x13,x2,288
    103c:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1040:	07f8                	addi	x14,x2,972
    1042:	0000                	unimp
                        temp = tag;
    1044:	380a                	fld	f16,160(x2)
    1046:	00032513          	slti	x10,x6,0
                        bsg_cuda_print_stat_start(temp);
    104a:	0200                	addi	x8,x2,256
    104c:	0d20                	addi	x8,x2,664
    104e:	0000                	unimp
    1050:	3c0a                	fld	f24,160(x2)
    1052:	3814                	fld	f13,48(x8)
    1054:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1058:	0b00                	addi	x8,x2,400
    105a:	0000                	unimp
    105c:	430a                	lw	x6,128(x2)
    105e:	ab14                	fsd	f13,16(x14)
    1060:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1064:	0fa5                	addi	x31,x31,9
    1066:	0000                	unimp
    1068:	480a                	lw	x16,128(x2)
    106a:	b715                	j	f8e <kernel_matrix_multiply_int+0x52>
    106c:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1070:	0a08                	addi	x10,x2,272
    1072:	0000                	unimp
    1074:	4d0a                	lw	x26,128(x2)
    1076:	c314                	sw	x13,0(x14)
    1078:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    107c:	0e66                	slli	x28,x28,0x19
    107e:	0000                	unimp
    1080:	520a                	lw	x4,160(x2)
    1082:	cf15                	beqz	x14,10be <_tls_data+0x7e>
    1084:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1088:	10ed                	addi	x1,x1,-5
    108a:	0000                	unimp
    108c:	4b18150b          	0x4b18150b
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1090:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1094:	00000a13          	li	x20,0
    1098:	5719160b          	0x5719160b
    109c:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    10a0:	00000a47          	fmsub.s	f20,f0,f0,f0,rne
    10a4:	63191b0b          	0x63191b0b
                for(int i = 0; i <= iter; ++i){
    10a8:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    10ac:	0fdf 0000 1c0b      	0x1c0b00000fdf
                        bsg_cuda_print_stat_end(temp);
    10b2:	6f1a                	flw	f30,132(x2)
    10b4:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    10b8:	0fbe                	slli	x31,x31,0xf
    10ba:	0000                	unimp
    10bc:	7b19210b          	0x7b19210b
    10c0:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    10c4:	1104                	addi	x9,x2,160
    10c6:	0000                	unimp
    10c8:	871a220b          	0x871a220b
    10cc:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    10d0:	0825                	addi	x16,x16,9
    10d2:	0000                	unimp
    10d4:	9319270b          	0x9319270b
    10d8:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    10dc:	0dcd                	addi	x27,x27,19
    10de:	0000                	unimp
    10e0:	9f1a280b          	0x9f1a280b
    10e4:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    10e8:	0e58                	addi	x14,x2,788
    10ea:	0000                	unimp
    10ec:	371e330b          	0x371e330b
    10f0:	0000                	unimp
    10f2:	0200                	addi	x8,x2,256
                for(int i = 0; i <= iter; ++i){
    10f4:	00000e57          	0xe57
                        bsg_cuda_print_stat_end(temp);
    10f8:	581f340b          	0x581f340b
    10fc:	0000                	unimp
    10fe:	0200                	addi	x8,x2,256
                for(int i = 0; i <= iter; ++i){
    1100:	00000d77          	0xd77
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1104:	371f3d0b          	0x371f3d0b
                for(int i = 0; i <= iter; ++i){
    1108:	0000                	unimp
    110a:	0200                	addi	x8,x2,256
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    110c:	0d76                	slli	x26,x26,0x1d
    110e:	0000                	unimp
    1110:	58203e0b          	0x58203e0b
    1114:	0000                	unimp
    1116:	0200                	addi	x8,x2,256
    1118:	00000d97          	auipc	x27,0x0
        }
    111c:	371f470b          	0x371f470b
    1120:	0000                	unimp
    1122:	0200                	addi	x8,x2,256
    1124:	0d96                	slli	x27,x27,0x5
    1126:	0000                	unimp
    1128:	5820480b          	0x5820480b
    112c:	0000                	unimp
    112e:	0200                	addi	x8,x2,256
    1130:	0b26                	slli	x22,x22,0x9
    1132:	0000                	unimp
    1134:	311f510b          	0x311f510b
    1138:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    113c:	0b25                	addi	x22,x22,9
    113e:	0000                	unimp
    1140:	4420520b          	0x4420520b
    1144:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1148:	00000ac7          	fmsub.s	f21,f0,f0,f0,rne
    114c:	d10c                	sw	x11,32(x10)
    114e:	00005817          	auipc	x16,0x5
    1152:	0600                	addi	x8,x2,768
    1154:	0410                	addi	x12,x2,512
    1156:	00000c47          	fmsub.s	f24,f0,f0,f0,rne
    115a:	1b11                	addi	x22,x22,-28
    115c:	000c                	0xc
    115e:	0200                	addi	x8,x2,256
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1160:	0d84                	addi	x9,x2,720
    1162:	0000                	unimp
    1164:	0c0d                	addi	x24,x24,3
    1166:	370d                	jal	1088 <_tls_data+0x48>
    1168:	0000                	unimp
    116a:	0200                	addi	x8,x2,256
    116c:	00000cb7          	lui	x25,0x0
    1170:	2c0e                	fld	f24,192(x2)
    1172:	0b0e                	slli	x22,x22,0x3
    1174:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1178:	00000f2f          	0xf2f
    117c:	720e                	flw	f4,224(x2)
    117e:	0b0e                	slli	x22,x22,0x3
    1180:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1184:	0ac5                	addi	x21,x21,17
    1186:	0000                	unimp
    1188:	910e                	add	x2,x2,x3
    118a:	00003717          	auipc	x14,0x3
    118e:	1200                	addi	x8,x2,288
    1190:	00000b83          	lb	x23,0(x0) # 0 <_start>
    1194:	5e0c                	lw	x11,56(x12)
    1196:	1701                	addi	x14,x14,-32
    1198:	0058                	addi	x14,x2,4
    119a:	0000                	unimp
    119c:	a40e0813          	addi	x16,x28,-1472 # 19a40 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1784c>
    11a0:	7301                	lui	x6,0xfffe0
    11a2:	ca000007          	0xca000007
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11a6:	0005                	c.nop	1
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11a8:	1400                	addi	x8,x2,544
    11aa:	0e04                	addi	x9,x2,784
    11ac:	05af03a7          	0x5af03a7
    11b0:	0000                	unimp
    11b2:	1f15                	addi	x30,x30,-27
    11b4:	0e00000b          	0xe00000b
    11b8:	0ca8                	addi	x10,x2,600
    11ba:	00000573          	0x573
    11be:	5a15                	li	x20,-27
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    11c0:	000a                	c.slli	x0,0x2
    11c2:	0e00                	addi	x8,x2,784
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11c4:	13a9                	addi	x7,x7,-22
    11c6:	05ca                	slli	x11,x11,0x12
    11c8:	0000                	unimp
    11ca:	0900                	addi	x8,x2,144
                int16_t B_local[A_WIDTH * B_WIDTH];
    11cc:	0eea                	slli	x29,x29,0x1a
    11ce:	0000                	unimp
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11d0:	a50e                	fsd	f3,136(x2)
    11d2:	00003707          	fld	f14,0(x0) # 0 <_start>
    11d6:	0000                	unimp
    11d8:	fa09                	bnez	x12,10ea <_tls_data+0xaa>
    11da:	0010                	0x10
    11dc:	0e00                	addi	x8,x2,784
    11de:	05aa                	slli	x11,x11,0xa
    11e0:	058d                	addi	x11,x11,3
    11e2:	0000                	unimp
    11e4:	0004                	0x4
    11e6:	4a0a                	lw	x20,128(x2)
                for(int i = 0; i <= iter; ++i){
    11e8:	0000                	unimp
    11ea:	da00                	sw	x8,48(x12)
    11ec:	0005                	c.nop	1
    11ee:	0b00                	addi	x8,x2,400
    11f0:	0058                	addi	x14,x2,4
    11f2:	0000                	unimp
                int16_t C_local[A_HEIGHT * B_WIDTH];
    11f4:	75020003          	lb	x0,1872(x4) # 750 <bsg_printf+0x284>
                int16_t B_local[A_WIDTH * B_WIDTH];
    11f8:	0e000007          	0xe000007
    11fc:	058003ab          	0x58003ab
    1200:	0000                	unimp
    1202:	5702                	lw	x14,32(x2)
    1204:	0011                	c.nop	4
    1206:	0e00                	addi	x8,x2,784
    1208:	05431baf          	0x5431baf
    120c:	0000                	unimp
    120e:	0416                	slli	x8,x8,0x5
    1210:	05fa0403          	lb	x8,95(x20) # c05f <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x9e6b>
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1214:	0000                	unimp
    1216:	0106                	slli	x2,x2,0x1
    1218:	0b08                	addi	x10,x2,400
    121a:	0002                	c.slli64	x0
    121c:	1700                	addi	x8,x2,928
    121e:	05fa                	slli	x11,x11,0x1e
    1220:	0000                	unimp
    1222:	1802                	slli	x16,x16,0x20
    1224:	0010                	0x10
    1226:	0f00                	addi	x8,x2,912
    1228:	1916                	slli	x18,x18,0x25
    122a:	031e                	slli	x6,x6,0x7
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    122c:	0000                	unimp
    122e:	3308                	fld	f10,32(x14)
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1230:	000a                	c.slli	x0,0x2
    1232:	1800                	addi	x8,x2,48
    1234:	6c082f0f          	0x6c082f0f
    1238:	0006                	c.slli	x0,0x1
    123a:	0900                	addi	x8,x2,144
    123c:	0e75                	addi	x28,x28,29
    123e:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1240:	6c13310f          	0x6c13310f
    1244:	0006                	c.slli	x0,0x1
    1246:	0000                	unimp
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1248:	5f18                	lw	x14,56(x14)
    124a:	320f006b          	0x320f006b
                int rc, temp = IGNORE_TAG;
    124e:	00003707          	fld	f14,0(x0) # 0 <_start>
    1252:	0400                	addi	x8,x2,512
                        bsg_cuda_print_stat_start(temp);
    1254:	d509                	beqz	x10,115e <_tls_data+0x11e>
    1256:	0f00000f          	fence	iorw,unknown
    125a:	0b32                	slli	x22,x22,0xc
    125c:	00000037          	lui	x0,0x0
    1260:	0908                	addi	x10,x2,144
    1262:	075a                	slli	x14,x14,0x16
    1264:	0000                	unimp
    1266:	3714320f          	0x3714320f
                        temp = tag;
    126a:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    126c:	0c00                	addi	x8,x2,528
    126e:	dc09                	beqz	x8,1188 <kernel_matrix_multiply_int16+0x28>
    1270:	0010                	0x10
    1272:	0f00                	addi	x8,x2,912
    1274:	1b32                	slli	x22,x22,0x2c
    1276:	00000037          	lui	x0,0x0
    127a:	1810                	addi	x12,x2,48
    127c:	785f 0f00 0b33      	0xb330f00785f
    1282:	0672                	slli	x12,x12,0x1c
    1284:	0000                	unimp
    1286:	0014                	0x14
    1288:	06120403          	lb	x8,97(x4) # 61 <bsg_group_size+0x60>
    128c:	0000                	unimp
    128e:	060a                	slli	x12,x12,0x2
    1290:	0006                	c.slli	x0,0x1
    1292:	8200                	0x8200
    1294:	0006                	c.slli	x0,0x1
    1296:	0b00                	addi	x8,x2,400
    1298:	0058                	addi	x14,x2,4
    129a:	0000                	unimp
    129c:	0000                	unimp
    129e:	5508                	lw	x10,40(x10)
    12a0:	000a                	c.slli	x0,0x2
    12a2:	2400                	fld	f8,8(x8)
    12a4:	0508370f          	0x508370f
    12a8:	09000007          	0x9000007
    12ac:	0846                	slli	x16,x16,0x11
    12ae:	0000                	unimp
    12b0:	3709390f          	0x3709390f
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12b4:	0000                	unimp
    12b6:	0000                	unimp
    12b8:	4609                	li	x12,2
    12ba:	0f00000f          	fence	iorw,unknown
    12be:	093a                	slli	x18,x18,0xe
    12c0:	00000037          	lui	x0,0x0
    12c4:	0904                	addi	x9,x2,144
    12c6:	0ef2                	slli	x29,x29,0x1c
    12c8:	0000                	unimp
    12ca:	37093b0f          	0x37093b0f
                for(int i = 0; i <= iter; ++i){
    12ce:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12d0:	0800                	addi	x8,x2,16
    12d2:	4609                	li	x12,2
                        bsg_cuda_print_stat_end(temp);
    12d4:	0012                	c.slli	x0,0x4
    12d6:	0f00                	addi	x8,x2,912
    12d8:	093c                	addi	x15,x2,152
    12da:	00000037          	lui	x0,0x0
    12de:	090c                	addi	x11,x2,144
    12e0:	00000c93          	li	x25,0
    12e4:	37093d0f          	0x37093d0f
    12e8:	0000                	unimp
    12ea:	1000                	addi	x8,x2,32
    12ec:	3409                	jal	cee <bsg_printf+0x822>
    12ee:	000c                	0xc
    12f0:	0f00                	addi	x8,x2,912
    12f2:	093e                	slli	x18,x18,0xf
    12f4:	00000037          	lui	x0,0x0
    12f8:	0914                	addi	x13,x2,144
    12fa:	10e1                	addi	x1,x1,-8
    12fc:	0000                	unimp
    12fe:	37093f0f          	0x37093f0f
    1302:	0000                	unimp
    1304:	1800                	addi	x8,x2,48
    1306:	3109                	jal	f08 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x1a0>
    1308:	000e                	c.slli	x0,0x3
    130a:	0f00                	addi	x8,x2,912
    130c:	0940                	addi	x8,x2,148
    130e:	00000037          	lui	x0,0x0
    1312:	091c                	addi	x15,x2,144
    1314:	11ae                	slli	x3,x3,0x2b
    1316:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    1318:	3709410f          	0x3709410f
                        bsg_cuda_print_stat_end(temp);
    131c:	0000                	unimp
    131e:	2000                	fld	f8,0(x8)
    1320:	1900                	addi	x8,x2,176
    1322:	086d                	addi	x16,x16,27
                for(int i = 0; i <= iter; ++i){
    1324:	0000                	unimp
    1326:	0108                	addi	x10,x2,128
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1328:	4a084a0f          	0x4a084a0f
                for(int i = 0; i <= iter; ++i){
    132c:	09000007          	0x9000007
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1330:	0708                	addi	x10,x2,896
    1332:	0000                	unimp
    1334:	4a0a4b0f          	0x4a0a4b0f
    1338:	00000007          	0x7
    133c:	5309                	li	x6,-30
    133e:	0006                	c.slli	x0,0x1
        }
    1340:	0f00                	addi	x8,x2,912
    1342:	094c                	addi	x11,x2,148
    1344:	074a                	slli	x14,x14,0x12
    1346:	0000                	unimp
    1348:	1a80                	addi	x8,x2,368
    134a:	0fcc                	addi	x11,x2,980
    134c:	0000                	unimp
    134e:	060a4e0f          	0x60a4e0f
    1352:	0006                	c.slli	x0,0x1
    1354:	0000                	unimp
    1356:	1a01                	addi	x20,x20,-32
    1358:	08bc                	addi	x15,x2,88
    135a:	0000                	unimp
    135c:	060a510f          	0x60a510f
    1360:	0006                	c.slli	x0,0x1
    1362:	0400                	addi	x8,x2,512
    1364:	0001                	nop
    1366:	f20a                	fsw	f2,36(x2)
    1368:	0005                	c.nop	1
    136a:	5a00                	lw	x8,48(x12)
    136c:	0b000007          	0xb000007
    1370:	0058                	addi	x14,x2,4
    1372:	0000                	unimp
    1374:	001f a419 000c      	0xca419001f
    137a:	9000                	0x9000
    137c:	0f01                	addi	x30,x30,0
    137e:	085d                	addi	x16,x16,23
    1380:	079d                	addi	x15,x15,7
    1382:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1384:	7509                	lui	x10,0xfffe2
    1386:	000e                	c.slli	x0,0x3
    1388:	0f00                	addi	x8,x2,912
    138a:	125e                	slli	x4,x4,0x37
    138c:	079d                	addi	x15,x15,7
    138e:	0000                	unimp
    1390:	0900                	addi	x8,x2,144
    1392:	0e9f 0000 5f0f      	0x5f0f00000e9f
    1398:	3706                	fld	f14,96(x2)
    139a:	0000                	unimp
    139c:	0400                	addi	x8,x2,512
    139e:	0109                	addi	x2,x2,2
    13a0:	000a                	c.slli	x0,0x2
    13a2:	0f00                	addi	x8,x2,912
    13a4:	0961                	addi	x18,x18,24
    13a6:	000007a3          	sb	x0,15(x0) # f <bsg_group_size+0xe>
    13aa:	0908                	addi	x10,x2,144
    13ac:	086d                	addi	x16,x16,27
    13ae:	0000                	unimp
    13b0:	051e620f          	0x51e620f
    13b4:	88000007          	0x88000007
    13b8:	0300                	addi	x8,x2,384
    13ba:	5a04                	lw	x9,48(x12)
    13bc:	0a000007          	0xa000007
    13c0:	000007b3          	add	x15,x0,x0
    13c4:	000007b3          	add	x15,x0,x0
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13c8:	0000580b          	0x580b
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13cc:	1f00                	addi	x8,x2,944
    13ce:	0300                	addi	x8,x2,384
                int8_t B_local[A_WIDTH * B_WIDTH];
    13d0:	b904                	fsd	f9,48(x10)
    13d2:	1b000007          	0x1b000007
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13d6:	3b08                	fld	f10,48(x14)
    13d8:	000e                	c.slli	x0,0x3
    13da:	0800                	addi	x8,x2,16
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    13dc:	e208750f          	0xe208750f
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13e0:	09000007          	0x9000007
    13e4:	0862                	slli	x16,x16,0x18
    13e6:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    13e8:	e211760f          	0xe211760f
    13ec:	00000007          	0x7
                int8_t B_local[A_WIDTH * B_WIDTH];
    13f0:	b209                	j	cf2 <bsg_printf+0x826>
    13f2:	0006                	c.slli	x0,0x1
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13f4:	0f00                	addi	x8,x2,912
    13f6:	00370677          	0x370677
    13fa:	0000                	unimp
    13fc:	0004                	0x4
    13fe:	004a0403          	lb	x8,4(x20)
    1402:	0000                	unimp
    1404:	4f08                	lw	x10,24(x14)
    1406:	000e                	c.slli	x0,0x3
    1408:	6800                	flw	f8,16(x8)
    140a:	2b08b50f          	0x2b08b50f
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    140e:	0009                	c.nop	2
                int8_t A_local[A_HEIGHT * A_WIDTH];
    1410:	1800                	addi	x8,x2,48
    1412:	705f 0f00 12b6      	0x12b60f00705f
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1418:	07e2                	slli	x15,x15,0x18
    141a:	0000                	unimp
                int8_t B_local[A_WIDTH * B_WIDTH];
    141c:	1800                	addi	x8,x2,48
    141e:	725f 0f00 07b7      	0x7b70f00725f
    1424:	00000037          	lui	x0,0x0
    1428:	1804                	addi	x9,x2,48
    142a:	775f 0f00 07b8      	0x7b80f00775f
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1430:	00000037          	lui	x0,0x0
    1434:	0908                	addi	x10,x2,144
    1436:	08b5                	addi	x17,x17,13
    1438:	0000                	unimp
    143a:	ec09b90f          	0xec09b90f
                        bsg_cuda_print_stat_start(temp);
    143e:	0002                	c.slli64	x0
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1440:	0c00                	addi	x8,x2,528
    1442:	ae09                	j	1754 <kernel_matrix_multiply_float+0x1b4>
    1444:	000a                	c.slli	x0,0x2
    1446:	0f00                	addi	x8,x2,912
    1448:	09ba                	slli	x19,x19,0xe
    144a:	02ec                	addi	x11,x2,332
    144c:	0000                	unimp
    144e:	180e                	slli	x16,x16,0x23
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1450:	625f 0066 bb0f      	0xbb0f0066625f
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1456:	ba11                	j	d6a <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x2>
    1458:	10000007          	0x10000007
    145c:	cc09                	beqz	x8,1476 <kernel_matrix_multiply_int8+0xf2>
    145e:	0f000007          	0xf000007
    1462:	07bc                	addi	x15,x2,968
                        bsg_cuda_print_stat_start(temp);
    1464:	00000037          	lui	x0,0x0
    1468:	0918                	addi	x14,x2,144
    146a:	0888                	addi	x10,x2,80
                int8_t C_local[A_HEIGHT * B_WIDTH];
    146c:	0000                	unimp
    146e:	f20ac30f          	0xf20ac30f
                int rc, temp = IGNORE_TAG;
    1472:	0005                	c.nop	1
                        bsg_cuda_print_stat_start(temp);
    1474:	1c00                	addi	x8,x2,560
    1476:	6009                	c.lui	x0,0x2
    1478:	0011                	c.nop	4
    147a:	0f00                	addi	x8,x2,912
    147c:	1dc5                	addi	x27,x27,-15
    147e:	0bfe                	slli	x23,x23,0x1f
    1480:	0000                	unimp
    1482:	0920                	addi	x8,x2,152
                        temp = tag;
    1484:	0c2d                	addi	x24,x24,11
    1486:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1488:	281dc70f          	0x281dc70f
    148c:	000c                	0xc
    148e:	2400                	fld	f8,8(x8)
    1490:	fc09                	bnez	x8,13aa <kernel_matrix_multiply_int8+0x26>
    1492:	000e                	c.slli	x0,0x3
    1494:	0f00                	addi	x8,x2,912
    1496:	0dca                	slli	x27,x27,0x12
    1498:	0c4c                	addi	x11,x2,532
    149a:	0000                	unimp
    149c:	0928                	addi	x10,x2,152
    149e:	11c8                	addi	x10,x2,228
    14a0:	0000                	unimp
    14a2:	6609cb0f          	0x6609cb0f
    14a6:	000c                	0xc
    14a8:	2c00                	fld	f8,24(x8)
    14aa:	5f18                	lw	x14,56(x14)
    14ac:	6275                	lui	x4,0x1d
    14ae:	0f00                	addi	x8,x2,912
    14b0:	11ce                	slli	x3,x3,0x33
    14b2:	07ba                	slli	x15,x15,0xe
    14b4:	0000                	unimp
    14b6:	1830                	addi	x12,x2,56
    14b8:	755f 0070 cf0f      	0xcf0f0070755f
    14be:	e212                	fsw	f4,4(x2)
    14c0:	38000007          	0x38000007
    14c4:	5f18                	lw	x14,56(x14)
    14c6:	7275                	lui	x4,0xffffd
    14c8:	0f00                	addi	x8,x2,912
    14ca:	07d0                	addi	x12,x2,964
    14cc:	00000037          	lui	x0,0x0
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14d0:	093c                	addi	x15,x2,152
    14d2:	085c                	addi	x15,x2,20
    14d4:	0000                	unimp
    14d6:	6c11d30f          	0x6c11d30f
    14da:	000c                	0xc
    14dc:	4000                	lw	x8,0(x8)
    14de:	6609                	lui	x12,0x2
    14e0:	0011                	c.nop	4
    14e2:	0f00                	addi	x8,x2,912
    14e4:	11d4                	addi	x13,x2,228
    14e6:	0119                	addi	x2,x2,6
                for(int i = 0; i <= iter; ++i){
    14e8:	0000                	unimp
    14ea:	6c5f1843          	0x6c5f1843
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14ee:	0062                	c.slli	x0,0x18
                        bsg_cuda_print_stat_end(temp);
    14f0:	ba11d70f          	0xba11d70f
    14f4:	44000007          	0x44000007
    14f8:	d909                	beqz	x10,140a <kernel_matrix_multiply_int8+0x86>
    14fa:	0008                	0x8
    14fc:	0f00                	addi	x8,x2,912
    14fe:	07da                	slli	x15,x15,0x16
    1500:	00000037          	lui	x0,0x0
    1504:	094c                	addi	x11,x2,148
    1506:	0909                	addi	x18,x18,2
    1508:	0000                	unimp
    150a:	4f0adb0f          	0x4f0adb0f
    150e:	0005                	c.nop	1
    1510:	5000                	lw	x8,32(x8)
    1512:	8009                	srli	x8,x8,0x2
    1514:	0f000007          	0xf000007
    1518:	12de                	slli	x5,x5,0x37
    151a:	0949                	addi	x18,x18,18
    151c:	0000                	unimp
    151e:	0954                	addi	x13,x2,148
    1520:	05bd                	addi	x11,x11,15
    1522:	0000                	unimp
    1524:	e60ce20f          	0xe60ce20f
    1528:	0005                	c.nop	1
    152a:	5800                	lw	x8,48(x8)
    152c:	6009                	c.lui	x0,0x2
    152e:	0f000007          	0xf000007
    1532:	0ee4                	addi	x9,x2,860
    1534:	05da                	slli	x11,x11,0x16
    1536:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    1538:	095c                	addi	x15,x2,148
    153a:	0b92                	slli	x23,x23,0x4
                        bsg_cuda_print_stat_end(temp);
    153c:	0000                	unimp
    153e:	3709e50f          	0x3709e50f
                for(int i = 0; i <= iter; ++i){
    1542:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1544:	6400                	flw	f8,8(x8)
    1546:	1c00                	addi	x8,x2,560
                for(int i = 0; i <= iter; ++i){
    1548:	00000567          	jalr	x10,x0 # 0 <_start>
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    154c:	0949                	addi	x18,x18,18
    154e:	0000                	unimp
    1550:	491d                	li	x18,7
    1552:	0009                	c.nop	2
    1554:	1d00                	addi	x8,x2,688
    1556:	05f2                	slli	x11,x11,0x1c
    1558:	0000                	unimp
    155a:	f41d                	bnez	x8,1488 <kernel_matrix_multiply_int8+0x104>
        }
    155c:	0005                	c.nop	1
    155e:	1d00                	addi	x8,x2,688
    1560:	00000037          	lui	x0,0x0
    1564:	0300                	addi	x8,x2,384
    1566:	5404                	lw	x9,40(x8)
    1568:	0009                	c.nop	2
    156a:	1700                	addi	x8,x2,928
    156c:	0949                	addi	x18,x18,18
    156e:	0000                	unimp
    1570:	d51e                	sw	x7,168(x2)
    1572:	000e                	c.slli	x0,0x3
    1574:	2800                	fld	f8,16(x8)
    1576:	0f04                	addi	x9,x2,912
    1578:	0260                	addi	x8,x2,268
    157a:	fe08                	fsw	f10,56(x12)
    157c:	1f00000b          	0x1f00000b
    1580:	0ff0                	addi	x12,x2,988
    1582:	027f                	0x27f
    1584:	c405                	beqz	x8,15ac <kernel_matrix_multiply_float+0xc>
    1586:	000a                	c.slli	x0,0x2
    1588:	2000                	fld	f8,0(x8)
    158a:	0fd0                	addi	x12,x2,980
    158c:	0281                	addi	x5,x5,0
    158e:	8209                	srli	x12,x12,0x2
    1590:	000a                	c.slli	x0,0x2
    1592:	2100                	fld	f8,0(x10)
    1594:	000010af          	0x10af
    1598:	1802820f          	0x1802820f
    159c:	0058                	addi	x14,x2,4
    159e:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    15a0:	2100                	fld	f8,0(x10)
    15a2:	00000faf          	0xfaf
    15a6:	1202830f          	0x1202830f
    15aa:	05f4                	addi	x13,x2,716
    15ac:	0000                	unimp
    15ae:	2104                	fld	f9,0(x10)
    15b0:	10bc                	addi	x15,x2,104
    15b2:	0000                	unimp
    15b4:	1002840f          	0x1002840f
    15b8:	00000d17          	auipc	x26,0x0
    15bc:	2108                	fld	f10,0(x10)
    15be:	11b9                	addi	x3,x3,-18
    15c0:	0000                	unimp
    15c2:	1702850f          	0x1702850f
    15c6:	0682                	c.slli64	x13
    15c8:	0000                	unimp
    15ca:	2124                	fld	f9,64(x10)
    15cc:	00000f37          	lui	x30,0x0
    15d0:	0f02860f          	0xf02860f
    15d4:	00000037          	lui	x0,0x0
    15d8:	2148                	fld	f10,128(x10)
    15da:	0e70                	addi	x12,x2,796
    15dc:	0000                	unimp
    15de:	2c02870f          	0x2c02870f
    15e2:	0344                	addi	x9,x2,388
                float A_local[A_HEIGHT * A_WIDTH];
    15e4:	0000                	unimp
    15e6:	2150                	fld	f12,128(x10)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    15e8:	000011cf          	fnmadd.s	f3,f0,f0,f0,rtz
    15ec:	1a02880f          	0x1a02880f
    15f0:	0cce                	slli	x25,x25,0x13
    15f2:	0000                	unimp
    15f4:	2158                	fld	f14,128(x10)
    15f6:	0e8d                	addi	x29,x29,3
    15f8:	0000                	unimp
    15fa:	1602890f          	0x1602890f
    15fe:	05da                	slli	x11,x11,0x16
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1600:	0000                	unimp
    1602:	2168                	fld	f10,192(x10)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1604:	113e                	slli	x2,x2,0x2f
    1606:	0000                	unimp
    1608:	16028a0f          	0x16028a0f
                float B_local[A_WIDTH * B_WIDTH];
    160c:	05da                	slli	x11,x11,0x16
    160e:	0000                	unimp
                float A_local[A_HEIGHT * A_WIDTH];
    1610:	2170                	fld	f12,192(x10)
    1612:	0838                	addi	x14,x2,24
    1614:	0000                	unimp
    1616:	16028b0f          	0x16028b0f
    161a:	05da                	slli	x11,x11,0x16
    161c:	0000                	unimp
    161e:	2178                	fld	f14,192(x10)
    1620:	00001113          	slli	x2,x0,0x0
    1624:	10028c0f          	0x10028c0f
                for(int i = 0; i <= iter; ++i){
    1628:	00000d27          	0xd27
    162c:	2180                	fld	f8,0(x11)
    162e:	000007a3          	sb	x0,15(x0) # f <bsg_group_size+0xe>
    1632:	10028d0f          	0x10028d0f
                float C_local[A_HEIGHT * B_WIDTH];
    1636:	00000d37          	lui	x26,0x0
                float B_local[A_WIDTH * B_WIDTH];
    163a:	2188                	fld	f10,0(x11)
    163c:	1020                	addi	x8,x2,40
    163e:	0000                	unimp
    1640:	0f028e0f          	0xf028e0f
    1644:	00000037          	lui	x0,0x0
    1648:	21a0                	fld	f8,64(x11)
    164a:	0922                	slli	x18,x18,0x8
    164c:	0000                	unimp
    164e:	16028f0f          	0x16028f0f
    1652:	05da                	slli	x11,x11,0x16
                float C_local[A_HEIGHT * B_WIDTH];
    1654:	0000                	unimp
    1656:	21a4                	fld	f9,64(x11)
    1658:	0814                	addi	x13,x2,16
    165a:	0000                	unimp
    165c:	1602900f          	0x1602900f
    1660:	05da                	slli	x11,x11,0x16
    1662:	0000                	unimp
    1664:	21ac                	fld	f11,64(x11)
    1666:	0911                	addi	x18,x18,4
    1668:	0000                	unimp
    166a:	1602910f          	0x1602910f
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    166e:	05da                	slli	x11,x11,0x16
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1670:	0000                	unimp
    1672:	21b4                	fld	f13,64(x11)
    1674:	0794                	addi	x13,x2,960
    1676:	0000                	unimp
    1678:	1602920f          	0x1602920f
    167c:	05da                	slli	x11,x11,0x16
    167e:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1680:	21bc                	fld	f15,64(x11)
    1682:	0a61                	addi	x20,x20,24
    1684:	0000                	unimp
    1686:	1602930f          	0x1602930f
                float C_local[A_HEIGHT * B_WIDTH];
    168a:	05da                	slli	x11,x11,0x16
                int rc, temp = IGNORE_TAG;
    168c:	0000                	unimp
    168e:	21c4                	fld	f9,128(x11)
    1690:	0e28                	addi	x10,x2,792
    1692:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1694:	0802940f          	0x802940f
    1698:	00000037          	lui	x0,0x0
    169c:	00cc                	addi	x11,x2,68
    169e:	f020                	fsw	f8,96(x8)
    16a0:	09029a0f          	0x9029a0f
    16a4:	0aa9                	addi	x21,x21,10
    16a6:	0000                	unimp
                        temp = tag;
    16a8:	5321                	li	x6,-24
    16aa:	000c                	0xc
                        bsg_cuda_print_stat_start(temp);
    16ac:	0f00                	addi	x8,x2,912
    16ae:	029c                	addi	x15,x2,320
    16b0:	000d471b          	0xd471b
    16b4:	0000                	unimp
    16b6:	3e21                	jal	11ce <kernel_matrix_multiply_int16+0x6e>
    16b8:	000c                	0xc
    16ba:	0f00                	addi	x8,x2,912
    16bc:	029d                	addi	x5,x5,7
    16be:	5718                	lw	x14,40(x14)
    16c0:	000d                	c.nop	3
    16c2:	7800                	flw	f8,48(x8)
    16c4:	2200                	fld	f8,0(x12)
    16c6:	0ed5                	addi	x29,x29,21
    16c8:	0000                	unimp
    16ca:	0b02950f          	0xb02950f
    16ce:	096d                	addi	x18,x18,27
    16d0:	0000                	unimp
    16d2:	6c22                	flw	f24,8(x2)
    16d4:	0011                	c.nop	4
    16d6:	0f00                	addi	x8,x2,912
    16d8:	029e                	slli	x5,x5,0x7
    16da:	000a820b          	0xa820b
    16de:	0000                	unimp
    16e0:	2a21                	jal	17f8 <memcpy+0x34>
    16e2:	000e                	c.slli	x0,0x3
    16e4:	0f00                	addi	x8,x2,912
    16e6:	0262                	slli	x4,x4,0x18
    16e8:	00003707          	fld	f14,0(x0) # 0 <_start>
    16ec:	0000                	unimp
    16ee:	c421                	beqz	x8,1736 <kernel_matrix_multiply_float+0x196>
    16f0:	0008                	0x8
    16f2:	0f00                	addi	x8,x2,912
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    16f4:	c80b0267          	jalr	x4,-896(x22)
    16f8:	000c                	0xc
    16fa:	0400                	addi	x8,x2,512
    16fc:	7221                	lui	x4,0xfffe8
    16fe:	000a                	c.slli	x0,0x2
    1700:	0f00                	addi	x8,x2,912
    1702:	c8140267          	jalr	x4,-895(x8) # ac1 <bsg_printf+0x5f5>
    1706:	000c                	0xc
    1708:	0800                	addi	x8,x2,16
    170a:	2b21                	jal	1c22 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x246>
                for(int i = 0; i <= iter; ++i){
    170c:	000a                	c.slli	x0,0x2
    170e:	0f00                	addi	x8,x2,912
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1710:	c81e0267          	jalr	x4,-895(x28)
                        bsg_cuda_print_stat_end(temp);
    1714:	000c                	0xc
    1716:	0c00                	addi	x8,x2,528
    1718:	9a21                	andi	x12,x12,-24
    171a:	000e                	c.slli	x0,0x3
    171c:	0f00                	addi	x8,x2,912
    171e:	0269                	addi	x4,x4,26
    1720:	3708                	fld	f10,40(x14)
    1722:	0000                	unimp
    1724:	1000                	addi	x8,x2,32
    1726:	8821                	andi	x8,x8,8
    1728:	000c                	0xc
    172a:	0f00                	addi	x8,x2,912
    172c:	026a                	slli	x4,x4,0x1a
    172e:	6708                	flw	f10,8(x14)
    1730:	000d                	c.nop	3
    1732:	1400                	addi	x8,x2,544
    1734:	bc21                	j	114c <_tls_data+0x10c>
    1736:	000e                	c.slli	x0,0x3
    1738:	0f00                	addi	x8,x2,912
    173a:	026d                	addi	x4,x4,27
    173c:	00003707          	fld	f14,0(x0) # 0 <_start>
    1740:	3000                	fld	f8,32(x8)
    1742:	f621                	bnez	x12,168a <kernel_matrix_multiply_float+0xea>
    1744:	0011                	c.nop	4
    1746:	0f00                	addi	x8,x2,912
    1748:	026e                	slli	x4,x4,0x1b
    174a:	7c16                	flw	f24,100(x2)
    174c:	000d                	c.nop	3
    174e:	3400                	fld	f8,40(x8)
    1750:	ac21                	j	1968 <__load_argument+0x3c>
    1752:	000c                	0xc
    1754:	0f00                	addi	x8,x2,912
    1756:	0270                	addi	x12,x2,268
                for(int i = 0; i <= iter; ++i){
    1758:	00003707          	fld	f14,0(x0) # 0 <_start>
                        bsg_cuda_print_stat_end(temp);
    175c:	3800                	fld	f8,48(x8)
    175e:	b221                	j	1066 <_tls_data+0x26>
    1760:	000e                	c.slli	x0,0x3
    1762:	0f00                	addi	x8,x2,912
                for(int i = 0; i <= iter; ++i){
    1764:	0272                	slli	x4,x4,0x1c
    1766:	8d0a                	mv	x26,x2
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1768:	000d                	c.nop	3
    176a:	3c00                	fld	f8,56(x8)
                for(int i = 0; i <= iter; ++i){
    176c:	1721                	addi	x14,x14,-24
    176e:	0f00000b          	0xf00000b
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1772:	0275                	addi	x4,x4,29
    1774:	00066c13          	ori	x24,x12,0
    1778:	4000                	lw	x8,0(x8)
    177a:	3b21                	jal	1492 <kernel_matrix_multiply_int8+0x10e>
    177c:	000a                	c.slli	x0,0x2
    177e:	0f00                	addi	x8,x2,912
        }
    1780:	0276                	slli	x4,x4,0x1d
    1782:	00003707          	fld	f14,0(x0) # 0 <_start>
    1786:	4400                	lw	x8,8(x8)
    1788:	f121                	bnez	x10,16c8 <kernel_matrix_multiply_float+0x128>
    178a:	0011                	c.nop	4
    178c:	0f00                	addi	x8,x2,912
    178e:	6c130277          	0x6c130277
    1792:	0006                	c.slli	x0,0x1
    1794:	4800                	lw	x8,16(x8)
    1796:	2921                	jal	1bae <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x1d2>
    1798:	000d                	c.nop	3
    179a:	0f00                	addi	x8,x2,912
    179c:	0278                	addi	x14,x2,268
    179e:	9314                	0x9314
    17a0:	000d                	c.nop	3
    17a2:	4c00                	lw	x8,24(x8)
    17a4:	8b21                	andi	x14,x14,8
    17a6:	000a                	c.slli	x0,0x2
    17a8:	0f00                	addi	x8,x2,912
    17aa:	3707027b          	0x3707027b
    17ae:	0000                	unimp
    17b0:	5000                	lw	x8,32(x8)
    17b2:	0121                	addi	x2,x2,8
    17b4:	0009                	c.nop	2
    17b6:	0f00                	addi	x8,x2,912
    17b8:	027c                	addi	x15,x2,268
    17ba:	f409                	bnez	x8,16c4 <kernel_matrix_multiply_float+0x124>
    17bc:	0005                	c.nop	1
    17be:	5400                	lw	x8,40(x8)
    17c0:	0721                	addi	x14,x14,8
    17c2:	000e                	c.slli	x0,0x3
    17c4:	0f00                	addi	x8,x2,912
    17c6:	029f 6307 0009      	0x96307029f
    17cc:	5800                	lw	x8,48(x8)
    17ce:	000ca423          	sw	x0,8(x25) # 8 <bsg_group_size+0x7>
    17d2:	0f00                	addi	x8,x2,912
    17d4:	9d1302a3          	sb	x17,-1595(x6) # fffdf9c5 <_end+0x7efdf96d>
    17d8:	48000007          	0x48000007
    17dc:	2301                	jal	1cdc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x60>
    17de:	0aed                	addi	x21,x21,27
    17e0:	0000                	unimp
    17e2:	1202a40f          	0x1202a40f
    17e6:	075a                	slli	x14,x14,0x16
    17e8:	0000                	unimp
    17ea:	014c                	addi	x11,x2,132
    17ec:	000add23          	0xadd23
    17f0:	0f00                	addi	x8,x2,912
    17f2:	02a8                	addi	x10,x2,328
    17f4:	a40c                	fsd	f11,8(x8)
    17f6:	000d                	c.nop	3
    17f8:	dc00                	sw	x8,56(x8)
    17fa:	2302                	fld	f6,0(x2)
    17fc:	0898                	addi	x14,x2,80
    17fe:	0000                	unimp
    1800:	1002ad0f          	0x1002ad0f
    1804:	0c89                	addi	x25,x25,2
    1806:	0000                	unimp
    1808:	02e0                	addi	x8,x2,332
    180a:	00086823          	0x86823
    180e:	0f00                	addi	x8,x2,912
    1810:	b00a02af          	0xb00a02af
    1814:	000d                	c.nop	3
    1816:	ec00                	fsw	f8,24(x8)
    1818:	0002                	c.slli64	x0
    181a:	092b0403          	lb	x8,146(x22)
    181e:	0000                	unimp
    1820:	671c                	flw	f15,8(x14)
    1822:	0005                	c.nop	1
    1824:	2200                	fld	f8,0(x12)
    1826:	000c                	0xc
    1828:	1d00                	addi	x8,x2,688
    182a:	0949                	addi	x18,x18,18
    182c:	0000                	unimp
    182e:	f21d                	bnez	x12,1754 <kernel_matrix_multiply_float+0x1b4>
    1830:	0005                	c.nop	1
    1832:	1d00                	addi	x8,x2,688
    1834:	0c22                	slli	x24,x24,0x8
    1836:	0000                	unimp
    1838:	371d                	jal	175e <kernel_matrix_multiply_float+0x1be>
    183a:	0000                	unimp
    183c:	0000                	unimp
    183e:	06010403          	lb	x8,96(x2)
    1842:	0000                	unimp
    1844:	0c040403          	lb	x8,192(x8)
    1848:	0000                	unimp
    184a:	5b1c                	lw	x15,48(x14)
    184c:	0005                	c.nop	1
    184e:	4c00                	lw	x8,24(x8)
    1850:	000c                	0xc
    1852:	1d00                	addi	x8,x2,688
    1854:	0949                	addi	x18,x18,18
    1856:	0000                	unimp
    1858:	f21d                	bnez	x12,177e <kernel_matrix_multiply_float+0x1de>
    185a:	0005                	c.nop	1
    185c:	1d00                	addi	x8,x2,688
    185e:	0000055b          	0x55b
    1862:	371d                	jal	1788 <kernel_matrix_multiply_float+0x1e8>
    1864:	0000                	unimp
    1866:	0000                	unimp
    1868:	0c2e0403          	lb	x8,194(x28)
    186c:	0000                	unimp
    186e:	371c                	fld	f15,40(x14)
    1870:	0000                	unimp
    1872:	6600                	flw	f8,8(x12)
    1874:	000c                	0xc
    1876:	1d00                	addi	x8,x2,688
    1878:	0949                	addi	x18,x18,18
    187a:	0000                	unimp
    187c:	f21d                	bnez	x12,17a2 <kernel_matrix_multiply_float+0x202>
    187e:	0005                	c.nop	1
    1880:	0000                	unimp
    1882:	0c520403          	lb	x8,197(x4) # fffe80c5 <_end+0x7efe806d>
    1886:	0000                	unimp
    1888:	4a0a                	lw	x20,128(x2)
    188a:	0000                	unimp
    188c:	7c00                	flw	f8,56(x8)
    188e:	000c                	0xc
    1890:	0b00                	addi	x8,x2,400
    1892:	0058                	addi	x14,x2,4
    1894:	0000                	unimp
    1896:	0002                	c.slli64	x0
    1898:	4812                	lw	x16,4(x2)
    189a:	000e                	c.slli	x0,0x3
    189c:	0f00                	addi	x8,x2,912
    189e:	011f e81a 0007      	0x7e81a011f
    18a4:	2400                	fld	f8,8(x8)
    18a6:	00000ae7          	jalr	x21,x0 # 0 <_start>
    18aa:	0f0c                	addi	x11,x2,912
    18ac:	c2080123          	sb	x0,-990(x16) # 5d70 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x3b7c>
    18b0:	000c                	0xc
    18b2:	2100                	fld	f8,0(x10)
    18b4:	0e75                	addi	x28,x28,29
    18b6:	0000                	unimp
    18b8:	1101250f          	0x1101250f
    18bc:	0cc2                	slli	x25,x25,0x10
    18be:	0000                	unimp
    18c0:	2100                	fld	f8,0(x10)
    18c2:	0ace                	slli	x21,x21,0x13
    18c4:	0000                	unimp
    18c6:	0701260f          	0x701260f
    18ca:	00000037          	lui	x0,0x0
    18ce:	2104                	fld	f9,0(x10)
    18d0:	0e42                	slli	x28,x28,0x10
    18d2:	0000                	unimp
    18d4:	0b01270f          	0xb01270f
    18d8:	0cc8                	addi	x10,x2,596
    18da:	0000                	unimp
    18dc:	0008                	0x8
    18de:	0c890403          	lb	x8,200(x18)
        __wait_until_valid_func();
    18e2:	0000                	unimp
    18e4:	0c7c0403          	lb	x8,199(x24)
    18e8:	0000                	unimp
    18ea:	dc24                	sw	x9,120(x8)
    18ec:	000e                	c.slli	x0,0x3
    18ee:	0e00                	addi	x8,x2,784
    18f0:	08013f0f          	0x8013f0f
    18f4:	00000d07          	0xd07
    18f8:	e421                	bnez	x8,1940 <__load_argument+0x14>
    18fa:	000e                	c.slli	x0,0x3
    18fc:	0f00                	addi	x8,x2,912
    18fe:	0140                	addi	x8,x2,132
    1900:	0712                	slli	x14,x14,0x4
    1902:	000d                	c.nop	3
    1904:	0000                	unimp
    1906:	9d21                	0x9d21
    1908:	0f00000f          	fence	iorw,unknown
    190c:	0141                	addi	x2,x2,16
    190e:	0712                	slli	x14,x14,0x4
    1910:	000d                	c.nop	3
    1912:	0600                	addi	x8,x2,768
    1914:	f821                	bnez	x8,1864 <_gp+0x64>
    1916:	0f00000f          	fence	iorw,unknown
    191a:	0142                	slli	x2,x2,0x10
    191c:	5112                	lw	x2,36(x2)
    191e:	0000                	unimp
    1920:	0c00                	addi	x8,x2,528
    1922:	0a00                	addi	x8,x2,272
    1924:	0051                	c.nop	20
    1926:	0000                	unimp
    1928:	00000d17          	auipc	x26,0x0
    192c:	0000580b          	0x580b
    1930:	0200                	addi	x8,x2,256
    1932:	0a00                	addi	x8,x2,272
    1934:	05fa                	slli	x11,x11,0x1e
    1936:	0000                	unimp
    1938:	00000d27          	0xd27
    193c:	0000580b          	0x580b
    1940:	1900                	addi	x8,x2,176
    1942:	0a00                	addi	x8,x2,272
    1944:	05fa                	slli	x11,x11,0x1e
    1946:	0000                	unimp
    1948:	00000d37          	lui	x26,0x0
    194c:	0000580b          	0x580b
    1950:	0700                	addi	x8,x2,896
    1952:	0a00                	addi	x8,x2,272
    1954:	05fa                	slli	x11,x11,0x1e
    1956:	0000                	unimp
    1958:	00000d47          	fmsub.s	f26,f0,f0,f0,rne
    195c:	0000580b          	0x580b
    1960:	1700                	addi	x8,x2,928
    1962:	0a00                	addi	x8,x2,272
    1964:	07e2                	slli	x15,x15,0x18
    1966:	0000                	unimp
    1968:	00000d57          	0xd57
    196c:	0000580b          	0x580b
    1970:	1d00                	addi	x8,x2,688
    1972:	0a00                	addi	x8,x2,272
    1974:	0058                	addi	x14,x2,4
    1976:	0000                	unimp
    1978:	00000d67          	jalr	x26,x0 # 0 <_start>
    197c:	0000580b          	0x580b
    1980:	1d00                	addi	x8,x2,688
    1982:	0a00                	addi	x8,x2,272
    1984:	05fa                	slli	x11,x11,0x1e
    1986:	0000                	unimp
    1988:	00000d77          	0xd77
    198c:	0000580b          	0x580b
    1990:	1800                	addi	x8,x2,48
    1992:	2500                	fld	f8,8(x10)
    1994:	0800                	addi	x8,x2,16
    1996:	0000                	unimp
    1998:	0d770403          	lb	x8,215(x14) # 4261 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x206d>
    199c:	0000                	unimp
    199e:	8d26                	mv	x26,x9
    19a0:	000d                	c.nop	3
    19a2:	1d00                	addi	x8,x2,688
    19a4:	0949                	addi	x18,x18,18
    19a6:	0000                	unimp
    19a8:	0300                	addi	x8,x2,384
    19aa:	8204                	0x8204
    19ac:	000d                	c.nop	3
    19ae:	0300                	addi	x8,x2,384
  if (__bsg_id == 0) 
    19b0:	6c04                	flw	f9,24(x8)
    19b2:	0006                	c.slli	x0,0x1
    19b4:	2600                	fld	f8,8(x12)
    19b6:	0da4                	addi	x9,x2,728
    19b8:	0000                	unimp
    19ba:	371d                	jal	18e0 <main>
     *signal_ptr = cuda_finish_signal_val;     
    19bc:	0000                	unimp
    19be:	0000                	unimp
    19c0:	0daa0403          	lb	x8,218(x20)
    19c4:	0000                	unimp
    19c6:	0d990403          	lb	x8,217(x18)
    19ca:	0000                	unimp
    19cc:	7c0a                	flw	f24,160(x2)
    19ce:	000c                	0xc
    19d0:	c000                	sw	x8,0(x8)
    19d2:	000d                	c.nop	3
}
    19d4:	0b00                	addi	x8,x2,400
    19d6:	0058                	addi	x14,x2,4
    19d8:	0000                	unimp
    19da:	0002                	c.slli64	x0
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19dc:	00109b27          	0x109b27
    19e0:	0f00                	addi	x8,x2,912
    19e2:	032e                	slli	x6,x6,0xb
    19e4:	00094917          	auipc	x18,0x94
        uint32_t incr = A_WIDTH * (F-1);
    19e8:	2700                	fld	f8,8(x14)
    19ea:	1094                	addi	x13,x2,96
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19ec:	0000                	unimp
    19ee:	1d032f0f          	0x1d032f0f
        uint32_t incr = A_WIDTH * (F-1);
    19f2:	0000094f          	fnmadd.s	f18,f0,f0,f0,rne
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19f6:	9c28                	0x9c28
    19f8:	000c                	0xc
    19fa:	1000                	addi	x8,x2,32
    19fc:	0625                	addi	x12,x12,9
    19fe:	00000037          	lui	x0,0x0
    1a02:	0df5                	addi	x27,x27,29
    1a04:	0000                	unimp
    1a06:	221d                	jal	1b2c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x150>
    1a08:	000c                	0xc
    1a0a:	1d00                	addi	x8,x2,688
    1a0c:	0c22                	slli	x24,x24,0x8
    1a0e:	0000                	unimp
    1a10:	2800                	fld	f8,16(x8)
    1a12:	08a5                	addi	x17,x17,9
    1a14:	0000                	unimp
    1a16:	2810                	fld	f12,16(x8)
    1a18:	f408                	fsw	f10,40(x8)
    1a1a:	0005                	c.nop	1
    1a1c:	0b00                	addi	x8,x2,400
    1a1e:	000e                	c.slli	x0,0x3
    1a20:	1d00                	addi	x8,x2,688
    1a22:	00000037          	lui	x0,0x0
    1a26:	2800                	fld	f8,16(x8)
    1a28:	08ae                	slli	x17,x17,0xb
    1a2a:	0000                	unimp
    1a2c:	3210                	fld	f12,32(x12)
    1a2e:	f408                	fsw	f10,40(x8)
        uint32_t incr = A_WIDTH * (F-1);
    1a30:	0005                	c.nop	1
    1a32:	2600                	fld	f8,8(x12)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1a34:	000e                	c.slli	x0,0x3
    1a36:	1d00                	addi	x8,x2,688
    1a38:	05f4                	addi	x13,x2,716
    1a3a:	0000                	unimp
    1a3c:	221d                	jal	1b62 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x186>
    1a3e:	000c                	0xc
    1a40:	0000                	unimp
    1a42:	a628                	fsd	f10,72(x12)
    1a44:	0011                	c.nop	4
    1a46:	1000                	addi	x8,x2,32
    1a48:	0934                	addi	x13,x2,152
    1a4a:	0000052b          	0x52b
    1a4e:	0e46                	slli	x28,x28,0x11
    1a50:	0000                	unimp
    1a52:	f41d                	bnez	x8,1980 <__load_stack+0x14>
    1a54:	0005                	c.nop	1
    1a56:	1d00                	addi	x8,x2,688
    1a58:	0c22                	slli	x24,x24,0x8
    1a5a:	0000                	unimp
    1a5c:	2b1d                	jal	1f92 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EaaaEiPT0_PT1_PT2_mmm+0x3e>
    1a5e:	0005                	c.nop	1
    1a60:	0000                	unimp
    1a62:	8729                	srai	x14,x14,0xa
    1a64:	0009                	c.nop	2
    1a66:	0300                	addi	x8,x2,384
    1a68:	12502087          	flw	f1,293(x0) # 125 <bsg_group_size+0x124>
    1a6c:	0000                	unimp
    1a6e:	00000037          	lui	x0,0x0
    1a72:	21f4                	fld	f13,192(x11)
    1a74:	0000                	unimp
    1a76:	023c                	addi	x15,x2,264
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1a78:	0000                	unimp
    1a7a:	9c01                	0x9c01
    1a7c:	0fc9                	addi	x31,x31,18
    1a7e:	0000                	unimp
    1a80:	462a                	lw	x12,136(x2)
    1a82:	5800                	lw	x8,48(x8)
    1a84:	0000                	unimp
    1a86:	0800                	addi	x8,x2,16
    1a88:	0041542b          	0x41542b
    1a8c:	00000043          	fmadd.s	f0,f0,f0,f0,rne
    1a90:	0042542b          	0x42542b
    1a94:	00000043          	fmadd.s	f0,f0,f0,f0,rne
    1a98:	0043542b          	0x43542b
    1a9c:	00000043          	fmadd.s	f0,f0,f0,f0,rne
    1aa0:	412c                	lw	x11,64(x10)
    1aa2:	0300                	addi	x8,x2,384
    1aa4:	1b88                	addi	x10,x2,496
    1aa6:	0fc9                	addi	x31,x31,18
    1aa8:	0000                	unimp
    1aaa:	000013f7          	0x13f7
    1aae:	422c                	lw	x11,64(x12)
    1ab0:	0054                	addi	x13,x2,4
    1ab2:	c9228803          	lb	x16,-878(x5)
    1ab6:	1800000f          	0x1800000f
                boff = 0;
    1aba:	0014                	0x14
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1abc:	2c00                	fld	f8,24(x8)
    1abe:	88030043          	fmadd.s	f0,f6,f0,f17,rne
    1ac2:	c92a                	sw	x10,144(x2)
    1ac4:	4f00000f          	0x4f00000f
    1ac8:	0014                	0x14
    1aca:	2d00                	fld	f8,24(x10)
    1acc:	0b09                	addi	x22,x22,2
    1ace:	0000                	unimp
                        TC sum[F] = {{init}};
    1ad0:	17208903          	lb	x18,370(x1)
    1ad4:	0004                	0x4
    1ad6:	8600                	0x8600
    1ad8:	0014                	0x14
    1ada:	2d00                	fld	f8,24(x10)
    1adc:	123e                	slli	x4,x4,0x2f
    1ade:	0000                	unimp
    1ae0:	17338903          	lb	x18,371(x7)
    1ae4:	0004                	0x4
    1ae6:	bd00                	fsd	f8,56(x10)
    1ae8:	0014                	0x14
    1aea:	2d00                	fld	f8,24(x10)
    1aec:	0880                	addi	x8,x2,80
    1aee:	0000                	unimp
    1af0:	17208a03          	lb	x20,370(x1)
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1af4:	0004                	0x4
    1af6:	f400                	fsw	f8,40(x8)
                        TC sum[F] = {{init}};
    1af8:	0014                	0x14
    1afa:	2e00                	fld	f8,24(x12)
    1afc:	0cb2                	slli	x25,x25,0xc
    1afe:	0000                	unimp
    1b00:	43158b03          	lb	x22,1073(x11)
    1b04:	0000                	unimp
    1b06:	0400                	addi	x8,x2,512
    1b08:	0000                	unimp
    1b0a:	0000                	unimp
    1b0c:	000b122f          	0xb122f
    1b10:	0300                	addi	x8,x2,384
    1b12:	128c                	addi	x11,x2,352
                                        sum[f] += A[aoff] * BT[bofff];
    1b14:	00000417          	auipc	x8,0x0
    1b18:	0000152b          	0x152b
    1b1c:	2830                	fld	f12,80(x8)
    1b1e:	0005                	c.nop	1
    1b20:	3100                	fld	f8,32(x10)
    1b22:	0079                	c.nop	30
    1b24:	17178d03          	lb	x26,369(x15)
    1b28:	0004                	0x4
    1b2a:	5d00                	lw	x8,56(x10)
    1b2c:	0015                	c.nop	5
    1b2e:	2f00                	fld	f8,24(x14)
    1b30:	0e01                	addi	x28,x28,0
    1b32:	0000                	unimp
    1b34:	171e8d03          	lb	x26,369(x29) # fffef171 <_end+0x7efef119>
    1b38:	0004                	0x4
    1b3a:	8700                	0x8700
    1b3c:	0015                	c.nop	5
    1b3e:	2f00                	fld	f8,24(x14)
    1b40:	08fc                	addi	x15,x2,92
    1b42:	0000                	unimp
    1b44:	17298d03          	lb	x26,370(x19)
    1b48:	0004                	0x4
    1b4a:	b600                	fsd	f8,40(x12)
    1b4c:	0015                	c.nop	5
    1b4e:	2f00                	fld	f8,24(x14)
    1b50:	00000833          	add	x16,x0,x0
    1b54:	17338d03          	lb	x26,371(x7)
    1b58:	0004                	0x4
    1b5a:	eb00                	fsw	f8,16(x14)
    1b5c:	0015                	c.nop	5
    1b5e:	3000                	fld	f8,32(x8)
    1b60:	0540                	addi	x8,x2,644
    1b62:	0000                	unimp
    1b64:	7831                	lui	x16,0xfffec
    1b66:	0300                	addi	x8,x2,384
    1b68:	04171f8f          	0x4171f8f
    1b6c:	0000                	unimp
    1b6e:	1615                	addi	x12,x12,-27
    1b70:	0000                	unimp
    1b72:	6030                	flw	f12,64(x8)
    1b74:	0005                	c.nop	1
    1b76:	2f00                	fld	f8,24(x14)
    1b78:	00000667          	jalr	x12,x0 # 0 <_start>
    1b7c:	17229003          	lh	x0,370(x5)
    1b80:	0004                	0x4
    1b82:	2900                	fld	f8,16(x10)
    1b84:	0016                	c.slli	x0,0x5
    1b86:	3100                	fld	f8,32(x10)
    1b88:	006d7573          	csrrci	x10,0x6,26
    1b8c:	cf1c9103          	lh	x2,-783(x25)
    1b90:	4900000f          	0x4900000f
    1b94:	0016                	c.slli	x0,0x5
    1b96:	3200                	fld	f8,32(x12)
    1b98:	0578                	addi	x14,x2,652
    1b9a:	0000                	unimp
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1b9c:	0fad                	addi	x31,x31,11
    1b9e:	0000                	unimp
    1ba0:	000aa92f          	amoadd.w	x18,x0,(x21)
                        boff += incr;
    1ba4:	0300                	addi	x8,x2,384
    1ba6:	2792                	fld	f15,256(x2)
                                C[coff + f] = sum[f];
    1ba8:	00000417          	auipc	x8,0x0
    1bac:	1889                	addi	x17,x17,-30
    1bae:	0000                	unimp
                        boff += incr;
    1bb0:	0022f833          	and	x16,x5,x2
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1bb4:	7c00                	flw	f8,56(x8)
    1bb6:	0000                	unimp
                                C[coff + f] = sum[f];
    1bb8:	3100                	fld	f8,32(x10)
    1bba:	0066                	c.slli	x0,0x19
    1bbc:	172f9503          	lh	x10,370(x31)
    1bc0:	0004                	0x4
    1bc2:	a700                	fsd	f8,8(x14)
    1bc4:	0018                	0x18
    1bc6:	0000                	unimp
    1bc8:	3300                	fld	f8,32(x14)
    1bca:	2388                	fld	f10,0(x15)
    1bcc:	0000                	unimp
    1bce:	0024                	addi	x9,x2,8
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1bd0:	0000                	unimp
    1bd2:	6631                	lui	x12,0xc
    1bd4:	0300                	addi	x8,x2,384
    1bd6:	0417279b          	0x417279b
    1bda:	0000                	unimp
    1bdc:	0000191b          	0x191b
    1be0:	0000                	unimp
    1be2:	0000                	unimp
    1be4:	0300                	addi	x8,x2,384
    1be6:	4304                	lw	x9,0(x14)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1be8:	0000                	unimp
    1bea:	0a00                	addi	x8,x2,272
    1bec:	00000043          	fmadd.s	f0,f0,f0,f0,rne
    1bf0:	0fdf 0000 580b      	0x580b00000fdf
    1bf6:	0000                	unimp
    1bf8:	0700                	addi	x8,x2,896
    1bfa:	2900                	fld	f8,16(x10)
    1bfc:	102d                	c.nop	-21
    1bfe:	0000                	unimp
    1c00:	33208703          	lb	x14,818(x1)
    1c04:	3700000b          	0x3700000b
    1c08:	0000                	unimp
    1c0a:	5400                	lw	x8,40(x8)
    1c0c:	001f a000 0002      	0x2a000001f
    1c12:	0100                	addi	x8,x2,128
    1c14:	5a9c                	lw	x15,48(x13)
    1c16:	0011                	c.nop	4
    1c18:	2a00                	fld	f8,16(x12)
    1c1a:	0046                	c.slli	x0,0x11
}
    1c1c:	0058                	addi	x14,x2,4
    1c1e:	0000                	unimp
    1c20:	2b08                	fld	f10,16(x14)
    1c22:	4154                	lw	x13,4(x10)
    1c24:	cd00                	sw	x8,24(x10)
    1c26:	0002                	c.slli64	x0
    1c28:	2b00                	fld	f8,16(x14)
    1c2a:	4254                	lw	x13,4(x12)
    1c2c:	cd00                	sw	x8,24(x10)
    1c2e:	0002                	c.slli64	x0
    1c30:	2b00                	fld	f8,16(x14)
    1c32:	4354                	lw	x13,4(x14)
    1c34:	cd00                	sw	x8,24(x10)
    1c36:	0002                	c.slli64	x0
    1c38:	2c00                	fld	f8,24(x8)
    1c3a:	0041                	c.nop	16
    1c3c:	5a1b8803          	lb	x16,1441(x23)
    1c40:	0011                	c.nop	4
    1c42:	8f00                	0x8f00
    1c44:	0019                	c.nop	6
    1c46:	2c00                	fld	f8,24(x8)
    1c48:	5442                	lw	x8,48(x2)
    1c4a:	0300                	addi	x8,x2,384
    1c4c:	2288                	fld	f10,0(x13)
    1c4e:	115a                	slli	x2,x2,0x36
    1c50:	0000                	unimp
    1c52:	19b0                	addi	x12,x2,248
    1c54:	0000                	unimp
    1c56:	432c                	lw	x11,64(x14)
                        TC sum[F] = {{init}};
    1c58:	0300                	addi	x8,x2,384
    1c5a:	2a88                	fld	f10,16(x13)
    1c5c:	115a                	slli	x2,x2,0x36
    1c5e:	0000                	unimp
    1c60:	19ea                	slli	x19,x19,0x3a
    1c62:	0000                	unimp
    1c64:	092d                	addi	x18,x18,11
    1c66:	0300000b          	0x300000b
    1c6a:	2089                	jal	1cac <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x30>
    1c6c:	00000417          	auipc	x8,0x0
    1c70:	1a21                	addi	x20,x20,-24
    1c72:	0000                	unimp
    1c74:	3e2d                	jal	17ae <kernel_matrix_multiply_float+0x20e>
    1c76:	0012                	c.slli	x0,0x4
    1c78:	0300                	addi	x8,x2,384
    1c7a:	3389                	jal	19bc <__kernel_return+0x18>
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c7c:	00000417          	auipc	x8,0x0
        uint32_t incr = A_WIDTH * (F-1);
    1c80:	1a58                	addi	x14,x2,308
    1c82:	0000                	unimp
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c84:	802d                	srli	x8,x8,0xb
    1c86:	0008                	0x8
        uint32_t incr = A_WIDTH * (F-1);
    1c88:	0300                	addi	x8,x2,384
    1c8a:	208a                	fld	f1,128(x2)
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c8c:	00000417          	auipc	x8,0x0
    1c90:	1a76                	slli	x20,x20,0x3d
    1c92:	0000                	unimp
    1c94:	b234                	fsd	f13,96(x12)
    1c96:	000c                	0xc
    1c98:	0300                	addi	x8,x2,384
    1c9a:	02cd158b          	0x2cd158b
    1c9e:	0000                	unimp
    1ca0:	2f00                	fld	f8,24(x14)
    1ca2:	0b12                	slli	x22,x22,0x4
    1ca4:	0000                	unimp
    1ca6:	17128c03          	lb	x24,369(x5)
    1caa:	0004                	0x4
    1cac:	b000                	fsd	f8,32(x8)
    1cae:	001a                	c.slli	x0,0x6
    1cb0:	3000                	fld	f8,32(x8)
    1cb2:	0400                	addi	x8,x2,512
    1cb4:	0000                	unimp
    1cb6:	7931                	lui	x18,0xfffec
    1cb8:	0300                	addi	x8,x2,384
    1cba:	178d                	addi	x15,x15,-29
    1cbc:	00000417          	auipc	x8,0x0
    1cc0:	1aea                	slli	x21,x21,0x3a
    1cc2:	0000                	unimp
    1cc4:	000e012f          	0xe012f
    1cc8:	0300                	addi	x8,x2,384
    1cca:	1e8d                	addi	x29,x29,-29
        uint32_t incr = A_WIDTH * (F-1);
    1ccc:	00000417          	auipc	x8,0x0
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1cd0:	1b21                	addi	x22,x22,-24
    1cd2:	0000                	unimp
    1cd4:	0008fc2f          	0x8fc2f
    1cd8:	0300                	addi	x8,x2,384
    1cda:	298d                	jal	214c <_bsg_elf_stack_ptr+0x150>
    1cdc:	00000417          	auipc	x8,0x0
    1ce0:	1b54                	addi	x13,x2,436
    1ce2:	0000                	unimp
    1ce4:	0008332f          	0x8332f
    1ce8:	0300                	addi	x8,x2,384
    1cea:	338d                	jal	1a4c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x70>
    1cec:	00000417          	auipc	x8,0x0
    1cf0:	1b68                	addi	x10,x2,444
    1cf2:	0000                	unimp
    1cf4:	1830                	addi	x12,x2,56
    1cf6:	0004                	0x4
    1cf8:	3100                	fld	f8,32(x10)
    1cfa:	0078                	addi	x14,x2,12
    1cfc:	171f8f03          	lb	x30,369(x31)
    1d00:	0004                	0x4
    1d02:	7c00                	flw	f8,56(x8)
    1d04:	3000001b          	0x3000001b
    1d08:	0438                	addi	x14,x2,520
    1d0a:	0000                	unimp
    1d0c:	0006672f          	0x6672f
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1d10:	0300                	addi	x8,x2,384
    1d12:	2290                	fld	f12,0(x13)
    1d14:	00000417          	auipc	x8,0x0
    1d18:	1b90                	addi	x12,x2,496
    1d1a:	0000                	unimp
    1d1c:	7331                	lui	x6,0xfffec
    1d1e:	6d75                	lui	x26,0x1d
    1d20:	0300                	addi	x8,x2,384
    1d22:	1c91                	addi	x25,x25,-28
    1d24:	1160                	addi	x8,x2,172
    1d26:	0000                	unimp
    1d28:	1bb0                	addi	x12,x2,504
    1d2a:	0000                	unimp
    1d2c:	6032                	flw	f0,12(x2)
    1d2e:	0004                	0x4
    1d30:	4200                	lw	x8,0(x12)
    1d32:	0011                	c.nop	4
    1d34:	2f00                	fld	f8,24(x14)
    1d36:	0aa9                	addi	x21,x21,10
    1d38:	0000                	unimp
    1d3a:	17279203          	lh	x4,370(x15)
    1d3e:	0004                	0x4
    1d40:	6800                	flw	f8,16(x8)
    1d42:	001e                	c.slli	x0,0x7
    1d44:	3300                	fld	f8,32(x14)
    1d46:	2054                	fld	f13,128(x8)
    1d48:	0000                	unimp
    1d4a:	00c8                	addi	x10,x2,68
    1d4c:	0000                	unimp
    1d4e:	6631                	lui	x12,0xc
                boff = 0;
    1d50:	0300                	addi	x8,x2,384
    1d52:	2f95                	jal	24c6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x2d2>
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1d54:	00000417          	auipc	x8,0x0
    1d58:	00001eab          	0x1eab
    1d5c:	0000                	unimp
    1d5e:	7830                	flw	f12,112(x8)
    1d60:	0004                	0x4
    1d62:	3100                	fld	f8,32(x10)
    1d64:	0066                	c.slli	x0,0x19
    1d66:	17279b03          	lh	x22,370(x15)
                        TC sum[F] = {{init}};
    1d6a:	0004                	0x4
    1d6c:	1f00                	addi	x8,x2,944
    1d6e:	001f 0000 0000      	0x1f
    1d74:	0000                	unimp
    1d76:	02cd0403          	lb	x8,44(x26) # 1d02c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1ae38>
    1d7a:	0000                	unimp
    1d7c:	cd0a                	sw	x2,152(x2)
    1d7e:	0002                	c.slli64	x0
    1d80:	7000                	flw	f8,32(x8)
    1d82:	0011                	c.nop	4
    1d84:	0b00                	addi	x8,x2,400
    1d86:	0058                	addi	x14,x2,4
    1d88:	0000                	unimp
    1d8a:	30290007          	0x30290007
    1d8e:	0009                	c.nop	2
    1d90:	0300                	addi	x8,x2,384
    1d92:	0cce2087          	flw	f1,204(x28)
    1d96:	0000                	unimp
    1d98:	00000037          	lui	x0,0x0
    1d9c:	1c7c                	addi	x15,x2,572
    1d9e:	0000                	unimp
    1da0:	02d8                	addi	x14,x2,324
    1da2:	0000                	unimp
    1da4:	9c01                	0x9c01
    1da6:	000012eb          	0x12eb
    1daa:	462a                	lw	x12,136(x2)
                                        sum[f] += A[aoff] * BT[bofff];
    1dac:	5800                	lw	x8,48(x8)
    1dae:	0000                	unimp
    1db0:	0800                	addi	x8,x2,16
    1db2:	0041542b          	0x41542b
    1db6:	02ec                	addi	x11,x2,332
    1db8:	0000                	unimp
    1dba:	0042542b          	0x42542b
    1dbe:	02ec                	addi	x11,x2,332
    1dc0:	0000                	unimp
    1dc2:	0043542b          	0x43542b
    1dc6:	02ec                	addi	x11,x2,332
    1dc8:	0000                	unimp
    1dca:	412c                	lw	x11,64(x10)
    1dcc:	0300                	addi	x8,x2,384
    1dce:	1b88                	addi	x10,x2,496
    1dd0:	000012eb          	0x12eb
    1dd4:	00001f93          	slli	x31,x0,0x0
    1dd8:	422c                	lw	x11,64(x12)
    1dda:	0054                	addi	x13,x2,4
    1ddc:	eb228803          	lb	x16,-334(x5)
    1de0:	0012                	c.slli	x0,0x4
    1de2:	b400                	fsd	f8,40(x8)
    1de4:	001f 2c00 0043      	0x432c00001f
    1dea:	eb2a8803          	lb	x16,-334(x21)
    1dee:	0012                	c.slli	x0,0x4
    1df0:	ee00                	fsw	f8,24(x12)
    1df2:	001f 2d00 0b09      	0xb092d00001f
    1df8:	0000                	unimp
    1dfa:	17208903          	lb	x18,370(x1)
    1dfe:	0004                	0x4
    1e00:	2800                	fld	f8,16(x8)
    1e02:	0020                	addi	x8,x2,8
    1e04:	2d00                	fld	f8,24(x10)
    1e06:	123e                	slli	x4,x4,0x2f
    1e08:	0000                	unimp
    1e0a:	17338903          	lb	x18,371(x7)
    1e0e:	0004                	0x4
    1e10:	5f00                	lw	x8,56(x14)
    1e12:	0020                	addi	x8,x2,8
    1e14:	2d00                	fld	f8,24(x10)
    1e16:	0880                	addi	x8,x2,80
    1e18:	0000                	unimp
    1e1a:	17208a03          	lb	x20,370(x1)
    1e1e:	0004                	0x4
    1e20:	9900                	0x9900
    1e22:	0020                	addi	x8,x2,8
    1e24:	3400                	fld	f8,40(x8)
    1e26:	0cb2                	slli	x25,x25,0xc
    1e28:	0000                	unimp
    1e2a:	ec158b03          	lb	x22,-319(x11)
    1e2e:	0002                	c.slli64	x0
    1e30:	0000                	unimp
    1e32:	000b122f          	0xb122f
    1e36:	0300                	addi	x8,x2,384
    1e38:	128c                	addi	x11,x2,352
    1e3a:	00000417          	auipc	x8,0x0
    1e3e:	20d0                	fld	f12,128(x9)
    1e40:	0000                	unimp
    1e42:	d830                	sw	x12,112(x8)
    1e44:	0002                	c.slli64	x0
    1e46:	3100                	fld	f8,32(x10)
    1e48:	0079                	c.nop	30
    1e4a:	17178d03          	lb	x26,369(x15)
    1e4e:	0004                	0x4
    1e50:	0a00                	addi	x8,x2,272
    1e52:	0021                	c.nop	8
    1e54:	2f00                	fld	f8,24(x14)
    1e56:	0e01                	addi	x28,x28,0
    1e58:	0000                	unimp
    1e5a:	171e8d03          	lb	x26,369(x29)
    1e5e:	0004                	0x4
    1e60:	4300                	lw	x8,0(x14)
    1e62:	0021                	c.nop	8
    1e64:	2f00                	fld	f8,24(x14)
    1e66:	08fc                	addi	x15,x2,92
    1e68:	0000                	unimp
    1e6a:	17298d03          	lb	x26,370(x19)
    1e6e:	0004                	0x4
    1e70:	7600                	flw	f8,40(x12)
    1e72:	0021                	c.nop	8
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1e74:	2f00                	fld	f8,24(x14)
    1e76:	00000833          	add	x16,x0,x0
    1e7a:	17338d03          	lb	x26,371(x7)
                        boff += incr;
    1e7e:	0004                	0x4
                                C[coff + f] = sum[f];
    1e80:	ab00                	fsd	f8,16(x14)
    1e82:	0021                	c.nop	8
    1e84:	3000                	fld	f8,32(x8)
    1e86:	02f0                	addi	x12,x2,332
                        boff += incr;
    1e88:	0000                	unimp
    1e8a:	7831                	lui	x16,0xfffec
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1e8c:	0300                	addi	x8,x2,384
    1e8e:	04171f8f          	0x4171f8f
                                C[coff + f] = sum[f];
    1e92:	0000                	unimp
    1e94:	21d9                	jal	235a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x166>
    1e96:	0000                	unimp
    1e98:	1030                	addi	x12,x2,40
    1e9a:	2f000003          	lb	x0,752(x0) # 2f0 <number+0xd8>
    1e9e:	00000667          	jalr	x12,x0 # 0 <_start>
    1ea2:	17229003          	lh	x0,370(x5)
    1ea6:	0004                	0x4
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1ea8:	ed00                	fsw	f8,24(x10)
    1eaa:	0021                	c.nop	8
    1eac:	3100                	fld	f8,32(x10)
    1eae:	006d7573          	csrrci	x10,0x6,26
    1eb2:	f11c9103          	lh	x2,-239(x25)
    1eb6:	0012                	c.slli	x0,0x4
    1eb8:	0d00                	addi	x8,x2,656
    1eba:	0022                	c.slli	x0,0x8
    1ebc:	3200                	fld	f8,32(x12)
    1ebe:	0330                	addi	x12,x2,392
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1ec0:	0000                	unimp
    1ec2:	000012d3          	fadd.s	f5,f0,f0,rtz
    1ec6:	000aa92f          	amoadd.w	x18,x0,(x21)
    1eca:	0300                	addi	x8,x2,384
    1ecc:	2792                	fld	f15,256(x2)
    1ece:	00000417          	auipc	x8,0x0
    1ed2:	24c5                	jal	21b2 <_bsg_elf_stack_ptr+0x1b6>
    1ed4:	0000                	unimp
    1ed6:	001dac33          	slt	x24,x27,x1
    1eda:	c800                	sw	x8,16(x8)
    1edc:	0000                	unimp
    1ede:	3100                	fld	f8,32(x10)
    1ee0:	0066                	c.slli	x0,0x19
    1ee2:	172f9503          	lh	x10,370(x31)
    1ee6:	0004                	0x4
    1ee8:	e500                	fsw	f8,8(x10)
    1eea:	0024                	addi	x9,x2,8
    1eec:	0000                	unimp
    1eee:	3000                	fld	f8,32(x8)
    1ef0:	0348                	addi	x10,x2,388
    1ef2:	0000                	unimp
}
    1ef4:	6631                	lui	x12,0xc
    1ef6:	0300                	addi	x8,x2,384
    1ef8:	0417279b          	0x417279b
    1efc:	0000                	unimp
    1efe:	2559                	jal	2584 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x390>
    1f00:	0000                	unimp
    1f02:	0000                	unimp
    1f04:	0000                	unimp
    1f06:	0300                	addi	x8,x2,384
    1f08:	ec04                	fsw	f9,24(x8)
    1f0a:	0002                	c.slli64	x0
    1f0c:	0a00                	addi	x8,x2,272
    1f0e:	02ec                	addi	x11,x2,332
    1f10:	0000                	unimp
    1f12:	1301                	addi	x6,x6,-32
    1f14:	0000                	unimp
    1f16:	0000580b          	0x580b
    1f1a:	0700                	addi	x8,x2,896
    1f1c:	2900                	fld	f8,16(x10)
    1f1e:	066d                	addi	x12,x12,27
    1f20:	0000                	unimp
    1f22:	b8208703          	lb	x14,-1150(x1)
    1f26:	0006                	c.slli	x0,0x1
    1f28:	3700                	fld	f8,40(x14)
    1f2a:	0000                	unimp
    1f2c:	dc00                	sw	x8,56(x8)
    1f2e:	0019                	c.nop	6
                        TC sum[F] = {{init}};
    1f30:	a000                	fsd	f8,0(x8)
    1f32:	0002                	c.slli64	x0
    1f34:	0100                	addi	x8,x2,128
    1f36:	7c9c                	flw	f15,56(x9)
    1f38:	0014                	0x14
    1f3a:	2a00                	fld	f8,16(x12)
    1f3c:	0046                	c.slli	x0,0x11
    1f3e:	0058                	addi	x14,x2,4
    1f40:	0000                	unimp
    1f42:	2b08                	fld	f10,16(x14)
    1f44:	4154                	lw	x13,4(x10)
    1f46:	3700                	fld	f8,40(x14)
    1f48:	0000                	unimp
    1f4a:	2b00                	fld	f8,16(x14)
    1f4c:	4254                	lw	x13,4(x12)
    1f4e:	3700                	fld	f8,40(x14)
    1f50:	0000                	unimp
    1f52:	2b00                	fld	f8,16(x14)
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f54:	4354                	lw	x13,4(x14)
    1f56:	3700                	fld	f8,40(x14)
    1f58:	0000                	unimp
    1f5a:	2c00                	fld	f8,24(x8)
        uint32_t incr = A_WIDTH * (F-1);
    1f5c:	0041                	c.nop	16
    1f5e:	7c1b8803          	lb	x16,1985(x23)
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f62:	0014                	0x14
        uint32_t incr = A_WIDTH * (F-1);
    1f64:	cd00                	sw	x8,24(x10)
    1f66:	0025                	c.nop	9
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f68:	2c00                	fld	f8,24(x8)
    1f6a:	5442                	lw	x8,48(x2)
    1f6c:	0300                	addi	x8,x2,384
    1f6e:	2288                	fld	f10,0(x13)
    1f70:	147c                	addi	x15,x2,556
    1f72:	0000                	unimp
    1f74:	25ee                	fld	f11,216(x2)
    1f76:	0000                	unimp
    1f78:	432c                	lw	x11,64(x14)
    1f7a:	0300                	addi	x8,x2,384
    1f7c:	2a88                	fld	f10,16(x13)
    1f7e:	147c                	addi	x15,x2,556
    1f80:	0000                	unimp
    1f82:	2628                	fld	f10,72(x12)
    1f84:	0000                	unimp
    1f86:	092d                	addi	x18,x18,11
    1f88:	0300000b          	0x300000b
    1f8c:	2089                	jal	1fce <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EaaaEiPT0_PT1_PT2_mmm+0x7a>
    1f8e:	00000417          	auipc	x8,0x0
    1f92:	2662                	fld	f12,24(x2)
    1f94:	0000                	unimp
    1f96:	3e2d                	jal	1ad0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0xf4>
    1f98:	0012                	c.slli	x0,0x4
    1f9a:	0300                	addi	x8,x2,384
    1f9c:	3389                	jal	1cde <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x62>
    1f9e:	00000417          	auipc	x8,0x0
    1fa2:	2699                	jal	22e8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xf4>
        uint32_t incr = A_WIDTH * (F-1);
    1fa4:	0000                	unimp
    1fa6:	802d                	srli	x8,x8,0xb
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1fa8:	0008                	0x8
    1faa:	0300                	addi	x8,x2,384
    1fac:	208a                	fld	f1,128(x2)
    1fae:	00000417          	auipc	x8,0x0
    1fb2:	26de                	fld	f13,464(x2)
    1fb4:	0000                	unimp
    1fb6:	b234                	fsd	f13,96(x12)
    1fb8:	000c                	0xc
    1fba:	0300                	addi	x8,x2,384
    1fbc:	0037158b          	0x37158b
    1fc0:	0000                	unimp
    1fc2:	2f00                	fld	f8,24(x14)
    1fc4:	0b12                	slli	x22,x22,0x4
    1fc6:	0000                	unimp
    1fc8:	17128c03          	lb	x24,369(x5)
    1fcc:	0004                	0x4
    1fce:	1500                	addi	x8,x2,672
    1fd0:	30000027          	0x30000027
    1fd4:	01a8                	addi	x10,x2,200
    1fd6:	0000                	unimp
    1fd8:	7931                	lui	x18,0xfffec
    1fda:	0300                	addi	x8,x2,384
    1fdc:	178d                	addi	x15,x15,-29
    1fde:	00000417          	auipc	x8,0x0
    1fe2:	0000274f          	fnmadd.s	f14,f0,f0,f0,rdn
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1fe6:	000e012f          	0xe012f
    1fea:	0300                	addi	x8,x2,384
    1fec:	1e8d                	addi	x29,x29,-29
    1fee:	00000417          	auipc	x8,0x0
    1ff2:	2788                	fld	f10,8(x15)
    1ff4:	0000                	unimp
    1ff6:	0008fc2f          	0x8fc2f
    1ffa:	0300                	addi	x8,x2,384
                boff = 0;
    1ffc:	298d                	jal	246e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x27a>
    1ffe:	00000417          	auipc	x8,0x0
    2002:	000027bb          	0x27bb
    2006:	0008332f          	0x8332f
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    200a:	0300                	addi	x8,x2,384
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    200c:	338d                	jal	1d6e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0xf2>
    200e:	00000417          	auipc	x8,0x0
    2012:	27f0                	fld	f12,200(x15)
    2014:	0000                	unimp
    2016:	c030                	sw	x12,64(x8)
    2018:	0001                	nop
    201a:	3100                	fld	f8,32(x10)
    201c:	0078                	addi	x14,x2,12
    201e:	171f8f03          	lb	x30,369(x31)
    2022:	0004                	0x4
    2024:	1e00                	addi	x8,x2,816
    2026:	0028                	addi	x10,x2,8
    2028:	3000                	fld	f8,32(x8)
    202a:	01e0                	addi	x8,x2,204
                        TC sum[F] = {{init}};
    202c:	0000                	unimp
    202e:	0006672f          	0x6672f
    2032:	0300                	addi	x8,x2,384
    2034:	2290                	fld	f12,0(x13)
    2036:	00000417          	auipc	x8,0x0
    203a:	2832                	fld	f16,264(x2)
    203c:	0000                	unimp
    203e:	7331                	lui	x6,0xfffec
    2040:	6d75                	lui	x26,0x1d
    2042:	0300                	addi	x8,x2,384
    2044:	1c91                	addi	x25,x25,-28
    2046:	1482                	slli	x9,x9,0x20
    2048:	0000                	unimp
    204a:	2852                	fld	f16,272(x2)
    204c:	0000                	unimp
    204e:	0032                	c.slli	x0,0xc
    2050:	0002                	c.slli64	x0
    2052:	6400                	flw	f8,8(x8)
                                        sum[f] += A[aoff] * BT[bofff];
    2054:	0014                	0x14
    2056:	2f00                	fld	f8,24(x14)
    2058:	0aa9                	addi	x21,x21,10
    205a:	0000                	unimp
    205c:	17279203          	lh	x4,370(x15)
    2060:	0004                	0x4
    2062:	0200                	addi	x8,x2,256
    2064:	002a                	c.slli	x0,0xa
    2066:	3300                	fld	f8,32(x14)
    2068:	1b14                	addi	x13,x2,432
    206a:	0000                	unimp
    206c:	0088                	addi	x10,x2,64
    206e:	0000                	unimp
    2070:	6631                	lui	x12,0xc
    2072:	0300                	addi	x8,x2,384
    2074:	2f95                	jal	27e8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x5f4>
    2076:	00000417          	auipc	x8,0x0
    207a:	2a22                	fld	f20,8(x2)
    207c:	0000                	unimp
    207e:	0000                	unimp
    2080:	2030                	fld	f12,64(x8)
    2082:	0002                	c.slli64	x0
    2084:	3100                	fld	f8,32(x10)
    2086:	0066                	c.slli	x0,0x19
    2088:	17279b03          	lh	x22,370(x15)
    208c:	0004                	0x4
    208e:	9600                	0x9600
    2090:	002a                	c.slli	x0,0xa
    2092:	0000                	unimp
    2094:	0000                	unimp
    2096:	0000                	unimp
    2098:	00370403          	lb	x8,3(x14)
    209c:	0000                	unimp
    209e:	370a                	fld	f14,160(x2)
    20a0:	0000                	unimp
    20a2:	9200                	0x9200
    20a4:	0014                	0x14
    20a6:	0b00                	addi	x8,x2,400
    20a8:	0058                	addi	x14,x2,4
    20aa:	0000                	unimp
    20ac:	d4350007          	0xd4350007
    20b0:	0011                	c.nop	4
    20b2:	0400                	addi	x8,x2,512
    20b4:	2961                	jal	254c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x358>
    20b6:	00000037          	lui	x0,0x0
    20ba:	15a0                	addi	x8,x2,744
    20bc:	0000                	unimp
    20be:	0224                	addi	x9,x2,264
    20c0:	0000                	unimp
    20c2:	9c01                	0x9c01
    20c4:	16b1                	addi	x13,x13,-20
    20c6:	0000                	unimp
    20c8:	412c                	lw	x11,64(x10)
    20ca:	0400                	addi	x8,x2,512
    20cc:	1e62                	slli	x28,x28,0x38
    20ce:	0fc9                	addi	x31,x31,18
    20d0:	0000                	unimp
    20d2:	2b0a                	fld	f22,128(x2)
    20d4:	0000                	unimp
    20d6:	422c                	lw	x11,64(x12)
    20d8:	0400                	addi	x8,x2,512
    20da:	2862                	fld	f16,24(x2)
    20dc:	0fc9                	addi	x31,x31,18
    20de:	0000                	unimp
    20e0:	2b36                	fld	f22,328(x2)
    20e2:	0000                	unimp
    20e4:	432c                	lw	x11,64(x14)
    20e6:	0400                	addi	x8,x2,512
    20e8:	3262                	fld	f4,56(x2)
    20ea:	0fc9                	addi	x31,x31,18
    20ec:	0000                	unimp
    20ee:	2b62                	fld	f22,24(x2)
    20f0:	0000                	unimp
    20f2:	092d                	addi	x18,x18,11
    20f4:	0400000b          	0x400000b
    20f8:	04172063          	0x4172063
    20fc:	0000                	unimp
    20fe:	2b9a                	fld	f23,384(x2)
    2100:	0000                	unimp
    2102:	3e2d                	jal	1c3c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x260>
    2104:	0012                	c.slli	x0,0x4
    2106:	0400                	addi	x8,x2,512
    2108:	04173363          	0x4173363
    210c:	0000                	unimp
    210e:	2bd2                	fld	f23,272(x2)
    2110:	0000                	unimp
    2112:	802d                	srli	x8,x8,0xb
    2114:	0008                	0x8
    2116:	0400                	addi	x8,x2,512
    2118:	2064                	fld	f9,192(x8)
    211a:	00000417          	auipc	x8,0x0
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    211e:	2c0a                	fld	f24,128(x2)
                        for (uint32_t f = 0; f < F; f++){
    2120:	0000                	unimp
    2122:	742c                	flw	f11,104(x8)
                        boff += incr;
    2124:	6761                	lui	x14,0x18
    2126:	0400                	addi	x8,x2,512
                                C[coff + f] = sum[f];
    2128:	3264                	fld	f9,224(x12)
    212a:	00000417          	auipc	x8,0x0
                        for (uint32_t f = 0; f < F; f++){
    212e:	2c38                	fld	f14,88(x8)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2130:	0000                	unimp
    2132:	232d                	jal	265c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x468>
                        boff += incr;
    2134:	000e                	c.slli	x0,0x3
    2136:	0400                	addi	x8,x2,512
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2138:	4064                	lw	x9,68(x8)
    213a:	00000417          	auipc	x8,0x0
                                C[coff + f] = sum[f];
    213e:	2c65                	jal	23f6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x202>
    2140:	0000                	unimp
    2142:	7231                	lui	x4,0xfffec
    2144:	65040063          	beq	x8,x16,2784 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x590>
    2148:	3715                	jal	206c <_bsg_elf_stack_ptr+0x70>
    214a:	0000                	unimp
    214c:	9a00                	0x9a00
    214e:	002c                	addi	x11,x2,8
    2150:	2f00                	fld	f8,24(x14)
    2152:	08a0                	addi	x8,x2,88
    2154:	0000                	unimp
    2156:	6504                	flw	f9,8(x10)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2158:	3719                	jal	205e <_bsg_elf_stack_ptr+0x62>
    215a:	0000                	unimp
    215c:	c300                	sw	x8,0(x14)
    215e:	002c                	addi	x11,x2,8
    2160:	2f00                	fld	f8,24(x14)
    2162:	000010a7          	0x10a7
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    2166:	6804                	flw	f9,16(x8)
    2168:	0016b117          	auipc	x2,0x16b
    216c:	0900                	addi	x8,x2,144
    216e:	002d                	c.nop	11
    2170:	2f00                	fld	f8,24(x14)
    2172:	0ad5                	addi	x21,x21,21
    2174:	0000                	unimp
    2176:	6904                	flw	f9,16(x10)
    2178:	0016c417          	auipc	x8,0x16c
    217c:	4500                	lw	x8,8(x10)
    217e:	002d                	c.nop	11
    2180:	2f00                	fld	f8,24(x14)
    2182:	0df9                	addi	x27,x27,30
    2184:	0000                	unimp
    2186:	6a04                	flw	f9,16(x12)
    2188:	0016d717          	auipc	x14,0x16d
    218c:	8100                	0x8100
    218e:	002d                	c.nop	11
    2190:	3200                	fld	f8,32(x12)
    2192:	0590                	addi	x12,x2,704
}
    2194:	0000                	unimp
    2196:	00001627          	0x1627
    219a:	6931                	lui	x18,0xc
    219c:	0400                	addi	x8,x2,512
    219e:	0037196f          	jal	x18,739a0 <_bsg_elf_vcache_size+0x539a0>
    21a2:	0000                	unimp
    21a4:	00002dbf 0005b832 	0x5b83200002dbf
    21ac:	bc00                	fsd	f8,56(x8)
    21ae:	0015                	c.nop	5
    21b0:	3100                	fld	f8,32(x10)
    21b2:	6176                	flw	f2,92(x2)
    21b4:	006c                	addi	x11,x2,12
    21b6:	7004                	flw	f9,32(x8)
    21b8:	3719                	jal	20be <_bsg_elf_stack_ptr+0xc2>
    21ba:	0000                	unimp
    21bc:	f600                	fsw	f8,40(x12)
    21be:	002d                	c.nop	11
    21c0:	3000                	fld	f8,32(x8)
    21c2:	05d8                	addi	x14,x2,708
    21c4:	0000                	unimp
    21c6:	7031                	c.lui	x0,0xfffec
    21c8:	7274                	flw	f13,100(x12)
    21ca:	0400                	addi	x8,x2,512
    21cc:	1970                	addi	x12,x2,188
    21ce:	0025                	c.nop	9
                        TC sum[F] = {{init}};
    21d0:	0000                	unimp
    21d2:	2e16                	fld	f28,320(x2)
    21d4:	0000                	unimp
    21d6:	0000                	unimp
    21d8:	f032                	fsw	f12,32(x2)
    21da:	0005                	c.nop	1
    21dc:	ec00                	fsw	f8,24(x8)
    21de:	0015                	c.nop	5
    21e0:	3100                	fld	f8,32(x10)
    21e2:	6176                	flw	f2,92(x2)
    21e4:	006c                	addi	x11,x2,12
    21e6:	7304                	flw	f9,32(x14)
    21e8:	3719                	jal	20ee <_bsg_elf_stack_ptr+0xf2>
    21ea:	0000                	unimp
    21ec:	3e00                	fld	f8,56(x12)
    21ee:	002e                	c.slli	x0,0xb
    21f0:	3000                	fld	f8,32(x8)
    21f2:	0610                	addi	x12,x2,768
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    21f4:	0000                	unimp
    21f6:	7031                	c.lui	x0,0xfffec
    21f8:	7274                	flw	f13,100(x12)
    21fa:	0400                	addi	x8,x2,512
    21fc:	00251973          	fsrm	x18,x10
        uint32_t incr = A_WIDTH * (F-1);
    2200:	0000                	unimp
    2202:	2e60                	fld	f8,216(x12)
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    2204:	0000                	unimp
    2206:	0000                	unimp
    2208:	1436                	slli	x8,x8,0x2d
    220a:	46000017          	auipc	x0,0x46000
    220e:	000e                	c.slli	x0,0x3
    2210:	3700                	fld	f8,40(x14)
    2212:	5a01                	li	x20,-32
    2214:	7804                	flw	f9,48(x8)
    2216:	7fb4                	flw	f13,120(x15)
    2218:	3706                	fld	f14,96(x2)
    221a:	5b01                	li	x22,-32
    221c:	7804                	flw	f9,48(x8)
    221e:	7fb0                	flw	f12,120(x15)
    2220:	3706                	fld	f14,96(x2)
    2222:	5c01                	li	x24,-32
    2224:	7804                	flw	f9,48(x8)
    2226:	7fb8                	flw	f14,120(x15)
    2228:	3706                	fld	f14,96(x2)
    222a:	5d01                	li	x26,-32
        uint32_t incr = A_WIDTH * (F-1);
    222c:	7804                	flw	f9,48(x8)
    222e:	7fa8                	flw	f10,120(x15)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    2230:	3706                	fld	f14,96(x2)
    2232:	5e01                	li	x28,-32
    2234:	7804                	flw	f9,48(x8)
    2236:	7fa4                	flw	f9,120(x15)
    2238:	3706                	fld	f14,96(x2)
    223a:	5f01                	li	x30,-32
    223c:	7804                	flw	f9,48(x8)
    223e:	7fbc                	flw	f15,120(x15)
    2240:	0006                	c.slli	x0,0x1
    2242:	3800                	fld	f8,48(x8)
    2244:	0058                	addi	x14,x2,4
    2246:	0000                	unimp
    2248:	2e88                	fld	f10,24(x13)
    224a:	0000                	unimp
    224c:	5838                	lw	x14,112(x8)
    224e:	0000                	unimp
    2250:	ed00                	fsw	f8,24(x10)
    2252:	002e                	c.slli	x0,0xb
    2254:	3800                	fld	f8,48(x8)
    2256:	0058                	addi	x14,x2,4
    2258:	0000                	unimp
    225a:	00002f5b          	0x2f5b
    225e:	7039                	c.lui	x0,0xfffee
    2260:	0016                	c.slli	x0,0x5
    2262:	7d00                	flw	f8,56(x10)
    2264:	6e000023          	sb	x0,1760(x0) # 6e0 <bsg_printf+0x214>
    2268:	0016                	c.slli	x0,0x5
    226a:	3700                	fld	f8,40(x14)
    226c:	5a01                	li	x20,-32
    226e:	7804                	flw	f9,48(x8)
    2270:	7fb4                	flw	f13,120(x15)
    2272:	3706                	fld	f14,96(x2)
    2274:	5b01                	li	x22,-32
    2276:	5a01f303          	0x5a01f303
    227a:	0b5c0137          	lui	x2,0xb5c0
    227e:	a478                	fsd	f14,200(x8)
    2280:	067f                	0x67f
    2282:	a878                	fsd	f14,208(x8)
    2284:	067f                	0x67f
    2286:	321e                	fld	f4,480(x2)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2288:	0024                	addi	x9,x2,8
    228a:	8039                	srli	x8,x8,0xe
    228c:	0016                	c.slli	x0,0x5
    228e:	7d00                	flw	f8,56(x10)
    2290:	8e000023          	sb	x0,-1824(x0) # fffff8e0 <_end+0x7efff888>
    2294:	0016                	c.slli	x0,0x5
    2296:	3700                	fld	f8,40(x14)
    2298:	5a01                	li	x20,-32
    229a:	8402                	jr	x8
    229c:	3700                	fld	f8,40(x14)
    229e:	5b01                	li	x22,-32
    22a0:	7902                	flw	f18,32(x2)
    22a2:	3700                	fld	f8,40(x14)
    22a4:	5c01                	li	x24,-32
    22a6:	8302                	jr	x6
    22a8:	0000                	unimp
    22aa:	8036                	c.mv	x0,x13
                boff = 0;
    22ac:	7d000017          	auipc	x0,0x7d000
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    22b0:	37000023          	sb	x16,864(x0) # 360 <number+0x148>
                        TC sum[F] = {{init}};
    22b4:	5a01                	li	x20,-32
    22b6:	7804                	flw	f9,48(x8)
    22b8:	7f98                	flw	f14,56(x15)
    22ba:	3706                	fld	f14,96(x2)
    22bc:	5b01                	li	x22,-32
    22be:	7804                	flw	f9,48(x8)
    22c0:	7fb8                	flw	f14,120(x15)
    22c2:	3706                	fld	f14,96(x2)
    22c4:	5c01                	li	x24,-32
    22c6:	7804                	flw	f9,48(x8)
    22c8:	7f9c                	flw	f15,56(x15)
    22ca:	0006                	c.slli	x0,0x1
    22cc:	0a00                	addi	x8,x2,272
    22ce:	00000043          	fmadd.s	f0,f0,f0,f0,rne
    22d2:	16c4                	addi	x9,x2,868
    22d4:	0000                	unimp
    22d6:	583a                	lw	x16,172(x2)
    22d8:	0000                	unimp
    22da:	2700                	fld	f8,8(x14)
    22dc:	0016                	c.slli	x0,0x5
    22de:	0000                	unimp
    22e0:	430a                	lw	x6,128(x2)
    22e2:	0000                	unimp
    22e4:	d700                	sw	x8,40(x14)
    22e6:	0016                	c.slli	x0,0x5
    22e8:	3a00                	fld	f8,48(x12)
    22ea:	0058                	addi	x14,x2,4
    22ec:	0000                	unimp
    22ee:	1630                	addi	x12,x2,808
    22f0:	0000                	unimp
    22f2:	0a00                	addi	x8,x2,272
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    22f4:	00000043          	fmadd.s	f0,f0,f0,f0,rne
                                        sum[f] += A[aoff] * BT[bofff];
    22f8:	16ea                	slli	x13,x13,0x3a
    22fa:	0000                	unimp
    22fc:	583a                	lw	x16,172(x2)
    22fe:	0000                	unimp
    2300:	3900                	fld	f8,48(x10)
    2302:	0016                	c.slli	x0,0x5
    2304:	0000                	unimp
    2306:	7435                	lui	x8,0xfffed
    2308:	0011                	c.nop	4
    230a:	0400                	addi	x8,x2,512
    230c:	00372947          	fmsub.s	f18,f14,f3,f0,rdn
    2310:	0000                	unimp
    2312:	1384                	addi	x9,x2,480
    2314:	0000                	unimp
    2316:	021c                	addi	x15,x2,256
    2318:	0000                	unimp
    231a:	9c01                	0x9c01
    231c:	00001907          	0x1907
    2320:	412c                	lw	x11,64(x10)
    2322:	0400                	addi	x8,x2,512
    2324:	1f48                	addi	x10,x2,948
    2326:	00001907          	0x1907
    232a:	00002fb7          	lui	x31,0x2
    232e:	422c                	lw	x11,64(x12)
    2330:	0400                	addi	x8,x2,512
    2332:	2a48                	fld	f10,144(x12)
    2334:	00001907          	0x1907
    2338:	00002fe3          	0x2fe3
    233c:	432c                	lw	x11,64(x14)
    233e:	0400                	addi	x8,x2,512
    2340:	3548                	fld	f10,168(x10)
    2342:	00001907          	0x1907
    2346:	0000300f          	0x300f
    234a:	092d                	addi	x18,x18,11
    234c:	0400000b          	0x400000b
    2350:	2049                	jal	23d2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1de>
    2352:	00000417          	auipc	x8,0x0
    2356:	303c                	fld	f15,96(x8)
    2358:	0000                	unimp
    235a:	3e2d                	jal	1e94 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x218>
    235c:	0012                	c.slli	x0,0x4
    235e:	0400                	addi	x8,x2,512
    2360:	3349                	jal	20e2 <_bsg_elf_stack_ptr+0xe6>
    2362:	00000417          	auipc	x8,0x0
    2366:	3074                	fld	f13,224(x8)
    2368:	0000                	unimp
    236a:	802d                	srli	x8,x8,0xb
    236c:	0008                	0x8
    236e:	0400                	addi	x8,x2,512
    2370:	204a                	fld	f0,144(x2)
    2372:	00000417          	auipc	x8,0x0
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    2376:	30a2                	fld	f1,40(x2)
    2378:	0000                	unimp
    237a:	742c                	flw	f11,104(x8)
    237c:	6761                	lui	x14,0x18
    237e:	0400                	addi	x8,x2,512
    2380:	324a                	fld	f4,176(x2)
    2382:	00000417          	auipc	x8,0x0
    2386:	30da                	fld	f1,432(x2)
                                C[coff + f] = sum[f];
    2388:	0000                	unimp
    238a:	232d                	jal	28b4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x6c0>
    238c:	000e                	c.slli	x0,0x3
    238e:	0400                	addi	x8,x2,512
    2390:	404a                	0x404a
    2392:	00000417          	auipc	x8,0x0
    2396:	00003107          	fld	f2,0(x0) # 0 <_start>
    239a:	7231                	lui	x4,0xfffec
    239c:	4b040063          	beq	x8,x16,283c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x648>
    23a0:	3715                	jal	22c4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xd0>
    23a2:	0000                	unimp
    23a4:	3c00                	fld	f8,56(x8)
    23a6:	0031                	c.nop	12
                        for (uint32_t f = 0; f < F; f++){
    23a8:	2f00                	fld	f8,24(x14)
    23aa:	08a0                	addi	x8,x2,88
                        boff += incr;
    23ac:	0000                	unimp
    23ae:	4b04                	lw	x9,16(x14)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    23b0:	3719                	jal	22b6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc2>
    23b2:	0000                	unimp
    23b4:	6500                	flw	f8,8(x10)
    23b6:	0031                	c.nop	12
    23b8:	2f00                	fld	f8,24(x14)
    23ba:	000010a7          	0x10a7
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    23be:	4e04                	lw	x9,24(x12)
    23c0:	0d18                	addi	x14,x2,656
    23c2:	0019                	c.nop	6
    23c4:	ab00                	fsd	f8,16(x14)
    23c6:	0031                	c.nop	12
    23c8:	2f00                	fld	f8,24(x14)
    23ca:	0ad5                	addi	x21,x21,21
    23cc:	0000                	unimp
    23ce:	4f04                	lw	x9,24(x14)
}
    23d0:	2018                	fld	f14,0(x8)
    23d2:	0019                	c.nop	6
    23d4:	e700                	fsw	f8,8(x14)
    23d6:	0031                	c.nop	12
    23d8:	2f00                	fld	f8,24(x14)
    23da:	0df9                	addi	x27,x27,30
    23dc:	0000                	unimp
    23de:	5004                	lw	x9,32(x8)
    23e0:	3318                	fld	f14,32(x14)
    23e2:	0019                	c.nop	6
    23e4:	2300                	fld	f8,0(x14)
    23e6:	0032                	c.slli	x0,0xc
    23e8:	3200                	fld	f8,32(x12)
    23ea:	0498                	addi	x14,x2,576
    23ec:	0000                	unimp
    23ee:	187f                	0x187f
    23f0:	0000                	unimp
    23f2:	6931                	lui	x18,0xc
    23f4:	0400                	addi	x8,x2,512
    23f6:	1955                	addi	x18,x18,-11
    23f8:	00000037          	lui	x0,0x0
    23fc:	3261                	jal	1d84 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x108>
    23fe:	0000                	unimp
    2400:	c832                	sw	x12,16(x2)
    2402:	0004                	0x4
    2404:	1400                	addi	x8,x2,544
    2406:	0018                	0x18
    2408:	3100                	fld	f8,32(x10)
    240a:	6176                	flw	f2,92(x2)
                        TC sum[F] = {{init}};
    240c:	006c                	addi	x11,x2,12
    240e:	5604                	lw	x9,40(x12)
    2410:	3719                	jal	2316 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x122>
    2412:	0000                	unimp
    2414:	9800                	0x9800
    2416:	0032                	c.slli	x0,0xc
    2418:	3000                	fld	f8,32(x8)
    241a:	04f0                	addi	x12,x2,588
    241c:	0000                	unimp
    241e:	7031                	c.lui	x0,0xfffec
    2420:	7274                	flw	f13,100(x12)
    2422:	0400                	addi	x8,x2,512
    2424:	1956                	slli	x18,x18,0x35
    2426:	0025                	c.nop	9
    2428:	0000                	unimp
    242a:	32b8                	fld	f14,96(x13)
    242c:	0000                	unimp
    242e:	0000                	unimp
    2430:	0832                	slli	x16,x16,0xc
    2432:	0005                	c.nop	1
    2434:	4400                	lw	x8,8(x8)
    2436:	0018                	0x18
    2438:	3100                	fld	f8,32(x10)
    243a:	6176                	flw	f2,92(x2)
    243c:	006c                	addi	x11,x2,12
    243e:	5904                	lw	x9,48(x10)
    2440:	3719                	jal	2346 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x152>
    2442:	0000                	unimp
    2444:	e000                	fsw	f8,0(x8)
    2446:	0032                	c.slli	x0,0xc
    2448:	3000                	fld	f8,32(x8)
    244a:	0510                	addi	x12,x2,640
    244c:	0000                	unimp
    244e:	7031                	c.lui	x0,0xfffec
    2450:	7274                	flw	f13,100(x12)
    2452:	0400                	addi	x8,x2,512
    2454:	1959                	addi	x18,x18,-10
    2456:	0025                	c.nop	9
    2458:	0000                	unimp
    245a:	3302                	fld	f6,32(x2)
    245c:	0000                	unimp
    245e:	0000                	unimp
    2460:	f036                	fsw	f13,32(x2)
    2462:	0014                	0x14
    2464:	df00                	sw	x8,56(x14)
    2466:	3700000f          	0x3700000f
    246a:	5a01                	li	x20,-32
    246c:	7804                	flw	f9,48(x8)
    246e:	7fa8                	flw	f10,120(x15)
    2470:	3706                	fld	f14,96(x2)
    2472:	5b01                	li	x22,-32
    2474:	7804                	flw	f9,48(x8)
    2476:	7fa4                	flw	f9,120(x15)
    2478:	3706                	fld	f14,96(x2)
    247a:	5c01                	li	x24,-32
    247c:	7804                	flw	f9,48(x8)
    247e:	7fb8                	flw	f14,120(x15)
    2480:	3706                	fld	f14,96(x2)
    2482:	5d01                	li	x26,-32
    2484:	7804                	flw	f9,48(x8)
    2486:	7fb0                	flw	f12,120(x15)
    2488:	3706                	fld	f14,96(x2)
    248a:	5e01                	li	x28,-32
    248c:	7804                	flw	f9,48(x8)
    248e:	7fbc                	flw	f15,120(x15)
    2490:	3706                	fld	f14,96(x2)
    2492:	5f01                	li	x30,-32
    2494:	7804                	flw	f9,48(x8)
    2496:	7fac                	flw	f11,120(x15)
    2498:	0006                	c.slli	x0,0x1
    249a:	3800                	fld	f8,48(x8)
    249c:	0058                	addi	x14,x2,4
    249e:	0000                	unimp
    24a0:	332a                	fld	f6,168(x2)
    24a2:	0000                	unimp
    24a4:	5838                	lw	x14,112(x8)
    24a6:	0000                	unimp
    24a8:	7f00                	flw	f8,56(x14)
    24aa:	38000033          	0x38000033
    24ae:	0058                	addi	x14,x2,4
    24b0:	0000                	unimp
    24b2:	33d4                	fld	f13,160(x15)
    24b4:	0000                	unimp
    24b6:	5439                	li	x8,-18
    24b8:	0014                	0x14
    24ba:	7d00                	flw	f8,56(x10)
    24bc:	c4000023          	sb	x0,-960(x0) # fffffc40 <_end+0x7efffbe8>
    24c0:	0018                	0x18
    24c2:	3700                	fld	f8,40(x14)
    24c4:	5a01                	li	x20,-32
    24c6:	7804                	flw	f9,48(x8)
    24c8:	7fa8                	flw	f10,120(x15)
    24ca:	3706                	fld	f14,96(x2)
    24cc:	5b01                	li	x22,-32
    24ce:	5a01f303          	0x5a01f303
    24d2:	095c0137          	lui	x2,0x95c0
    24d6:	bc78                	fsd	f14,248(x8)
    24d8:	067f                	0x67f
    24da:	b078                	fsd	f14,224(x8)
    24dc:	067f                	0x67f
    24de:	001e                	c.slli	x0,0x7
    24e0:	6439                	lui	x8,0xe
    24e2:	0014                	0x14
    24e4:	7d00                	flw	f8,56(x10)
    24e6:	e4000023          	sb	x0,-448(x0) # fffffe40 <_end+0x7efffde8>
    24ea:	0018                	0x18
    24ec:	3700                	fld	f8,40(x14)
    24ee:	5a01                	li	x20,-32
    24f0:	8602                	jr	x12
    24f2:	3700                	fld	f8,40(x14)
    24f4:	5b01                	li	x22,-32
    24f6:	7902                	flw	f18,32(x2)
    24f8:	3700                	fld	f8,40(x14)
    24fa:	5c01                	li	x24,-32
    24fc:	8302                	jr	x6
    24fe:	0000                	unimp
    2500:	5c36                	lw	x24,108(x2)
    2502:	0015                	c.nop	5
    2504:	7d00                	flw	f8,56(x10)
    2506:	37000023          	sb	x16,864(x0) # 360 <number+0x148>
    250a:	5a01                	li	x20,-32
    250c:	7804                	flw	f9,48(x8)
    250e:	7f98                	flw	f14,56(x15)
    2510:	3706                	fld	f14,96(x2)
    2512:	5b01                	li	x22,-32
    2514:	7804                	flw	f9,48(x8)
    2516:	7fb8                	flw	f14,120(x15)
    2518:	3706                	fld	f14,96(x2)
    251a:	5c01                	li	x24,-32
    251c:	7804                	flw	f9,48(x8)
    251e:	7f9c                	flw	f15,56(x15)
    2520:	0006                	c.slli	x0,0x1
    2522:	0300                	addi	x8,x2,384
    2524:	db04                	sw	x9,48(x14)
    2526:	0a000003          	lb	x0,160(x0) # a0 <bsg_group_size+0x9f>
    252a:	000003db          	0x3db
    252e:	1920                	addi	x8,x2,184
    2530:	0000                	unimp
    2532:	583a                	lw	x16,172(x2)
    2534:	0000                	unimp
    2536:	7f00                	flw	f8,56(x14)
    2538:	0018                	0x18
    253a:	0000                	unimp
    253c:	db0a                	sw	x2,180(x2)
    253e:	33000003          	lb	x0,816(x0) # 330 <number+0x118>
    2542:	0019                	c.nop	6
    2544:	3a00                	fld	f8,48(x12)
    2546:	0058                	addi	x14,x2,4
    2548:	0000                	unimp
    254a:	1888                	addi	x10,x2,112
    254c:	0000                	unimp
    254e:	0a00                	addi	x8,x2,272
    2550:	000003db          	0x3db
    2554:	1946                	slli	x18,x18,0x31
    2556:	0000                	unimp
    2558:	583a                	lw	x16,172(x2)
    255a:	0000                	unimp
    255c:	9100                	0x9100
    255e:	0018                	0x18
    2560:	0000                	unimp
    2562:	dc35                	beqz	x8,24de <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x2ea>
    2564:	000d                	c.nop	3
    2566:	0400                	addi	x8,x2,512
    2568:	292d                	jal	29a2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x7ae>
    256a:	00000037          	lui	x0,0x0
    256e:	1160                	addi	x8,x2,172
    2570:	0000                	unimp
    2572:	0224                	addi	x9,x2,264
    2574:	0000                	unimp
    2576:	9c01                	0x9c01
    2578:	1b65                	addi	x22,x22,-7
    257a:	0000                	unimp
    257c:	412c                	lw	x11,64(x10)
    257e:	0400                	addi	x8,x2,512
    2580:	202e                	fld	f0,200(x2)
    2582:	1b65                	addi	x22,x22,-7
    2584:	0000                	unimp
    2586:	0000340b          	0x340b
    258a:	422c                	lw	x11,64(x12)
    258c:	0400                	addi	x8,x2,512
    258e:	2c2e                	fld	f24,200(x2)
    2590:	1b65                	addi	x22,x22,-7
    2592:	0000                	unimp
    2594:	00003437          	lui	x8,0x3
    2598:	432c                	lw	x11,64(x14)
    259a:	0400                	addi	x8,x2,512
    259c:	382e                	fld	f16,232(x2)
    259e:	1b65                	addi	x22,x22,-7
    25a0:	0000                	unimp
    25a2:	00003463          	0x3463
    25a6:	092d                	addi	x18,x18,11
    25a8:	0400000b          	0x400000b
    25ac:	0417202f          	amoadd.w.aq	x0,x1,(x14)
    25b0:	0000                	unimp
    25b2:	0000349b          	0x349b
    25b6:	3e2d                	jal	20f0 <_bsg_elf_stack_ptr+0xf4>
    25b8:	0012                	c.slli	x0,0x4
    25ba:	0400                	addi	x8,x2,512
    25bc:	0417332f          	0x417332f
    25c0:	0000                	unimp
    25c2:	000034d3          	fadd.s	f9,f0,f0,rup
    25c6:	802d                	srli	x8,x8,0xb
    25c8:	0008                	0x8
    25ca:	0400                	addi	x8,x2,512
    25cc:	2030                	fld	f12,64(x8)
    25ce:	00000417          	auipc	x8,0x0
    25d2:	0000350b          	0x350b
    25d6:	742c                	flw	f11,104(x8)
    25d8:	6761                	lui	x14,0x18
    25da:	0400                	addi	x8,x2,512
    25dc:	3230                	fld	f12,96(x12)
    25de:	00000417          	auipc	x8,0x0
    25e2:	3539                	jal	23f0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1fc>
    25e4:	0000                	unimp
    25e6:	232d                	jal	2b10 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x91c>
    25e8:	000e                	c.slli	x0,0x3
    25ea:	0400                	addi	x8,x2,512
    25ec:	4030                	lw	x12,64(x8)
    25ee:	00000417          	auipc	x8,0x0
    25f2:	3566                	fld	f10,120(x2)
    25f4:	0000                	unimp
    25f6:	7231                	lui	x4,0xfffec
    25f8:	31040063          	beq	x8,x16,28f8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x704>
    25fc:	3715                	jal	2520 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x32c>
    25fe:	0000                	unimp
    2600:	9b00                	0x9b00
    2602:	0035                	c.nop	13
    2604:	2f00                	fld	f8,24(x14)
    2606:	08a0                	addi	x8,x2,88
    2608:	0000                	unimp
    260a:	3104                	fld	f9,32(x10)
    260c:	3719                	jal	2512 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x31e>
    260e:	0000                	unimp
    2610:	c400                	sw	x8,8(x8)
    2612:	0035                	c.nop	13
    2614:	2f00                	fld	f8,24(x14)
    2616:	000010a7          	0x10a7
    261a:	3404                	fld	f9,40(x8)
    261c:	6b19                	lui	x22,0x6
    261e:	0a00001b          	0xa00001b
    2622:	0036                	c.slli	x0,0xd
    2624:	2f00                	fld	f8,24(x14)
    2626:	0ad5                	addi	x21,x21,21
    2628:	0000                	unimp
    262a:	3504                	fld	f9,40(x10)
    262c:	7e19                	lui	x28,0xfffe6
    262e:	4600001b          	0x4600001b
    2632:	0036                	c.slli	x0,0xd
    2634:	2f00                	fld	f8,24(x14)
    2636:	0df9                	addi	x27,x27,30
    2638:	0000                	unimp
    263a:	3604                	fld	f9,40(x12)
    263c:	9119                	srli	x10,x10,0x26
    263e:	8200001b          	0x8200001b
    2642:	0036                	c.slli	x0,0xd
    2644:	3200                	fld	f8,32(x12)
    2646:	0368                	addi	x10,x2,396
    2648:	0000                	unimp
    264a:	00001adb          	0x1adb
    264e:	6931                	lui	x18,0xc
    2650:	0400                	addi	x8,x2,512
    2652:	0037193b          	0x37193b
    2656:	0000                	unimp
    2658:	36c0                	fld	f8,168(x13)
    265a:	0000                	unimp
    265c:	9032                	c.add	x0,x12
    265e:	70000003          	lb	x0,1792(x0) # 700 <bsg_printf+0x234>
    2662:	001a                	c.slli	x0,0x6
    2664:	3100                	fld	f8,32(x10)
    2666:	6176                	flw	f2,92(x2)
    2668:	006c                	addi	x11,x2,12
    266a:	3c04                	fld	f9,56(x8)
    266c:	3719                	jal	2572 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x37e>
    266e:	0000                	unimp
    2670:	f700                	fsw	f8,40(x14)
    2672:	0036                	c.slli	x0,0xd
    2674:	3000                	fld	f8,32(x8)
    2676:	03b0                	addi	x12,x2,456
    2678:	0000                	unimp
    267a:	7031                	c.lui	x0,0xfffec
    267c:	7274                	flw	f13,100(x12)
    267e:	0400                	addi	x8,x2,512
    2680:	193c                	addi	x15,x2,184
    2682:	0025                	c.nop	9
    2684:	0000                	unimp
    2686:	00003717          	auipc	x14,0x3
    268a:	0000                	unimp
    268c:	c832                	sw	x12,16(x2)
    268e:	a0000003          	lb	x0,-1536(x0) # fffffa00 <_end+0x7efff9a8>
    2692:	001a                	c.slli	x0,0x6
    2694:	3100                	fld	f8,32(x10)
    2696:	6176                	flw	f2,92(x2)
    2698:	006c                	addi	x11,x2,12
    269a:	3f04                	fld	f9,56(x14)
    269c:	3719                	jal	25a2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x3ae>
    269e:	0000                	unimp
    26a0:	3f00                	fld	f8,56(x14)
    26a2:	30000037          	lui	x0,0x30000
    26a6:	03e8                	addi	x10,x2,460
    26a8:	0000                	unimp
    26aa:	7031                	c.lui	x0,0xfffec
    26ac:	7274                	flw	f13,100(x12)
    26ae:	0400                	addi	x8,x2,512
    26b0:	0025193f 37610000 	0x376100000025193f
    26b8:	0000                	unimp
    26ba:	0000                	unimp
    26bc:	d436                	sw	x13,40(x2)
    26be:	0012                	c.slli	x0,0x4
    26c0:	7000                	flw	f8,32(x8)
    26c2:	0011                	c.nop	4
    26c4:	3700                	fld	f8,40(x14)
    26c6:	5a01                	li	x20,-32
    26c8:	7804                	flw	f9,48(x8)
    26ca:	7fb4                	flw	f13,120(x15)
    26cc:	3706                	fld	f14,96(x2)
    26ce:	5b01                	li	x22,-32
    26d0:	7804                	flw	f9,48(x8)
    26d2:	7fb0                	flw	f12,120(x15)
    26d4:	3706                	fld	f14,96(x2)
    26d6:	5c01                	li	x24,-32
    26d8:	7804                	flw	f9,48(x8)
    26da:	7fb8                	flw	f14,120(x15)
    26dc:	3706                	fld	f14,96(x2)
    26de:	5d01                	li	x26,-32
    26e0:	7804                	flw	f9,48(x8)
    26e2:	7fa8                	flw	f10,120(x15)
    26e4:	3706                	fld	f14,96(x2)
    26e6:	5e01                	li	x28,-32
    26e8:	7804                	flw	f9,48(x8)
    26ea:	7fa4                	flw	f9,120(x15)
    26ec:	3706                	fld	f14,96(x2)
    26ee:	5f01                	li	x30,-32
    26f0:	7804                	flw	f9,48(x8)
    26f2:	7fbc                	flw	f15,120(x15)
    26f4:	0006                	c.slli	x0,0x1
    26f6:	3800                	fld	f8,48(x8)
    26f8:	0058                	addi	x14,x2,4
    26fa:	0000                	unimp
    26fc:	3789                	jal	263e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x44a>
    26fe:	0000                	unimp
    2700:	5838                	lw	x14,112(x8)
    2702:	0000                	unimp
    2704:	ee00                	fsw	f8,24(x12)
    2706:	38000037          	lui	x0,0x38000
    270a:	0058                	addi	x14,x2,4
    270c:	0000                	unimp
    270e:	385c                	fld	f15,176(x8)
    2710:	0000                	unimp
    2712:	3039                	jal	1f20 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x2a4>
    2714:	0012                	c.slli	x0,0x4
    2716:	7d00                	flw	f8,56(x10)
    2718:	22000023          	sb	x0,544(x0) # 220 <number+0x8>
    271c:	3700001b          	0x3700001b
    2720:	5a01                	li	x20,-32
    2722:	7804                	flw	f9,48(x8)
    2724:	7fb4                	flw	f13,120(x15)
    2726:	3706                	fld	f14,96(x2)
    2728:	5b01                	li	x22,-32
    272a:	5a01f303          	0x5a01f303
    272e:	0b5c0137          	lui	x2,0xb5c0
    2732:	a478                	fsd	f14,200(x8)
    2734:	067f                	0x67f
    2736:	a878                	fsd	f14,208(x8)
    2738:	067f                	0x67f
    273a:	311e                	fld	f2,480(x2)
    273c:	0024                	addi	x9,x2,8
    273e:	4039                	c.li	x0,14
    2740:	0012                	c.slli	x0,0x4
    2742:	7d00                	flw	f8,56(x10)
    2744:	42000023          	sb	x0,1056(x0) # 420 <number+0x208>
    2748:	3700001b          	0x3700001b
    274c:	5a01                	li	x20,-32
    274e:	8402                	jr	x8
    2750:	3700                	fld	f8,40(x14)
    2752:	5b01                	li	x22,-32
    2754:	7902                	flw	f18,32(x2)
    2756:	3700                	fld	f8,40(x14)
    2758:	5c01                	li	x24,-32
    275a:	8302                	jr	x6
    275c:	0000                	unimp
    275e:	4036                	0x4036
    2760:	7d000013          	li	x0,2000
    2764:	37000023          	sb	x16,864(x0) # 360 <number+0x148>
    2768:	5a01                	li	x20,-32
    276a:	7804                	flw	f9,48(x8)
    276c:	7f98                	flw	f14,56(x15)
    276e:	3706                	fld	f14,96(x2)
    2770:	5b01                	li	x22,-32
    2772:	7804                	flw	f9,48(x8)
    2774:	7fb8                	flw	f14,120(x15)
    2776:	3706                	fld	f14,96(x2)
    2778:	5c01                	li	x24,-32
    277a:	7804                	flw	f9,48(x8)
    277c:	7f9c                	flw	f15,56(x15)
    277e:	0006                	c.slli	x0,0x1
    2780:	0300                	addi	x8,x2,384
    2782:	f304                	fsw	f9,32(x14)
    2784:	0a000003          	lb	x0,160(x0) # a0 <bsg_group_size+0x9f>
    2788:	000003f3          	0x3f3
    278c:	1b7e                	slli	x22,x22,0x3f
    278e:	0000                	unimp
    2790:	583a                	lw	x16,172(x2)
    2792:	0000                	unimp
    2794:	db00                	sw	x8,48(x14)
    2796:	001a                	c.slli	x0,0x6
    2798:	0000                	unimp
    279a:	f30a                	fsw	f2,164(x2)
    279c:	91000003          	lb	x0,-1776(x0) # fffff910 <_end+0x7efff8b8>
    27a0:	3a00001b          	0x3a00001b
    27a4:	0058                	addi	x14,x2,4
    27a6:	0000                	unimp
    27a8:	1ae4                	addi	x9,x2,380
    27aa:	0000                	unimp
    27ac:	0a00                	addi	x8,x2,272
    27ae:	000003f3          	0x3f3
    27b2:	1ba4                	addi	x9,x2,504
    27b4:	0000                	unimp
    27b6:	583a                	lw	x16,172(x2)
    27b8:	0000                	unimp
    27ba:	ed00                	fsw	f8,24(x10)
    27bc:	001a                	c.slli	x0,0x6
    27be:	0000                	unimp
    27c0:	fd35                	bnez	x10,273c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x548>
    27c2:	0400000f          	fence	o,unknown
    27c6:	00372913          	slti	x18,x14,3
    27ca:	0000                	unimp
    27cc:	0f3c                	addi	x15,x2,920
    27ce:	0000                	unimp
    27d0:	0224                	addi	x9,x2,264
    27d2:	0000                	unimp
    27d4:	9c01                	0x9c01
    27d6:	00001dc3          	fmadd.s	f27,f0,f0,f0,rtz
    27da:	412c                	lw	x11,64(x10)
    27dc:	0400                	addi	x8,x2,512
    27de:	1c14                	addi	x13,x2,560
    27e0:	147c                	addi	x15,x2,556
    27e2:	0000                	unimp
    27e4:	38b8                	fld	f14,112(x9)
    27e6:	0000                	unimp
    27e8:	422c                	lw	x11,64(x12)
    27ea:	0400                	addi	x8,x2,512
    27ec:	2414                	fld	f13,8(x8)
    27ee:	147c                	addi	x15,x2,556
    27f0:	0000                	unimp
    27f2:	38e4                	fld	f9,240(x9)
    27f4:	0000                	unimp
    27f6:	432c                	lw	x11,64(x14)
    27f8:	0400                	addi	x8,x2,512
    27fa:	2c14                	fld	f13,24(x8)
    27fc:	147c                	addi	x15,x2,556
    27fe:	0000                	unimp
    2800:	3910                	fld	f12,48(x10)
    2802:	0000                	unimp
    2804:	092d                	addi	x18,x18,11
    2806:	0400000b          	0x400000b
    280a:	2015                	jal	282e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x63a>
    280c:	00000417          	auipc	x8,0x0
    2810:	3948                	fld	f10,176(x10)
    2812:	0000                	unimp
    2814:	3e2d                	jal	234e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x15a>
    2816:	0012                	c.slli	x0,0x4
    2818:	0400                	addi	x8,x2,512
    281a:	3315                	jal	253e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x34a>
    281c:	00000417          	auipc	x8,0x0
    2820:	3980                	fld	f8,48(x11)
    2822:	0000                	unimp
    2824:	802d                	srli	x8,x8,0xb
    2826:	0008                	0x8
    2828:	0400                	addi	x8,x2,512
    282a:	2016                	fld	f0,320(x2)
    282c:	00000417          	auipc	x8,0x0
    2830:	39b8                	fld	f14,112(x11)
    2832:	0000                	unimp
    2834:	742c                	flw	f11,104(x8)
    2836:	6761                	lui	x14,0x18
    2838:	0400                	addi	x8,x2,512
    283a:	3216                	fld	f4,352(x2)
    283c:	00000417          	auipc	x8,0x0
    2840:	39e6                	fld	f19,120(x2)
    2842:	0000                	unimp
    2844:	232d                	jal	2d6e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xb7a>
    2846:	000e                	c.slli	x0,0x3
    2848:	0400                	addi	x8,x2,512
    284a:	4016                	0x4016
    284c:	00000417          	auipc	x8,0x0
    2850:	00003a13          	sltiu	x20,x0,0
    2854:	7231                	lui	x4,0xfffec
    2856:	17040063          	beq	x8,x16,29b6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x7c2>
    285a:	3715                	jal	277e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x58a>
    285c:	0000                	unimp
    285e:	4800                	lw	x8,16(x8)
    2860:	003a                	c.slli	x0,0xe
    2862:	2f00                	fld	f8,24(x14)
    2864:	08a0                	addi	x8,x2,88
    2866:	0000                	unimp
    2868:	1704                	addi	x9,x2,928
    286a:	3719                	jal	2770 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x57c>
    286c:	0000                	unimp
    286e:	7100                	flw	f8,32(x10)
    2870:	003a                	c.slli	x0,0xe
    2872:	2f00                	fld	f8,24(x14)
    2874:	000010a7          	0x10a7
    2878:	1a04                	addi	x9,x2,304
    287a:	c315                	beqz	x14,289e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x6aa>
    287c:	001d                	c.nop	7
    287e:	b700                	fsd	f8,40(x14)
    2880:	003a                	c.slli	x0,0xe
    2882:	2f00                	fld	f8,24(x14)
    2884:	0ad5                	addi	x21,x21,21
    2886:	0000                	unimp
    2888:	1b04                	addi	x9,x2,432
    288a:	d615                	beqz	x12,27b6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x5c2>
    288c:	001d                	c.nop	7
    288e:	f300                	fsw	f8,32(x14)
    2890:	003a                	c.slli	x0,0xe
    2892:	2f00                	fld	f8,24(x14)
    2894:	0df9                	addi	x27,x27,30
    2896:	0000                	unimp
    2898:	1c04                	addi	x9,x2,560
    289a:	e915                	bnez	x10,28ce <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x6da>
    289c:	001d                	c.nop	7
    289e:	2f00                	fld	f8,24(x14)
    28a0:	3200003b          	0x3200003b
    28a4:	0240                	addi	x8,x2,260
    28a6:	0000                	unimp
    28a8:	1d39                	addi	x26,x26,-18
    28aa:	0000                	unimp
    28ac:	6931                	lui	x18,0xc
    28ae:	0400                	addi	x8,x2,512
    28b0:	1921                	addi	x18,x18,-24
    28b2:	00000037          	lui	x0,0x0
    28b6:	3b6d                	jal	2670 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x47c>
    28b8:	0000                	unimp
    28ba:	6832                	flw	f16,12(x2)
    28bc:	0002                	c.slli64	x0
    28be:	ce00                	sw	x8,24(x12)
    28c0:	001c                	0x1c
    28c2:	3100                	fld	f8,32(x10)
    28c4:	6176                	flw	f2,92(x2)
    28c6:	006c                	addi	x11,x2,12
    28c8:	2204                	fld	f9,0(x12)
    28ca:	3719                	jal	27d0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x5dc>
    28cc:	0000                	unimp
    28ce:	a400                	fsd	f8,8(x8)
    28d0:	3000003b          	0x3000003b
    28d4:	0288                	addi	x10,x2,320
    28d6:	0000                	unimp
    28d8:	7031                	c.lui	x0,0xfffec
    28da:	7274                	flw	f13,100(x12)
    28dc:	0400                	addi	x8,x2,512
    28de:	1922                	slli	x18,x18,0x28
    28e0:	0025                	c.nop	9
    28e2:	0000                	unimp
    28e4:	3bc4                	fld	f9,176(x15)
    28e6:	0000                	unimp
    28e8:	0000                	unimp
    28ea:	a032                	fsd	f12,0(x2)
    28ec:	0002                	c.slli64	x0
    28ee:	fe00                	fsw	f8,56(x12)
    28f0:	001c                	0x1c
    28f2:	3100                	fld	f8,32(x10)
    28f4:	6176                	flw	f2,92(x2)
    28f6:	006c                	addi	x11,x2,12
    28f8:	2504                	fld	f9,8(x10)
    28fa:	3719                	jal	2800 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x60c>
    28fc:	0000                	unimp
    28fe:	ec00                	fsw	f8,24(x8)
    2900:	3000003b          	0x3000003b
    2904:	02c0                	addi	x8,x2,324
    2906:	0000                	unimp
    2908:	7031                	c.lui	x0,0xfffec
    290a:	7274                	flw	f13,100(x12)
    290c:	0400                	addi	x8,x2,512
    290e:	1925                	addi	x18,x18,-23
    2910:	0025                	c.nop	9
    2912:	0000                	unimp
    2914:	3c0e                	fld	f24,224(x2)
    2916:	0000                	unimp
    2918:	0000                	unimp
    291a:	b036                	fsd	f13,32(x2)
    291c:	0010                	0x10
    291e:	0100                	addi	x8,x2,128
    2920:	37000013          	li	x0,880
    2924:	5a01                	li	x20,-32
    2926:	7804                	flw	f9,48(x8)
    2928:	7fb4                	flw	f13,120(x15)
    292a:	3706                	fld	f14,96(x2)
    292c:	5b01                	li	x22,-32
    292e:	7804                	flw	f9,48(x8)
    2930:	7fb0                	flw	f12,120(x15)
    2932:	3706                	fld	f14,96(x2)
    2934:	5c01                	li	x24,-32
    2936:	7804                	flw	f9,48(x8)
    2938:	7fb8                	flw	f14,120(x15)
    293a:	3706                	fld	f14,96(x2)
    293c:	5d01                	li	x26,-32
    293e:	7804                	flw	f9,48(x8)
    2940:	7fa8                	flw	f10,120(x15)
    2942:	3706                	fld	f14,96(x2)
    2944:	5e01                	li	x28,-32
    2946:	7804                	flw	f9,48(x8)
    2948:	7fa4                	flw	f9,120(x15)
    294a:	3706                	fld	f14,96(x2)
    294c:	5f01                	li	x30,-32
    294e:	7804                	flw	f9,48(x8)
    2950:	7fbc                	flw	f15,120(x15)
    2952:	0006                	c.slli	x0,0x1
    2954:	3800                	fld	f8,48(x8)
    2956:	0058                	addi	x14,x2,4
    2958:	0000                	unimp
    295a:	3c36                	fld	f24,360(x2)
    295c:	0000                	unimp
    295e:	5838                	lw	x14,112(x8)
    2960:	0000                	unimp
    2962:	9b00                	0x9b00
    2964:	003c                	addi	x15,x2,8
    2966:	3800                	fld	f8,48(x8)
    2968:	0058                	addi	x14,x2,4
    296a:	0000                	unimp
    296c:	3d09                	jal	277e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x58a>
    296e:	0000                	unimp
    2970:	0c39                	addi	x24,x24,14
    2972:	0010                	0x10
    2974:	7d00                	flw	f8,56(x10)
    2976:	80000023          	sb	x0,-2048(x0) # fffff800 <_end+0x7efff7a8>
    297a:	001d                	c.nop	7
    297c:	3700                	fld	f8,40(x14)
    297e:	5a01                	li	x20,-32
    2980:	7804                	flw	f9,48(x8)
    2982:	7fb4                	flw	f13,120(x15)
    2984:	3706                	fld	f14,96(x2)
    2986:	5b01                	li	x22,-32
    2988:	5a01f303          	0x5a01f303
    298c:	0b5c0137          	lui	x2,0xb5c0
    2990:	a478                	fsd	f14,200(x8)
    2992:	067f                	0x67f
    2994:	a878                	fsd	f14,208(x8)
    2996:	067f                	0x67f
    2998:	321e                	fld	f4,480(x2)
    299a:	0024                	addi	x9,x2,8
    299c:	1c39                	addi	x24,x24,-18
    299e:	0010                	0x10
    29a0:	7d00                	flw	f8,56(x10)
    29a2:	a0000023          	sb	x0,-1536(x0) # fffffa00 <_end+0x7efff9a8>
    29a6:	001d                	c.nop	7
    29a8:	3700                	fld	f8,40(x14)
    29aa:	5a01                	li	x20,-32
    29ac:	8402                	jr	x8
    29ae:	3700                	fld	f8,40(x14)
    29b0:	5b01                	li	x22,-32
    29b2:	7902                	flw	f18,32(x2)
    29b4:	3700                	fld	f8,40(x14)
    29b6:	5c01                	li	x24,-32
    29b8:	8302                	jr	x6
    29ba:	0000                	unimp
    29bc:	1c36                	slli	x24,x24,0x2d
    29be:	0011                	c.nop	4
    29c0:	7d00                	flw	f8,56(x10)
    29c2:	37000023          	sb	x16,864(x0) # 360 <number+0x148>
    29c6:	5a01                	li	x20,-32
    29c8:	7804                	flw	f9,48(x8)
    29ca:	7f98                	flw	f14,56(x15)
    29cc:	3706                	fld	f14,96(x2)
    29ce:	5b01                	li	x22,-32
    29d0:	7804                	flw	f9,48(x8)
    29d2:	7fb8                	flw	f14,120(x15)
    29d4:	3706                	fld	f14,96(x2)
    29d6:	5c01                	li	x24,-32
    29d8:	7804                	flw	f9,48(x8)
    29da:	7f9c                	flw	f15,56(x15)
    29dc:	0006                	c.slli	x0,0x1
    29de:	0a00                	addi	x8,x2,272
    29e0:	00000037          	lui	x0,0x0
    29e4:	1dd6                	slli	x27,x27,0x35
    29e6:	0000                	unimp
    29e8:	583a                	lw	x16,172(x2)
    29ea:	0000                	unimp
    29ec:	3900                	fld	f8,48(x10)
    29ee:	001d                	c.nop	7
    29f0:	0000                	unimp
    29f2:	370a                	fld	f14,160(x2)
    29f4:	0000                	unimp
    29f6:	e900                	fsw	f8,16(x10)
    29f8:	001d                	c.nop	7
    29fa:	3a00                	fld	f8,48(x12)
    29fc:	0058                	addi	x14,x2,4
    29fe:	0000                	unimp
    2a00:	1d42                	slli	x26,x26,0x30
    2a02:	0000                	unimp
    2a04:	0a00                	addi	x8,x2,272
    2a06:	00000037          	lui	x0,0x0
    2a0a:	1dfc                	addi	x15,x2,764
    2a0c:	0000                	unimp
    2a0e:	583a                	lw	x16,172(x2)
    2a10:	0000                	unimp
    2a12:	4b00                	lw	x8,16(x14)
    2a14:	001d                	c.nop	7
    2a16:	0000                	unimp
    2a18:	0010c93b          	0x10c93b
    2a1c:	0100                	addi	x8,x2,128
    2a1e:	0ced                	addi	x25,x25,27
    2a20:	000009e7          	jalr	x19,x0 # 0 <_start>
    2a24:	00000037          	lui	x0,0x0
    2a28:	001e3603          	0x1e3603
    2a2c:	3c00                	fld	f8,56(x8)
    2a2e:	7470                	flw	f12,108(x8)
    2a30:	0072                	c.slli	x0,0x1c
    2a32:	ed01                	bnez	x10,2a4a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x856>
    2a34:	7c25                	lui	x24,0xfffe9
    2a36:	0014                	0x14
    2a38:	3d00                	fld	f8,56(x10)
    2a3a:	0000087b          	0x87b
    2a3e:	ed01                	bnez	x10,2a56 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x862>
    2a40:	0000372f          	0x372f
    2a44:	3e00                	fld	f8,56(x12)
    2a46:	6d74                	flw	f13,92(x10)
    2a48:	0070                	addi	x12,x2,12
    2a4a:	ee01                	bnez	x12,2a62 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x86e>
    2a4c:	3709                	jal	294e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x75a>
    2a4e:	0000                	unimp
    2a50:	0000                	unimp
    2a52:	0011fe3f 0de10100 	0xde101000011fe3f
    2a5a:	07d5                	addi	x15,x15,21
    2a5c:	0000                	unimp
    2a5e:	001e6a03          	0x1e6a03
    2a62:	3d00                	fld	f8,56(x10)
    2a64:	0b8a                	slli	x23,x23,0x2
    2a66:	0000                	unimp
    2a68:	e101                	bnez	x10,2a68 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x874>
    2a6a:	6a2a                	flw	f20,136(x2)
    2a6c:	001e                	c.slli	x0,0x7
    2a6e:	3e00                	fld	f8,56(x12)
    2a70:	0069                	c.nop	26
    2a72:	e201                	bnez	x12,2a72 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x87e>
    2a74:	370d                	jal	2996 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x7a2>
    2a76:	0000                	unimp
    2a78:	4000                	lw	x8,0(x8)
    2a7a:	0ab4                	addi	x13,x2,344
    2a7c:	0000                	unimp
    2a7e:	e301                	bnez	x14,2a7e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x88a>
    2a80:	001e6a1b          	0x1e6a1b
    2a84:	0000                	unimp
    2a86:	01290403          	lb	x8,18(x18) # c012 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x9e1e>
    2a8a:	0000                	unimp
    2a8c:	000fee3f 0dd60100 	0xdd60100000fee3f
    2a94:	111d                	addi	x2,x2,-25
    2a96:	0000                	unimp
    2a98:	001ea403          	lw	x8,1(x29)
    2a9c:	3d00                	fld	f8,56(x10)
    2a9e:	0af6                	slli	x21,x21,0x1d
    2aa0:	0000                	unimp
    2aa2:	d601                	beqz	x12,29aa <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x7b6>
    2aa4:	a42a                	fsd	f10,8(x2)
    2aa6:	001e                	c.slli	x0,0x7
    2aa8:	3e00                	fld	f8,56(x12)
    2aaa:	0069                	c.nop	26
    2aac:	d701                	beqz	x14,29b4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x7c0>
    2aae:	370d                	jal	29d0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x7dc>
    2ab0:	0000                	unimp
    2ab2:	4000                	lw	x8,0(x8)
    2ab4:	0ab4                	addi	x13,x2,344
    2ab6:	0000                	unimp
    2ab8:	d801                	beqz	x8,29c8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x7d4>
    2aba:	001ea41b          	0x1ea41b
    2abe:	0000                	unimp
    2ac0:	01770403          	lb	x8,23(x14) # 18017 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x15e23>
    2ac4:	0000                	unimp
    2ac6:	00114c3f 0dcd0100 	0xdcd010000114c3f
    2ace:	00000e7b          	0xe7b
    2ad2:	001edc03          	lhu	x24,1(x29)
    2ad6:	3d00                	fld	f8,56(x10)
    2ad8:	1151                	addi	x2,x2,-12
    2ada:	0000                	unimp
    2adc:	cd01                	beqz	x10,2af4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x900>
    2ade:	371d                	jal	2a04 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x810>
    2ae0:	0000                	unimp
    2ae2:	3c00                	fld	f8,56(x8)
    2ae4:	0070                	addi	x12,x2,12
    2ae6:	cd01                	beqz	x10,2afe <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x90a>
    2ae8:	0007e233          	or	x4,x15,x0
    2aec:	3e00                	fld	f8,56(x12)
    2aee:	0069                	c.nop	26
    2af0:	ce01                	beqz	x12,2b08 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x914>
    2af2:	370d                	jal	2a14 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x820>
    2af4:	0000                	unimp
    2af6:	0000                	unimp
    2af8:	0c41                	addi	x24,x24,16
    2afa:	000e                	c.slli	x0,0x3
    2afc:	0100                	addi	x8,x2,128
    2afe:	06ac                	addi	x11,x2,840
    2b00:	00000d33          	add	x26,x0,x0
    2b04:	0d68                	addi	x10,x2,668
    2b06:	0000                	unimp
    2b08:	01d4                	addi	x13,x2,196
    2b0a:	0000                	unimp
    2b0c:	9c01                	0x9c01
    2b0e:	000021ef          	jal	x3,4b0e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x291a>
    2b12:	8a42                	mv	x20,x16
    2b14:	0100000b          	0x100000b
    2b18:	2eac                	fld	f11,88(x13)
    2b1a:	1e6a                	slli	x28,x28,0x3a
    2b1c:	0000                	unimp
    2b1e:	5a01                	li	x20,-32
    2b20:	f642                	fsw	f16,44(x2)
    2b22:	000a                	c.slli	x0,0x2
    2b24:	0100                	addi	x8,x2,128
    2b26:	49ac                	lw	x11,80(x11)
    2b28:	1ea4                	addi	x9,x2,888
    2b2a:	0000                	unimp
    2b2c:	5b01                	li	x22,-32
    2b2e:	0007be2f          	0x7be2f
    2b32:	0100                	addi	x8,x2,128
    2b34:	0dad                	addi	x27,x27,11
    2b36:	00000037          	lui	x0,0x0
    2b3a:	3d65                	jal	29f2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x7fe>
    2b3c:	0000                	unimp
    2b3e:	0008cb2f          	0x8cb2f
    2b42:	0100                	addi	x8,x2,128
    2b44:	00370daf          	0x370daf
    2b48:	0000                	unimp
    2b4a:	3d8e                	fld	f27,224(x2)
    2b4c:	0000                	unimp
    2b4e:	0022e543          	fmadd.s	f10,f5,f2,f0,unknown
    2b52:	7000                	flw	f8,32(x8)
    2b54:	000d                	c.nop	3
    2b56:	d800                	sw	x8,48(x8)
    2b58:	0000                	unimp
    2b5a:	0100                	addi	x8,x2,128
    2b5c:	1f691db7          	lui	x27,0x1f691
    2b60:	0000                	unimp
    2b62:	0244                	addi	x9,x2,260
    2b64:	c6000023          	sb	x0,-928(x0) # fffffc60 <_end+0x7efffc08>
    2b68:	003d                	c.nop	15
    2b6a:	4400                	lw	x8,8(x8)
    2b6c:	22f6                	fld	f5,344(x2)
    2b6e:	0000                	unimp
    2b70:	3dd9                	jal	2a46 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x852>
    2b72:	0000                	unimp
    2b74:	d830                	sw	x12,112(x8)
    2b76:	0000                	unimp
    2b78:	4500                	lw	x8,8(x10)
    2b7a:	230e                	fld	f6,192(x2)
    2b7c:	0000                	unimp
    2b7e:	1845                	addi	x16,x16,-15
    2b80:	00000023          	sb	x0,0(x0) # 0 <_start>
    2b84:	4600                	lw	x8,8(x12)
    2b86:	000021ef          	jal	x3,4b86 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x2992>
    2b8a:	0dc0                	addi	x8,x2,724
    2b8c:	0000                	unimp
    2b8e:	0020                	addi	x8,x2,8
    2b90:	0000                	unimp
    2b92:	c301                	beqz	x14,2b92 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x99e>
    2b94:	fb16                	fsw	f5,180(x2)
    2b96:	001f 4400 2200      	0x22004400001f
    2b9c:	0000                	unimp
    2b9e:	3dec                	fld	f11,248(x11)
    2ba0:	0000                	unimp
    2ba2:	001dfc47          	fmsub.s	f24,f27,f1,f0
    2ba6:	c400                	sw	x8,8(x8)
    2ba8:	000d                	c.nop	3
    2baa:	1800                	addi	x8,x2,48
    2bac:	0000                	unimp
    2bae:	0100                	addi	x8,x2,128
    2bb0:	1ba4                	addi	x9,x2,504
    2bb2:	1d44                	addi	x9,x2,692
    2bb4:	001e                	c.slli	x0,0x7
    2bb6:	ff00                	fsw	f8,56(x14)
    2bb8:	003d                	c.nop	15
    2bba:	4400                	lw	x8,8(x8)
    2bbc:	1e11                	addi	x28,x28,-28
    2bbe:	0000                	unimp
    2bc0:	00003e13          	sltiu	x28,x0,0
    2bc4:	2948                	fld	f10,144(x10)
    2bc6:	001e                	c.slli	x0,0x7
    2bc8:	2600                	fld	f8,8(x12)
    2bca:	003e                	c.slli	x0,0xf
    2bcc:	4300                	lw	x8,0(x14)
    2bce:	2325                	jal	30f6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xf02>
    2bd0:	0000                	unimp
    2bd2:	0dcc                	addi	x11,x2,724
    2bd4:	0000                	unimp
    2bd6:	0100                	addi	x8,x2,128
    2bd8:	0000                	unimp
    2bda:	f301                	bnez	x14,2ada <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x8e6>
    2bdc:	da1c                	sw	x15,48(x12)
    2bde:	001f 4400 233a      	0x233a4400001f
    2be4:	0000                	unimp
    2be6:	3e44                	fld	f9,184(x12)
    2be8:	0000                	unimp
    2bea:	0030                	addi	x12,x2,8
    2bec:	0001                	nop
    2bee:	4500                	lw	x8,8(x10)
    2bf0:	2344                	fld	f9,128(x14)
    2bf2:	0000                	unimp
    2bf4:	0000                	unimp
    2bf6:	00235147          	fmsub.s	f2,f6,f2,f0,unknown
    2bfa:	d400                	sw	x8,40(x8)
    2bfc:	000d                	c.nop	3
    2bfe:	0400                	addi	x8,x2,512
    2c00:	0000                	unimp
    2c02:	0100                	addi	x8,x2,128
    2c04:	15f0                	addi	x12,x2,748
    2c06:	6644                	flw	f9,12(x12)
    2c08:	62000023          	sb	x0,1568(x0) # 620 <bsg_printf+0x154>
    2c0c:	003e                	c.slli	x0,0xf
    2c0e:	4500                	lw	x8,8(x10)
    2c10:	2370                	fld	f12,192(x14)
    2c12:	0000                	unimp
    2c14:	0000                	unimp
    2c16:	4300                	lw	x8,0(x14)
    2c18:	2281                	jal	2d58 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xb64>
    2c1a:	0000                	unimp
    2c1c:	0de8                	addi	x10,x2,732
    2c1e:	0000                	unimp
    2c20:	0118                	addi	x14,x2,128
    2c22:	0000                	unimp
    2c24:	bb01                	j	2934 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x740>
    2c26:	7925                	lui	x18,0xfffe9
    2c28:	0020                	addi	x8,x2,8
    2c2a:	4900                	lw	x8,16(x10)
    2c2c:	22b6                	fld	f5,328(x2)
    2c2e:	0000                	unimp
    2c30:	aa44                	fsd	f9,144(x12)
    2c32:	0022                	c.slli	x0,0x8
    2c34:	7500                	flw	f8,40(x10)
    2c36:	003e                	c.slli	x0,0xf
    2c38:	4400                	lw	x8,8(x8)
    2c3a:	229e                	fld	f5,448(x2)
    2c3c:	0000                	unimp
    2c3e:	3e88                	fld	f10,56(x13)
    2c40:	0000                	unimp
    2c42:	9244                	0x9244
    2c44:	0022                	c.slli	x0,0x8
    2c46:	9b00                	0x9b00
    2c48:	003e                	c.slli	x0,0xf
    2c4a:	3000                	fld	f8,32(x8)
    2c4c:	0118                	addi	x14,x2,128
    2c4e:	0000                	unimp
    2c50:	c245                	beqz	x12,2cf0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xafc>
    2c52:	0022                	c.slli	x0,0x8
    2c54:	4800                	lw	x8,16(x8)
    2c56:	22cc                	fld	f11,128(x13)
    2c58:	0000                	unimp
    2c5a:	3eae                	fld	f29,232(x2)
    2c5c:	0000                	unimp
    2c5e:	d848                	sw	x10,52(x8)
    2c60:	0022                	c.slli	x0,0x8
    2c62:	d200                	sw	x8,32(x12)
    2c64:	003e                	c.slli	x0,0xf
    2c66:	4700                	lw	x8,8(x14)
    2c68:	1eaa                	slli	x29,x29,0x2a
    2c6a:	0000                	unimp
    2c6c:	0e08                	addi	x10,x2,784
    2c6e:	0000                	unimp
    2c70:	001c                	0x1c
    2c72:	0000                	unimp
    2c74:	6b01                	0x6b01
    2c76:	1ec74413          	xori	x8,x14,492
    2c7a:	0000                	unimp
    2c7c:	3ee5                	jal	2874 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x680>
    2c7e:	0000                	unimp
    2c80:	bb44                	fsd	f9,176(x14)
    2c82:	001e                	c.slli	x0,0x7
    2c84:	fa00                	fsw	f8,48(x12)
    2c86:	003e                	c.slli	x0,0xf
    2c88:	4800                	lw	x8,16(x8)
    2c8a:	1ed1                	addi	x29,x29,-12
    2c8c:	0000                	unimp
    2c8e:	3f0d                	jal	2bc0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x9cc>
    2c90:	0000                	unimp
    2c92:	0000                	unimp
    2c94:	4600                	lw	x8,8(x12)
    2c96:	220d                	jal	2db8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xbc4>
    2c98:	0000                	unimp
    2c9a:	0e4c                	addi	x11,x2,788
    2c9c:	0000                	unimp
    2c9e:	0074                	addi	x13,x2,12
    2ca0:	0000                	unimp
    2ca2:	c101                	beqz	x10,2ca2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xaae>
    2ca4:	5826                	lw	x16,104(x2)
    2ca6:	0021                	c.nop	8
    2ca8:	4400                	lw	x8,8(x8)
    2caa:	222a                	fld	f4,136(x2)
    2cac:	0000                	unimp
    2cae:	3f2c                	fld	f11,120(x14)
    2cb0:	0000                	unimp
    2cb2:	1e44                	addi	x9,x2,820
    2cb4:	0022                	c.slli	x0,0x8
    2cb6:	3f00                	fld	f8,56(x14)
    2cb8:	4800003f 00002236 	0x22364800003f
    2cc0:	3f52                	fld	f30,304(x2)
    2cc2:	0000                	unimp
    2cc4:	4048                	lw	x10,4(x8)
    2cc6:	0022                	c.slli	x0,0x8
    2cc8:	7200                	flw	f8,32(x12)
    2cca:	4300003f 00001dfc 	0x1dfc4300003f
    2cd2:	0e58                	addi	x14,x2,788
    2cd4:	0000                	unimp
    2cd6:	0130                	addi	x12,x2,136
    2cd8:	0000                	unimp
    2cda:	9001                	srli	x8,x8,0x20
    2cdc:	00212f1b          	0x212f1b
    2ce0:	4400                	lw	x8,8(x8)
    2ce2:	1e1d                	addi	x28,x28,-25
    2ce4:	0000                	unimp
    2ce6:	3f85                	jal	2c56 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xa62>
    2ce8:	0000                	unimp
    2cea:	1144                	addi	x9,x2,164
    2cec:	001e                	c.slli	x0,0x7
    2cee:	9900                	0x9900
    2cf0:	3000003f 00000130 	0x1303000003f
    2cf8:	2948                	fld	f10,144(x10)
    2cfa:	001e                	c.slli	x0,0x7
    2cfc:	ac00                	fsd	f8,24(x8)
    2cfe:	4300003f 00002325 	0x23254300003f
    2d06:	0e64                	addi	x9,x2,796
    2d08:	0000                	unimp
    2d0a:	0148                	addi	x10,x2,132
    2d0c:	0000                	unimp
    2d0e:	f301                	bnez	x14,2c0e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xa1a>
    2d10:	0e1c                	addi	x15,x2,784
    2d12:	0021                	c.nop	8
    2d14:	4400                	lw	x8,8(x8)
    2d16:	233a                	fld	f6,392(x2)
    2d18:	0000                	unimp
    2d1a:	3fca                	fld	f31,176(x2)
    2d1c:	0000                	unimp
    2d1e:	4830                	lw	x12,80(x8)
    2d20:	0001                	nop
    2d22:	4500                	lw	x8,8(x10)
    2d24:	2344                	fld	f9,128(x14)
    2d26:	0000                	unimp
    2d28:	0000                	unimp
    2d2a:	00235147          	fmsub.s	f2,f6,f2,f0,unknown
    2d2e:	6c00                	flw	f8,24(x8)
    2d30:	000e                	c.slli	x0,0x3
    2d32:	0400                	addi	x8,x2,512
    2d34:	0000                	unimp
    2d36:	0100                	addi	x8,x2,128
    2d38:	15f0                	addi	x12,x2,748
    2d3a:	6644                	flw	f9,12(x12)
    2d3c:	e8000023          	sb	x0,-384(x0) # fffffe80 <_end+0x7efffe28>
    2d40:	4500003f 00002370 	0x23704500003f
    2d48:	0000                	unimp
    2d4a:	4700                	lw	x8,8(x14)
    2d4c:	1e36                	slli	x28,x28,0x2d
    2d4e:	0000                	unimp
    2d50:	0e74                	addi	x13,x2,796
    2d52:	0000                	unimp
    2d54:	0034                	addi	x13,x2,8
    2d56:	0000                	unimp
    2d58:	9701                	srai	x14,x14,0x20
    2d5a:	4912                	lw	x18,4(x2)
    2d5c:	00001e47          	fmsub.s	f28,f0,f0,f0,rtz
    2d60:	5348                	lw	x10,36(x14)
    2d62:	001e                	c.slli	x0,0x7
    2d64:	fb00                	fsw	f8,48(x14)
    2d66:	4800003f 00001e5d 	0x1e5d4800003f
    2d6e:	400e                	0x400e
    2d70:	0000                	unimp
    2d72:	0000                	unimp
    2d74:	4d4a                	lw	x26,144(x2)
    2d76:	0022                	c.slli	x0,0x8
    2d78:	c000                	sw	x8,0(x8)
    2d7a:	000e                	c.slli	x0,0x3
    2d7c:	6000                	flw	f8,0(x8)
    2d7e:	0001                	nop
    2d80:	0100                	addi	x8,x2,128
    2d82:	26be                	fld	f13,456(x2)
    2d84:	5e44                	lw	x9,60(x12)
    2d86:	0022                	c.slli	x0,0x8
    2d88:	4800                	lw	x8,16(x8)
    2d8a:	0040                	addi	x8,x2,4
    2d8c:	3000                	fld	f8,32(x8)
    2d8e:	0160                	addi	x8,x2,140
    2d90:	0000                	unimp
    2d92:	6a48                	flw	f10,20(x12)
    2d94:	0022                	c.slli	x0,0x8
    2d96:	6600                	flw	f8,8(x12)
    2d98:	0040                	addi	x8,x2,4
    2d9a:	4800                	lw	x8,16(x8)
    2d9c:	2274                	fld	f13,192(x12)
    2d9e:	0000                	unimp
    2da0:	407a                	0x407a
    2da2:	0000                	unimp
    2da4:	001eaa43          	fmadd.s	f20,f29,f1,f0,rdn
    2da8:	c800                	sw	x8,16(x8)
    2daa:	000e                	c.slli	x0,0x3
    2dac:	7800                	flw	f8,48(x8)
    2dae:	0001                	nop
    2db0:	0100                	addi	x8,x2,128
    2db2:	21be137b          	0x21be137b
    2db6:	0000                	unimp
    2db8:	c744                	sw	x9,12(x14)
    2dba:	001e                	c.slli	x0,0x7
    2dbc:	9800                	0x9800
    2dbe:	0040                	addi	x8,x2,4
    2dc0:	4400                	lw	x8,8(x8)
    2dc2:	00001ebb          	0x1ebb
    2dc6:	40ad                	li	x1,11
    2dc8:	0000                	unimp
    2dca:	7830                	flw	f12,112(x8)
    2dcc:	0001                	nop
    2dce:	4800                	lw	x8,16(x8)
    2dd0:	1ed1                	addi	x29,x29,-12
    2dd2:	0000                	unimp
    2dd4:	40c0                	lw	x8,4(x9)
    2dd6:	0000                	unimp
    2dd8:	0000                	unimp
    2dda:	704a                	flw	f0,176(x2)
    2ddc:	001e                	c.slli	x0,0x7
    2dde:	f000                	fsw	f8,32(x8)
    2de0:	000e                	c.slli	x0,0x3
    2de2:	9000                	0x9000
    2de4:	0001                	nop
    2de6:	0100                	addi	x8,x2,128
    2de8:	1281                	addi	x5,x5,-32
    2dea:	8149                	srli	x10,x10,0x12
    2dec:	001e                	c.slli	x0,0x7
    2dee:	3000                	fld	f8,32(x8)
    2df0:	0190                	addi	x12,x2,192
    2df2:	0000                	unimp
    2df4:	8d48                	0x8d48
    2df6:	001e                	c.slli	x0,0x7
    2df8:	f700                	fsw	f8,40(x14)
    2dfa:	0040                	addi	x8,x2,4
    2dfc:	4800                	lw	x8,16(x8)
    2dfe:	00001e97          	auipc	x29,0x1
    2e02:	4115                	li	x2,5
    2e04:	0000                	unimp
    2e06:	0000                	unimp
    2e08:	0000                	unimp
    2e0a:	3f00                	fld	f8,56(x14)
    2e0c:	08ee                	slli	x17,x17,0x1b
    2e0e:	0000                	unimp
    2e10:	a301                	j	3310 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x111c>
    2e12:	080d                	addi	x16,x16,3
    2e14:	0012                	c.slli	x0,0x4
    2e16:	0300                	addi	x8,x2,384
    2e18:	220d                	jal	2f3a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xd46>
    2e1a:	0000                	unimp
    2e1c:	8a3d                	andi	x12,x12,15
    2e1e:	0100000b          	0x100000b
    2e22:	1e6a2da3          	sw	x6,507(x20)
    2e26:	0000                	unimp
    2e28:	3f00                	fld	f8,56(x14)
    2e2a:	1190                	addi	x12,x2,224
    2e2c:	0000                	unimp
    2e2e:	8c01                	sub	x8,x8,x8
    2e30:	100d                	c.nop	-29
    2e32:	03000007          	0x3000007
    2e36:	224d                	jal	2fd8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xde4>
    2e38:	0000                	unimp
    2e3a:	8a3d                	andi	x12,x12,15
    2e3c:	0100000b          	0x100000b
    2e40:	388c                	fld	f11,48(x9)
    2e42:	1e6a                	slli	x28,x28,0x3a
    2e44:	0000                	unimp
    2e46:	f63d                	bnez	x12,2db4 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xbc0>
    2e48:	000a                	c.slli	x0,0x2
    2e4a:	0100                	addi	x8,x2,128
    2e4c:	538c                	lw	x11,32(x15)
    2e4e:	1ea4                	addi	x9,x2,888
    2e50:	0000                	unimp
    2e52:	693e                	flw	f18,204(x2)
    2e54:	0100                	addi	x8,x2,128
    2e56:	0d8d                	addi	x27,x27,3
    2e58:	00000037          	lui	x0,0x0
    2e5c:	9040                	0x9040
    2e5e:	0008                	0x8
    2e60:	0100                	addi	x8,x2,128
    2e62:	0d8e                	slli	x27,x27,0x3
    2e64:	00000037          	lui	x0,0x0
    2e68:	3f00                	fld	f8,56(x14)
    2e6a:	00000a93          	li	x21,0
    2e6e:	7701                	lui	x14,0xfffe0
    2e70:	a00d                	j	2e92 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc9e>
    2e72:	0012                	c.slli	x0,0x4
    2e74:	0300                	addi	x8,x2,384
    2e76:	2281                	jal	2fb6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xdc2>
    2e78:	0000                	unimp
    2e7a:	f63d                	bnez	x12,2de8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xbf4>
    2e7c:	000a                	c.slli	x0,0x2
    2e7e:	0100                	addi	x8,x2,128
    2e80:	1ea43877          	0x1ea43877
    2e84:	0000                	unimp
    2e86:	693e                	flw	f18,204(x2)
    2e88:	0100                	addi	x8,x2,128
    2e8a:	0d79                	addi	x26,x26,30
    2e8c:	00000037          	lui	x0,0x0
    2e90:	5f40                	lw	x8,60(x14)
    2e92:	0006                	c.slli	x0,0x1
    2e94:	0100                	addi	x8,x2,128
    2e96:	0d7a                	slli	x26,x26,0x1e
    2e98:	00000037          	lui	x0,0x0
    2e9c:	3f00                	fld	f8,56(x14)
    2e9e:	0f0e                	slli	x30,x30,0x3
    2ea0:	0000                	unimp
    2ea2:	6501                	0x6501
    2ea4:	5a0d                	li	x20,-29
    2ea6:	0300000f          	fence	rw,unknown
    2eaa:	22e5                	jal	3092 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xe9e>
    2eac:	0000                	unimp
    2eae:	8a3d                	andi	x12,x12,15
    2eb0:	0100000b          	0x100000b
    2eb4:	3465                	jal	295c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x768>
    2eb6:	1e6a                	slli	x28,x28,0x3a
    2eb8:	0000                	unimp
    2eba:	f63d                	bnez	x12,2e28 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xc34>
    2ebc:	000a                	c.slli	x0,0x2
    2ebe:	0100                	addi	x8,x2,128
    2ec0:	4f65                	li	x30,25
    2ec2:	1ea4                	addi	x9,x2,888
    2ec4:	0000                	unimp
    2ec6:	be3d                	j	2a04 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x810>
    2ec8:	01000007          	0x1000007
    2ecc:	5c65                	li	x24,-7
    2ece:	00000037          	lui	x0,0x0
    2ed2:	cb3d                	beqz	x14,2f48 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xd54>
    2ed4:	0008                	0x8
    2ed6:	0100                	addi	x8,x2,128
    2ed8:	6f65                	lui	x30,0x19
    2eda:	00000037          	lui	x0,0x0
    2ede:	693e                	flw	f18,204(x2)
    2ee0:	0100                	addi	x8,x2,128
    2ee2:	0d66                	slli	x26,x26,0x19
    2ee4:	00000037          	lui	x0,0x0
    2ee8:	b440                	fsd	f8,168(x8)
    2eea:	000a                	c.slli	x0,0x2
    2eec:	0100                	addi	x8,x2,128
    2eee:	1ea41b67          	0x1ea41b67
    2ef2:	0000                	unimp
    2ef4:	9040                	0x9040
    2ef6:	0008                	0x8
    2ef8:	0100                	addi	x8,x2,128
    2efa:	0d6a                	slli	x26,x26,0x1a
    2efc:	00000037          	lui	x0,0x0
    2f00:	3f00                	fld	f8,56(x14)
    2f02:	09d2                	slli	x19,x19,0x14
    2f04:	0000                	unimp
    2f06:	5a01                	li	x20,-32
    2f08:	5a0d                	li	x20,-29
    2f0a:	000c                	0xc
    2f0c:	0300                	addi	x8,x2,384
    2f0e:	2325                	jal	3436 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1242>
    2f10:	0000                	unimp
    2f12:	8a3d                	andi	x12,x12,15
    2f14:	0100000b          	0x100000b
    2f18:	345a                	fld	f8,432(x2)
    2f1a:	1e6a                	slli	x28,x28,0x3a
    2f1c:	0000                	unimp
    2f1e:	be3d                	j	2a5c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x868>
    2f20:	01000007          	0x1000007
    2f24:	415a                	lw	x2,148(x2)
    2f26:	00000037          	lui	x0,0x0
    2f2a:	693e                	flw	f18,204(x2)
    2f2c:	0100                	addi	x8,x2,128
    2f2e:	00370e5b          	0x370e5b
    2f32:	0000                	unimp
    2f34:	b440                	fsd	f8,168(x8)
    2f36:	000a                	c.slli	x0,0x2
    2f38:	0100                	addi	x8,x2,128
    2f3a:	1b5c                	addi	x15,x2,436
    2f3c:	1e6a                	slli	x28,x28,0x3a
    2f3e:	0000                	unimp
    2f40:	3b00                	fld	f8,48(x14)
    2f42:	108a                	slli	x1,x1,0x22
    2f44:	0000                	unimp
    2f46:	7302                	flw	f6,32(x2)
    2f48:	af0c                	fsd	f11,24(x14)
    2f4a:	37000007          	0x37000007
    2f4e:	0000                	unimp
    2f50:	0300                	addi	x8,x2,384
    2f52:	2351                	jal	34d6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x12e2>
    2f54:	0000                	unimp
    2f56:	703c                	flw	f15,96(x8)
    2f58:	0200                	addi	x8,x2,256
    2f5a:	147c1b73          	csrrw	x22,0x147,x24
    2f5e:	0000                	unimp
    2f60:	743e                	flw	f8,236(x2)
    2f62:	706d                	c.lui	x0,0xffffb
    2f64:	0200                	addi	x8,x2,256
    2f66:	00372473          	csrrs	x8,fcsr,x14
    2f6a:	0000                	unimp
    2f6c:	3b00                	fld	f8,48(x14)
    2f6e:	0dc4                	addi	x9,x2,724
    2f70:	0000                	unimp
    2f72:	7202                	flw	f4,32(x2)
    2f74:	e20c                	fsw	f11,0(x12)
    2f76:	0008                	0x8
    2f78:	3700                	fld	f8,40(x14)
    2f7a:	0000                	unimp
    2f7c:	0300                	addi	x8,x2,384
    2f7e:	237d                	jal	352c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1338>
    2f80:	0000                	unimp
    2f82:	703c                	flw	f15,96(x8)
    2f84:	0200                	addi	x8,x2,256
    2f86:	1872                	slli	x16,x16,0x3c
    2f88:	147c                	addi	x15,x2,556
    2f8a:	0000                	unimp
    2f8c:	743e                	flw	f8,236(x2)
    2f8e:	706d                	c.lui	x0,0xffffb
    2f90:	0200                	addi	x8,x2,256
    2f92:	2472                	fld	f8,280(x2)
    2f94:	00000037          	lui	x0,0x0
    2f98:	4b00                	lw	x8,16(x14)
    2f9a:	0a84                	addi	x9,x2,336
    2f9c:	0000                	unimp
    2f9e:	0a7a                	slli	x20,x20,0x1e
    2fa0:	0000                	unimp
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  li  x1, 0
   0:	1101                	addi	x2,x2,-32
   2:	1000                	addi	x8,x2,32
  li  x3, 0
   4:	1106                	slli	x2,x2,0x21
   6:	1201                	addi	x4,x4,-32
  li  x4, 0
   8:	0301                	addi	x6,x6,0
   a:	1b0e                	slli	x22,x22,0x23
  li  x5, 0
   c:	250e                	fld	f10,192(x2)
   e:	130e                	slli	x6,x6,0x23
  li  x6, 0
  10:	0005                	c.nop	1
  12:	0000                	unimp
  li  x7, 0
  14:	1101                	addi	x2,x2,-32
  16:	2501                	jal	616 <bsg_printf+0x14a>
  li  x8, 0
  18:	130e                	slli	x6,x6,0x23
  1a:	1b0e030b          	0x1b0e030b
  li  x9, 0
  1e:	550e                	lw	x10,224(x2)
  li  x10,0
  20:	10011117          	auipc	x2,0x10011
  li  x11,0
  24:	02000017          	auipc	x0,0x2000
  li  x12,0
  28:	0024                	addi	x9,x2,8
  2a:	0b3e0b0b          	0xb3e0b0b
  li  x13,0
  2e:	00000803          	lb	x16,0(x0) # 0 <_start>
  li  x14,0
  32:	0b002403          	lw	x8,176(x0) # b0 <bsg_group_size+0xaf>
  li  x15,0
  36:	030b3e0b          	0x30b3e0b
  li  x16,0
  3a:	000e                	c.slli	x0,0x3
  li  x17,0
  3c:	0400                	addi	x8,x2,512
  3e:	0034                	addi	x13,x2,8
  li  x18,0
  40:	0b3a0e03          	lb	x28,179(x20)
  li  x19,0
  44:	0b390b3b          	0xb390b3b
  li  x20,0
  48:	1349                	addi	x6,x6,-14
  4a:	193c193f 16050000 	0x16050000193c193f
  li  x22,0
  52:	0300                	addi	x8,x2,384
  li  x23,0
  54:	3a0e                	fld	f20,224(x2)
  56:	390b3b0b          	0x390b3b0b
  li  x24,0
  5a:	0013490b          	0x13490b
  li  x25,0
  5e:	0600                	addi	x8,x2,768
  li  x26,0
  60:	0034                	addi	x13,x2,8
  62:	0b3a0e03          	lb	x28,179(x20)
  li  x27,0
  66:	0b390b3b          	0xb390b3b
  li  x28,0
  6a:	1349                	addi	x6,x6,-14
  li  x29,0
  6c:	1802193f 2e070000 	0x2e0700001802193f
  li  x31,0
  74:	3f01                	jal	ffffff84 <_end+0x7effff2c>
  76:	0319                	addi	x6,x6,6
  li t0, 0x00003000 # mstatus.FS
  78:	3a0e                	fld	f20,224(x2)
  7a:	390b3b0b          	0x390b3b0b
  csrs mstatus, t0 # enable FPU
  7e:	1113490b          	0x1113490b
  fscsr x0
  82:	1201                	addi	x4,x4,-32
  li t0, 0
  84:	4006                	0x4006
  86:	9718                	0x9718
  fcvt.s.w f0, x0 
  88:	1942                	slli	x18,x18,0x30
  8a:	1301                	addi	x6,x6,-32
  fcvt.s.w f1, x0 
  8c:	0000                	unimp
  8e:	1d08                	addi	x10,x2,688
  fcvt.s.w f2, x0 
  90:	3101                	jal	fffffc90 <_end+0x7efffc38>
  92:	12011113          	0x12011113
  fcvt.s.w f3, x0 
  96:	5806                	lw	x16,96(x2)
  fcvt.s.w f4, x0 
  98:	570b590b          	0x570b590b
  fcvt.s.w f5, x0 
  9c:	0900000b          	0x900000b
  fcvt.s.w f6, x0 
  a0:	1331010b          	0x1331010b
  fcvt.s.w f7, x0 
  a4:	0111                	addi	x2,x2,4
  a6:	0612                	slli	x12,x12,0x4
  fcvt.s.w f8, x0 
  a8:	0000                	unimp
  aa:	340a                	fld	f8,160(x2)
  fcvt.s.w f9, x0 
  ac:	3100                	fld	f8,32(x10)
  ae:	00170213          	addi	x4,x14,1 # fffe0001 <_end+0x7efdffa9>
  fcvt.s.w f10,x0 
  b2:	0b00                	addi	x8,x2,400
  fcvt.s.w f11,x0 
  b4:	012e                	slli	x2,x2,0xb
  b6:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
  fcvt.s.w f13,x0 
  be:	0b39                	addi	x22,x22,14
  fcvt.s.w f14,x0 
  c0:	1349                	addi	x6,x6,-14
  c2:	0b20                	addi	x8,x2,408
  fcvt.s.w f15,x0 
  c4:	1301                	addi	x6,x6,-32
  c6:	0000                	unimp
  fcvt.s.w f16,x0 
  c8:	0b0c                	addi	x11,x2,400
  ca:	0001                	nop
  fcvt.s.w f17,x0 
  cc:	0d00                	addi	x8,x2,656
  ce:	0034                	addi	x13,x2,8
  fcvt.s.w f18,x0 
  d0:	0b3a0e03          	lb	x28,179(x20)
  fcvt.s.w f19,x0 
  d4:	0b390b3b          	0xb390b3b
  fcvt.s.w f20,x0 
  d8:	1349                	addi	x6,x6,-14
  da:	0000                	unimp
  fcvt.s.w f21,x0 
  dc:	0f0e                	slli	x30,x30,0x3
  de:	0b00                	addi	x8,x2,400
  fcvt.s.w f22,x0 
  e0:	0013490b          	0x13490b
  fcvt.s.w f23,x0 
  e4:	0f00                	addi	x8,x2,912
  e6:	012e                	slli	x2,x2,0xb
  fcvt.s.w f24,x0 
  e8:	1331                	addi	x6,x6,-20
  ea:	0111                	addi	x2,x2,4
  fcvt.s.w f25,x0 
  ec:	0612                	slli	x12,x12,0x4
  ee:	1840                	addi	x8,x2,52
  fcvt.s.w f26,x0 
  f0:	00194297          	auipc	x5,0x194
  fcvt.s.w f27,x0 
  f4:	0000                	unimp
  f6:	1101                	addi	x2,x2,-32
  fcvt.s.w f28,x0 
  f8:	2501                	jal	6f8 <bsg_printf+0x22c>
  fa:	130e                	slli	x6,x6,0x23
  fcvt.s.w f29,x0 
  fc:	1b0e030b          	0x1b0e030b
  fcvt.s.w f30,x0 
 100:	110e                	slli	x2,x2,0x23
 102:	1201                	addi	x4,x4,-32
  fcvt.s.w f31,x0 
 104:	1006                	c.slli	x0,0x21
 106:	02000017          	auipc	x0,0x2000
  la gp, _gp
 10a:	0016                	c.slli	x0,0x5
 10c:	0b3a0e03          	lb	x28,179(x20)
  la  tp, _bsg_data_end_addr + 63
 110:	0b390b3b          	0xb390b3b
 114:	1349                	addi	x6,x6,-14
 116:	0000                	unimp
  and tp, tp, -64
 118:	0b000f03          	lb	x30,176(x0) # b0 <bsg_group_size+0xaf>
  la sp, _sp
 11c:	0013490b          	0x13490b
 120:	0400                	addi	x8,x2,512
 122:	0024                	addi	x9,x2,8
  j main
 124:	0b3e0b0b          	0xb3e0b0b
  j 2b
 128:	00000803          	lb	x16,0(x0) # 0 <_start>
  if (__bsg_id == 0) 
 12c:	3505                	jal	ffffff4c <_end+0x7efffef4>
 12e:	4900                	lw	x8,16(x10)
 130:	06000013          	li	x0,96
 134:	0024                	addi	x9,x2,8
 136:	0b3e0b0b          	0xb3e0b0b
     *signal_ptr = cuda_finish_signal_val;     
 13a:	00000e03          	lb	x28,0(x0) # 0 <_start>
 13e:	03003407          	fld	f8,48(x0) # 30 <bsg_group_size+0x2f>
 142:	3a0e                	fld	f20,224(x2)
 144:	390b3b0b          	0x390b3b0b
 148:	3f13490b          	0x3f13490b
}
 14c:	0219                	addi	x4,x4,6
 14e:	0018                	0x18
  bsg_remote_store(0,0,bsg_x_v,0);
 150:	0800                	addi	x8,x2,16
 152:	012e                	slli	x2,x2,0xb
 154:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
  bsg_remote_store(0,0,bsg_y_v,0);
 15c:	0b39                	addi	x22,x22,14
 15e:	0111                	addi	x2,x2,4
  bsg_remote_store(0,0,bsg_x_v,0);
 160:	0612                	slli	x12,x12,0x4
 162:	1840                	addi	x8,x2,52
  bsg_remote_store(0,0,bsg_y_v,0);
 164:	00194297          	auipc	x5,0x194
  bsg_remote_store(0,0,bsg_x_v,0);
 168:	0900                	addi	x8,x2,144
 16a:	0034                	addi	x13,x2,8
  bsg_remote_store(0,0,bsg_y_v,0);
 16c:	0b3a0e03          	lb	x28,179(x20)
 170:	0b390b3b          	0xb390b3b
  bsg_wait_while(*bsg_x_v < 0);
 174:	1349                	addi	x6,x6,-14
 176:	1802                	slli	x16,x16,0x20
 178:	0000                	unimp
 17a:	340a                	fld	f8,160(x2)
  bsg_wait_while(*bsg_y_v < 0);
 17c:	0300                	addi	x8,x2,384
 17e:	3a0e                	fld	f20,224(x2)
 180:	390b3b0b          	0x390b3b0b
  if (!*bsg_x_v && !*bsg_y_v)
 184:	0213490b          	0x213490b
 188:	0b000017          	auipc	x0,0xb000
 18c:	0111010b          	0x111010b
 190:	0612                	slli	x12,x12,0x4
 192:	0000                	unimp
        bsg_remote_store(x,y,bsg_x_v,x);
 194:	340c                	fld	f11,40(x8)
 196:	0300                	addi	x8,x2,384
        bsg_remote_store(x,y,bsg_y_v,y);
 198:	3a08                	fld	f10,48(x12)
 19a:	390b3b0b          	0x390b3b0b
  grp_org_x_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_X );
 19e:	0213490b          	0x213490b
 1a2:	00000017          	auipc	x0,0x0
 1a6:	1101                	addi	x2,x2,-32
 1a8:	2501                	jal	7a8 <bsg_printf+0x2dc>
 1aa:	130e                	slli	x6,x6,0x23
 1ac:	1b0e030b          	0x1b0e030b
 1b0:	110e                	slli	x2,x2,0x23
 1b2:	1201                	addi	x4,x4,-32
 1b4:	1006                	c.slli	x0,0x21
 1b6:	02000017          	auipc	x0,0x2000
 1ba:	0016                	c.slli	x0,0x5
  __bsg_grp_org_x  = * grp_org_x_p;
 1bc:	0b3a0e03          	lb	x28,179(x20)
  grp_org_y_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_Y );
 1c0:	0b390b3b          	0xb390b3b
 1c4:	1349                	addi	x6,x6,-14
 1c6:	0000                	unimp
  __bsg_grp_org_x  = * grp_org_x_p;
 1c8:	0b000f03          	lb	x30,176(x0) # b0 <bsg_group_size+0xaf>
 1cc:	0013490b          	0x13490b
  __bsg_grp_org_y  = * grp_org_y_p;
 1d0:	0400                	addi	x8,x2,512
 1d2:	0024                	addi	x9,x2,8
 1d4:	0b3e0b0b          	0xb3e0b0b
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
 1d8:	00000803          	lb	x16,0(x0) # 0 <_start>
  __bsg_grp_org_y  = * grp_org_y_p;
 1dc:	3505                	jal	fffffffc <_end+0x7effffa4>
 1de:	4900                	lw	x8,16(x10)
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
 1e0:	06000013          	li	x0,96
  __bsg_grid_dim_x = 1;
 1e4:	0024                	addi	x9,x2,8
 1e6:	0b3e0b0b          	0xb3e0b0b
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
 1ea:	00000e03          	lb	x28,0(x0) # 0 <_start>
  __bsg_grid_dim_x = 1;
 1ee:	3e010407          	0x3e010407
 1f2:	490b0b0b          	0x490b0b0b
  __bsg_grid_dim_y = 1;
 1f6:	3b0b3a13          	sltiu	x20,x22,944
 1fa:	010b390b          	0x10b390b
  __bsg_tile_group_id_x = 0;
 1fe:	08000013          	li	x0,128
 202:	0028                	addi	x10,x2,8
  __bsg_tile_group_id_y = 0;
 204:	0b1c0e03          	lb	x28,177(x24) # fffe90b1 <_end+0x7efe9059>
 208:	0000                	unimp
 20a:	0f09                	addi	x30,x30,2
  __bsg_tile_group_id = 0;
 20c:	0b00                	addi	x8,x2,400
 20e:	000e030b          	0xe030b
 212:	0a00                	addi	x8,x2,272
}
 214:	0034                	addi	x13,x2,8
 216:	0b3a0e03          	lb	x28,179(x20)
{
 21a:	0b390b3b          	0xb390b3b
 21e:	1349                	addi	x6,x6,-14
 220:	0000                	unimp
 222:	4900260b          	0x4900260b
  if (type & UPPERCASE)  dig = upper_digits;
 226:	0c000013          	li	x0,192
 22a:	012e                	slli	x2,x2,0xb
 22c:	0e03193f 053b0b3a 	0x53b0b3a0e03193f
 234:	0b39                	addi	x22,x22,14
 236:	13491927          	0x13491927
  if (type & LEFT) type &= ~ZEROPAD;
 23a:	0111                	addi	x2,x2,4
 23c:	0612                	slli	x12,x12,0x4
 23e:	1840                	addi	x8,x2,52
 240:	01194297          	auipc	x5,0x1194
  if (type & SIGN)
 244:	0d000013          	li	x0,208
  c = (type & ZEROPAD) ? '0' : ' ';
 248:	0005                	c.nop	1
 24a:	0b3a0803          	lb	x16,179(x20)
  if (type & SIGN)
 24e:	0b39053b          	0xb39053b
 252:	1349                	addi	x6,x6,-14
    if (num < 0)
 254:	1702                	slli	x14,x14,0x20
 256:	0000                	unimp
    else if (type & PLUS)
 258:	180e                	slli	x16,x16,0x23
 25a:	0000                	unimp
 25c:	0f00                	addi	x8,x2,912
 25e:	0034                	addi	x13,x2,8
    else if (type & SPACE)
 260:	0b3a0803          	lb	x16,179(x20)
  sign = 0;
 264:	0b39053b          	0xb39053b
    else if (type & SPACE)
 268:	1349                	addi	x6,x6,-14
 26a:	1802                	slli	x16,x16,0x20
      size--;
 26c:	0000                	unimp
 26e:	3410                	fld	f12,40(x8)
      sign = ' ';
 270:	0300                	addi	x8,x2,384
 272:	3a08                	fld	f10,48(x12)
  if (type & HEX_PREP)
 274:	39053b0b          	0x39053b0b
    if (base == 16)
 278:	0213490b          	0x213490b
 27c:	11000017          	auipc	x0,0x11000
      size--;
 280:	0034                	addi	x13,x2,8
 282:	0b3a0e03          	lb	x28,179(x20)
 286:	0b39053b          	0xb39053b
 28a:	1349                	addi	x6,x6,-14
  if (num == 0)
 28c:	1802                	slli	x16,x16,0x20
 28e:	0000                	unimp
    tmp[i++] = '0';
 290:	1d12                	slli	x26,x26,0x24
 292:	3101                	jal	fffffe92 <_end+0x7efffe3a>
 294:	55015213          	0x55015213
 298:	590b5817          	auipc	x16,0x590b5
 29c:	5705                	li	x14,-31
 29e:	0013010b          	0x13010b
 2a2:	1300                	addi	x8,x2,416
 2a4:	0005                	c.nop	1
 2a6:	1331                	addi	x6,x6,-20
  if (i > precision) precision = i;
 2a8:	1702                	slli	x14,x14,0x20
 2aa:	0000                	unimp
 2ac:	0b14                	addi	x13,x2,400
 2ae:	5501                	li	x10,-32
 2b0:	15000017          	auipc	x0,0x15000
  size -= precision;
 2b4:	0034                	addi	x13,x2,8
 2b6:	1331                	addi	x6,x6,-20
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
 2b8:	1702                	slli	x14,x14,0x20
 2ba:	0000                	unimp
 2bc:	3416                	fld	f8,352(x2)
 2be:	3100                	fld	f8,32(x10)
 2c0:	17000013          	li	x0,368
 2c4:	000a                	c.slli	x0,0x2
 2c6:	1331                	addi	x6,x6,-20
 2c8:	0000                	unimp
 2ca:	1d18                	addi	x14,x2,688
 2cc:	3101                	jal	fffffecc <_end+0x7efffe74>
 2ce:	12011113          	0x12011113
 2d2:	5806                	lw	x16,96(x2)
 2d4:	5705590b          	0x5705590b
 2d8:	0013010b          	0x13010b
 2dc:	1900                	addi	x8,x2,176
 2de:	0005                	c.nop	1
  if (sign) *str++ = sign;
 2e0:	1331                	addi	x6,x6,-20
 2e2:	0000                	unimp
 2e4:	341a                	fld	f8,416(x2)
 2e6:	3100                	fld	f8,32(x10)
 2e8:	00180213          	addi	x4,x16,1 # 590b5299 <_bsg_elf_vcache_size+0x59095299>
  if (type & HEX_PREP)
 2ec:	1b00                	addi	x8,x2,432
 2ee:	8289                	srli	x13,x13,0x2
    if (base == 8)
 2f0:	0001                	nop
 2f2:	0111                	addi	x2,x2,4
 2f4:	1331                	addi	x6,x6,-20
 2f6:	0000                	unimp
    else if (base == 16)
 2f8:	891c                	0x891c
 2fa:	0182                	c.slli64	x3
 2fc:	1101                	addi	x2,x2,-32
 2fe:	3101                	jal	fffffefe <_end+0x7efffea6>
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
 300:	1d000013          	li	x0,464
 304:	828a                	mv	x5,x2
 306:	0001                	nop
 308:	1802                	slli	x16,x16,0x20
 30a:	4291                	li	x5,4
 30c:	0018                	0x18
 30e:	1e00                	addi	x8,x2,816
 310:	011d                	addi	x2,x2,7
 312:	1331                	addi	x6,x6,-20
 314:	0152                	slli	x2,x2,0x14
 316:	1755                	addi	x14,x14,-11
 318:	0b58                	addi	x14,x2,404
 31a:	0b59                	addi	x22,x22,22
 31c:	00000b57          	0xb57
 320:	0b1f 3101 5513      	0x551331010b1f
 326:	20000017          	auipc	x0,0x20000
 32a:	011d                	addi	x2,x2,7
 32c:	1331                	addi	x6,x6,-20
 32e:	0111                	addi	x2,x2,4
 330:	0612                	slli	x12,x12,0x4
 332:	0b58                	addi	x14,x2,404
 334:	0559                	addi	x10,x10,22
 336:	00000b57          	0xb57
 33a:	0121                	addi	x2,x2,8
 33c:	4901                	li	x18,0
 33e:	00130113          	addi	x2,x6,1 # fffec001 <_end+0x7efebfa9>
 342:	2200                	fld	f8,0(x12)
 344:	0021                	c.nop	8
 346:	1349                	addi	x6,x6,-14
  while (i < precision--) *str++ = '0';
 348:	00000b2f          	0xb2f
 34c:	3f012e23          	sw	x16,1020(x2) # 1001141c <_bsg_elf_vcache_size+0xfff141c>
 350:	0319                	addi	x6,x6,6
 352:	3a0e                	fld	f20,224(x2)
 354:	39053b0b          	0x39053b0b
 358:	2019270b          	0x2019270b
 35c:	0013010b          	0x13010b
 360:	2400                	fld	f8,8(x8)
 362:	0005                	c.nop	1
  while (i-- > 0) *str++ = tmp[i];
 364:	0b3a0803          	lb	x16,179(x20)
  while (i < precision--) *str++ = '0';
 368:	0b39053b          	0xb39053b
  while (i-- > 0) *str++ = tmp[i];
 36c:	1349                	addi	x6,x6,-14
 36e:	0000                	unimp
 370:	0b25                	addi	x22,x22,9
 372:	0001                	nop
 374:	2600                	fld	f8,8(x12)
 376:	0034                	addi	x13,x2,8
 378:	0b3a0803          	lb	x16,179(x20)
 37c:	0b39053b          	0xb39053b
 380:	1349                	addi	x6,x6,-14
 382:	0000                	unimp
 384:	03012e27          	fsw	f16,60(x2)
 388:	3a0e                	fld	f20,224(x2)
 38a:	39053b0b          	0x39053b0b
 38e:	4919270b          	0x4919270b
 392:	010b2013          	slti	x0,x22,16
 396:	28000013          	li	x0,640
 39a:	0005                	c.nop	1
  while (size-- > 0) *str++ = ' ';
 39c:	0b3a0e03          	lb	x28,179(x20)
  while (i-- > 0) *str++ = tmp[i];
 3a0:	0b39053b          	0xb39053b
  while (size-- > 0) *str++ = ' ';
 3a4:	1349                	addi	x6,x6,-14
 3a6:	0000                	unimp
 3a8:	3429                	jal	fffffdb2 <_end+0x7efffd5a>
 3aa:	0300                	addi	x8,x2,384
 3ac:	3a0e                	fld	f20,224(x2)
 3ae:	39053b0b          	0x39053b0b
 3b2:	0013490b          	0x13490b
 3b6:	2a00                	fld	f8,16(x12)
 3b8:	000a                	c.slli	x0,0x2
 3ba:	0b3a0e03          	lb	x28,179(x20)
 3be:	0b39053b          	0xb39053b
 3c2:	0000                	unimp
 3c4:	03012e2b          	0x3012e2b
 3c8:	3a0e                	fld	f20,224(x2)
 3ca:	390b3b0b          	0x390b3b0b
 3ce:	4919270b          	0x4919270b
 3d2:	010b2013          	slti	x0,x22,16
 3d6:	2c000013          	li	x0,704
}
 3da:	0005                	c.nop	1
 3dc:	0b3a0803          	lb	x16,179(x20)
 3e0:	0b390b3b          	0xb390b3b
 3e4:	1349                	addi	x6,x6,-14
 3e6:	0000                	unimp
  char *dig = digits;
 3e8:	052d                	addi	x10,x10,11
 3ea:	0300                	addi	x8,x2,384
  if (type & LEFT) type &= ~ZEROPAD;
 3ec:	3a0e                	fld	f20,224(x2)
 3ee:	390b3b0b          	0x390b3b0b
  char *dig = digits;
 3f2:	0013490b          	0x13490b
  if (type & LEFT) type &= ~ZEROPAD;
 3f6:	2e00                	fld	f8,24(x12)
  c = (type & ZEROPAD) ? '0' : ' ';
 3f8:	0034                	addi	x13,x2,8
 3fa:	0b3a0803          	lb	x16,179(x20)
 3fe:	0b390b3b          	0xb390b3b
 402:	1349                	addi	x6,x6,-14
 404:	0000                	unimp
 406:	03012e2f          	amoadd.w.rl	x28,x16,(x2)
  if (type & SIGN)
 40a:	3a0e                	fld	f20,224(x2)
 40c:	390b3b0b          	0x390b3b0b
 410:	4919270b          	0x4919270b
  sign = 0;
 414:	12011113          	0x12011113
 418:	4006                	0x4006
 41a:	9718                	0x9718
      num = -num;
 41c:	1942                	slli	x18,x18,0x30
 41e:	1301                	addi	x6,x6,-32
      size--;
 420:	0000                	unimp
 422:	0530                	addi	x12,x2,648
      sign = '-';
 424:	0300                	addi	x8,x2,384
 426:	3a08                	fld	f10,48(x12)
  if (type & HEX_PREP)
 428:	390b3b0b          	0x390b3b0b
  if (base < 2 || base > 36) return 0;
 42c:	0213490b          	0x213490b
 430:	31000017          	auipc	x0,0x31000
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 434:	0005                	c.nop	1
 436:	0b3a0e03          	lb	x28,179(x20)
 43a:	0b390b3b          	0xb390b3b
 43e:	1349                	addi	x6,x6,-14
 440:	1702                	slli	x14,x14,0x20
 442:	0000                	unimp
 444:	3432                	fld	f8,296(x2)
 446:	0300                	addi	x8,x2,384
 448:	3a08                	fld	f10,48(x12)
 44a:	390b3b0b          	0x390b3b0b
 44e:	0213490b          	0x213490b
      num = ((unsigned long) num) / (unsigned) base;
 452:	33000017          	auipc	x0,0x33000
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 456:	0034                	addi	x13,x2,8
    while (num != 0)
 458:	0b3a0e03          	lb	x28,179(x20)
 45c:	0b390b3b          	0xb390b3b
      size--;
 460:	1349                	addi	x6,x6,-14
 462:	1702                	slli	x14,x14,0x20
      sign = '+';
 464:	0000                	unimp
 466:	3434                	fld	f13,104(x8)
 468:	0300                	addi	x8,x2,384
 46a:	3a08                	fld	f10,48(x12)
      *str++ = '0';
 46c:	390b3b0b          	0x390b3b0b
 470:	0213490b          	0x213490b
      *str++ = digits[33];
 474:	0018                	0x18
 476:	3500                	fld	f8,40(x10)
 478:	012e                	slli	x2,x2,0xb
 47a:	0b3a0e03          	lb	x28,179(x20)
 47e:	0b390b3b          	0xb390b3b
 482:	0b201927          	0xb201927
      size -= 2;
 486:	1301                	addi	x6,x6,-32
 488:	0000                	unimp
 48a:	2e36                	fld	f28,328(x2)
      *str++ = '0';
 48c:	3101                	jal	8c <bsg_group_size+0x8b>
 48e:	12011113          	0x12011113
 492:	4006                	0x4006
 494:	9718                	0x9718
 496:	1942                	slli	x18,x18,0x30
 498:	0000                	unimp
 49a:	31000537          	lui	x10,0x31000
  while (i < precision--) *str++ = '0';
 49e:	00180213          	addi	x4,x16,1
 4a2:	3800                	fld	f8,48(x8)
 4a4:	1331010b          	0x1331010b
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
 4a8:	0111                	addi	x2,x2,4
 4aa:	0612                	slli	x12,x12,0x4
 4ac:	0000                	unimp
 4ae:	3439                	jal	fffffebc <_end+0x7efffe64>
 4b0:	3100                	fld	f8,32(x10)
 4b2:	00061c13          	slli	x24,x12,0x0
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
 4b6:	0000                	unimp
 4b8:	1101                	addi	x2,x2,-32
 4ba:	2501                	jal	aba <bsg_printf+0x5ee>
 4bc:	130e                	slli	x6,x6,0x23
 4be:	1b0e030b          	0x1b0e030b
bsg_putchar( c );
 4c2:	550e                	lw	x10,224(x2)
 4c4:	10011117          	auipc	x2,0x10011
}
 4c8:	02000017          	auipc	x0,0x2000
{
 4cc:	0016                	c.slli	x0,0x5
 4ce:	0b3a0e03          	lb	x28,179(x20)
 4d2:	0b390b3b          	0xb390b3b
 4d6:	1349                	addi	x6,x6,-14
 4d8:	0000                	unimp
 4da:	0b000f03          	lb	x30,176(x0) # b0 <bsg_group_size+0xaf>
 4de:	0013490b          	0x13490b
 4e2:	0400                	addi	x8,x2,512
 4e4:	0024                	addi	x9,x2,8
 4e6:	0b3e0b0b          	0xb3e0b0b
 4ea:	00000803          	lb	x16,0(x0) # 0 <_start>
 4ee:	3505                	jal	30e <number+0xf6>
 4f0:	4900                	lw	x8,16(x10)
 4f2:	06000013          	li	x0,96
 4f6:	0024                	addi	x9,x2,8
 4f8:	0b3e0b0b          	0xb3e0b0b
 4fc:	00000e03          	lb	x28,0(x0) # 0 <_start>
 500:	03003407          	fld	f8,48(x0) # 30 <bsg_group_size+0x2f>
 504:	3a0e                	fld	f20,224(x2)
 506:	390b3b0b          	0x390b3b0b
 50a:	3f13490b          	0x3f13490b
 50e:	3c19                	jal	ffffff24 <_end+0x7efffecc>
 510:	0019                	c.nop	6
 512:	0800                	addi	x8,x2,16
 514:	0e030113          	addi	x2,x6,224
  for (str = buf; *fmt; fmt++)
 518:	0b3a0b0b          	0xb3a0b0b
  va_start(args, fmt);
 51c:	0b390b3b          	0xb390b3b
 520:	1301                	addi	x6,x6,-32
 522:	0000                	unimp
  for (str = buf; *fmt; fmt++)
 524:	0d09                	addi	x26,x26,2
 526:	0300                	addi	x8,x2,384
 528:	3a0e                	fld	f20,224(x2)
 52a:	390b3b0b          	0x390b3b0b
 52e:	3813490b          	0x3813490b
 532:	0a00000b          	0xa00000b
 536:	0101                	addi	x2,x2,0
 538:	1349                	addi	x6,x6,-14
 53a:	1301                	addi	x6,x6,-32
 53c:	0000                	unimp
 53e:	4900210b          	0x4900210b
 542:	000b2f13          	slti	x30,x22,0
 546:	0c00                	addi	x8,x2,528
 548:	0139                	addi	x2,x2,14
 54a:	0b3a0803          	lb	x16,179(x20)
    if (*fmt != '%')
 54e:	13010b3b          	0x13010b3b
 552:	0000                	unimp
      *str++ = *fmt;
 554:	390d                	jal	186 <bsg_set_tile_x_y+0x36>
 556:	0300                	addi	x8,x2,384
      continue;
 558:	3a0e                	fld	f20,224(x2)
 55a:	39053b0b          	0x39053b0b
      *str++ = *fmt;
 55e:	1901890b          	0x1901890b
      continue;
 562:	0000                	unimp
  for (str = buf; *fmt; fmt++)
 564:	3a0e                	fld	f20,224(x2)
 566:	3a00                	fld	f8,48(x12)
  *str = '\0';
 568:	39053b0b          	0x39053b0b
    asm volatile ("amoswap.w.aq %[result], %[swap_val], 0(%[addr]);"  \
 56c:	0013180b          	0x13180b
 570:	0f00                	addi	x8,x2,912
 572:	0008                	0x8
 574:	0b3a                	slli	x22,x22,0xe
 576:	0b390b3b          	0xb390b3b
    }while( result == bsg_mutex_lock_fail);
 57a:	1318                	addi	x14,x2,416
  while (*p) {
 57c:	0000                	unimp
 57e:	3910                	fld	f12,48(x10)
 580:	0301                	addi	x6,x6,0
 582:	3a0e                	fld	f20,224(x2)
 584:	39053b0b          	0x39053b0b
  p=buf;
 588:	0013010b          	0x13010b
bsg_putchar( c );
 58c:	1100                	addi	x8,x2,160
 58e:	0e03003b          	0xe03003b
 592:	0000                	unimp
 594:	1612                	slli	x12,x12,0x24
 596:	0300                	addi	x8,x2,384
  while (*p) {
 598:	3a0e                	fld	f20,224(x2)
 59a:	39053b0b          	0x39053b0b
 59e:	0013490b          	0x13490b
	p++;
 5a2:	1300                	addi	x8,x2,416
  while (*p) {
 5a4:	0b0b0113          	addi	x2,x22,176 # 60b0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x3ebc>
    asm volatile ("amoswap.w.rl x0, x0, 0(%[addr]);"   \
 5a8:	0b3a                	slli	x22,x22,0xe
 5aa:	0b390b3b          	0xb390b3b
 5ae:	0e6e                	slli	x28,x28,0x1b
}
 5b0:	1301                	addi	x6,x6,-32
 5b2:	0000                	unimp
 5b4:	1714                	addi	x13,x2,928
 5b6:	0b01                	addi	x22,x22,0
 5b8:	3b0b3a0b          	0x3b0b3a0b
 5bc:	010b390b          	0x10b390b
 5c0:	15000013          	li	x0,336
 5c4:	000d                	c.nop	3
 5c6:	0b3a0e03          	lb	x28,179(x20)
 5ca:	0b390b3b          	0xb390b3b
 5ce:	1349                	addi	x6,x6,-14
 5d0:	0000                	unimp
 5d2:	0f16                	slli	x30,x30,0x5
 5d4:	0b00                	addi	x8,x2,400
 5d6:	1700000b          	0x1700000b
 5da:	0026                	c.slli	x0,0x9
 5dc:	1349                	addi	x6,x6,-14
 5de:	0000                	unimp
 5e0:	0d18                	addi	x14,x2,656
 5e2:	0300                	addi	x8,x2,384
    flags = 0;
 5e4:	3a08                	fld	f10,48(x12)
 5e6:	390b3b0b          	0x390b3b0b
 5ea:	3813490b          	0x3813490b
    switch (*fmt)
 5ee:	1900000b          	0x1900000b
    fmt++; // This also skips first '%'
 5f2:	0e030113          	addi	x2,x6,224
    switch (*fmt)
 5f6:	0b3a050b          	0xb3a050b
 5fa:	0b390b3b          	0xb390b3b
 5fe:	1301                	addi	x6,x6,-32
 600:	0000                	unimp
 602:	0d1a                	slli	x26,x26,0x6
 604:	0300                	addi	x8,x2,384
 606:	3a0e                	fld	f20,224(x2)
 608:	390b3b0b          	0x390b3b0b
 60c:	3813490b          	0x3813490b
    if (is_digit(*fmt))
 610:	0005                	c.nop	1
 612:	1b00                	addi	x8,x2,432
 614:	0015                	c.nop	5
 616:	0000                	unimp
 618:	151c                	addi	x15,x2,672
 61a:	4901                	li	x18,0
 61c:	00130113          	addi	x2,x6,1
    else if (*fmt == '*')
 620:	1d00                	addi	x8,x2,688
 622:	0005                	c.nop	1
    field_width = -1;
 624:	1349                	addi	x6,x6,-14
 626:	0000                	unimp
    else if (*fmt == '*')
 628:	131e                	slli	x6,x6,0x27
 62a:	0301                	addi	x6,x6,0
    if (*fmt == '.')
 62c:	0b0e                	slli	x22,x22,0x3
 62e:	3a05                	jal	ffffff5e <_end+0x7effff06>
    precision = -1;
 630:	39053b0b          	0x39053b0b
    if (*fmt == '.')
 634:	0013010b          	0x13010b
    if (*fmt == 'l' || *fmt == 'L')
 638:	1f00                	addi	x8,x2,944
 63a:	0b0b0117          	auipc	x2,0xb0b0
 63e:	0b3a                	slli	x22,x22,0xe
 640:	0b39053b          	0xb39053b
    switch (*fmt)
 644:	1301                	addi	x6,x6,-32
 646:	0000                	unimp
 648:	1320                	addi	x8,x2,424
 64a:	0b01                	addi	x22,x22,0
 64c:	3b0b3a0b          	0x3b0b3a0b
 650:	3905                	jal	280 <number+0x68>
 652:	0013010b          	0x13010b
 656:	2100                	fld	f8,0(x10)
 658:	000d                	c.nop	3
 65a:	0b3a0e03          	lb	x28,179(x20)
 65e:	0b39053b          	0xb39053b
 662:	1349                	addi	x6,x6,-14
      case '0': flags |= ZEROPAD; goto repeat;
 664:	0b38                	addi	x14,x2,408
 666:	0000                	unimp
  for (str = buf; *fmt; fmt++)
 668:	0d22                	slli	x26,x26,0x8
 66a:	0300                	addi	x8,x2,384
 66c:	3a0e                	fld	f20,224(x2)
 66e:	39053b0b          	0x39053b0b
      case '-': flags |= LEFT; goto repeat;
 672:	0013490b          	0x13490b
  for (str = buf; *fmt; fmt++)
 676:	2300                	fld	f8,0(x14)
 678:	000d                	c.nop	3
 67a:	0b3a0e03          	lb	x28,179(x20)
      case '+': flags |= PLUS; goto repeat;
 67e:	0b39053b          	0xb39053b
  for (str = buf; *fmt; fmt++)
 682:	1349                	addi	x6,x6,-14
 684:	0538                	addi	x14,x2,648
 686:	0000                	unimp
      case '#': flags |= HEX_PREP; goto repeat;
 688:	1324                	addi	x9,x2,424
 68a:	0301                	addi	x6,x6,0
  for (str = buf; *fmt; fmt++)
 68c:	0b0e                	slli	x22,x22,0x3
 68e:	3b0b3a0b          	0x3b0b3a0b
 692:	3905                	jal	2c2 <number+0xaa>
      case ' ': flags |= SPACE; goto repeat;
 694:	0013010b          	0x13010b
  for (str = buf; *fmt; fmt++)
 698:	2500                	fld	f8,8(x10)
 69a:	0e030013          	addi	x0,x6,224
 69e:	193c                	addi	x15,x2,184
    switch (*fmt)
 6a0:	0000                	unimp
 6a2:	1526                	slli	x10,x10,0x29
 6a4:	0101                	addi	x2,x2,0
 6a6:	27000013          	li	x0,624
      fmt++;
 6aa:	0034                	addi	x13,x2,8
    switch (*fmt)
 6ac:	0b3a0e03          	lb	x28,179(x20)
 6b0:	0b39053b          	0xb39053b
 6b4:	1349                	addi	x6,x6,-14
 6b6:	193c193f 2e280000 	0x2e280000193c193f
 6be:	3f01                	jal	5ce <bsg_printf+0x102>
 6c0:	0319                	addi	x6,x6,6
 6c2:	3a0e                	fld	f20,224(x2)
 6c4:	390b3b0b          	0x390b3b0b
 6c8:	3c13490b          	0x3c13490b
 6cc:	0119                	addi	x2,x2,6
 6ce:	29000013          	li	x0,656
 6d2:	012e                	slli	x2,x2,0xb
      fmt++;
 6d4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        if (*fmt != '%') *str++ = '%';
 6dc:	0b39                	addi	x22,x22,14
 6de:	0e6e                	slli	x28,x28,0x1b
 6e0:	1349                	addi	x6,x6,-14
 6e2:	0111                	addi	x2,x2,4
 6e4:	0612                	slli	x12,x12,0x4
 6e6:	1840                	addi	x8,x2,52
        if (*fmt)
 6e8:	01194297          	auipc	x5,0x1194
 6ec:	2a000013          	li	x0,672
        if (*fmt != '%') *str++ = '%';
 6f0:	0030                	addi	x12,x2,8
 6f2:	13490803          	lb	x16,308(x18) # fffe9134 <_end+0x7efe90dc>
 6f6:	0b1c                	addi	x15,x2,400
      if (is_digit(*fmt))
 6f8:	0000                	unimp
 6fa:	03002f2b          	0x3002f2b
 6fe:	4908                	lw	x10,16(x10)
      ++fmt;    
 700:	2c000013          	li	x0,704
      if (is_digit(*fmt))
 704:	0005                	c.nop	1
 706:	0b3a0803          	lb	x16,179(x20)
 70a:	0b390b3b          	0xb390b3b
 70e:	1349                	addi	x6,x6,-14
      else if (*fmt == '*')
 710:	1702                	slli	x14,x14,0x20
 712:	0000                	unimp
 714:	052d                	addi	x10,x10,11
 716:	0300                	addi	x8,x2,384
      ++fmt;    
 718:	3a0e                	fld	f20,224(x2)
 71a:	390b3b0b          	0x390b3b0b
      if (precision < 0) precision = 0;
 71e:	0213490b          	0x213490b
 722:	2e000017          	auipc	x0,0x2e000
  int i = 0;
 726:	0034                	addi	x13,x2,8
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 728:	0b3a0e03          	lb	x28,179(x20)
 72c:	0b390b3b          	0xb390b3b
 730:	1349                	addi	x6,x6,-14
 732:	0a1c                	addi	x15,x2,272
 734:	0000                	unimp
 736:	0300342f          	0x300342f
 73a:	3a0e                	fld	f20,224(x2)
 73c:	390b3b0b          	0x390b3b0b
 740:	0213490b          	0x213490b
 744:	30000017          	auipc	x0,0x30000
 748:	1755010b          	0x1755010b
 74c:	0000                	unimp
 74e:	3431                	jal	15a <bsg_set_tile_x_y+0xa>
 750:	0300                	addi	x8,x2,384
 752:	3a08                	fld	f10,48(x12)
 754:	390b3b0b          	0x390b3b0b
      field_width = va_arg(args, int);
 758:	0213490b          	0x213490b
 75c:	32000017          	auipc	x0,0x32000
      fmt++;
 760:	1755010b          	0x1755010b
      field_width = va_arg(args, int);
 764:	1301                	addi	x6,x6,-32
 766:	0000                	unimp
      if (field_width < 0)
 768:	11010b33          	0x11010b33
        field_width = -field_width;
 76c:	1201                	addi	x4,x4,-32
 76e:	0006                	c.slli	x0,0x1
        flags |= LEFT;
 770:	3400                	fld	f8,40(x8)
 772:	0034                	addi	x13,x2,8
 774:	0b3a0e03          	lb	x28,179(x20)
    if (qualifier == 'l')
 778:	0b390b3b          	0xb390b3b
        base = 16;
 77c:	1349                	addi	x6,x6,-14
 77e:	0b1c                	addi	x15,x2,400
      num = va_arg(args, unsigned int);
 780:	0000                	unimp
 782:	2e35                	jal	abe <bsg_printf+0x5f2>
 784:	3f01                	jal	694 <bsg_printf+0x1c8>
 786:	0319                	addi	x6,x6,6
    str = number(str, num, base, field_width, precision, flags);
 788:	3a0e                	fld	f20,224(x2)
 78a:	390b3b0b          	0x390b3b0b
 78e:	1113490b          	0x1113490b
 792:	1201                	addi	x4,x4,-32
  for (str = buf; *fmt; fmt++)
 794:	4006                	0x4006
 796:	9718                	0x9718
 798:	1942                	slli	x18,x18,0x30
 79a:	1301                	addi	x6,x6,-32
    if (qualifier == 'l')
 79c:	0000                	unimp
 79e:	8936                	mv	x18,x13
    if (*fmt == 'l' || *fmt == 'L')
 7a0:	0182                	c.slli64	x3
 7a2:	1101                	addi	x2,x2,-32
 7a4:	3101                	jal	3a4 <number+0x18c>
 7a6:	37000013          	li	x0,880
      fmt++;
 7aa:	828a                	mv	x5,x2
        s = va_arg(args, char *);
 7ac:	0001                	nop
 7ae:	1802                	slli	x16,x16,0x20
 7b0:	4291                	li	x5,4
 7b2:	0018                	0x18
        if (!s) s = "<NULL>";
 7b4:	3800                	fld	f8,48(x8)
 7b6:	0034                	addi	x13,x2,8
  for (sc = s; *sc != '\0' && count--; ++sc);
 7b8:	1349                	addi	x6,x6,-14
 7ba:	1934                	addi	x13,x2,184
 7bc:	1702                	slli	x14,x14,0x20
 7be:	0000                	unimp
 7c0:	8939                	andi	x10,x10,14
 7c2:	0182                	c.slli64	x3
 7c4:	1101                	addi	x2,x2,-32
 7c6:	3101                	jal	3c6 <number+0x1ae>
 7c8:	00130113          	addi	x2,x6,1
 7cc:	3a00                	fld	f8,48(x12)
 7ce:	0021                	c.nop	8
 7d0:	1349                	addi	x6,x6,-14
 7d2:	0000132f          	0x132f
 7d6:	3f012e3b          	0x3f012e3b
 7da:	0319                	addi	x6,x6,6
 7dc:	3a0e                	fld	f20,224(x2)
 7de:	390b3b0b          	0x390b3b0b
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
 7e2:	490e6e0b          	0x490e6e0b
  return sc - s;
 7e6:	010b2013          	slti	x0,x22,16
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
 7ea:	3c000013          	li	x0,960
        for (i = 0; i < len; ++i) *str++ = *s++;
 7ee:	0005                	c.nop	1
 7f0:	0b3a0803          	lb	x16,179(x20)
 7f4:	0b390b3b          	0xb390b3b
 7f8:	1349                	addi	x6,x6,-14
 7fa:	0000                	unimp
 7fc:	053d                	addi	x10,x10,15
 7fe:	0300                	addi	x8,x2,384
 800:	3a0e                	fld	f20,224(x2)
 802:	390b3b0b          	0x390b3b0b
 806:	0013490b          	0x13490b
 80a:	3e00                	fld	f8,56(x12)
 80c:	0034                	addi	x13,x2,8
 80e:	0b3a0803          	lb	x16,179(x20)
        while (len < field_width--) *str++ = ' ';
 812:	0b390b3b          	0xb390b3b
 816:	1349                	addi	x6,x6,-14
 818:	0000                	unimp
 81a:	3f012e3f 3a0e0319 	0x3a0e03193f012e3f
 822:	390b3b0b          	0x390b3b0b
 826:	200e6e0b          	0x200e6e0b
 82a:	0013010b          	0x13010b
 82e:	4000                	lw	x8,0(x8)
 830:	0034                	addi	x13,x2,8
 832:	0b3a0e03          	lb	x28,179(x20)
  for (str = buf; *fmt; fmt++)
 836:	0b390b3b          	0xb390b3b
 83a:	1349                	addi	x6,x6,-14
      fmt++;
 83c:	0000                	unimp
 83e:	2e41                	jal	bce <bsg_printf+0x702>
        if (field_width == -1)
 840:	3f01                	jal	750 <bsg_printf+0x284>
 842:	0319                	addi	x6,x6,6
 844:	3a0e                	fld	f20,224(x2)
 846:	390b3b0b          	0x390b3b0b
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
 84a:	110e6e0b          	0x110e6e0b
 84e:	1201                	addi	x4,x4,-32
 850:	4006                	0x4006
 852:	9718                	0x9718
 854:	1942                	slli	x18,x18,0x30
 856:	1301                	addi	x6,x6,-32
 858:	0000                	unimp
 85a:	0542                	slli	x10,x10,0x10
        continue;
 85c:	0300                	addi	x8,x2,384
 85e:	3a0e                	fld	f20,224(x2)
  for (str = buf; *fmt; fmt++)
 860:	390b3b0b          	0x390b3b0b
 864:	0213490b          	0x213490b
    if (qualifier == 'l')
 868:	0018                	0x18
 86a:	4300                	lw	x8,0(x14)
        base = 8;
 86c:	011d                	addi	x2,x2,7
 86e:	1331                	addi	x6,x6,-20
 870:	0152                	slli	x2,x2,0x14
 872:	1755                	addi	x14,x14,-11
        flags |= SIGN;
 874:	0b58                	addi	x14,x2,404
 876:	0b59                	addi	x22,x22,22
    if (qualifier == 'l')
 878:	13010b57          	0x13010b57
    base = 10;
 87c:	0000                	unimp
 87e:	0544                	addi	x9,x2,644
 880:	3100                	fld	f8,32(x10)
 882:	00170213          	addi	x4,x14,1
      fmt++;
 886:	4500                	lw	x8,8(x10)
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
 888:	0034                	addi	x13,x2,8
 88a:	1331                	addi	x6,x6,-20
 88c:	0000                	unimp
 88e:	1d46                	slli	x26,x26,0x31
 890:	3101                	jal	490 <number+0x278>
 892:	12011113          	0x12011113
        *str++ = (unsigned char) va_arg(args, int);
 896:	5806                	lw	x16,96(x2)
 898:	570b590b          	0x570b590b
 89c:	0013010b          	0x13010b
 8a0:	4700                	lw	x8,8(x14)
 8a2:	011d                	addi	x2,x2,7
 8a4:	1331                	addi	x6,x6,-20
 8a6:	0111                	addi	x2,x2,4
        while (--field_width > 0) *str++ = ' ';
 8a8:	0612                	slli	x12,x12,0x4
 8aa:	0b58                	addi	x14,x2,404
 8ac:	0b59                	addi	x22,x22,22
 8ae:	00000b57          	0xb57
        *str++ = (unsigned char) va_arg(args, int);
 8b2:	3448                	fld	f10,168(x8)
        while (--field_width > 0) *str++ = ' ';
 8b4:	3100                	fld	f8,32(x10)
 8b6:	00170213          	addi	x4,x14,1
 8ba:	4900                	lw	x8,16(x10)
 8bc:	0005                	c.nop	1
 8be:	1331                	addi	x6,x6,-20
 8c0:	0000                	unimp
 8c2:	1d4a                	slli	x26,x26,0x32
 8c4:	3101                	jal	4c4 <uart_send_char+0x4>
 8c6:	55015213          	0x55015213
 8ca:	590b5817          	auipc	x16,0x590b5
 8ce:	000b570b          	0xb570b
  for (str = buf; *fmt; fmt++)
 8d2:	4b00                	lw	x8,16(x14)
 8d4:	002e                	c.slli	x0,0xb
 8d6:	193c193f 0e030e6e 	0xe030e6e193c193f
    if (qualifier == 'l')
 8de:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  li  x1, 0
   0:	001c                	0x1c
   2:	0000                	unimp
  li  x3, 0
   4:	0002                	c.slli64	x0
   6:	0000                	unimp
  li  x4, 0
   8:	0000                	unimp
   a:	0004                	0x4
	...
  li  x7, 0
  14:	012c                	addi	x11,x2,136
	...
  li  x9, 0
  1e:	0000                	unimp
  li  x10,0
  20:	0024                	addi	x9,x2,8
  22:	0000                	unimp
  li  x11,0
  24:	0002                	c.slli64	x0
  26:	0026                	c.slli	x0,0x9
  li  x12,0
  28:	0000                	unimp
  2a:	0004                	0x4
  li  x13,0
  2c:	0000                	unimp
  2e:	0000                	unimp
  li  x14,0
  30:	012c                	addi	x11,x2,136
  32:	0000                	unimp
  li  x15,0
  34:	0024                	addi	x9,x2,8
  36:	0000                	unimp
  li  x16,0
  38:	18e0                	addi	x8,x2,124
  3a:	0000                	unimp
  li  x17,0
  3c:	00fc                	addi	x15,x2,76
	...
  li  x19,0
  46:	0000                	unimp
  li  x20,0
  48:	001c                	0x1c
  4a:	0000                	unimp
  li  x21,0
  4c:	0002                	c.slli64	x0
  4e:	025f 0000 0004      	0x40000025f
  li  x23,0
  54:	0000                	unimp
  56:	0000                	unimp
  li  x24,0
  58:	0150                	addi	x12,x2,132
  5a:	0000                	unimp
  li  x25,0
  5c:	00c8                	addi	x10,x2,68
	...
  li  x27,0
  66:	0000                	unimp
  li  x28,0
  68:	001c                	0x1c
  6a:	0000                	unimp
  li  x29,0
  6c:	0002                	c.slli64	x0
  6e:	03fc                	addi	x15,x2,460
  li  x30,0
  70:	0000                	unimp
  72:	0004                	0x4
  li  x31,0
  74:	0000                	unimp
  76:	0000                	unimp
  li t0, 0x00003000 # mstatus.FS
  78:	0218                	addi	x14,x2,256
  7a:	0000                	unimp
  csrs mstatus, t0 # enable FPU
  7c:	0b50                	addi	x12,x2,404
	...
  li t0, 0
  86:	0000                	unimp
  fcvt.s.w f0, x0 
  88:	003c                	addi	x15,x2,8
  8a:	0000                	unimp
  fcvt.s.w f1, x0 
  8c:	0002                	c.slli64	x0
  8e:	0c1c                	addi	x15,x2,528
  fcvt.s.w f2, x0 
  90:	0000                	unimp
  92:	0004                	0x4
  fcvt.s.w f3, x0 
  94:	0000                	unimp
  96:	0000                	unimp
  fcvt.s.w f4, x0 
  98:	0d68                	addi	x10,x2,668
  9a:	0000                	unimp
  fcvt.s.w f5, x0 
  9c:	0a5c                	addi	x15,x2,276
  9e:	0000                	unimp
  fcvt.s.w f6, x0 
  a0:	19dc                	addi	x15,x2,244
  a2:	0000                	unimp
  fcvt.s.w f7, x0 
  a4:	02a0                	addi	x8,x2,328
  a6:	0000                	unimp
  fcvt.s.w f8, x0 
  a8:	1c7c                	addi	x15,x2,572
  aa:	0000                	unimp
  fcvt.s.w f9, x0 
  ac:	02d8                	addi	x14,x2,324
  ae:	0000                	unimp
  fcvt.s.w f10,x0 
  b0:	1f54                	addi	x13,x2,948
  b2:	0000                	unimp
  fcvt.s.w f11,x0 
  b4:	02a0                	addi	x8,x2,328
  b6:	0000                	unimp
  fcvt.s.w f12,x0 
  b8:	21f4                	fld	f13,192(x11)
  ba:	0000                	unimp
  fcvt.s.w f13,x0 
  bc:	023c                	addi	x15,x2,264
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
  li  x1, 0
       0:	746e6d2f          	0x746e6d2f
  li  x3, 0
       4:	6573752f          	0x6573752f
  li  x4, 0
       8:	7372                	flw	f6,60(x2)
       a:	6970732f          	0x6970732f
  li  x5, 0
       e:	306e                	fld	f0,248(x2)
  li  x6, 0
      10:	5f6f6e2f          	0x5f6f6e2f
  li  x7, 0
      14:	6162                	flw	f2,24(x2)
      16:	70756b63          	bltu	x10,x7,72c <bsg_printf+0x260>
  li  x8, 0
      1a:	6972642f          	0x6972642f
  li  x9, 0
      1e:	6f6d6863          	bltu	x26,x22,70e <bsg_printf+0x242>
  li  x10,0
      22:	646e                	flw	f8,216(x2)
  li  x11,0
      24:	7365522f          	0x7365522f
  li  x12,0
      28:	6165                	addi	x2,x2,112
      2a:	6372                	flw	f6,28(x2)
  li  x13,0
      2c:	2f68                	fld	f10,216(x14)
      2e:	6572                	flw	f10,28(x2)
  li  x14,0
      30:	6f70                	flw	f12,92(x14)
      32:	6f746973          	csrrsi	x18,0x6f7,8
  li  x15,0
      36:	6972                	flw	f18,28(x2)
  li  x16,0
      38:	7365                	lui	x6,0xffff9
      3a:	7469672f          	0x7469672f
  li  x17,0
      3e:	6773622f          	0x6773622f
  li  x18,0
      42:	625f 616c 6564      	0x6564616c625f
  li  x20,0
      48:	7572                	flw	f10,60(x2)
      4a:	6e6e                	flw	f28,216(x2)
  li  x21,0
      4c:	7265                	lui	x4,0xffff9
      4e:	6773622f          	0x6773622f
  li  x22,0
      52:	6d5f 6e61 6379      	0x63796e616d5f
  li  x24,0
      58:	2f65726f          	jal	x4,5734e <_bsg_elf_vcache_size+0x3734e>
  li  x25,0
      5c:	74666f73          	csrrsi	x30,0x746,12
  li  x26,0
      60:	65726177          	0x65726177
  li  x27,0
      64:	6d70732f          	0x6d70732f
  li  x28,0
      68:	2f64                	fld	f9,216(x14)
      6a:	6d6f632f          	0x6d6f632f
  li  x29,0
      6e:	6f6d                	lui	x30,0x1b
  li  x30,0
      70:	2f6e                	fld	f30,216(x2)
      72:	7472632f          	0x7472632f
  li  x31,0
      76:	532e                	lw	x6,232(x2)
  li t0, 0x00003000 # mstatus.FS
      78:	2f00                	fld	f8,24(x14)
      7a:	6e6d                	lui	x28,0x1b
  csrs mstatus, t0 # enable FPU
      7c:	2f74                	fld	f13,216(x14)
      7e:	7375                	lui	x6,0xffffd
  fscsr x0
      80:	7265                	lui	x4,0xffff9
      82:	73732f73          	csrrs	x30,0x737,x6
  li t0, 0
      86:	3264                	fld	f9,224(x12)
  fcvt.s.w f0, x0 
      88:	6d6f682f          	0x6d6f682f
  fcvt.s.w f1, x0 
      8c:	7365                	lui	x6,0xffff9
      8e:	6972642f          	0x6972642f
  fcvt.s.w f2, x0 
      92:	6f6d6863          	bltu	x26,x22,782 <bsg_printf+0x2b6>
  fcvt.s.w f3, x0 
      96:	646e                	flw	f8,216(x2)
  fcvt.s.w f4, x0 
      98:	7365522f          	0x7365522f
  fcvt.s.w f5, x0 
      9c:	6165                	addi	x2,x2,112
      9e:	6372                	flw	f6,28(x2)
  fcvt.s.w f6, x0 
      a0:	2f68                	fld	f10,216(x14)
      a2:	6572                	flw	f10,28(x2)
  fcvt.s.w f7, x0 
      a4:	6f70                	flw	f12,92(x14)
      a6:	6f746973          	csrrsi	x18,0x6f7,8
  fcvt.s.w f8, x0 
      aa:	6972                	flw	f18,28(x2)
  fcvt.s.w f9, x0 
      ac:	7365                	lui	x6,0xffff9
      ae:	7469672f          	0x7469672f
  fcvt.s.w f10,x0 
      b2:	6773622f          	0x6773622f
  fcvt.s.w f11,x0 
      b6:	625f 616c 6564      	0x6564616c625f
  fcvt.s.w f13,x0 
      bc:	7572                	flw	f10,60(x2)
      be:	6e6e                	flw	f28,216(x2)
  fcvt.s.w f14,x0 
      c0:	7265                	lui	x4,0xffff9
      c2:	7361622f          	0x7361622f
  fcvt.s.w f15,x0 
      c6:	6c65                	lui	x24,0x19
  fcvt.s.w f16,x0 
      c8:	6e69                	lui	x28,0x1a
      ca:	2f65                	jal	882 <bsg_printf+0x3b6>
  fcvt.s.w f17,x0 
      cc:	7865                	lui	x16,0xffff9
      ce:	6d61                	lui	x26,0x18
  fcvt.s.w f18,x0 
      d0:	6c70                	flw	f12,92(x8)
      d2:	7365                	lui	x6,0xffff9
  fcvt.s.w f19,x0 
      d4:	74616d2f          	0x74616d2f
  fcvt.s.w f20,x0 
      d8:	6972                	flw	f18,28(x2)
      da:	5f78                	lw	x14,124(x14)
  fcvt.s.w f21,x0 
      dc:	616d                	addi	x2,x2,240
      de:	7274                	flw	f13,100(x12)
  fcvt.s.w f22,x0 
      e0:	7869                	lui	x16,0xffffa
      e2:	6d5f 6c75 6974      	0x69746c756d5f
  fcvt.s.w f24,x0 
      e8:	6c70                	flw	f12,92(x8)
      ea:	0079                	c.nop	30
  fcvt.s.w f25,x0 
      ec:	20554e47          	fmsub.s	f28,f10,f5,f4,rmm
  fcvt.s.w f26,x0 
      f0:	5341                	li	x6,-16
      f2:	3220                	fld	f8,96(x12)
  fcvt.s.w f27,x0 
      f4:	332e                	fld	f6,232(x2)
      f6:	0032                	c.slli	x0,0xc
  fcvt.s.w f28,x0 
      f8:	5f5f 7362 5f67      	0x5f6773625f5f
  fcvt.s.w f29,x0 
      fe:	6974                	flw	f13,84(x10)
  fcvt.s.w f30,x0 
     100:	656c                	flw	f11,76(x10)
     102:	675f 6f72 7075      	0x70756f72675f
  la gp, _gp
     108:	695f 5f64 0079      	0x795f64695f
     10e:	5f5f 7362 5f67      	0x5f6773625f5f
  la  tp, _bsg_data_end_addr + 63
     114:	64697267          	0x64697267
  and tp, tp, -64
     118:	645f 6d69 785f      	0x785f6d69645f
  la sp, _sp
     11e:	5f00                	lw	x8,56(x14)
     120:	625f 6773 675f      	0x675f6773625f
  j main
     126:	6972                	flw	f18,28(x2)
  j 2b
     128:	5f64                	lw	x9,124(x14)
     12a:	6964                	flw	f9,84(x10)
  if (__bsg_id == 0) 
     12c:	5f6d                	li	x30,-5
     12e:	0079                	c.nop	30
     130:	5f5f 6e69 3374      	0x33746e695f5f
     136:	5f32                	lw	x30,44(x2)
     *signal_ptr = cuda_finish_signal_val;     
     138:	0074                	addi	x13,x2,12
     13a:	61647563          	bgeu	x8,x22,744 <bsg_printf+0x278>
     13e:	665f 6e69 7369      	0x73696e69665f
     144:	5f68                	lw	x10,124(x14)
     146:	6e676973          	csrrsi	x18,0x6e6,14
     14a:	6c61                	lui	x24,0x18
}
     14c:	615f 6464 0072      	0x726464615f
  bsg_remote_store(0,0,bsg_x_v,0);
     152:	5f5f 7362 5f67      	0x5f6773625f5f
     158:	6974                	flw	f13,84(x10)
     15a:	656c                	flw	f11,76(x10)
  bsg_remote_store(0,0,bsg_y_v,0);
     15c:	675f 6f72 7075      	0x70756f72675f
  bsg_remote_store(0,0,bsg_x_v,0);
     162:	695f 0064 7563      	0x75630064695f
     168:	6164                	flw	f9,68(x10)
     16a:	615f 6772 5f76      	0x5f766772615f
  bsg_remote_store(0,0,bsg_y_v,0);
     170:	7470                	flw	f12,108(x8)
     172:	0072                	c.slli	x0,0x1c
  bsg_wait_while(*bsg_x_v < 0);
     174:	746e6d2f          	0x746e6d2f
     178:	6573752f          	0x6573752f
  bsg_wait_while(*bsg_y_v < 0);
     17c:	7372                	flw	f6,60(x2)
     17e:	6970732f          	0x6970732f
     182:	306e                	fld	f0,248(x2)
  if (!*bsg_x_v && !*bsg_y_v)
     184:	5f6f6e2f          	0x5f6f6e2f
     188:	6162                	flw	f2,24(x2)
     18a:	70756b63          	bltu	x10,x7,8a0 <bsg_printf+0x3d4>
     18e:	6972642f          	0x6972642f
     192:	6f6d6863          	bltu	x26,x22,882 <bsg_printf+0x3b6>
        bsg_remote_store(x,y,bsg_x_v,x);
     196:	646e                	flw	f8,216(x2)
        bsg_remote_store(x,y,bsg_y_v,y);
     198:	7365522f          	0x7365522f
  grp_org_x_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_X );
     19c:	6165                	addi	x2,x2,112
     19e:	6372                	flw	f6,28(x2)
     1a0:	2f68                	fld	f10,216(x14)
     1a2:	6572                	flw	f10,28(x2)
     1a4:	6f70                	flw	f12,92(x14)
     1a6:	6f746973          	csrrsi	x18,0x6f7,8
     1aa:	6972                	flw	f18,28(x2)
     1ac:	7365                	lui	x6,0xffff9
     1ae:	7469672f          	0x7469672f
     1b2:	6773622f          	0x6773622f
     1b6:	625f 616c 6564      	0x6564616c625f
  __bsg_grp_org_x  = * grp_org_x_p;
     1bc:	7572                	flw	f10,60(x2)
     1be:	6e6e                	flw	f28,216(x2)
  grp_org_y_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_Y );
     1c0:	7265                	lui	x4,0xffff9
     1c2:	6773622f          	0x6773622f
     1c6:	6d5f 6e61 6379      	0x63796e616d5f
  __bsg_grp_org_x  = * grp_org_x_p;
     1cc:	2f65726f          	jal	x4,574c2 <_bsg_elf_vcache_size+0x374c2>
  __bsg_grp_org_y  = * grp_org_y_p;
     1d0:	74666f73          	csrrsi	x30,0x746,12
     1d4:	65726177          	0x65726177
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1d8:	6d70732f          	0x6d70732f
  __bsg_grp_org_y  = * grp_org_y_p;
     1dc:	2f64                	fld	f9,216(x14)
     1de:	6773622f          	0x6773622f
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e2:	635f 6475 5f61      	0x5f616475635f
     1e8:	696c                	flw	f11,84(x10)
     1ea:	6574                	flw	f13,76(x10)
  __bsg_grid_dim_x = 1;
     1ec:	725f 6e75 6974      	0x69746e75725f
     1f2:	656d                	lui	x10,0x1b
  __bsg_grid_dim_y = 1;
     1f4:	616d2f2f          	amoand.w	x30,x22,(x26)
     1f8:	6e69                	lui	x28,0x1a
     1fa:	69616d2f          	0x69616d2f
  __bsg_tile_group_id_x = 0;
     1fe:	2e6e                	fld	f28,216(x2)
     200:	6e750063          	beq	x10,x7,8e0 <bsg_printf+0x414>
  __bsg_tile_group_id_y = 0;
     204:	6e676973          	csrrsi	x18,0x6e6,14
     208:	6465                	lui	x8,0x19
     20a:	6320                	flw	f8,64(x14)
  __bsg_tile_group_id = 0;
     20c:	6168                	flw	f10,68(x10)
     20e:	0072                	c.slli	x0,0x1c
     210:	61647563          	bgeu	x8,x22,81a <bsg_printf+0x34e>
}
     214:	665f 6e69 7369      	0x73696e69665f
{
     21a:	5f68                	lw	x10,124(x14)
     21c:	6e676973          	csrrsi	x18,0x6e6,14
     220:	6c61                	lui	x24,0x18
     222:	765f 6c61 7300      	0x73006c61765f
  if (type & UPPERCASE)  dig = upper_digits;
     228:	6f68                	flw	f10,92(x14)
     22a:	7472                	flw	f8,60(x2)
     22c:	7520                	flw	f8,104(x10)
     22e:	736e                	flw	f6,248(x2)
  if (type & LEFT) type &= ~ZEROPAD;
     230:	6769                	lui	x14,0x1a
     232:	656e                	flw	f10,216(x2)
  if (type & UPPERCASE)  dig = upper_digits;
     234:	2064                	fld	f9,192(x8)
     236:	6e69                	lui	x28,0x1a
  if (type & LEFT) type &= ~ZEROPAD;
     238:	0074                	addi	x13,x2,12
     23a:	6e676973          	csrrsi	x18,0x6e6,14
     23e:	6c61                	lui	x24,0x18
     240:	705f 7274 5f00      	0x5f007274705f
  if (type & SIGN)
     246:	755f 6e69 3374      	0x33746e69755f
     24c:	5f32                	lw	x30,44(x2)
     24e:	0074                	addi	x13,x2,12
     250:	616d                	addi	x2,x2,240
     252:	6e69                	lui	x28,0x1a
    if (num < 0)
     254:	4700                	lw	x8,8(x14)
     256:	554e                	lw	x10,240(x2)
    else if (type & PLUS)
     258:	4320                	lw	x8,64(x14)
     25a:	3939                	jal	fffffe78 <_end+0x7efffe20>
     25c:	3920                	fld	f8,112(x10)
     25e:	322e                	fld	f4,232(x2)
    else if (type & SPACE)
     260:	302e                	fld	f0,232(x2)
     262:	2d20                	fld	f8,88(x10)
  sign = 0;
     264:	616d                	addi	x2,x2,240
     266:	6372                	flw	f6,28(x2)
    else if (type & SPACE)
     268:	3d68                	fld	f10,248(x10)
     26a:	7672                	flw	f12,60(x2)
      size--;
     26c:	6d693233          	0x6d693233
      sign = ' ';
     270:	6661                	lui	x12,0x18
     272:	2d20                	fld	f8,88(x10)
  if (type & HEX_PREP)
     274:	6e6d                	lui	x28,0x1b
     276:	64662d6f          	jal	x26,628bc <_bsg_elf_vcache_size+0x428bc>
    if (base == 16)
     27a:	7669                	lui	x12,0xffffa
     27c:	2d20                	fld	f8,88(x10)
     27e:	746d                	lui	x8,0xffffb
      size--;
     280:	6e75                	lui	x28,0x1d
     282:	3d65                	jal	13a <write_finish_signal+0xe>
     284:	6f72                	flw	f30,28(x2)
     286:	74656b63          	bltu	x10,x6,9dc <bsg_printf+0x510>
     28a:	2d20                	fld	f8,88(x10)
  if (num == 0)
     28c:	616d                	addi	x2,x2,240
     28e:	6962                	flw	f18,24(x2)
    tmp[i++] = '0';
     290:	693d                	lui	x18,0xf
     292:	706c                	flw	f11,100(x8)
     294:	20663233          	0x20663233
     298:	672d                	lui	x14,0xb
     29a:	2d20                	fld	f8,88(x10)
     29c:	2d20324f          	0x2d20324f
     2a0:	3d647473          	csrrci	x8,0x3d6,8
     2a4:	39756e67          	0x39756e67
  if (i > precision) precision = i;
     2a8:	2039                	jal	2b6 <number+0x9e>
     2aa:	662d                	lui	x12,0xb
     2ac:	6166                	flw	f2,88(x2)
     2ae:	6d2d7473          	csrrci	x8,0x6d2,26
     2b2:	7461                	lui	x8,0xffff8
  size -= precision;
     2b4:	2068                	fld	f10,192(x8)
     2b6:	662d                	lui	x12,0xb
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     2b8:	6f6e                	flw	f30,216(x2)
     2ba:	632d                	lui	x6,0xb
     2bc:	6f6d6d6f          	jal	x26,d69b2 <_bsg_elf_vcache_size+0xb69b2>
     2c0:	206e                	fld	f0,216(x2)
     2c2:	662d                	lui	x12,0xb
     2c4:	7066                	flw	f0,120(x2)
     2c6:	632d                	lui	x6,0xb
     2c8:	72746e6f          	jal	x28,471ee <_bsg_elf_vcache_size+0x271ee>
     2cc:	6361                	lui	x6,0x18
     2ce:	3d74                	fld	f13,248(x10)
     2d0:	0066666f          	jal	x12,662d6 <_bsg_elf_vcache_size+0x462d6>
     2d4:	5f5f 7362 5f67      	0x5f6773625f5f
     2da:	5f707267          	0x5f707267
     2de:	5f67726f          	jal	x4,778d4 <_bsg_elf_vcache_size+0x578d4>
  if (sign) *str++ = sign;
     2e2:	0078                	addi	x14,x2,12
     2e4:	5f5f 7362 5f67      	0x5f6773625f5f
     2ea:	5f707267          	0x5f707267
  if (type & HEX_PREP)
     2ee:	5f67726f          	jal	x4,778e4 <_bsg_elf_vcache_size+0x578e4>
    if (base == 8)
     2f2:	0079                	c.nop	30
     2f4:	5f5f 7362 5f67      	0x5f6773625f5f
    else if (base == 16)
     2fa:	0078                	addi	x14,x2,12
     2fc:	5f5f 7362 5f67      	0x5f6773625f5f
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     302:	0079                	c.nop	30
     304:	6f6c                	flw	f11,92(x14)
     306:	676e                	flw	f14,216(x2)
     308:	6c20                	flw	f8,88(x8)
     30a:	20676e6f          	jal	x28,76510 <_bsg_elf_vcache_size+0x56510>
     30e:	6e69                	lui	x28,0x1a
     310:	0074                	addi	x13,x2,12
     312:	74697277          	0x74697277
     316:	5f65                	li	x30,-7
     318:	6966                	flw	f18,88(x2)
     31a:	696e                	flw	f18,216(x2)
     31c:	735f6873          	csrrsi	x16,0x735,30
     320:	6769                	lui	x14,0x1a
     322:	616e                	flw	f2,216(x2)
     324:	006c                	addi	x11,x2,12
     326:	726f6873          	csrrsi	x16,0x726,30
     32a:	2074                	fld	f13,192(x8)
     32c:	6e69                	lui	x28,0x1a
     32e:	0074                	addi	x13,x2,12
     330:	61647563          	bgeu	x8,x22,93a <bsg_printf+0x46e>
     334:	6b5f 7265 656e      	0x656e72656b5f
     33a:	5f6c                	lw	x11,124(x14)
     33c:	7470                	flw	f12,108(x8)
     33e:	0072                	c.slli	x0,0x1c
     340:	5f5f 7362 5f67      	0x5f6773625f5f
     346:	6469                	lui	x8,0x1a
  while (i < precision--) *str++ = '0';
     348:	6300                	flw	f8,0(x14)
     34a:	6475                	lui	x8,0x1d
     34c:	5f61                	li	x30,-8
     34e:	7261                	lui	x4,0xffff8
     350:	6c006367          	0x6c006367
     354:	20676e6f          	jal	x28,7655a <_bsg_elf_vcache_size+0x5655a>
     358:	6f6c                	flw	f11,92(x14)
     35a:	676e                	flw	f14,216(x2)
     35c:	7520                	flw	f8,104(x10)
     35e:	736e                	flw	f6,248(x2)
     360:	6769                	lui	x14,0x1a
     362:	656e                	flw	f10,216(x2)
  while (i-- > 0) *str++ = tmp[i];
     364:	2064                	fld	f9,192(x8)
     366:	6e69                	lui	x28,0x1a
  while (i < precision--) *str++ = '0';
     368:	0074                	addi	x13,x2,12
     36a:	61647563          	bgeu	x8,x22,974 <bsg_printf+0x4a8>
  while (i-- > 0) *str++ = tmp[i];
     36e:	6b5f 7265 656e      	0x656e72656b5f
     374:	5f6c                	lw	x11,124(x14)
     376:	6f6e                	flw	f30,216(x2)
     378:	5f74                	lw	x13,124(x14)
     37a:	6f6c                	flw	f11,92(x14)
     37c:	6461                	lui	x8,0x18
     37e:	6465                	lui	x8,0x19
     380:	765f 6c61 5f00      	0x5f006c61765f
     386:	625f 6773 745f      	0x745f6773625f
     38c:	6c69                	lui	x24,0x1a
     38e:	5f65                	li	x30,-7
     390:	756f7267          	0x756f7267
     394:	5f70                	lw	x12,124(x14)
     396:	6469                	lui	x8,0x1a
     398:	785f 6200 6773      	0x67736200785f
  while (size-- > 0) *str++ = ' ';
     39e:	735f 7465 745f      	0x745f7465735f
     3a4:	6c69                	lui	x24,0x1a
     3a6:	5f65                	li	x30,-7
     3a8:	5f78                	lw	x14,124(x14)
     3aa:	0079                	c.nop	30
     3ac:	746e6d2f          	0x746e6d2f
     3b0:	6573752f          	0x6573752f
     3b4:	7372                	flw	f6,60(x2)
     3b6:	6970732f          	0x6970732f
     3ba:	306e                	fld	f0,248(x2)
     3bc:	5f6f6e2f          	0x5f6f6e2f
     3c0:	6162                	flw	f2,24(x2)
     3c2:	70756b63          	bltu	x10,x7,ad8 <bsg_printf+0x60c>
     3c6:	6972642f          	0x6972642f
     3ca:	6f6d6863          	bltu	x26,x22,aba <bsg_printf+0x5ee>
     3ce:	646e                	flw	f8,216(x2)
     3d0:	7365522f          	0x7365522f
     3d4:	6165                	addi	x2,x2,112
     3d6:	6372                	flw	f6,28(x2)
}
     3d8:	2f68                	fld	f10,216(x14)
     3da:	6572                	flw	f10,28(x2)
     3dc:	6f70                	flw	f12,92(x14)
     3de:	6f746973          	csrrsi	x18,0x6f7,8
     3e2:	6972                	flw	f18,28(x2)
     3e4:	7365                	lui	x6,0xffff9
     3e6:	7469672f          	0x7469672f
  char *dig = digits;
     3ea:	6773622f          	0x6773622f
  if (type & LEFT) type &= ~ZEROPAD;
     3ee:	625f 616c 6564      	0x6564616c625f
     3f4:	7572                	flw	f10,60(x2)
     3f6:	6e6e                	flw	f28,216(x2)
  c = (type & ZEROPAD) ? '0' : ' ';
     3f8:	7265                	lui	x4,0xffff9
     3fa:	6773622f          	0x6773622f
     3fe:	6d5f 6e61 6379      	0x63796e616d5f
     404:	2f65726f          	jal	x4,576fa <_bsg_elf_vcache_size+0x376fa>
  if (type & SIGN)
     408:	74666f73          	csrrsi	x30,0x746,12
     40c:	65726177          	0x65726177
     410:	6773622f          	0x6773622f
  sign = 0;
     414:	6d5f 6e61 6379      	0x63796e616d5f
     41a:	5f65726f          	jal	x4,57a10 <_bsg_elf_vcache_size+0x37a10>
      num = -num;
     41e:	696c                	flw	f11,84(x10)
      size--;
     420:	2f62                	fld	f30,24(x2)
     422:	7362                	flw	f6,56(x2)
      sign = '-';
     424:	65735f67          	0x65735f67
  if (type & HEX_PREP)
     428:	5f74                	lw	x13,124(x14)
     42a:	6974                	flw	f13,84(x10)
  if (base < 2 || base > 36) return 0;
     42c:	656c                	flw	f11,76(x10)
     42e:	785f 795f 632e      	0x632e795f785f
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     434:	6200                	flw	f8,0(x12)
     436:	795f6773          	csrrsi	x14,0x795,30
     43a:	765f 6700 7072      	0x70726700765f
     440:	6f5f 6772 785f      	0x785f67726f5f
     446:	705f 6200 6773      	0x67736200705f
     44c:	725f 6d65 746f      	0x746f6d65725f
      num = ((unsigned long) num) / (unsigned) base;
     452:	5f65                	li	x30,-7
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     454:	6e69                	lui	x28,0x1a
     456:	5f74                	lw	x13,124(x14)
    while (num != 0)
     458:	7470                	flw	f12,108(x8)
     45a:	0072                	c.slli	x0,0x1c
     45c:	7362                	flw	f6,56(x2)
     45e:	5f785f67          	0x5f785f67
      size--;
     462:	0076                	c.slli	x0,0x1d
      sign = '+';
     464:	5f707267          	0x5f707267
     468:	5f67726f          	jal	x4,77a5e <_bsg_elf_vcache_size+0x57a5e>
      *str++ = '0';
     46c:	5f79                	li	x30,-2
     46e:	0070                	addi	x12,x2,12
     470:	5f70                	lw	x12,124(x14)
     472:	756d                	lui	x10,0xffffb
      *str++ = digits[33];
     474:	6574                	flw	f13,76(x10)
     476:	0078                	addi	x14,x2,12
     478:	746e6d2f          	0x746e6d2f
     47c:	6573752f          	0x6573752f
     480:	7372                	flw	f6,60(x2)
     482:	6970732f          	0x6970732f
      size -= 2;
     486:	306e                	fld	f0,248(x2)
     488:	5f6f6e2f          	0x5f6f6e2f
      *str++ = '0';
     48c:	6162                	flw	f2,24(x2)
     48e:	70756b63          	bltu	x10,x7,ba4 <bsg_printf+0x6d8>
     492:	6972642f          	0x6972642f
     496:	6f6d6863          	bltu	x26,x22,b86 <bsg_printf+0x6ba>
     49a:	646e                	flw	f8,216(x2)
  while (i < precision--) *str++ = '0';
     49c:	7365522f          	0x7365522f
     4a0:	6165                	addi	x2,x2,112
     4a2:	6372                	flw	f6,28(x2)
     4a4:	2f68                	fld	f10,216(x14)
     4a6:	6572                	flw	f10,28(x2)
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     4a8:	6f70                	flw	f12,92(x14)
     4aa:	6f746973          	csrrsi	x18,0x6f7,8
     4ae:	6972                	flw	f18,28(x2)
     4b0:	7365                	lui	x6,0xffff9
     4b2:	7469672f          	0x7469672f
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     4b6:	6773622f          	0x6773622f
     4ba:	625f 616c 6564      	0x6564616c625f
bsg_putchar( c );
     4c0:	7572                	flw	f10,60(x2)
     4c2:	6e6e                	flw	f28,216(x2)
     4c4:	7265                	lui	x4,0xffff9
     4c6:	6773622f          	0x6773622f
}
     4ca:	6d5f 6e61 6379      	0x63796e616d5f
{
     4d0:	2f65726f          	jal	x4,577c6 <_bsg_elf_vcache_size+0x377c6>
     4d4:	74666f73          	csrrsi	x30,0x746,12
     4d8:	65726177          	0x65726177
     4dc:	6773622f          	0x6773622f
     4e0:	6d5f 6e61 6379      	0x63796e616d5f
     4e6:	5f65726f          	jal	x4,57adc <_bsg_elf_vcache_size+0x37adc>
     4ea:	696c                	flw	f11,84(x10)
     4ec:	2f62                	fld	f30,24(x2)
     4ee:	7362                	flw	f6,56(x2)
     4f0:	72705f67          	0x72705f67
     4f4:	6e69                	lui	x28,0x1a
     4f6:	6674                	flw	f13,76(x12)
     4f8:	632e                	flw	f6,200(x2)
     4fa:	5f00                	lw	x8,56(x14)
     4fc:	625f 6975 746c      	0x746c6975625f
     502:	6e69                	lui	x28,0x1a
     504:	765f 5f61 696c      	0x696c5f61765f
     50a:	73007473          	csrrci	x8,0x730,0
     50e:	5f70696b          	0x5f70696b
     512:	7461                	lui	x8,0xffff8
     514:	6500696f          	jal	x18,6b64 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x4970>
  for (str = buf; *fmt; fmt++)
     518:	5f65                	li	x30,-7
     51a:	7376                	flw	f6,124(x2)
  va_start(args, fmt);
     51c:	7270                	flw	f12,100(x12)
     51e:	6e69                	lui	x28,0x1a
     520:	6674                	flw	f13,76(x12)
     522:	6200                	flw	f8,0(x12)
  for (str = buf; *fmt; fmt++)
     524:	6d5f6773          	csrrsi	x14,0x6d5,30
     528:	7475                	lui	x8,0xffffd
     52a:	7865                	lui	x16,0xffff9
     52c:	6c5f 636f 5f6b      	0x5f6b636f6c5f
     532:	6166                	flw	f2,88(x2)
     534:	6c69                	lui	x24,0x1a
     536:	6200                	flw	f8,0(x12)
     538:	6d5f6773          	csrrsi	x14,0x6d5,30
     53c:	7475                	lui	x8,0xffffd
     53e:	7865                	lui	x16,0xffff9
     540:	735f 6174 7574      	0x75746174735f
     546:	73620073          	0x73620073
     54a:	756d5f67          	0x756d5f67
    if (*fmt != '%')
     54e:	6574                	flw	f13,76(x10)
     550:	5f78                	lw	x14,124(x14)
     552:	7274                	flw	f13,100(x12)
      *str++ = *fmt;
     554:	5f79                	li	x30,-2
     556:	6f6c                	flw	f11,92(x14)
      continue;
     558:	5f006b63          	bltu	x0,x16,b4e <bsg_printf+0x682>
      *str++ = *fmt;
     55c:	675f 756e 5f63      	0x5f63756e675f
      continue;
     562:	6176                	flw	f2,92(x2)
  for (str = buf; *fmt; fmt++)
     564:	6c5f 7369 0074      	0x7473696c5f
  *str = '\0';
     56a:	7270                	flw	f12,100(x12)
    asm volatile ("amoswap.w.aq %[result], %[swap_val], 0(%[addr]);"  \
     56c:	6365                	lui	x6,0x19
     56e:	7369                	lui	x6,0xffffa
     570:	6f69                	lui	x30,0x1a
     572:	006e                	c.slli	x0,0x1b
     574:	70617773          	csrrci	x14,0x706,2
    }while( result == bsg_mutex_lock_fail);
     578:	765f 6c61 6900      	0x69006c61765f
  while (*p) {
     57e:	6461                	lui	x8,0x18
     580:	7264                	flw	f9,100(x12)
     582:	6500                	flw	f8,8(x10)
     584:	6461                	lui	x8,0x18
     586:	7264                	flw	f9,100(x12)
  p=buf;
     588:	7500                	flw	f8,40(x10)
     58a:	7261                	lui	x4,0xffff8
bsg_putchar( c );
     58c:	5f74                	lw	x13,124(x14)
     58e:	646e6573          	csrrsi	x10,0x646,28
     592:	635f 6168 0072      	0x726168635f
  while (*p) {
     598:	756d                	lui	x10,0xffffb
     59a:	6574                	flw	f13,76(x10)
     59c:	5f78                	lw	x14,124(x14)
     59e:	6461                	lui	x8,0x18
	p++;
     5a0:	7264                	flw	f9,100(x12)
     5a2:	6200                	flw	f8,0(x12)
  while (*p) {
     5a4:	6d5f6773          	csrrsi	x14,0x6d5,30
    asm volatile ("amoswap.w.rl x0, x0, 0(%[addr]);"   \
     5a8:	7475                	lui	x8,0xffffd
     5aa:	7865                	lui	x16,0xffff9
     5ac:	755f 6c6e 636f      	0x636f6c6e755f
}
     5b2:	7362006b          	0x7362006b
     5b6:	756d5f67          	0x756d5f67
     5ba:	6574                	flw	f13,76(x10)
     5bc:	5f78                	lw	x14,124(x14)
     5be:	6f6c                	flw	f11,92(x14)
     5c0:	62006b63          	bltu	x0,x0,bf6 <bsg_printf+0x72a>
     5c4:	725f6773          	csrrsi	x14,0x725,30
     5c8:	6d65                	lui	x26,0x19
     5ca:	5f65746f          	jal	x8,57bc0 <_bsg_elf_vcache_size+0x37bc0>
     5ce:	6975                	lui	x18,0x1d
     5d0:	746e                	flw	f8,248(x2)
     5d2:	5f38                	lw	x14,120(x14)
     5d4:	7470                	flw	f12,108(x8)
     5d6:	0072                	c.slli	x0,0x1c
     5d8:	7075                	c.lui	x0,0xffffd
     5da:	6570                	flw	f12,76(x10)
     5dc:	5f72                	lw	x30,60(x2)
     5de:	6964                	flw	f9,84(x10)
     5e0:	73746967          	0x73746967
    flags = 0;
     5e4:	7200                	flw	f8,32(x12)
     5e6:	7065                	c.lui	x0,0xffff9
     5e8:	6165                	addi	x2,x2,112
     5ea:	0074                	addi	x13,x2,12
    switch (*fmt)
     5ec:	7362                	flw	f6,56(x2)
     5ee:	756d5f67          	0x756d5f67
    fmt++; // This also skips first '%'
     5f2:	6574                	flw	f13,76(x10)
    switch (*fmt)
     5f4:	5f78                	lw	x14,124(x14)
     5f6:	7470                	flw	f12,108(x8)
     5f8:	0072                	c.slli	x0,0x1c
     5fa:	756e                	flw	f10,248(x2)
     5fc:	626d                	lui	x4,0x1b
     5fe:	7265                	lui	x4,0xffff9
     600:	7100                	flw	f8,32(x10)
     602:	6175                	addi	x2,x2,368
     604:	696c                	flw	f11,84(x10)
     606:	6966                	flw	f18,88(x2)
     608:	7265                	lui	x4,0xffff9
     60a:	6600                	flw	f8,8(x12)
     60c:	6569                	lui	x10,0x1a
     60e:	646c                	flw	f11,76(x8)
    if (is_digit(*fmt))
     610:	775f 6469 6874      	0x68746469775f
     616:	7400                	flw	f8,40(x8)
     618:	7079                	c.lui	x0,0xffffe
     61a:	0065                	c.nop	25
     61c:	7362                	flw	f6,56(x2)
     61e:	756d5f67          	0x756d5f67
    else if (*fmt == '*')
     622:	6574                	flw	f13,76(x10)
    field_width = -1;
     624:	5f78                	lw	x14,124(x14)
     626:	6f6c                	flw	f11,92(x14)
    else if (*fmt == '*')
     628:	735f6b63          	bltu	x30,x21,d5e <bsg_printf+0x892>
    if (*fmt == '.')
     62c:	6375                	lui	x6,0x1d
     62e:	73736563          	bltu	x6,x23,d58 <bsg_printf+0x88c>
    precision = -1;
     632:	7300                	flw	f8,32(x14)
    if (*fmt == '.')
     634:	7274                	flw	f13,100(x12)
     636:	6c6e                	flw	f24,216(x2)
    if (*fmt == 'l' || *fmt == 'L')
     638:	6e65                	lui	x28,0x19
     63a:	6900                	flw	f8,16(x10)
     63c:	756d5f6f          	jal	x30,d5d92 <_bsg_elf_vcache_size+0xb5d92>
     640:	6574                	flw	f13,76(x10)
     642:	5f78                	lw	x14,124(x14)
    switch (*fmt)
     644:	7470                	flw	f12,108(x8)
     646:	0072                	c.slli	x0,0x1c
     648:	7362                	flw	f6,56(x2)
     64a:	72705f67          	0x72705f67
     64e:	6e69                	lui	x28,0x1a
     650:	6674                	flw	f13,76(x12)
     652:	5f00                	lw	x8,56(x14)
     654:	7364                	flw	f9,100(x14)
     656:	61685f6f          	jal	x30,85c6c <_bsg_elf_vcache_size+0x65c6c>
     65a:	646e                	flw	f8,216(x2)
     65c:	656c                	flw	f11,76(x10)
     65e:	7900                	flw	f8,48(x10)
     660:	725f 6e61 6567      	0x65676e61725f
      case '0': flags |= ZEROPAD; goto repeat;
     666:	6200                	flw	f8,0(x12)
  for (str = buf; *fmt; fmt++)
     668:	6666666f          	jal	x12,66cce <_bsg_elf_vcache_size+0x46cce>
     66c:	6b00                	flw	f8,16(x14)
     66e:	7265                	lui	x4,0xffff9
      case '-': flags |= LEFT; goto repeat;
     670:	656e                	flw	f10,216(x2)
     672:	5f6c                	lw	x11,124(x14)
  for (str = buf; *fmt; fmt++)
     674:	616d                	addi	x2,x2,240
     676:	7274                	flw	f13,100(x12)
     678:	7869                	lui	x16,0xffffa
     67a:	6d5f 6c75 6974      	0x69746c756d5f
     680:	6c70                	flw	f12,92(x8)
     682:	5f79                	li	x30,-2
     684:	7274                	flw	f13,100(x12)
     686:	6e61                	lui	x28,0x18
      case '#': flags |= HEX_PREP; goto repeat;
     688:	736f7073          	csrci	0x736,30
  for (str = buf; *fmt; fmt++)
     68c:	5f65                	li	x30,-7
     68e:	6f6e                	flw	f30,216(x2)
     690:	756d                	lui	x10,0xffffb
     692:	5f6c                	lw	x11,124(x14)
      case ' ': flags |= SPACE; goto repeat;
     694:	6e75                	lui	x28,0x1d
     696:	6f72                	flw	f30,28(x2)
  for (str = buf; *fmt; fmt++)
     698:	6c6c                	flw	f11,92(x8)
     69a:	695f 696e 3c74      	0x3c74696e695f
    switch (*fmt)
     6a0:	2c38                	fld	f14,88(x8)
     6a2:	6920                	flw	f8,80(x10)
     6a4:	746e                	flw	f8,248(x2)
     6a6:	202c                	fld	f11,64(x8)
      fmt++;
     6a8:	6e69                	lui	x28,0x1a
     6aa:	2c74                	fld	f13,216(x8)
    switch (*fmt)
     6ac:	6920                	flw	f8,80(x10)
     6ae:	746e                	flw	f8,248(x2)
     6b0:	003e                	c.slli	x0,0xf
     6b2:	735f 7a69 0065      	0x657a69735f
     6b8:	5a5f 3035 656b      	0x656b30355a5f
     6be:	6e72                	flw	f28,28(x2)
     6c0:	6c65                	lui	x24,0x19
     6c2:	6d5f 7461 6972      	0x697274616d5f
     6c8:	5f78                	lw	x14,124(x14)
     6ca:	756d                	lui	x10,0xffffb
     6cc:	746c                	flw	f11,108(x8)
     6ce:	7069                	c.lui	x0,0xffffa
     6d0:	796c                	flw	f11,116(x10)
     6d2:	745f 6172 736e      	0x736e6172745f
        if (*fmt != '%') *str++ = '%';
     6d8:	6f70                	flw	f12,92(x14)
     6da:	6e5f6573          	csrrsi	x10,0x6e5,30
     6de:	6c756d6f          	jal	x26,575a4 <_bsg_elf_vcache_size+0x375a4>
     6e2:	755f 726e 6c6f      	0x6c6f726e755f
        if (*fmt)
     6e8:	5f6c                	lw	x11,124(x14)
     6ea:	6e69                	lui	x28,0x1a
     6ec:	7469                	lui	x8,0xffffa
     6ee:	4c49                	li	x24,18
        if (*fmt != '%') *str++ = '%';
     6f0:	386a                	fld	f16,184(x2)
     6f2:	6945                	lui	x18,0x11
     6f4:	6969                	lui	x18,0x1a
     6f6:	6945                	lui	x18,0x11
      if (is_digit(*fmt))
     6f8:	5450                	lw	x12,44(x8)
     6fa:	5f30                	lw	x12,120(x14)
     6fc:	5450                	lw	x12,44(x8)
     6fe:	5f31                	li	x30,-20
      ++fmt;    
     700:	5450                	lw	x12,44(x8)
     702:	5f32                	lw	x30,44(x2)
      if (is_digit(*fmt))
     704:	6d6d                	lui	x26,0x1b
     706:	006d                	c.nop	27
     708:	665f 616e 6772      	0x6772616e665f
     70e:	5a5f0073          	0x5a5f0073
      else if (*fmt == '*')
     712:	3132                	fld	f2,296(x2)
     714:	7362                	flw	f6,56(x2)
     716:	6f725f67          	0x6f725f67
      ++fmt;    
     71a:	61625f77          	0x61625f77
      if (precision < 0) precision = 0;
     71e:	7272                	flw	f4,60(x2)
     720:	6569                	lui	x10,0x1a
     722:	5f72                	lw	x30,60(x2)
  int i = 0;
     724:	6c61                	lui	x24,0x18
     726:	7265                	lui	x4,0xffff9
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     728:	5074                	lw	x13,100(x8)
     72a:	3731                	jal	636 <bsg_printf+0x16a>
     72c:	625f 6773 725f      	0x725f6773625f
     732:	625f776f          	jal	x14,f8556 <_bsg_elf_vcache_size+0xd8556>
     736:	7261                	lui	x4,0xffff8
     738:	6972                	flw	f18,28(x2)
     73a:	7265                	lui	x4,0xffff9
     73c:	505f 3731 625f      	0x625f3731505f
     742:	635f6773          	csrrsi	x14,0x635,30
     746:	625f6c6f          	jal	x24,f756a <_bsg_elf_vcache_size+0xd756a>
     74a:	7261                	lui	x4,0xffff8
     74c:	6972                	flw	f18,28(x2)
     74e:	7265                	lui	x4,0xffff9
     750:	005f 5f5f 7863      	0x78635f5f005f
     756:	3178                	fld	f14,224(x10)
      field_width = va_arg(args, int);
     758:	0031                	c.nop	12
     75a:	735f 6769 006e      	0x6e6769735f
      fmt++;
     760:	6d5f 7362 6174      	0x617473626d5f
      field_width = va_arg(args, int);
     766:	6574                	flw	f13,76(x10)
      if (field_width < 0)
     768:	5f00                	lw	x8,56(x14)
     76a:	755f 6e69 3874      	0x38746e69755f
        flags |= LEFT;
     770:	745f 3100 5f30      	0x5f303100745f
     776:	626d                	lui	x4,0x1b
    if (qualifier == 'l')
     778:	74617473          	csrrci	x8,0x746,2
        base = 16;
     77c:	5f65                	li	x30,-7
     77e:	0074                	addi	x13,x2,12
      num = va_arg(args, unsigned int);
     780:	645f 7461 0061      	0x617461645f
     786:	795f 635f 726f      	0x726f635f795f
    str = number(str, num, base, field_width, precision, flags);
     78c:	5f64                	lw	x9,124(x14)
     78e:	72617473          	csrrci	x8,0x726,2
     792:	0074                	addi	x13,x2,12
  for (str = buf; *fmt; fmt++)
     794:	775f 7263 6f74      	0x6f747263775f
     79a:	626d                	lui	x4,0x1b
    if (qualifier == 'l')
     79c:	735f 6174 6574      	0x65746174735f
    if (*fmt == 'l' || *fmt == 'L')
     7a2:	5f00                	lw	x8,56(x14)
     7a4:	6e676973          	csrrsi	x18,0x6e6,14
      fmt++;
     7a8:	6c61                	lui	x24,0x18
     7aa:	625f 6675 5f00      	0x5f006675625f
        s = va_arg(args, char *);
     7b0:	395a                	fld	f18,432(x2)
     7b2:	7362                	flw	f6,56(x2)
        if (!s) s = "<NULL>";
     7b4:	726c5f67          	0x726c5f67
  for (sc = s; *sc != '\0' && count--; ++sc);
     7b8:	615f 5071 0069      	0x695071615f
     7be:	746e6563          	bltu	x28,x6,f08 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x1a0>
     7c2:	7265                	lui	x4,0xffff9
     7c4:	785f 635f 726f      	0x726f635f785f
     7ca:	0064                	addi	x9,x2,12
     7cc:	6c5f 6662 6973      	0x697366626c5f
     7d2:	657a                	flw	f10,156(x2)
     7d4:	5f00                	lw	x8,56(x14)
     7d6:	395a                	fld	f18,432(x2)
     7d8:	6c61                	lui	x24,0x18
     7da:	7265                	lui	x4,0xffff9
     7dc:	5f74                	lw	x13,124(x14)
     7de:	6f72                	flw	f30,28(x2)
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e0:	37315077          	0x37315077
  return sc - s;
     7e4:	625f 6773 725f      	0x725f6773625f
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7ea:	625f776f          	jal	x14,f860e <_bsg_elf_vcache_size+0xd860e>
        for (i = 0; i < len; ++i) *str++ = *s++;
     7ee:	7261                	lui	x4,0xffff8
     7f0:	6972                	flw	f18,28(x2)
     7f2:	7265                	lui	x4,0xffff9
     7f4:	005f 5f5f 6e69      	0x6e695f5f005f
     7fa:	3674                	fld	f13,232(x12)
     7fc:	5f34                	lw	x13,120(x14)
     7fe:	0074                	addi	x13,x2,12
     800:	5f5f 6f6c 6163      	0x61636f6c5f5f
     806:	656c                	flw	f11,76(x10)
     808:	745f 5f00 695f      	0x695f5f00745f
     80e:	746e                	flw	f8,248(x2)
        while (len < field_width--) *str++ = ' ';
     810:	5f38                	lw	x14,120(x14)
     812:	0074                	addi	x13,x2,12
     814:	6d5f 7262 6f74      	0x6f7472626d5f
     81a:	735f6377          	0x735f6377
     81e:	6174                	flw	f13,68(x10)
     820:	6574                	flw	f13,76(x10)
     822:	5f00                	lw	x8,56(x14)
     824:	695f 746e 6c5f      	0x6c5f746e695f
     82a:	6165                	addi	x2,x2,112
     82c:	34367473          	csrrci	x8,mtval,12
     830:	745f 6300 666f      	0x666f6300745f
  for (str = buf; *fmt; fmt++)
     836:	0066                	c.slli	x0,0x19
     838:	775f 7463 6d6f      	0x6d6f7463775f
      fmt++;
     83e:	5f62                	lw	x30,56(x2)
        if (field_width == -1)
     840:	74617473          	csrrci	x8,0x746,2
     844:	0065                	c.nop	25
     846:	5f5f 6d74 735f      	0x735f6d745f5f
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
     84c:	6365                	lui	x6,0x19
     84e:	5f00                	lw	x8,56(x14)
     850:	6f6c                	flw	f11,92(x14)
     852:	5f6c6163          	bltu	x24,x22,e34 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0xcc>
     856:	6c61                	lui	x24,0x18
     858:	7265                	lui	x4,0xffff9
     85a:	0074                	addi	x13,x2,12
        continue;
     85c:	755f 7562 0066      	0x667562755f
  for (str = buf; *fmt; fmt++)
     862:	625f 7361 0065      	0x657361625f
    if (qualifier == 'l')
     868:	5f5f 6673 5f00      	0x5f0066735f5f
        base = 8;
     86e:	655f6e6f          	jal	x28,f76c2 <_bsg_elf_vcache_size+0xd76c2>
     872:	6978                	flw	f14,84(x10)
        flags |= SIGN;
     874:	5f74                	lw	x13,124(x14)
     876:	7261                	lui	x4,0xffff8
    if (qualifier == 'l')
     878:	63007367          	0x63007367
    base = 10;
     87c:	00646e6f          	jal	x28,46882 <_bsg_elf_vcache_size+0x26882>
     880:	5f42                	lw	x30,48(x2)
     882:	54444957          	0x54444957
      fmt++;
     886:	0048                	addi	x10,x2,4
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     888:	635f 6f6f 696b      	0x696b6f6f635f
     88e:	0065                	c.nop	25
     890:	5f78                	lw	x14,124(x14)
     892:	6172                	flw	f2,28(x2)
        *str++ = (unsigned char) va_arg(args, int);
     894:	676e                	flw	f14,216(x2)
     896:	0065                	c.nop	25
     898:	5f5f 6773 756c      	0x756c67735f5f
     89e:	0065                	c.nop	25
     8a0:	6574                	flw	f13,76(x10)
     8a2:	706d                	c.lui	x0,0xffffb
     8a4:	7300                	flw	f8,32(x14)
     8a6:	7274                	flw	f13,100(x12)
        while (--field_width > 0) *str++ = ' ';
     8a8:	7265                	lui	x4,0xffff9
     8aa:	6f72                	flw	f30,28(x2)
     8ac:	0072                	c.slli	x0,0x1c
     8ae:	74727473          	csrrci	x8,0x747,4
        *str++ = (unsigned char) va_arg(args, int);
     8b2:	5f006b6f          	jal	x22,6ea2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x4cae>
        while (--field_width > 0) *str++ = ' ';
     8b6:	6c66                	flw	f24,88(x2)
     8b8:	6761                	lui	x14,0x18
     8ba:	695f0073          	0x695f0073
     8be:	78635f73          	csrrwi	x30,0x786,6
     8c2:	0061                	c.nop	24
     8c4:	735f 6474 6e69      	0x6e696474735f
     8ca:	6300                	flw	f8,0(x14)
     8cc:	6e65                	lui	x28,0x19
     8ce:	6574                	flw	f13,76(x10)
  for (str = buf; *fmt; fmt++)
     8d0:	5f72                	lw	x30,60(x2)
     8d2:	5f79                	li	x30,-2
     8d4:	64726f63          	bltu	x4,x7,f32 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x1ca>
        flags |= UPPERCASE;
     8d8:	5f00                	lw	x8,56(x14)
     8da:	6c62                	flw	f24,24(x2)
    if (qualifier == 'l')
     8dc:	7a69736b          	0x7a69736b
        base = 16;
     8e0:	0065                	c.nop	25
     8e2:	5a5f 6236 6773      	0x677362365a5f
        flags |= UPPERCASE;
     8e8:	6c5f 5072 0069      	0x6950726c5f
     8ee:	7362                	flw	f6,56(x2)
        if (qualifier == 'l')
     8f0:	69745f67          	0x69745f67
    n = addr[i];
     8f4:	656c                	flw	f11,76(x10)
     8f6:	775f 6961 0074      	0x746961775f
  len = 0;
     8fc:	6f62                	flw	f30,24(x2)
     8fe:	6666                	flw	f12,88(x2)
      if (n >= 100) 
     900:	5f00                	lw	x8,56(x14)
     902:	62747663          	bgeu	x8,x7,f2e <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x1c6>
      else if (n >= 10) 
     906:	6675                	lui	x12,0x1d
        tmp[len++] = digits[n / 10];
     908:	5f00                	lw	x8,56(x14)
     90a:	7366666f          	jal	x12,67040 <_bsg_elf_vcache_size+0x47040>
        tmp[len++] = digits[n / 100];
     90e:	7465                	lui	x8,0xffff9
      tmp[len++] = digits[0];
     910:	5f00                	lw	x8,56(x14)
     912:	626d                	lui	x4,0x1b
    if (i != 0) tmp[len++] = '.';
     914:	6f747273          	csrrci	x4,0x6f7,8
    if (n == 0)
     918:	5f736377          	0x5f736377
     91c:	74617473          	csrrci	x8,0x746,2
      tmp[len++] = digits[0];
     920:	0065                	c.nop	25
     922:	6d5f 7262 656c      	0x656c72626d5f
     928:	5f6e                	lw	x30,248(x2)
     92a:	74617473          	csrrci	x8,0x746,2
  for (i = 0; i < 4; i++)
     92e:	0065                	c.nop	25
     930:	6e72656b          	0x6e72656b
    if (i != 0) tmp[len++] = '.';
     934:	6c65                	lui	x24,0x19
     936:	6d5f 7461 6972      	0x697274616d5f
     93c:	5f78                	lw	x14,124(x14)
     93e:	756d                	lui	x10,0xffffb
    n = addr[i];
     940:	746c                	flw	f11,108(x8)
     942:	7069                	c.lui	x0,0xffffa
    if (i != 0) tmp[len++] = '.';
     944:	796c                	flw	f11,116(x10)
     946:	745f 6172 736e      	0x736e6172745f
    if (n == 0)
     94c:	6f70                	flw	f12,92(x14)
     94e:	6e5f6573          	csrrsi	x10,0x6e5,30
      if (n >= 100) 
     952:	6c756d6f          	jal	x26,57818 <_bsg_elf_vcache_size+0x37818>
        n = n % 100;
     956:	755f 726e 6c6f      	0x6c6f726e755f
        tmp[len++] = digits[n / 100];
     95c:	5f6c                	lw	x11,124(x14)
     95e:	6e69                	lui	x28,0x1a
        tmp[len++] = digits[n / 10];
     960:	7469                	lui	x8,0xffffa
     962:	383c                	fld	f15,112(x8)
     964:	202c                	fld	f11,64(x8)
     966:	726f6873          	csrrsi	x16,0x726,30
     96a:	2074                	fld	f13,192(x8)
        tmp[len++] = digits[n / 100];
     96c:	6e69                	lui	x28,0x1a
     96e:	2c74                	fld	f13,216(x8)
        tmp[len++] = digits[n / 10];
     970:	7320                	flw	f8,96(x14)
     972:	6f68                	flw	f10,92(x14)
        tmp[len++] = digits[n / 100];
     974:	7472                	flw	f8,60(x2)
     976:	6920                	flw	f8,80(x10)
     978:	746e                	flw	f8,248(x2)
     97a:	202c                	fld	f11,64(x8)
     97c:	726f6873          	csrrsi	x16,0x726,30
        n = n % 10;
     980:	2074                	fld	f13,192(x8)
     982:	6e69                	lui	x28,0x1a
        tmp[len++] = digits[n / 10];
     984:	3e74                	fld	f13,248(x12)
     986:	6b00                	flw	f8,16(x14)
     988:	7265                	lui	x4,0xffff9
     98a:	656e                	flw	f10,216(x2)
     98c:	5f6c                	lw	x11,124(x14)
     98e:	616d                	addi	x2,x2,240
      tmp[len++] = digits[n];
     990:	7274                	flw	f13,100(x12)
     992:	7869                	lui	x16,0xffffa
     994:	6d5f 6c75 6974      	0x69746c756d5f
     99a:	6c70                	flw	f12,92(x8)
     99c:	5f79                	li	x30,-2
     99e:	7274                	flw	f13,100(x12)
     9a0:	6e61                	lui	x28,0x18
     9a2:	736f7073          	csrci	0x736,30
  for (i = 0; i < 4; i++)
     9a6:	5f65                	li	x30,-7
     9a8:	6f6e                	flw	f30,216(x2)
     9aa:	756d                	lui	x10,0xffffb
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     9ac:	5f6c                	lw	x11,124(x14)
     9ae:	6e75                	lui	x28,0x1d
     9b0:	6f72                	flw	f30,28(x2)
     9b2:	6c6c                	flw	f11,92(x8)
     9b4:	695f 696e 3c74      	0x3c74696e695f
     9ba:	2c38                	fld	f14,88(x8)
     9bc:	6620                	flw	f8,72(x12)
     9be:	6f6c                	flw	f11,92(x14)
     9c0:	7461                	lui	x8,0xffff8
     9c2:	202c                	fld	f11,64(x8)
     9c4:	6c66                	flw	f24,88(x2)
     9c6:	2c74616f          	jal	x2,4748c <_bsg_elf_vcache_size+0x2748c>
     9ca:	6620                	flw	f8,72(x12)
     9cc:	6f6c                	flw	f11,92(x14)
     9ce:	7461                	lui	x8,0xffff8
     9d0:	003e                	c.slli	x0,0xf
     9d2:	7362                	flw	f6,56(x2)
     9d4:	6f725f67          	0x6f725f67
     9d8:	61625f77          	0x61625f77
     9dc:	7272                	flw	f4,60(x2)
     9de:	6569                	lui	x10,0x1a
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     9e0:	5f72                	lw	x30,60(x2)
     9e2:	636e7973          	csrrci	x18,0x636,28
     9e6:	5f00                	lw	x8,56(x14)
     9e8:	315a                	fld	f2,432(x2)
     9ea:	6238                	flw	f14,64(x12)
     9ec:	775f6773          	csrrsi	x14,0x775,30
     9f0:	6961                	lui	x18,0x18
     9f2:	5f74                	lw	x13,124(x14)
     9f4:	6f6c                	flw	f11,92(x14)
     9f6:	5f6c6163          	bltu	x24,x22,fd8 <kernel_matrix_multiply_int+0x9c>
     9fa:	6e69                	lui	x28,0x1a
  while (len < size--) *str++ = ' ';
     9fc:	5074                	lw	x13,100(x8)
     9fe:	6969                	lui	x18,0x1a
     a00:	5f00                	lw	x8,56(x14)
     a02:	6e66                	flw	f28,88(x2)
     a04:	5f5f0073          	0x5f5f0073
     a08:	6e69                	lui	x28,0x1a
     a0a:	7074                	flw	f13,100(x8)
     a0c:	7274                	flw	f13,100(x12)
     a0e:	745f 5f00 755f      	0x755f5f00745f
     a14:	6e69                	lui	x28,0x1a
     a16:	5f74                	lw	x13,124(x14)
     a18:	656c                	flw	f11,76(x10)
     a1a:	7361                	lui	x6,0xffff8
     a1c:	3874                	fld	f13,240(x8)
     a1e:	745f 5f00 695f      	0x695f5f00745f
     a24:	746e                	flw	f8,248(x2)
     a26:	3631                	jal	532 <bsg_printf+0x66>
     a28:	745f 5f00 7473      	0x74735f00745f
     a2e:	6564                	flw	f9,76(x10)
  return str;
     a30:	7272                	flw	f4,60(x2)
     a32:	5f00                	lw	x8,56(x14)
        flags |= SIGN;
     a34:	6942                	flw	f18,16(x2)
     a36:	746e6967          	0x746e6967
    base = 10;
     a3a:	5f00                	lw	x8,56(x14)
    if (qualifier == 'l')
     a3c:	6572                	flw	f10,28(x2)
     a3e:	746c7573          	csrrci	x10,0x746,24
     a42:	6b5f 5f00 695f      	0x695f5f006b5f
      num = va_arg(args, unsigned long);
     a48:	746e                	flw	f8,248(x2)
     a4a:	6c5f 6165 7473      	0x747361656c5f
      fmt++;
     a50:	3631                	jal	55c <bsg_printf+0x90>
     a52:	745f 5f00 745f      	0x745f5f00745f
        base = 8;
     a58:	006d                	c.nop	27
     a5a:	5f5f 6377 6268      	0x626863775f5f
        flags |= UPPERCASE;
     a60:	5f00                	lw	x8,56(x14)
     a62:	72736377          	0x72736377
        base = 16;
     a66:	6f74                	flw	f13,92(x14)
     a68:	626d                	lui	x4,0x1b
     a6a:	74735f73          	csrrwi	x30,0x747,6
        flags |= UPPERCASE;
     a6e:	7461                	lui	x8,0xffff8
        if (qualifier == 'l')
     a70:	0065                	c.nop	25
     a72:	735f 6474 756f      	0x756f6474735f
     a78:	0074                	addi	x13,x2,12
     a7a:	5f5f 7562 6c69      	0x6c6975625f5f
  if (type & UPPERCASE)  dig = upper_digits;
     a80:	6974                	flw	f13,84(x10)
     a82:	5f6e                	lw	x30,248(x2)
  char *dig = digits;
     a84:	656d                	lui	x10,0x1b
     a86:	636d                	lui	x6,0x1b
  if (type & UPPERCASE)  dig = upper_digits;
     a88:	7970                	flw	f12,116(x10)
     a8a:	5f00                	lw	x8,56(x14)
     a8c:	6c747663          	bgeu	x8,x7,1158 <_tls_data+0x118>
     a90:	6e65                	lui	x28,0x19
     a92:	6200                	flw	f8,0(x12)
    if (i != 0) tmp[len++] = ':';
     a94:	635f6773          	csrrsi	x14,0x635,30
     a98:	625f6c6f          	jal	x24,f78bc <_bsg_elf_vcache_size+0xd78bc>
  if (type & UPPERCASE)  dig = upper_digits;
     a9c:	7261                	lui	x4,0xffff8
     a9e:	6972                	flw	f18,28(x2)
    if (i != 0) tmp[len++] = ':';
     aa0:	7265                	lui	x4,0xffff9
     aa2:	615f 656c 7472      	0x7472656c615f
     aa8:	6100                	flw	f8,0(x10)
     aaa:	0066666f          	jal	x12,66ab0 <_bsg_elf_vcache_size+0x46ab0>
    tmp[len++] = dig[addr[i] >> 4];
     aae:	665f 6c69 0065      	0x656c69665f
     ab4:	5f70                	lw	x12,124(x14)
     ab6:	6572                	flw	f10,28(x2)
     ab8:	6f6d                	lui	x30,0x1b
     aba:	6574                	flw	f13,76(x10)
    tmp[len++] = dig[addr[i] & 0x0F];
     abc:	625f 7261 6972      	0x69727261625f
    tmp[len++] = dig[addr[i] >> 4];
     ac2:	7265                	lui	x4,0xffff9
    tmp[len++] = dig[addr[i] & 0x0F];
     ac4:	5f00                	lw	x8,56(x14)
     ac6:	7a697373          	csrrci	x6,0x7a6,18
    tmp[len++] = dig[addr[i] >> 4];
     aca:	5f65                	li	x30,-7
    tmp[len++] = dig[addr[i] & 0x0F];
     acc:	0074                	addi	x13,x2,12
     ace:	6e5f 6f69 7362      	0x73626f696e5f
     ad4:	4200                	lw	x8,0(x12)
     ad6:	6c5f 636f 6c61      	0x6c61636f6c5f
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     adc:	5f00                	lw	x8,56(x14)
     ade:	5f676973          	csrrsi	x18,0x5f6,14
     ae2:	7566                	flw	f10,120(x2)
     ae4:	636e                	flw	f6,216(x2)
     ae6:	5f00                	lw	x8,56(x14)
     ae8:	65756c67          	0x65756c67
     aec:	5f00                	lw	x8,56(x14)
     aee:	7461                	lui	x8,0xffff8
     af0:	7865                	lui	x16,0xffff9
     af2:	7469                	lui	x8,0xffffa
     af4:	0030                	addi	x12,x2,8
     af6:	5f70                	lw	x12,124(x14)
     af8:	5f6c6f63          	bltu	x24,x22,10f6 <_tls_data+0xb6>
     afc:	0062                	c.slli	x0,0x18
     afe:	5f5f 6e69 6d74      	0x6d746e695f5f
     b04:	7861                	lui	x16,0xffff8
     b06:	745f 4100 485f      	0x485f4100745f
     b0c:	4945                	li	x18,17
     b0e:	00544847          	fmsub.s	f16,f8,f5,f0,rmm
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b12:	6e69                	lui	x28,0x1a
     b14:	5f007263          	bgeu	x0,x16,10f8 <_tls_data+0xb8>
     b18:	6572                	flw	f10,28(x2)
     b1a:	746c7573          	csrrci	x10,0x746,24
     b1e:	5f00                	lw	x8,56(x14)
     b20:	775f 6863 7500      	0x75006863775f
     b26:	6e69                	lui	x28,0x1a
     b28:	5f74                	lw	x13,124(x14)
     b2a:	6166                	flw	f2,88(x2)
  while (len < size--) *str++ = ' ';
     b2c:	34367473          	csrrci	x8,mtval,12
     b30:	745f 5f00 355a      	0x355a5f00745f
     b36:	6b30                	flw	f12,80(x14)
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b38:	7265                	lui	x4,0xffff9
     b3a:	656e                	flw	f10,216(x2)
  while (len < size--) *str++ = ' ';
     b3c:	5f6c                	lw	x11,124(x14)
     b3e:	616d                	addi	x2,x2,240
     b40:	7274                	flw	f13,100(x12)
     b42:	7869                	lui	x16,0xffffa
     b44:	6d5f 6c75 6974      	0x69746c756d5f
     b4a:	6c70                	flw	f12,92(x8)
     b4c:	5f79                	li	x30,-2
     b4e:	7274                	flw	f13,100(x12)
     b50:	6e61                	lui	x28,0x18
     b52:	736f7073          	csrci	0x736,30
     b56:	5f65                	li	x30,-7
     b58:	6f6e                	flw	f30,216(x2)
     b5a:	756d                	lui	x10,0xffffb
     b5c:	5f6c                	lw	x11,124(x14)
     b5e:	6e75                	lui	x28,0x1d
     b60:	6f72                	flw	f30,28(x2)
     b62:	6c6c                	flw	f11,92(x8)
     b64:	695f 696e 4974      	0x4974696e695f
     b6a:	6a4c                	flw	f11,20(x12)
     b6c:	4538                	lw	x14,72(x10)
     b6e:	6161                	addi	x2,x2,80
     b70:	4561                	li	x10,24
     b72:	5069                	c.li	x0,-6
  return str;
     b74:	3054                	fld	f13,160(x8)
     b76:	505f 3154 505f      	0x505f3154505f
  for (str = buf; *fmt; fmt++)
     b7c:	3254                	fld	f13,160(x12)
     b7e:	6d5f 6d6d 7700      	0x77006d6d6d5f
      else if (n >= 10) 
     b84:	6e69                	lui	x28,0x1a
     b86:	5f74                	lw	x13,124(x14)
     b88:	0074                	addi	x13,x2,12
     b8a:	5f70                	lw	x12,124(x14)
        tmp[len++] = digits[n / 10];
     b8c:	6f72                	flw	f30,28(x2)
     b8e:	00625f77          	0x625f77
     b92:	665f 616c 7367      	0x7367616c665f
     b98:	0032                	c.slli	x0,0xc
     b9a:	20554e47          	fmsub.s	f28,f10,f5,f4,rmm
        n = n % 10;
     b9e:	312b2b43          	fmadd.s	f22,f22,f18,f6,rdn
        tmp[len++] = digits[n / 10];
     ba2:	2031                	jal	bae <bsg_printf+0x6e2>
     ba4:	2e39                	jal	ec2 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x15a>
     ba6:	2e32                	fld	f28,264(x2)
        n = n % 10;
     ba8:	2030                	fld	f12,64(x8)
     baa:	6d2d                	lui	x26,0xb
        tmp[len++] = digits[n / 10];
     bac:	7261                	lui	x4,0xffff8
     bae:	723d6863          	bltu	x26,x3,12de <kernel_matrix_multiply_int16+0x17e>
        n = n % 10;
     bb2:	3376                	fld	f6,376(x2)
  int i = 0;
     bb4:	6932                	flw	f18,12(x2)
     bb6:	616d                	addi	x2,x2,240
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     bb8:	2066                	fld	f0,88(x2)
     bba:	6d2d                	lui	x26,0xb
     bbc:	6f6e                	flw	f30,216(x2)
     bbe:	662d                	lui	x12,0xb
     bc0:	6964                	flw	f9,84(x10)
     bc2:	2076                	fld	f0,344(x2)
     bc4:	6d2d                	lui	x26,0xb
     bc6:	7574                	flw	f13,108(x10)
     bc8:	656e                	flw	f10,216(x2)
     bca:	723d                	lui	x4,0xfffef
     bcc:	656b636f          	jal	x6,b7222 <_bsg_elf_vcache_size+0x97222>
     bd0:	2074                	fld	f13,192(x8)
     bd2:	6d2d                	lui	x26,0xb
     bd4:	6261                	lui	x4,0x18
     bd6:	3d69                	jal	a70 <bsg_printf+0x5a4>
     bd8:	6c69                	lui	x24,0x1a
     bda:	3370                	fld	f12,224(x14)
     bdc:	6632                	flw	f12,12(x2)
     bde:	2d20                	fld	f8,88(x10)
     be0:	4f2d2067          	0x4f2d2067
     be4:	2032                	fld	f0,264(x2)
     be6:	732d                	lui	x6,0xfffeb
     be8:	6474                	flw	f13,76(x8)
     bea:	633d                	lui	x6,0xf
     bec:	31312b2b          	0x31312b2b
     bf0:	2d20                	fld	f8,88(x10)
     bf2:	6666                	flw	f12,88(x2)
     bf4:	7361                	lui	x6,0xffff8
     bf6:	2d74                	fld	f13,216(x10)
        precision = va_arg(args, int);
     bf8:	616d                	addi	x2,x2,240
     bfa:	6874                	flw	f13,84(x8)
     bfc:	2d20                	fld	f8,88(x10)
     bfe:	6e66                	flw	f28,88(x2)
     c00:	6f632d6f          	jal	x26,332f6 <_bsg_elf_vcache_size+0x132f6>
     c04:	6d6d                	lui	x26,0x1b
     c06:	2d206e6f          	jal	x28,6ed8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x4ce4>
     c0a:	6666                	flw	f12,88(x2)
     c0c:	2d70                	fld	f12,216(x10)
     c0e:	746e6f63          	bltu	x28,x6,136c <kernel_matrix_multiply_int16+0x20c>
        ++fmt;
     c12:	6172                	flw	f2,28(x2)
      if (precision < 0) precision = 0;
     c14:	6f3d7463          	bgeu	x26,x19,12fc <kernel_matrix_multiply_int16+0x19c>
     c18:	6666                	flw	f12,88(x2)
     c1a:	6400                	flw	f8,8(x8)
     c1c:	6365                	lui	x6,0x19
     c1e:	746c                	flw	f11,108(x8)
     c20:	7079                	c.lui	x0,0xffffe
     c22:	2865                	jal	cda <bsg_printf+0x80e>
  return str;
     c24:	756e                	flw	f10,248(x2)
     c26:	6c6c                	flw	f11,92(x8)
        if (*fmt)
     c28:	7470                	flw	f12,108(x8)
     c2a:	2972                	fld	f18,280(x2)
     c2c:	5f00                	lw	x8,56(x14)
     c2e:	74697277          	0x74697277
     c32:	0065                	c.nop	25
     c34:	5f5f 6d74 795f      	0x795f6d745f5f
          *str++ = *fmt;
     c3a:	6165                	addi	x2,x2,112
     c3c:	0072                	c.slli	x0,0x1c
     c3e:	6e5f 616d 6c6c      	0x6c6c616d6e5f
  for (str = buf; *fmt; fmt++)
     c44:	6c00636f          	jal	x6,7304 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x5110>
     c48:	20676e6f          	jal	x28,76e4e <_bsg_elf_vcache_size+0x56e4e>
          flags |= ZEROPAD;
     c4c:	6f64                	flw	f9,92(x14)
     c4e:	6275                	lui	x4,0x1d
          field_width = 2 * sizeof(void *);
     c50:	656c                	flw	f11,76(x10)
     c52:	5f00                	lw	x8,56(x14)
     c54:	656e                	flw	f10,216(x2)
     c56:	7478                	flw	f14,108(x8)
        if (!s) s = "<NULL>";
     c58:	0066                	c.slli	x0,0x19
     c5a:	5a5f 3032 7362      	0x736230325a5f
     c60:	6f725f67          	0x6f725f67
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     c64:	61625f77          	0x61625f77
     c68:	7272                	flw	f4,60(x2)
     c6a:	6569                	lui	x10,0x1a
     c6c:	5f72                	lw	x30,60(x2)
     c6e:	636e7973          	csrrci	x18,0x636,28
     c72:	3150                	fld	f12,160(x10)
     c74:	73625f37          	lui	x30,0x73625
     c78:	6f725f67          	0x6f725f67
     c7c:	61625f77          	0x61625f77
     c80:	7272                	flw	f4,60(x2)
     c82:	6569                	lui	x10,0x1a
  int n=0;
     c84:	5f72                	lw	x30,60(x2)
     c86:	0069                	c.nop	26
     c88:	655f 656d 6772      	0x6772656d655f
  for (str = buf; *fmt; fmt++)
     c8e:	6e65                	lui	x28,0x19
     c90:	5f007963          	bgeu	x0,x16,1282 <kernel_matrix_multiply_int16+0x122>
     c94:	745f 5f6d 6f6d      	0x6f6d5f6d745f
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     c9a:	006e                	c.slli	x0,0x1b
     c9c:	63727473          	csrrci	x8,0x637,4
     ca0:	006c6c6f          	jal	x24,c6ca6 <_bsg_elf_vcache_size+0xa6ca6>
     ca4:	615f 6574 6978      	0x69786574615f
     caa:	0074                	addi	x13,x2,12
     cac:	5f5f 6473 6469      	0x646964735f5f
     cb2:	6e69                	lui	x28,0x1a
     cb4:	7469                	lui	x8,0xffffa
     cb6:	5f00                	lw	x8,56(x14)
     cb8:	5f66666f          	jal	x12,672ae <_bsg_elf_vcache_size+0x472ae>
     cbc:	0074                	addi	x13,x2,12
     cbe:	7362                	flw	f6,56(x2)
     cc0:	6f635f67          	0x6f635f67
      fmt++;
     cc4:	5f6c                	lw	x11,124(x14)
     cc6:	6162                	flw	f2,24(x2)
     cc8:	7272                	flw	f4,60(x2)
     cca:	6569                	lui	x10,0x1a
        base = 16;
     ccc:	0072                	c.slli	x0,0x1c
     cce:	5a5f 3035 656b      	0x656b30355a5f
    switch (*fmt)
     cd4:	6e72                	flw	f28,28(x2)
     cd6:	6c65                	lui	x24,0x19
     cd8:	6d5f 7461 6972      	0x697274616d5f
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     cde:	5f78                	lw	x14,124(x14)
     ce0:	756d                	lui	x10,0xffffb
     ce2:	746c                	flw	f11,108(x8)
     ce4:	7069                	c.lui	x0,0xffffa
     ce6:	796c                	flw	f11,116(x10)
  return sc - s;
     ce8:	745f 6172 736e      	0x736e6172745f
     cee:	6f70                	flw	f12,92(x14)
        *str++ = (unsigned char) va_arg(args, int);
     cf0:	6e5f6573          	csrrsi	x10,0x6e5,30
     cf4:	6c756d6f          	jal	x26,57bba <_bsg_elf_vcache_size+0x37bba>
     cf8:	755f 726e 6c6f      	0x6c6f726e755f
     cfe:	5f6c                	lw	x11,124(x14)
        while (--field_width > 0) *str++ = ' ';
     d00:	6e69                	lui	x28,0x1a
     d02:	7469                	lui	x8,0xffffa
     d04:	4c49                	li	x24,18
     d06:	386a                	fld	f16,184(x2)
        while (len < field_width--) *str++ = ' ';
     d08:	7345                	lui	x6,0xffff1
     d0a:	69457373          	csrrci	x6,0x694,10
  for (str = buf; *fmt; fmt++)
     d0e:	5450                	lw	x12,44(x8)
     d10:	5f30                	lw	x12,120(x14)
     d12:	5450                	lw	x12,44(x8)
      fmt++;
     d14:	5f31                	li	x30,-20
     d16:	5450                	lw	x12,44(x8)
     d18:	5f32                	lw	x30,44(x2)
     d1a:	6d6d                	lui	x26,0x1b
     d1c:	006d                	c.nop	27
     d1e:	5f5f 6975 746e      	0x746e69755f5f
     d24:	3436                	fld	f8,360(x2)
     d26:	745f 5f00 7266      	0x72665f00745f
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d2c:	6565                	lui	x10,0x19
     d2e:	696c                	flw	f11,84(x10)
     d30:	5f007473          	csrrci	x8,0x5f0,0
     d34:	325a                	fld	f4,432(x2)
     d36:	6232                	flw	f4,12(x2)
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d38:	745f6773          	csrrsi	x14,0x745,30
     d3c:	6c69                	lui	x24,0x1a
     d3e:	5f65                	li	x30,-7
     d40:	756f7267          	0x756f7267
        for (i = 0; i < len; ++i) *str++ = *s++;
     d44:	5f70                	lw	x12,124(x14)
     d46:	6162                	flw	f2,24(x2)
     d48:	7272                	flw	f4,60(x2)
     d4a:	6569                	lui	x10,0x1a
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     d4c:	5072                	0x5072
     d4e:	3731                	jal	c5a <bsg_printf+0x78e>
     d50:	625f 6773 725f      	0x725f6773625f
     d56:	625f776f          	jal	x14,f8b7a <_bsg_elf_vcache_size+0xd8b7a>
     d5a:	7261                	lui	x4,0xffff8
     d5c:	6972                	flw	f18,28(x2)
     d5e:	7265                	lui	x4,0xffff9
     d60:	505f 3731 625f      	0x625f3731505f
     d66:	635f6773          	csrrsi	x14,0x635,30
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d6a:	625f6c6f          	jal	x24,f7b8e <_bsg_elf_vcache_size+0xd7b8e>
     d6e:	7261                	lui	x4,0xffff8
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d70:	6972                	flw	f18,28(x2)
     d72:	7265                	lui	x4,0xffff9
     d74:	005f 6975 746e      	0x746e6975005f
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d7a:	665f 7361 3174      	0x31747361665f
     d80:	5f36                	lw	x30,108(x2)
     d82:	0074                	addi	x13,x2,12
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d84:	4c5f 434f 5f4b      	0x5f4b434f4c5f
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d8a:	4552                	lw	x10,20(x2)
     d8c:	53525543          	fmadd.d	f10,f4,f21,f10,unknown
     d90:	5649                	li	x12,-14
     d92:	5f45                	li	x30,-15
     d94:	0054                	addi	x13,x2,4
     d96:	6975                	lui	x18,0x1d
     d98:	746e                	flw	f8,248(x2)
     d9a:	665f 7361 3374      	0x33747361665f
     da0:	5f32                	lw	x30,44(x2)
     da2:	0074                	addi	x13,x2,12
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     da4:	6e72656b          	0x6e72656b
     da8:	6c65                	lui	x24,0x19
     daa:	2f38762f          	0x2f38762f
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     dae:	6e72656b          	0x6e72656b
     db2:	6c65                	lui	x24,0x19
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     db4:	632e                	flw	f6,200(x2)
     db6:	7070                	flw	f12,100(x8)
        if( bsg_x == center_x_cord) 
     db8:	5f00                	lw	x8,56(x14)
     dba:	6f64                	flw	f9,92(x14)
     dbc:	656e                	flw	f10,216(x2)
     dbe:	6c5f 7369 0074      	0x7473696c5f
        if( tmp == cond ) return tmp;  //the data is ready
     dc4:	7362                	flw	f6,56(x2)
     dc6:	726c5f67          	0x726c5f67
     dca:	5f00                	lw	x8,56(x14)
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dcc:	755f 6e69 5f74      	0x5f746e69755f
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     dd2:	656c                	flw	f11,76(x10)
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dd4:	7361                	lui	x6,0xffff8
     dd6:	3674                	fld	f13,232(x12)
        if( tmp == cond ) return tmp;  //the data is ready
     dd8:	5f34                	lw	x13,120(x14)
     dda:	0074                	addi	x13,x2,12
        p_row_b->_local_alert = 0;
     ddc:	6e72656b          	0x6e72656b
}
     de0:	6c65                	lui	x24,0x19
     de2:	6d5f 7461 6972      	0x697274616d5f
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     de8:	5f78                	lw	x14,124(x14)
     dea:	756d                	lui	x10,0xffffb
     dec:	746c                	flw	f11,108(x8)
     dee:	7069                	c.lui	x0,0xffffa
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     df0:	796c                	flw	f11,116(x10)
     df2:	695f 746e 3631      	0x3631746e695f
        bsg_col_barrier * p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( center_x_cord,    \
     df8:	4300                	lw	x8,0(x14)
     dfa:	6c5f 636f 6c61      	0x6c61636f6c5f
     e00:	6100                	flw	f8,0(x10)
     e02:	6f79                	lui	x30,0x1e
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e04:	6666                	flw	f12,88(x2)
     e06:	5f00                	lw	x8,56(x14)
                for( i= 0; i <= range; i++) {
     e08:	656e                	flw	f10,216(x2)
     e0a:	73620077          	0x73620077
     e0e:	69745f67          	0x69745f67
                        if ( p[ i ] == 0) break;
     e12:	656c                	flw	f11,76(x10)
     e14:	675f 6f72 7075      	0x70756f72675f
                for( i= 0; i <= range; i++) {
     e1a:	625f 7261 6972      	0x69727261625f
     e20:	7265                	lui	x4,0xffff9
     e22:	6900                	flw	f8,16(x10)
        p_remote_barrier->_done_list[ bsg_y - p_col_b-> _y_cord_start] = 1; 
     e24:	6574                	flw	f13,76(x10)
     e26:	0072                	c.slli	x0,0x1c
     e28:	685f 655f 7272      	0x7272655f685f
     e2e:	6f6e                	flw	f30,216(x2)
     e30:	5f00                	lw	x8,56(x14)
     e32:	745f 5f6d 6479      	0x64795f6d745f
     e38:	7961                	lui	x18,0xffff8
     e3a:	5f00                	lw	x8,56(x14)
        if( bsg_x == center_x_cord && bsg_y == center_y_cord) 
     e3c:	735f 7562 0066      	0x667562735f
     e42:	695f 626f 0073      	0x73626f695f
     e48:	5f5f 4946 454c      	0x454c49465f5f
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e4e:	5f00                	lw	x8,56(x14)
     e50:	735f 4946 454c      	0x454c4946735f
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e56:	7500                	flw	f8,40(x10)
        if( tmp == cond ) return tmp;  //the data is ready
     e58:	6e69                	lui	x28,0x1a
     e5a:	5f74                	lw	x13,124(x14)
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e5c:	6166                	flw	f2,88(x2)
     e5e:	5f387473          	csrrci	x8,0x5f3,16
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e62:	0074                	addi	x13,x2,12
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e64:	5f5f 6975 746e      	0x746e69755f5f
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     e6a:	7470                	flw	f12,108(x8)
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e6c:	5f72                	lw	x30,60(x2)
     e6e:	0074                	addi	x13,x2,12
        if( tmp == cond ) return tmp;  //the data is ready
     e70:	725f 6e61 5f64      	0x5f646e61725f
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e76:	656e                	flw	f10,216(x2)
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e78:	7478                	flw	f14,108(x8)
     e7a:	5f00                	lw	x8,56(x14)
     e7c:	315a                	fld	f2,432(x2)
     e7e:	7030                	flw	f12,96(x8)
               p_remote_barrier->_local_alert = 1;
     e80:	5f6c6c6f          	jal	x24,c7476 <_bsg_elf_vcache_size+0xa7476>
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e84:	6172                	flw	f2,28(x2)
     e86:	676e                	flw	f14,216(x2)
     e88:	6965                	lui	x18,0x19
     e8a:	6850                	flw	f12,20(x8)
     e8c:	5f00                	lw	x8,56(x14)
     e8e:	626d                	lui	x4,0x1b
     e90:	656c                	flw	f11,76(x10)
     e92:	5f6e                	lw	x30,248(x2)
     e94:	74617473          	csrrci	x8,0x746,2
               p_remote_barrier->_local_alert = 1;
     e98:	0065                	c.nop	25
     e9a:	695f 636e 5f00      	0x5f00636e695f
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     ea0:	6e69                	lui	x28,0x1a
     ea2:	0064                	addi	x9,x2,12
     ea4:	785f 635f 726f      	0x726f635f785f
        for( i= 0; i <= x_range; i++) {
     eaa:	5f64                	lw	x9,124(x14)
        p_col_b -> _local_alert = 0;
     eac:	72617473          	csrrci	x8,0x726,2
}
     eb0:	0074                	addi	x13,x2,12
     eb2:	5f5f 6c63 6165      	0x61656c635f5f
        p_col_b -> _local_alert = 0;
     eb8:	756e                	flw	f10,248(x2)
     eba:	0070                	addi	x12,x2,12
     ebc:	755f 736e 6570      	0x6570736e755f
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ec2:	69666963          	bltu	x12,x22,1554 <_bsg_data_end_addr+0x48>
     ec6:	6465                	lui	x8,0x19
                for( i= 0; i <= range; i++) {
     ec8:	6c5f 636f 6c61      	0x6c61636f6c5f
     ece:	5f65                	li	x30,-7
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ed0:	6e69                	lui	x28,0x1a
     ed2:	6f66                	flw	f30,88(x2)
                for( i= 0; i <= range; i++) {
     ed4:	5f00                	lw	x8,56(x14)
     ed6:	6572                	flw	f10,28(x2)
     ed8:	6e65                	lui	x28,0x19
     eda:	0074                	addi	x13,x2,12
                        if ( p[ i ] == 0) break;
     edc:	725f 6e61 3464      	0x34646e61725f
     ee2:	0038                	addi	x14,x2,8
                for( i= 0; i <= range; i++) {
     ee4:	735f 6565 0064      	0x646565735f
                        if ( p[ i ] == 0) break;
     eea:	5f5f 6f63 6e75      	0x6e756f635f5f
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     ef0:	0074                	addi	x13,x2,12
     ef2:	5f5f 6d74 685f      	0x685f6d745f5f
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     ef8:	0072756f          	jal	x10,286fe <_bsg_elf_vcache_size+0x86fe>
               p_remote_barrier->_local_alert = 1;
     efc:	735f 6565 006b      	0x6b6565735f
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     f02:	785f 635f 726f      	0x726f635f785f
     f08:	5f64                	lw	x9,124(x14)
     f0a:	6e65                	lui	x28,0x19
     f0c:	0064                	addi	x9,x2,12
     f0e:	7362                	flw	f6,56(x2)
               p_remote_barrier->_local_alert = 1;
     f10:	6f635f67          	0x6f635f67
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f14:	5f6c                	lw	x11,124(x14)
     f16:	6162                	flw	f2,24(x2)
     f18:	7272                	flw	f4,60(x2)
     f1a:	6569                	lui	x10,0x1a
     f1c:	5f72                	lw	x30,60(x2)
     f1e:	636e7973          	csrrci	x18,0x636,28
        for( i= 0; i <= y_range; i++) {
     f22:	5f00                	lw	x8,56(x14)
              p_col_b->_done_list[ i ] = 0;
     f24:	5f79                	li	x30,-2
     f26:	64726f63          	bltu	x4,x7,1584 <_bsg_data_end_addr+0x78>
        if( bsg_x == center_x_cord)
     f2a:	655f 646e 5f00      	0x5f00646e655f
     f30:	7066                	flw	f0,120(x2)
     f32:	745f736f          	jal	x6,f8e76 <_bsg_elf_vcache_size+0xd8e76>
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f36:	5f00                	lw	x8,56(x14)
     f38:	6d6d6167          	0x6d6d6167
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f3c:	5f61                	li	x30,-8
     f3e:	6e676973          	csrrsi	x18,0x6e6,14
     f42:	006d6167          	0x6d6167
     f46:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
     f4c:	6e69                	lui	x28,0x1a
     f4e:	5f00                	lw	x8,56(x14)
     f50:	755f 6e69 3174      	0x31746e69755f
     f56:	5f36                	lw	x30,108(x2)
     f58:	0074                	addi	x13,x2,12
     f5a:	5a5f 3032 7362      	0x736230325a5f
     f60:	6f635f67          	0x6f635f67
     f64:	5f6c                	lw	x11,124(x14)
     f66:	6162                	flw	f2,24(x2)
     f68:	7272                	flw	f4,60(x2)
     f6a:	6569                	lui	x10,0x1a
     f6c:	5f72                	lw	x30,60(x2)
     f6e:	636e7973          	csrrci	x18,0x636,28
     f72:	3150                	fld	f12,160(x10)
     f74:	73625f37          	lui	x30,0x73625
     f78:	6f725f67          	0x6f725f67
     f7c:	61625f77          	0x61625f77
                int A_local[A_HEIGHT * A_WIDTH];
     f80:	7272                	flw	f4,60(x2)
     f82:	6569                	lui	x10,0x1a
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f84:	5f72                	lw	x30,60(x2)
     f86:	3150                	fld	f12,160(x10)
     f88:	73625f37          	lui	x30,0x73625
     f8c:	6f635f67          	0x6f635f67
     f90:	5f6c                	lw	x11,124(x14)
     f92:	6162                	flw	f2,24(x2)
     f94:	7272                	flw	f4,60(x2)
     f96:	6569                	lui	x10,0x1a
     f98:	5f72                	lw	x30,60(x2)
     f9a:	6969                	lui	x18,0x1a
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
     f9c:	5f00                	lw	x8,56(x14)
     f9e:	756d                	lui	x10,0xffffb
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     fa0:	746c                	flw	f11,108(x8)
     fa2:	5f00                	lw	x8,56(x14)
     fa4:	755f 6e69 6d74      	0x6d746e69755f
                int B_local[A_WIDTH * B_WIDTH];
     faa:	7861                	lui	x16,0xffff8
                int A_local[A_HEIGHT * A_WIDTH];
     fac:	745f 5f00 7473      	0x74735f00745f
     fb2:	7472                	flw	f8,60(x2)
     fb4:	6c5f6b6f          	jal	x22,f7e78 <_bsg_elf_vcache_size+0xd7e78>
     fb8:	7361                	lui	x6,0xffff8
     fba:	0074                	addi	x13,x2,12
     fbc:	5f5f 6e69 5f74      	0x5f746e695f5f
     fc2:	656c                	flw	f11,76(x10)
                for(int i = 0; i <= iter; ++i){
     fc4:	7361                	lui	x6,0xffff8
     fc6:	3374                	fld	f13,224(x14)
     fc8:	5f32                	lw	x30,44(x2)
     fca:	0074                	addi	x13,x2,12
     fcc:	665f 746e 7079      	0x7079746e665f
                int C_local[A_HEIGHT * B_WIDTH];
     fd2:	7365                	lui	x6,0xffff9
                int B_local[A_WIDTH * B_WIDTH];
     fd4:	5f00                	lw	x8,56(x14)
     fd6:	616d                	addi	x2,x2,240
     fd8:	7778                	flw	f14,108(x14)
     fda:	7364                	flw	f9,100(x14)
     fdc:	5f00                	lw	x8,56(x14)
     fde:	755f 6e69 5f74      	0x5f746e69755f
     fe4:	656c                	flw	f11,76(x10)
     fe6:	7361                	lui	x6,0xffff8
     fe8:	3174                	fld	f13,224(x10)
     fea:	5f36                	lw	x30,108(x2)
     fec:	0074                	addi	x13,x2,12
     fee:	6c61                	lui	x24,0x18
                int C_local[A_HEIGHT * B_WIDTH];
     ff0:	7265                	lui	x4,0xffff9
     ff2:	5f74                	lw	x13,124(x14)
     ff4:	006c6f63          	bltu	x24,x6,1012 <__bsg_grid_dim_x+0x2>
     ff8:	615f 6464 6b00      	0x6b006464615f
     ffe:	7265                	lui	x4,0xffff9
    1000:	656e                	flw	f10,216(x2)
    1002:	5f6c                	lw	x11,124(x14)
    1004:	616d                	addi	x2,x2,240
    1006:	7274                	flw	f13,100(x12)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1008:	7869                	lui	x16,0xffffa
    100a:	6d5f 6c75 6974      	0x69746c756d5f
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1010:	6c70                	flw	f12,92(x8)
    1012:	5f79                	li	x30,-2
    1014:	6e69                	lui	x28,0x1a
    1016:	0074                	addi	x13,x2,12
    1018:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
                        bsg_cuda_print_stat_start(temp);
    101e:	675f0067          	jr	1653(x30) # 73625675 <_bsg_elf_vcache_size+0x73605675>
    1022:	7465                	lui	x8,0xffff9
                int C_local[A_HEIGHT * B_WIDTH];
    1024:	6164                	flw	f9,68(x10)
    1026:	6574                	flw	f13,76(x10)
                int rc, temp = IGNORE_TAG;
    1028:	655f 7272 6b00      	0x6b007272655f
    102e:	7265                	lui	x4,0xffff9
                        bsg_cuda_print_stat_start(temp);
    1030:	656e                	flw	f10,216(x2)
    1032:	5f6c                	lw	x11,124(x14)
    1034:	616d                	addi	x2,x2,240
    1036:	7274                	flw	f13,100(x12)
    1038:	7869                	lui	x16,0xffffa
    103a:	6d5f 6c75 6974      	0x69746c756d5f
    1040:	6c70                	flw	f12,92(x8)
    1042:	5f79                	li	x30,-2
                        temp = tag;
    1044:	7274                	flw	f13,100(x12)
    1046:	6e61                	lui	x28,0x18
                        bsg_cuda_print_stat_start(temp);
    1048:	736f7073          	csrci	0x736,30
    104c:	5f65                	li	x30,-7
    104e:	6f6e                	flw	f30,216(x2)
    1050:	756d                	lui	x10,0xffffb
    1052:	5f6c                	lw	x11,124(x14)
    1054:	6e75                	lui	x28,0x1d
    1056:	6f72                	flw	f30,28(x2)
    1058:	6c6c                	flw	f11,92(x8)
    105a:	695f 696e 3c74      	0x3c74696e695f
    1060:	2c38                	fld	f14,88(x8)
    1062:	7320                	flw	f8,96(x14)
    1064:	6769                	lui	x14,0x1a
    1066:	656e                	flw	f10,216(x2)
    1068:	2064                	fld	f9,192(x8)
    106a:	72616863          	bltu	x2,x6,179a <kernel_matrix_multiply_float+0x1fa>
    106e:	202c                	fld	f11,64(x8)
    1070:	6e676973          	csrrsi	x18,0x6e6,14
    1074:	6465                	lui	x8,0x19
    1076:	6320                	flw	f8,64(x14)
    1078:	6168                	flw	f10,68(x10)
    107a:	2c72                	fld	f24,280(x2)
    107c:	7320                	flw	f8,96(x14)
    107e:	6769                	lui	x14,0x1a
    1080:	656e                	flw	f10,216(x2)
    1082:	2064                	fld	f9,192(x8)
    1084:	72616863          	bltu	x2,x6,17b4 <kernel_matrix_multiply_float+0x214>
    1088:	003e                	c.slli	x0,0xf
    108a:	7362                	flw	f6,56(x2)
    108c:	726c5f67          	0x726c5f67
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1090:	615f 0071 675f      	0x675f0071615f
    1096:	6f6c                	flw	f11,92(x14)
    1098:	6162                	flw	f2,24(x2)
    109a:	5f6c                	lw	x11,124(x14)
    109c:	6d69                	lui	x26,0x1a
    109e:	7570                	flw	f12,108(x10)
    10a0:	6572                	flw	f10,28(x2)
    10a2:	705f 7274 4100      	0x41007274705f
                for(int i = 0; i <= iter; ++i){
    10a8:	6c5f 636f 6c61      	0x6c61636f6c5f
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    10ae:	5f00                	lw	x8,56(x14)
                        bsg_cuda_print_stat_end(temp);
    10b0:	6e75                	lui	x28,0x1d
    10b2:	7375                	lui	x6,0xffffd
    10b4:	6465                	lui	x8,0x19
    10b6:	725f 6e61 0064      	0x646e61725f
    10bc:	615f 6373 6974      	0x69746373615f
    10c2:	656d                	lui	x10,0x1b
    10c4:	625f 6675 6200      	0x62006675625f
    10ca:	775f6773          	csrrsi	x14,0x775,30
    10ce:	6961                	lui	x18,0x18
    10d0:	5f74                	lw	x13,124(x14)
    10d2:	6f6c                	flw	f11,92(x14)
    10d4:	5f6c6163          	bltu	x24,x22,16b6 <kernel_matrix_multiply_float+0x116>
    10d8:	6e69                	lui	x28,0x1a
    10da:	0074                	addi	x13,x2,12
    10dc:	775f 7364 5f00      	0x5f007364775f
    10e2:	745f 5f6d 6477      	0x64775f6d745f
    10e8:	7961                	lui	x18,0xffff8
    10ea:	5f00                	lw	x8,56(x14)
    10ec:	695f 746e 6c5f      	0x6c5f746e695f
    10f2:	6165                	addi	x2,x2,112
                for(int i = 0; i <= iter; ++i){
    10f4:	5f387473          	csrrci	x8,0x5f3,16
                        bsg_cuda_print_stat_end(temp);
    10f8:	0074                	addi	x13,x2,12
    10fa:	5f5f 6176 756c      	0x756c61765f5f
                for(int i = 0; i <= iter; ++i){
    1100:	0065                	c.nop	25
    1102:	5f5f 6975 746e      	0x746e69755f5f
    1108:	6c5f 6165 7473      	0x747361656c5f
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    110e:	745f3233          	0x745f3233
    1112:	5f00                	lw	x8,56(x14)
    1114:	366c                	fld	f11,232(x12)
    1116:	6134                	flw	f13,64(x10)
    1118:	625f 6675 5f00      	0x5f006675625f
        }
    111e:	395a                	fld	f18,432(x2)
    1120:	6c61                	lui	x24,0x18
    1122:	7265                	lui	x4,0xffff9
    1124:	5f74                	lw	x13,124(x14)
    1126:	506c6f63          	bltu	x24,x6,1644 <kernel_matrix_multiply_float+0xa4>
    112a:	3731                	jal	1036 <cuda_argv_ptr+0x2>
    112c:	625f 6773 635f      	0x635f6773625f
    1132:	625f6c6f          	jal	x24,f7f56 <_bsg_elf_vcache_size+0xd7f56>
    1136:	7261                	lui	x4,0xffff8
    1138:	6972                	flw	f18,28(x2)
    113a:	7265                	lui	x4,0xffff9
    113c:	005f 6d5f 7462      	0x74626d5f005f
    1142:	5f63776f          	jal	x14,38738 <_bsg_elf_vcache_size+0x18738>
    1146:	74617473          	csrrci	x8,0x746,2
    114a:	0065                	c.nop	25
    114c:	6f70                	flw	f12,92(x14)
    114e:	6c6c                	flw	f11,92(x8)
    1150:	725f 6e61 6567      	0x65676e61725f
    1156:	5f00                	lw	x8,56(x14)
    1158:	6c66                	flw	f24,88(x2)
    115a:	5f6b636f          	jal	x6,b7750 <_bsg_elf_vcache_size+0x97750>
    115e:	0074                	addi	x13,x2,12
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1160:	725f 6165 0064      	0x646165725f
    1166:	6e5f 7562 0066      	0x6675626e5f
    116c:	755f 756e 6573      	0x6573756e755f
    1172:	0064                	addi	x9,x2,12
    1174:	6e72656b          	0x6e72656b
    1178:	6c65                	lui	x24,0x19
    117a:	6d5f 7461 6972      	0x697274616d5f
    1180:	5f78                	lw	x14,124(x14)
    1182:	756d                	lui	x10,0xffffb
    1184:	746c                	flw	f11,108(x8)
    1186:	7069                	c.lui	x0,0xffffa
    1188:	796c                	flw	f11,116(x10)
    118a:	695f 746e 0038      	0x38746e695f
    1190:	7362                	flw	f6,56(x2)
    1192:	6f725f67          	0x6f725f67
    1196:	61625f77          	0x61625f77
    119a:	7272                	flw	f4,60(x2)
    119c:	6569                	lui	x10,0x1a
    119e:	5f72                	lw	x30,60(x2)
    11a0:	6c61                	lui	x24,0x18
    11a2:	7265                	lui	x4,0xffff9
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11a4:	0074                	addi	x13,x2,12
    11a6:	78727473          	csrrci	x8,0x787,4
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11aa:	7266                	flw	f4,120(x2)
    11ac:	006d                	c.nop	27
    11ae:	5f5f 6d74 695f      	0x695f6d745f5f
    11b4:	74736473          	csrrsi	x8,0x747,6
    11b8:	5f00                	lw	x8,56(x14)
    11ba:	6f6c                	flw	f11,92(x14)
    11bc:	746c6163          	bltu	x24,x6,18fe <__init_param+0x2>
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    11c0:	6d69                	lui	x26,0x1a
    11c2:	5f65                	li	x30,-7
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11c4:	7562                	flw	f10,56(x2)
    11c6:	0066                	c.slli	x0,0x19
    11c8:	635f 6f6c 6573      	0x65736f6c635f
                int16_t B_local[A_WIDTH * B_WIDTH];
    11ce:	5f00                	lw	x8,56(x14)
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11d0:	3472                	fld	f8,312(x2)
    11d2:	0038                	addi	x14,x2,8
    11d4:	6e72656b          	0x6e72656b
    11d8:	6c65                	lui	x24,0x19
    11da:	6d5f 7461 6972      	0x697274616d5f
    11e0:	5f78                	lw	x14,124(x14)
    11e2:	756d                	lui	x10,0xffffb
    11e4:	746c                	flw	f11,108(x8)
    11e6:	7069                	c.lui	x0,0xffffa
                for(int i = 0; i <= iter; ++i){
    11e8:	796c                	flw	f11,116(x10)
    11ea:	665f 6f6c 7461      	0x74616f6c665f
    11f0:	5f00                	lw	x8,56(x14)
    11f2:	3570                	fld	f12,232(x10)
                int16_t C_local[A_HEIGHT * B_WIDTH];
    11f4:	6c5f0073          	0x6c5f0073
                int16_t B_local[A_WIDTH * B_WIDTH];
    11f8:	6c61636f          	jal	x6,178be <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x156ca>
    11fc:	0065                	c.nop	25
    11fe:	6c61                	lui	x24,0x18
    1200:	7265                	lui	x4,0xffff9
    1202:	5f74                	lw	x13,124(x14)
    1204:	6f72                	flw	f30,28(x2)
    1206:	5a5f0077          	0x5a5f0077
    120a:	3331                	jal	f16 <_Z22bsg_tile_group_barrierP17_bsg_row_barrier_P17_bsg_col_barrier_+0x1ae>
    120c:	7362                	flw	f6,56(x2)
    120e:	69745f67          	0x69745f67
    1212:	656c                	flw	f11,76(x10)
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1214:	775f 6961 5074      	0x50746961775f
    121a:	3731                	jal	1126 <_tls_data+0xe6>
    121c:	625f 6773 725f      	0x725f6773625f
    1222:	625f776f          	jal	x14,f9046 <_bsg_elf_vcache_size+0xd9046>
    1226:	7261                	lui	x4,0xffff8
    1228:	6972                	flw	f18,28(x2)
    122a:	7265                	lui	x4,0xffff9
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    122c:	005f 7362 5f67      	0x5f677362005f
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1232:	6f72                	flw	f30,28(x2)
    1234:	61625f77          	0x61625f77
    1238:	7272                	flw	f4,60(x2)
    123a:	6569                	lui	x10,0x1a
    123c:	0072                	c.slli	x0,0x1c
    123e:	5f41                	li	x30,-16
                        bsg_cuda_print_stat_start(temp);
    1240:	54444957          	0x54444957
    1244:	0048                	addi	x10,x2,4
    1246:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
                int rc, temp = IGNORE_TAG;
    124c:	6164                	flw	f9,68(x10)
    124e:	0079                	c.nop	30
    1250:	5a5f 3035 656b      	0x656b30355a5f
                        bsg_cuda_print_stat_start(temp);
    1256:	6e72                	flw	f28,28(x2)
    1258:	6c65                	lui	x24,0x19
    125a:	6d5f 7461 6972      	0x697274616d5f
    1260:	5f78                	lw	x14,124(x14)
    1262:	756d                	lui	x10,0xffffb
    1264:	746c                	flw	f11,108(x8)
    1266:	7069                	c.lui	x0,0xffffa
                        temp = tag;
    1268:	796c                	flw	f11,116(x10)
    126a:	745f 6172 736e      	0x736e6172745f
                        bsg_cuda_print_stat_start(temp);
    1270:	6f70                	flw	f12,92(x14)
    1272:	6e5f6573          	csrrsi	x10,0x6e5,30
    1276:	6c756d6f          	jal	x26,5813c <_bsg_elf_vcache_size+0x3813c>
    127a:	755f 726e 6c6f      	0x6c6f726e755f
    1280:	5f6c                	lw	x11,124(x14)
    1282:	6e69                	lui	x28,0x1a
    1284:	7469                	lui	x8,0xffffa
    1286:	4c49                	li	x24,18
    1288:	386a                	fld	f16,184(x2)
    128a:	6645                	lui	x12,0x11
    128c:	6666                	flw	f12,88(x2)
    128e:	6945                	lui	x18,0x11
    1290:	5450                	lw	x12,44(x8)
    1292:	5f30                	lw	x12,120(x14)
    1294:	5450                	lw	x12,44(x8)
    1296:	5f31                	li	x30,-20
    1298:	5450                	lw	x12,44(x8)
    129a:	5f32                	lw	x30,44(x2)
    129c:	6d6d                	lui	x26,0x1b
    129e:	006d                	c.nop	27
    12a0:	5a5f 3132 7362      	0x736231325a5f
    12a6:	6f635f67          	0x6f635f67
    12aa:	5f6c                	lw	x11,124(x14)
    12ac:	6162                	flw	f2,24(x2)
    12ae:	7272                	flw	f4,60(x2)
    12b0:	6569                	lui	x10,0x1a
    12b2:	5f72                	lw	x30,60(x2)
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12b4:	6c61                	lui	x24,0x18
    12b6:	7265                	lui	x4,0xffff9
    12b8:	5074                	lw	x13,100(x8)
    12ba:	3731                	jal	11c6 <kernel_matrix_multiply_int16+0x66>
    12bc:	625f 6773 635f      	0x635f6773625f
    12c2:	625f6c6f          	jal	x24,f80e6 <_bsg_elf_vcache_size+0xd80e6>
    12c6:	7261                	lui	x4,0xffff8
    12c8:	6972                	flw	f18,28(x2)
    12ca:	7265                	lui	x4,0xffff9
                for(int i = 0; i <= iter; ++i){
    12cc:	005f 5f5f 6e67      	0x6e675f5f005f
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12d2:	5f75                	li	x30,-3
                        bsg_cuda_print_stat_end(temp);
    12d4:	00787863          	bgeu	x16,x7,12e4 <kernel_matrix_multiply_int16+0x184>

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  li  x1, 0
       0:	19bc                	addi	x15,x2,248
       2:	0000                	unimp
  li  x3, 0
       4:	19d0                	addi	x12,x2,244
       6:	0000                	unimp
  li  x4, 0
       8:	0005                	c.nop	1
       a:	00103003          	0x103003
	...
  li  x7, 0
      16:	3800                	fld	f8,48(x8)
  li  x8, 0
      18:	0001                	nop
      1a:	4c00                	lw	x8,24(x8)
  li  x9, 0
      1c:	0001                	nop
      1e:	0500                	addi	x8,x2,640
  li  x10,0
      20:	0300                	addi	x8,x2,384
      22:	1030                	addi	x12,x2,40
	...
  li  x13,0
      2c:	0000                	unimp
      2e:	006c                	addi	x11,x2,12
  li  x14,0
      30:	0000                	unimp
      32:	0070                	addi	x12,x2,12
  li  x15,0
      34:	0000                	unimp
      36:	0001                	nop
  li  x16,0
      38:	705c                	flw	f15,36(x8)
      3a:	0000                	unimp
  li  x17,0
      3c:	7400                	flw	f8,40(x8)
      3e:	0000                	unimp
  li  x18,0
      40:	0600                	addi	x8,x2,768
      42:	7e00                	flw	f8,56(x12)
  li  x19,0
      44:	7f04                	flw	f9,56(x14)
      46:	2100                	fld	f8,0(x10)
  li  x20,0
      48:	749f 0000 7800      	0x78000000749f
  li  x21,0
      4e:	0000                	unimp
  li  x22,0
      50:	0900                	addi	x8,x2,144
      52:	7f00                	flw	f8,56(x14)
  li  x23,0
      54:	0c00                	addi	x8,x2,528
      56:	0004                	0x4
  li  x24,0
      58:	2002                	fld	f0,0(x2)
      5a:	9f21                	0x9f21
  li  x25,0
      5c:	0078                	addi	x14,x2,12
      5e:	0000                	unimp
  li  x26,0
      60:	008c                	addi	x11,x2,64
      62:	0000                	unimp
  li  x27,0
      64:	0010                	0x10
      66:	007d                	c.nop	31
  li  x28,0
      68:	2448                	fld	f10,136(x8)
      6a:	2442007b          	0x2442007b
  li  x29,0
      6e:	0c21                	addi	x24,x24,8
  li  x30,0
      70:	0004                	0x4
      72:	2002                	fld	f0,0(x2)
  li  x31,0
      74:	9f21                	0x9f21
      76:	008c                	addi	x11,x2,64
  li t0, 0x00003000 # mstatus.FS
      78:	0000                	unimp
      7a:	00c8                	addi	x10,x2,68
  csrs mstatus, t0 # enable FPU
      7c:	0000                	unimp
      7e:	0014                	0x14
  fscsr x0
      80:	00102003          	lw	x0,1(x0) # 1 <bsg_group_size>
  li t0, 0
      84:	0600                	addi	x8,x2,768
      86:	2448                	fld	f10,136(x8)
  fcvt.s.w f0, x0 
      88:	2442007b          	0x2442007b
  fcvt.s.w f1, x0 
      8c:	0c21                	addi	x24,x24,8
      8e:	0004                	0x4
  fcvt.s.w f2, x0 
      90:	2002                	fld	f0,0(x2)
      92:	9f21                	0x9f21
	...
  fcvt.s.w f5, x0 
      9c:	0078                	addi	x14,x2,12
      9e:	0000                	unimp
  fcvt.s.w f6, x0 
      a0:	0098                	addi	x14,x2,64
      a2:	0000                	unimp
  fcvt.s.w f7, x0 
      a4:	0001                	nop
      a6:	985f 0000 c800      	0xc8000000985f
  fcvt.s.w f9, x0 
      ac:	0000                	unimp
      ae:	1400                	addi	x8,x2,544
  fcvt.s.w f10,x0 
      b0:	0300                	addi	x8,x2,384
      b2:	1020                	addi	x8,x2,40
  fcvt.s.w f11,x0 
      b4:	0000                	unimp
      b6:	4806                	lw	x16,64(x2)
  fcvt.s.w f12,x0 
      b8:	7b24                	flw	f9,112(x14)
      ba:	4200                	lw	x8,0(x12)
  fcvt.s.w f13,x0 
      bc:	2124                	fld	f9,64(x10)
      be:	080c                	addi	x11,x2,16
  fcvt.s.w f14,x0 
      c0:	0200                	addi	x8,x2,256
      c2:	2120                	fld	f8,64(x10)
  fcvt.s.w f15,x0 
      c4:	009f 0000 0000      	0x9f
  fcvt.s.w f16,x0 
      ca:	0000                	unimp
  fcvt.s.w f17,x0 
      cc:	4400                	lw	x8,8(x8)
      ce:	0000                	unimp
  fcvt.s.w f18,x0 
      d0:	4c00                	lw	x8,24(x8)
      d2:	0000                	unimp
  fcvt.s.w f19,x0 
      d4:	0200                	addi	x8,x2,256
      d6:	3000                	fld	f8,32(x8)
  fcvt.s.w f20,x0 
      d8:	009f 0000 0000      	0x9f
  fcvt.s.w f21,x0 
      de:	0000                	unimp
  fcvt.s.w f22,x0 
      e0:	b400                	fsd	f8,40(x8)
      e2:	0002                	c.slli64	x0
  fcvt.s.w f23,x0 
      e4:	2c00                	fld	f8,24(x8)
      e6:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
  fcvt.s.w f24,x0 
      ea:	5a00                	lw	x8,48(x12)
  fcvt.s.w f25,x0 
      ec:	032c                	addi	x11,x2,392
      ee:	0000                	unimp
  fcvt.s.w f26,x0 
      f0:	0334                	addi	x13,x2,392
      f2:	0000                	unimp
  fcvt.s.w f27,x0 
      f4:	0001                	nop
      f6:	3456                	fld	f8,368(x2)
  fcvt.s.w f28,x0 
      f8:	74000003          	lb	x0,1856(x0) # 740 <bsg_printf+0x274>
  fcvt.s.w f29,x0 
      fc:	000a                	c.slli	x0,0x2
      fe:	0400                	addi	x8,x2,512
  fcvt.s.w f30,x0 
     100:	f300                	fsw	f8,32(x14)
     102:	5a01                	li	x20,-32
  fcvt.s.w f31,x0 
     104:	749f 000a 7c00      	0x7c00000a749f
  la gp, _gp
     10a:	000a                	c.slli	x0,0x2
     10c:	0100                	addi	x8,x2,128
     10e:	5a00                	lw	x8,48(x12)
  la  tp, _bsg_data_end_addr + 63
     110:	0a7c                	addi	x15,x2,284
     112:	0000                	unimp
     114:	0b50                	addi	x12,x2,404
     116:	0000                	unimp
  and tp, tp, -64
     118:	0004                	0x4
     11a:	9f5a01f3          	0x9f5a01f3
	...
  j main
     126:	0354                	addi	x13,x2,388
  j 2b
     128:	0000                	unimp
     12a:	037c                	addi	x15,x2,396
  if (__bsg_id == 0) 
     12c:	0000                	unimp
     12e:	0001                	nop
     130:	7c62                	flw	f24,56(x2)
     132:	90000003          	lb	x0,-1792(x0) # fffff900 <_end+0x7efff8a8>
     136:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
     *signal_ptr = cuda_finish_signal_val;     
     13a:	5f00                	lw	x8,56(x14)
     13c:	0a6c                	addi	x11,x2,284
     13e:	0000                	unimp
     140:	0a74                	addi	x13,x2,284
     142:	0000                	unimp
     144:	0001                	nop
     146:	0062                	c.slli	x0,0x18
     148:	0000                	unimp
     14a:	0000                	unimp
}
     14c:	0000                	unimp
     14e:	b400                	fsd	f8,40(x8)
  bsg_remote_store(0,0,bsg_x_v,0);
     150:	0002                	c.slli64	x0
     152:	7c00                	flw	f8,56(x8)
     154:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
     158:	3000                	fld	f8,32(x8)
     15a:	7c9f 0003 8800      	0x880000037c9f
     160:	09000003          	lb	x0,144(x0) # 90 <bsg_group_size+0x8f>
  bsg_remote_store(0,0,bsg_y_v,0);
     164:	7f00                	flw	f8,56(x14)
     166:	9100                	0x9100
  bsg_remote_store(0,0,bsg_x_v,0);
     168:	1c00                	addi	x8,x2,560
     16a:	9f02d023          	0x9f02d023
  bsg_remote_store(0,0,bsg_y_v,0);
     16e:	0388                	addi	x10,x2,448
     170:	0000                	unimp
     172:	0390                	addi	x12,x2,448
  bsg_wait_while(*bsg_x_v < 0);
     174:	0000                	unimp
     176:	0001                	nop
     178:	cc5a                	sw	x22,24(x2)
     17a:	50000003          	lb	x0,1280(x0) # 500 <bsg_printf+0x34>
  bsg_wait_while(*bsg_y_v < 0);
     17e:	0200000b          	0x200000b
     182:	3000                	fld	f8,32(x8)
  if (!*bsg_x_v && !*bsg_y_v)
     184:	009f 0000 0000      	0x9f
     18a:	0000                	unimp
     18c:	0c00                	addi	x8,x2,528
     18e:	50000003          	lb	x0,1280(x0) # 500 <bsg_printf+0x34>
     192:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
        bsg_remote_store(x,y,bsg_x_v,x);
     196:	6300                	flw	f8,0(x14)
        bsg_remote_store(x,y,bsg_y_v,y);
     198:	03cc                	addi	x11,x2,452
     19a:	0000                	unimp
  grp_org_x_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_X );
     19c:	054c                	addi	x11,x2,644
     19e:	0000                	unimp
     1a0:	0001                	nop
     1a2:	00054c63          	bltz	x10,1ba <bsg_set_tile_x_y+0x6a>
     1a6:	5000                	lw	x8,32(x8)
     1a8:	0005                	c.nop	1
     1aa:	0300                	addi	x8,x2,384
     1ac:	8300                	0x8300
     1ae:	9f04                	0x9f04
     1b0:	0550                	addi	x12,x2,644
     1b2:	0000                	unimp
     1b4:	0568                	addi	x10,x2,652
     1b6:	0000                	unimp
     1b8:	0001                	nop
     1ba:	00056863          	bltu	x10,x0,1ca <bsg_set_tile_x_y+0x7a>
  __bsg_grp_org_x  = * grp_org_x_p;
     1be:	7000                	flw	f8,32(x8)
  grp_org_y_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_Y );
     1c0:	0005                	c.nop	1
     1c2:	0300                	addi	x8,x2,384
     1c4:	8300                	0x8300
     1c6:	9f04                	0x9f04
  __bsg_grp_org_x  = * grp_org_x_p;
     1c8:	0570                	addi	x12,x2,652
     1ca:	0000                	unimp
     1cc:	00000573          	0x573
  __bsg_grp_org_y  = * grp_org_y_p;
     1d0:	0001                	nop
     1d2:	7360                	flw	f8,100(x14)
     1d4:	0005                	c.nop	1
     1d6:	7400                	flw	f8,40(x8)
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1d8:	0005                	c.nop	1
     1da:	0100                	addi	x8,x2,128
  __bsg_grp_org_y  = * grp_org_y_p;
     1dc:	6300                	flw	f8,0(x14)
     1de:	057c                	addi	x15,x2,652
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e0:	0000                	unimp
     1e2:	063c                	addi	x15,x2,776
  __bsg_grid_dim_x = 1;
     1e4:	0000                	unimp
     1e6:	0001                	nop
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
     1e8:	00063c63          	0x63c63
  __bsg_grid_dim_x = 1;
     1ec:	4000                	lw	x8,0(x8)
     1ee:	0006                	c.slli	x0,0x1
     1f0:	0300                	addi	x8,x2,384
     1f2:	8300                	0x8300
  __bsg_grid_dim_y = 1;
     1f4:	9f7c                	0x9f7c
     1f6:	0640                	addi	x8,x2,772
     1f8:	0000                	unimp
     1fa:	06dc                	addi	x15,x2,836
  __bsg_tile_group_id_x = 0;
     1fc:	0000                	unimp
     1fe:	0001                	nop
     200:	0006dc63          	bgez	x13,218 <number>
  __bsg_tile_group_id_y = 0;
     204:	1c00                	addi	x8,x2,560
     206:	0008                	0x8
     208:	0300                	addi	x8,x2,384
     20a:	8300                	0x8300
  __bsg_tile_group_id = 0;
     20c:	9f04                	0x9f04
     20e:	081c                	addi	x15,x2,16
     210:	0000                	unimp
     212:	0830                	addi	x12,x2,24
}
     214:	0000                	unimp
     216:	0001                	nop
{
     218:	00083063          	0x83063
     21c:	4000                	lw	x8,0(x8)
     21e:	0008                	0x8
     220:	0100                	addi	x8,x2,128
     222:	6000                	flw	f8,0(x8)
  if (type & UPPERCASE)  dig = upper_digits;
     224:	0840                	addi	x8,x2,20
     226:	0000                	unimp
     228:	0864                	addi	x9,x2,28
     22a:	0000                	unimp
     22c:	0001                	nop
     22e:	00086463          	bltu	x16,x0,236 <number+0x1e>
  if (type & LEFT) type &= ~ZEROPAD;
     232:	6800                	flw	f8,16(x8)
  if (type & UPPERCASE)  dig = upper_digits;
     234:	0008                	0x8
     236:	0300                	addi	x8,x2,384
  if (type & LEFT) type &= ~ZEROPAD;
     238:	8300                	0x8300
     23a:	9f7c                	0x9f7c
     23c:	0868                	addi	x10,x2,28
     23e:	0000                	unimp
     240:	0964                	addi	x9,x2,156
     242:	0000                	unimp
  if (type & SIGN)
     244:	04830003          	lb	x0,72(x6) # ffffd048 <_end+0x7effcff0>
  c = (type & ZEROPAD) ? '0' : ' ';
     248:	649f 0009 6c00      	0x6c000009649f
  if (type & SIGN)
     24e:	0009                	c.nop	2
     250:	0100                	addi	x8,x2,128
     252:	6300                	flw	f8,0(x14)
    if (num < 0)
     254:	096c                	addi	x11,x2,156
     256:	0000                	unimp
    else if (type & PLUS)
     258:	099c                	addi	x15,x2,208
     25a:	0000                	unimp
     25c:	04830003          	lb	x0,72(x6)
    else if (type & SPACE)
     260:	9c9f 0009 dc00      	0xdc0000099c9f
  sign = 0;
     266:	0009                	c.nop	2
    else if (type & SPACE)
     268:	0100                	addi	x8,x2,128
     26a:	6300                	flw	f8,0(x14)
      size--;
     26c:	09dc                	addi	x15,x2,212
     26e:	0000                	unimp
      sign = ' ';
     270:	09e0                	addi	x8,x2,220
     272:	0000                	unimp
  if (type & HEX_PREP)
     274:	7c830003          	lb	x0,1992(x6)
    if (base == 16)
     278:	e09f 0009 ec00      	0xec000009e09f
     27e:	0009                	c.nop	2
      size--;
     280:	0300                	addi	x8,x2,384
     282:	8300                	0x8300
     284:	9f04                	0x9f04
     286:	09ec                	addi	x11,x2,220
     288:	0000                	unimp
     28a:	0a00                	addi	x8,x2,272
  if (num == 0)
     28c:	0000                	unimp
     28e:	0001                	nop
    tmp[i++] = '0';
     290:	000a0063          	beqz	x20,290 <number+0x78>
     294:	1000                	addi	x8,x2,32
     296:	000a                	c.slli	x0,0x2
     298:	0300                	addi	x8,x2,384
     29a:	8300                	0x8300
     29c:	9f04                	0x9f04
     29e:	0a10                	addi	x12,x2,272
     2a0:	0000                	unimp
     2a2:	0a6c                	addi	x11,x2,284
     2a4:	0000                	unimp
     2a6:	0001                	nop
  if (i > precision) precision = i;
     2a8:	000a7463          	bgeu	x20,x0,2b0 <number+0x98>
     2ac:	ac00                	fsd	f8,24(x8)
     2ae:	000a                	c.slli	x0,0x2
     2b0:	0100                	addi	x8,x2,128
     2b2:	6300                	flw	f8,0(x14)
  size -= precision;
     2b4:	0aac                	addi	x11,x2,344
     2b6:	0000                	unimp
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     2b8:	0ab4                	addi	x13,x2,344
     2ba:	0000                	unimp
     2bc:	7c830003          	lb	x0,1992(x6)
     2c0:	b49f 000a 0c00      	0xc00000ab49f
     2c6:	0100000b          	0x100000b
     2ca:	6300                	flw	f8,0(x14)
     2cc:	0b0c                	addi	x11,x2,400
     2ce:	0000                	unimp
     2d0:	0b2c                	addi	x11,x2,408
     2d2:	0000                	unimp
     2d4:	04830003          	lb	x0,72(x6)
     2d8:	2c9f 000b 5000      	0x5000000b2c9f
     2de:	0100000b          	0x100000b
  if (sign) *str++ = sign;
     2e2:	6300                	flw	f8,0(x14)
	...
  if (type & HEX_PREP)
     2ec:	030c                	addi	x11,x2,384
     2ee:	0000                	unimp
    if (base == 8)
     2f0:	032c                	addi	x11,x2,392
     2f2:	0000                	unimp
     2f4:	0001                	nop
     2f6:	2c5a                	fld	f24,400(x2)
    else if (base == 16)
     2f8:	4c000003          	lb	x0,1216(x0) # 4c0 <uart_send_char>
     2fc:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     300:	5600                	lw	x8,40(x12)
     302:	03cc                	addi	x11,x2,452
     304:	0000                	unimp
     306:	03dc                	addi	x15,x2,452
     308:	0000                	unimp
     30a:	0001                	nop
     30c:	dc56                	sw	x21,56(x2)
     30e:	94000003          	lb	x0,-1728(x0) # fffff940 <_end+0x7efff8e8>
     312:	0004                	0x4
     314:	0100                	addi	x8,x2,128
     316:	5900                	lw	x8,48(x10)
     318:	0494                	addi	x13,x2,576
     31a:	0000                	unimp
     31c:	04c0                	addi	x8,x2,580
     31e:	0000                	unimp
     320:	0001                	nop
     322:	c056                	sw	x21,0(x2)
     324:	0004                	0x4
     326:	ec00                	fsw	f8,24(x8)
     328:	0004                	0x4
     32a:	0100                	addi	x8,x2,128
     32c:	5900                	lw	x8,48(x10)
     32e:	04ec                	addi	x11,x2,588
     330:	0000                	unimp
     332:	050c                	addi	x11,x2,640
     334:	0000                	unimp
     336:	0001                	nop
     338:	0c60                	addi	x8,x2,540
     33a:	0005                	c.nop	1
     33c:	7c00                	flw	f8,56(x8)
     33e:	0005                	c.nop	1
     340:	0100                	addi	x8,x2,128
     342:	5900                	lw	x8,48(x10)
     344:	0584                	addi	x9,x2,704
     346:	0000                	unimp
  while (i < precision--) *str++ = '0';
     348:	0590                	addi	x12,x2,704
     34a:	0000                	unimp
     34c:	0001                	nop
     34e:	9059                	srli	x8,x8,0x36
     350:	0005                	c.nop	1
     352:	9400                	0x9400
     354:	0005                	c.nop	1
     356:	0100                	addi	x8,x2,128
     358:	5600                	lw	x8,40(x12)
     35a:	0594                	addi	x13,x2,704
     35c:	0000                	unimp
     35e:	061c                	addi	x15,x2,768
     360:	0000                	unimp
     362:	0001                	nop
  while (i-- > 0) *str++ = tmp[i];
     364:	2459                	jal	5ea <bsg_printf+0x11e>
     366:	0006                	c.slli	x0,0x1
  while (i < precision--) *str++ = '0';
     368:	2800                	fld	f8,16(x8)
     36a:	0006                	c.slli	x0,0x1
  while (i-- > 0) *str++ = tmp[i];
     36c:	0100                	addi	x8,x2,128
     36e:	5600                	lw	x8,40(x12)
     370:	0628                	addi	x10,x2,776
     372:	0000                	unimp
     374:	0648                	addi	x10,x2,772
     376:	0000                	unimp
     378:	0001                	nop
     37a:	5059                	c.li	x0,-10
     37c:	0006                	c.slli	x0,0x1
     37e:	6c00                	flw	f8,24(x8)
     380:	0006                	c.slli	x0,0x1
     382:	0100                	addi	x8,x2,128
     384:	5900                	lw	x8,48(x10)
     386:	066c                	addi	x11,x2,780
     388:	0000                	unimp
     38a:	0670                	addi	x12,x2,780
     38c:	0000                	unimp
     38e:	0001                	nop
     390:	7056                	flw	f0,116(x2)
     392:	0006                	c.slli	x0,0x1
     394:	b800                	fsd	f8,48(x8)
     396:	0006                	c.slli	x0,0x1
     398:	0100                	addi	x8,x2,128
     39a:	5900                	lw	x8,48(x10)
  while (size-- > 0) *str++ = ' ';
     39c:	06c0                	addi	x8,x2,836
     39e:	0000                	unimp
  while (i-- > 0) *str++ = tmp[i];
     3a0:	081c                	addi	x15,x2,16
     3a2:	0000                	unimp
  while (size-- > 0) *str++ = ' ';
     3a4:	0001                	nop
     3a6:	1c59                	addi	x24,x24,-10
     3a8:	0008                	0x8
     3aa:	8000                	0x8000
     3ac:	0008                	0x8
     3ae:	0100                	addi	x8,x2,128
     3b0:	5600                	lw	x8,40(x12)
     3b2:	0880                	addi	x8,x2,80
     3b4:	0000                	unimp
     3b6:	0964                	addi	x9,x2,156
     3b8:	0000                	unimp
     3ba:	01790003          	lb	x0,23(x18) # 11017 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xee23>
     3be:	6c9f 0009 9c00      	0x9c0000096c9f
     3c4:	0009                	c.nop	2
     3c6:	0100                	addi	x8,x2,128
     3c8:	5900                	lw	x8,48(x10)
     3ca:	099c                	addi	x15,x2,208
     3cc:	0000                	unimp
     3ce:	09d4                	addi	x13,x2,212
     3d0:	0000                	unimp
     3d2:	0001                	nop
     3d4:	d460                	sw	x8,108(x8)
     3d6:	0009                	c.nop	2
}
     3d8:	e000                	fsw	f8,0(x8)
     3da:	0009                	c.nop	2
     3dc:	0100                	addi	x8,x2,128
     3de:	5900                	lw	x8,48(x10)
     3e0:	09e0                	addi	x8,x2,220
     3e2:	0000                	unimp
     3e4:	09fc                	addi	x15,x2,220
     3e6:	0000                	unimp
  char *dig = digits;
     3e8:	02790003          	lb	x0,39(x18)
  if (type & LEFT) type &= ~ZEROPAD;
     3ec:	fc9f 0009 2c00      	0x2c000009fc9f
  char *dig = digits;
     3f2:	000a                	c.slli	x0,0x2
  if (type & LEFT) type &= ~ZEROPAD;
     3f4:	0100                	addi	x8,x2,128
     3f6:	5900                	lw	x8,48(x10)
  c = (type & ZEROPAD) ? '0' : ' ';
     3f8:	0a34                	addi	x13,x2,280
     3fa:	0000                	unimp
     3fc:	0a6c                	addi	x11,x2,284
     3fe:	0000                	unimp
     400:	0001                	nop
     402:	7459                	lui	x8,0xffff6
     404:	000a                	c.slli	x0,0x2
     406:	7c00                	flw	f8,56(x8)
  if (type & SIGN)
     408:	000a                	c.slli	x0,0x2
     40a:	0100                	addi	x8,x2,128
     40c:	5a00                	lw	x8,48(x12)
     40e:	0a7c                	addi	x15,x2,284
     410:	0000                	unimp
     412:	0a80                	addi	x8,x2,336
  sign = 0;
     414:	0000                	unimp
     416:	0004                	0x4
     418:	9f5a01f3          	0x9f5a01f3
      num = -num;
     41c:	0a80                	addi	x8,x2,336
     41e:	0000                	unimp
      size--;
     420:	0aac                	addi	x11,x2,344
     422:	0000                	unimp
      sign = '-';
     424:	0001                	nop
     426:	ac59                	j	6bc <bsg_printf+0x1f0>
  if (type & HEX_PREP)
     428:	000a                	c.slli	x0,0x2
     42a:	c400                	sw	x8,8(x8)
  if (base < 2 || base > 36) return 0;
     42c:	000a                	c.slli	x0,0x2
     42e:	0100                	addi	x8,x2,128
     430:	5600                	lw	x8,40(x12)
     432:	0ac4                	addi	x9,x2,340
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     434:	0000                	unimp
     436:	0af4                	addi	x13,x2,348
     438:	0000                	unimp
     43a:	0001                	nop
     43c:	fc59                	bnez	x8,3da <number+0x1c2>
     43e:	000a                	c.slli	x0,0x2
     440:	0400                	addi	x8,x2,512
     442:	0100000b          	0x100000b
     446:	5600                	lw	x8,40(x12)
     448:	0b04                	addi	x9,x2,400
     44a:	0000                	unimp
     44c:	0b1c                	addi	x15,x2,400
     44e:	0000                	unimp
      num = ((unsigned long) num) / (unsigned) base;
     450:	0001                	nop
     452:	1c59                	addi	x24,x24,-10
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
     454:	2c00000b          	0x2c00000b
    while (num != 0)
     458:	0300000b          	0x300000b
     45c:	7900                	flw	f8,48(x10)
     45e:	9f01                	0x9f01
      size--;
     460:	0b2c                	addi	x11,x2,408
     462:	0000                	unimp
      sign = '+';
     464:	0b50                	addi	x12,x2,404
     466:	0000                	unimp
     468:	0001                	nop
     46a:	0059                	c.nop	22
      *str++ = '0';
     46c:	0000                	unimp
     46e:	0000                	unimp
     470:	0000                	unimp
     472:	0c00                	addi	x8,x2,528
      *str++ = digits[33];
     474:	14000003          	lb	x0,320(x0) # 140 <write_finish_signal+0x14>
     478:	04000003          	lb	x0,64(x0) # 40 <bsg_group_size+0x3f>
     47c:	9100                	0x9100
     47e:	7db0                	flw	f12,120(x11)
     480:	149f 0003 5400      	0x54000003149f
      size -= 2;
     486:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
     48a:	6200                	flw	f8,0(x12)
      *str++ = '0';
     48c:	03cc                	addi	x11,x2,452
     48e:	0000                	unimp
     490:	0a6c                	addi	x11,x2,284
     492:	0000                	unimp
     494:	0001                	nop
     496:	7462                	flw	f8,56(x2)
     498:	000a                	c.slli	x0,0x2
     49a:	7800                	flw	f8,48(x8)
  while (i < precision--) *str++ = '0';
     49c:	000a                	c.slli	x0,0x2
     49e:	0400                	addi	x8,x2,512
     4a0:	9100                	0x9100
     4a2:	7db0                	flw	f12,120(x11)
     4a4:	789f 000a 5000      	0x5000000a789f
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
     4aa:	0100000b          	0x100000b
     4ae:	6200                	flw	f8,0(x12)
	...
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
     4b8:	05d0                	addi	x12,x2,708
     4ba:	0000                	unimp
     4bc:	05d4                	addi	x13,x2,708
     4be:	0000                	unimp
bsg_putchar( c );
     4c0:	0001                	nop
     4c2:	000a805b          	0xa805b
     4c6:	8800                	0x8800
}
     4c8:	000a                	c.slli	x0,0x2
     4ca:	0100                	addi	x8,x2,128
{
     4cc:	5b00                	lw	x8,48(x14)
     4ce:	0ac4                	addi	x9,x2,340
     4d0:	0000                	unimp
     4d2:	0ad8                	addi	x14,x2,340
     4d4:	0000                	unimp
     4d6:	0002                	c.slli64	x0
     4d8:	9f30                	0x9f30
     4da:	0b34                	addi	x13,x2,408
     4dc:	0000                	unimp
     4de:	0b48                	addi	x10,x2,404
     4e0:	0000                	unimp
     4e2:	0002                	c.slli64	x0
     4e4:	9f30                	0x9f30
     4e6:	0b48                	addi	x10,x2,404
     4e8:	0000                	unimp
     4ea:	0b50                	addi	x12,x2,404
     4ec:	0000                	unimp
     4ee:	0001                	nop
     4f0:	0000005b          	0x5b
     4f4:	0000                	unimp
     4f6:	0000                	unimp
     4f8:	d400                	sw	x8,40(x8)
     4fa:	0005                	c.nop	1
     4fc:	f800                	fsw	f8,48(x8)
     4fe:	0005                	c.nop	1
     500:	0200                	addi	x8,x2,256
     502:	3000                	fld	f8,32(x8)
     504:	2c9f 000b 3400      	0x3400000b2c9f
     50a:	0200000b          	0x200000b
     50e:	3000                	fld	f8,32(x8)
     510:	009f 0000 0000      	0x9f
     516:	0000                	unimp
  for (str = buf; *fmt; fmt++)
     518:	2c00                	fld	f8,24(x8)
     51a:	0004                	0x4
  va_start(args, fmt);
     51c:	4c00                	lw	x8,24(x8)
     51e:	0004                	0x4
     520:	0200                	addi	x8,x2,256
     522:	3a00                	fld	f8,48(x12)
  for (str = buf; *fmt; fmt++)
     524:	949f 0004 e000      	0xe0000004949f
     52a:	0004                	0x4
     52c:	0200                	addi	x8,x2,256
     52e:	3a00                	fld	f8,48(x12)
     530:	609f 0005 6800      	0x68000005609f
     536:	0005                	c.nop	1
     538:	0200                	addi	x8,x2,256
     53a:	4000                	lw	x8,0(x8)
     53c:	849f 0005 5000      	0x50000005849f
     542:	0006                	c.slli	x0,0x1
     544:	0200                	addi	x8,x2,256
     546:	3a00                	fld	f8,48(x12)
     548:	509f 0006 5c00      	0x5c000006509f
    if (*fmt != '%')
     54e:	0006                	c.slli	x0,0x1
     550:	0200                	addi	x8,x2,256
     552:	3800                	fld	f8,48(x8)
      *str++ = *fmt;
     554:	5c9f 0006 c400      	0xc40000065c9f
      continue;
     55a:	0006                	c.slli	x0,0x1
      *str++ = *fmt;
     55c:	0200                	addi	x8,x2,256
     55e:	3a00                	fld	f8,48(x12)
      continue;
     560:	c49f 0006 d000      	0xd0000006c49f
  for (str = buf; *fmt; fmt++)
     566:	0006                	c.slli	x0,0x1
  *str = '\0';
     568:	0200                	addi	x8,x2,256
     56a:	4000                	lw	x8,0(x8)
    asm volatile ("amoswap.w.aq %[result], %[swap_val], 0(%[addr]);"  \
     56c:	d09f 0006 2400      	0x24000006d09f
     572:	0008                	0x8
     574:	0200                	addi	x8,x2,256
     576:	3a00                	fld	f8,48(x12)
    }while( result == bsg_mutex_lock_fail);
     578:	249f 0008 4000      	0x40000008249f
  while (*p) {
     57e:	0008                	0x8
     580:	0100                	addi	x8,x2,128
     582:	5c00                	lw	x8,56(x8)
     584:	0840                	addi	x8,x2,20
     586:	0000                	unimp
  p=buf;
     588:	0848                	addi	x10,x2,20
     58a:	0000                	unimp
bsg_putchar( c );
     58c:	0002                	c.slli64	x0
     58e:	9f38                	0x9f38
     590:	0848                	addi	x10,x2,20
     592:	0000                	unimp
     594:	099c                	addi	x15,x2,208
     596:	0000                	unimp
  while (*p) {
     598:	0002                	c.slli64	x0
     59a:	9f3a                	add	x30,x30,x14
     59c:	09d4                	addi	x13,x2,212
     59e:	0000                	unimp
	p++;
     5a0:	09e0                	addi	x8,x2,220
     5a2:	0000                	unimp
  while (*p) {
     5a4:	0002                	c.slli64	x0
     5a6:	9f3a                	add	x30,x30,x14
    asm volatile ("amoswap.w.rl x0, x0, 0(%[addr]);"   \
     5a8:	0a00                	addi	x8,x2,272
     5aa:	0000                	unimp
     5ac:	0a6c                	addi	x11,x2,284
     5ae:	0000                	unimp
}
     5b0:	0002                	c.slli64	x0
     5b2:	9f3a                	add	x30,x30,x14
     5b4:	0a80                	addi	x8,x2,336
     5b6:	0000                	unimp
     5b8:	0afc                	addi	x15,x2,348
     5ba:	0000                	unimp
     5bc:	0002                	c.slli64	x0
     5be:	9f3a                	add	x30,x30,x14
     5c0:	0afc                	addi	x15,x2,348
     5c2:	0000                	unimp
     5c4:	0b04                	addi	x9,x2,400
     5c6:	0000                	unimp
     5c8:	0001                	nop
     5ca:	045c                	addi	x15,x2,516
     5cc:	5000000b          	0x5000000b
     5d0:	0200000b          	0x200000b
     5d4:	3a00                	fld	f8,48(x12)
     5d6:	009f 0000 0000      	0x9f
     5dc:	0000                	unimp
     5de:	0c00                	addi	x8,x2,528
     5e0:	14000003          	lb	x0,320(x0) # 140 <write_finish_signal+0x14>
    flags = 0;
     5e4:	04000003          	lb	x0,64(x0) # 40 <bsg_group_size+0x3f>
     5e8:	9100                	0x9100
     5ea:	7db0                	flw	f12,120(x11)
    switch (*fmt)
     5ec:	149f 0003 3400      	0x34000003149f
    fmt++; // This also skips first '%'
     5f2:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
    switch (*fmt)
     5f6:	6200                	flw	f8,0(x12)
     5f8:	033c                	addi	x15,x2,392
     5fa:	0000                	unimp
     5fc:	0348                	addi	x10,x2,388
     5fe:	0000                	unimp
     600:	017a0003          	lb	x0,23(x20)
     604:	489f 0003 4c00      	0x4c000003489f
     60a:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
     60e:	5a00                	lw	x8,48(x12)
    if (is_digit(*fmt))
     610:	04d8                	addi	x14,x2,580
     612:	0000                	unimp
     614:	04e0                	addi	x8,x2,588
     616:	0000                	unimp
     618:	017f0003          	lb	x0,23(x30)
     61c:	749f 0005 8400      	0x84000005749f
    else if (*fmt == '*')
     622:	0005                	c.nop	1
    field_width = -1;
     624:	0100                	addi	x8,x2,128
     626:	5a00                	lw	x8,48(x12)
    else if (*fmt == '*')
     628:	05e0                	addi	x8,x2,716
     62a:	0000                	unimp
    if (*fmt == '.')
     62c:	05f8                	addi	x14,x2,716
     62e:	0000                	unimp
    precision = -1;
     630:	0001                	nop
     632:	f85f 0005 1c00      	0x1c000005f85f
    if (*fmt == 'l' || *fmt == 'L')
     638:	0006                	c.slli	x0,0x1
     63a:	0100                	addi	x8,x2,128
     63c:	5e00                	lw	x8,56(x12)
     63e:	061c                	addi	x15,x2,768
     640:	0000                	unimp
     642:	0624                	addi	x9,x2,776
    switch (*fmt)
     644:	0000                	unimp
     646:	0001                	nop
     648:	405a                	0x405a
     64a:	0006                	c.slli	x0,0x1
     64c:	5000                	lw	x8,32(x8)
     64e:	0006                	c.slli	x0,0x1
     650:	0100                	addi	x8,x2,128
     652:	5a00                	lw	x8,48(x12)
     654:	0690                	addi	x12,x2,832
     656:	0000                	unimp
     658:	06a4                	addi	x9,x2,840
     65a:	0000                	unimp
     65c:	0001                	nop
     65e:	a45e                	fsd	f23,8(x2)
     660:	0006                	c.slli	x0,0x1
     662:	b400                	fsd	f8,40(x8)
      case '0': flags |= ZEROPAD; goto repeat;
     664:	0006                	c.slli	x0,0x1
     666:	0100                	addi	x8,x2,128
  for (str = buf; *fmt; fmt++)
     668:	5f00                	lw	x8,56(x14)
     66a:	06b8                	addi	x14,x2,840
     66c:	0000                	unimp
     66e:	06c0                	addi	x8,x2,836
      case '-': flags |= LEFT; goto repeat;
     670:	0000                	unimp
     672:	0001                	nop
  for (str = buf; *fmt; fmt++)
     674:	b05a                	fsd	f22,32(x2)
     676:	b4000007          	0xb4000007
     67a:	03000007          	0x3000007
      case '+': flags |= PLUS; goto repeat;
     67e:	7a00                	flw	f8,48(x12)
  for (str = buf; *fmt; fmt++)
     680:	9f01                	0x9f01
     682:	07b4                	addi	x13,x2,968
     684:	0000                	unimp
     686:	07c8                	addi	x10,x2,964
      case '#': flags |= HEX_PREP; goto repeat;
     688:	0000                	unimp
     68a:	0001                	nop
  for (str = buf; *fmt; fmt++)
     68c:	d05a                	sw	x22,32(x2)
     68e:	d8000007          	0xd8000007
     692:	03000007          	0x3000007
      case ' ': flags |= SPACE; goto repeat;
     696:	7a00                	flw	f8,48(x12)
  for (str = buf; *fmt; fmt++)
     698:	9f01                	0x9f01
     69a:	07d8                	addi	x14,x2,964
     69c:	0000                	unimp
     69e:	07f0                	addi	x12,x2,972
    switch (*fmt)
     6a0:	0000                	unimp
     6a2:	0001                	nop
     6a4:	145a                	slli	x8,x8,0x36
     6a6:	0008                	0x8
      fmt++;
     6a8:	1800                	addi	x8,x2,48
     6aa:	0008                	0x8
    switch (*fmt)
     6ac:	0600                	addi	x8,x2,768
     6ae:	7b00                	flw	f8,48(x14)
     6b0:	7a00                	flw	f8,48(x12)
     6b2:	2200                	fld	f8,0(x12)
     6b4:	189f 0008 1c00      	0x1c000008189f
     6ba:	0008                	0x8
     6bc:	0100                	addi	x8,x2,128
     6be:	5a00                	lw	x8,48(x12)
     6c0:	08e4                	addi	x9,x2,92
     6c2:	0000                	unimp
     6c4:	08e8                	addi	x10,x2,92
     6c6:	0000                	unimp
     6c8:	017a0003          	lb	x0,23(x20)
     6cc:	e89f 0008 f800      	0xf8000008e89f
     6d2:	0008                	0x8
      fmt++;
     6d4:	0100                	addi	x8,x2,128
     6d6:	5a00                	lw	x8,48(x12)
        if (*fmt != '%') *str++ = '%';
     6d8:	0914                	addi	x13,x2,144
     6da:	0000                	unimp
     6dc:	091c                	addi	x15,x2,144
     6de:	0000                	unimp
     6e0:	117a0003          	lb	x0,279(x20)
     6e4:	1c9f 0009 5800      	0x580000091c9f
        if (*fmt)
     6ea:	0009                	c.nop	2
     6ec:	0100                	addi	x8,x2,128
     6ee:	5a00                	lw	x8,48(x12)
        if (*fmt != '%') *str++ = '%';
     6f0:	0958                	addi	x14,x2,148
     6f2:	0000                	unimp
     6f4:	095c                	addi	x15,x2,148
     6f6:	0000                	unimp
      if (is_digit(*fmt))
     6f8:	0006                	c.slli	x0,0x1
     6fa:	007a                	c.slli	x0,0x1e
     6fc:	007f                	0x7f
     6fe:	9f22                	add	x30,x30,x8
      ++fmt;    
     700:	095c                	addi	x15,x2,148
     702:	0000                	unimp
      if (is_digit(*fmt))
     704:	096c                	addi	x11,x2,156
     706:	0000                	unimp
     708:	0001                	nop
     70a:	085a                	slli	x16,x16,0x16
     70c:	000a                	c.slli	x0,0x2
     70e:	0c00                	addi	x8,x2,528
      else if (*fmt == '*')
     710:	000a                	c.slli	x0,0x2
     712:	0600                	addi	x8,x2,768
     714:	7b00                	flw	f8,48(x14)
     716:	7a00                	flw	f8,48(x12)
      ++fmt;    
     718:	2200                	fld	f8,0(x12)
     71a:	0c9f 000a 1000      	0x1000000a0c9f
      if (precision < 0) precision = 0;
     720:	000a                	c.slli	x0,0x2
     722:	0100                	addi	x8,x2,128
  int i = 0;
     724:	5a00                	lw	x8,48(x12)
     726:	0a1c                	addi	x15,x2,272
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     728:	0000                	unimp
     72a:	0a20                	addi	x8,x2,280
     72c:	0000                	unimp
     72e:	0001                	nop
     730:	205d                	jal	7d6 <bsg_printf+0x30a>
     732:	000a                	c.slli	x0,0x2
     734:	2800                	fld	f8,16(x8)
     736:	000a                	c.slli	x0,0x2
     738:	0300                	addi	x8,x2,384
     73a:	7f00                	flw	f8,56(x14)
     73c:	9f01                	0x9f01
     73e:	0a2c                	addi	x11,x2,280
     740:	0000                	unimp
     742:	0a34                	addi	x13,x2,280
     744:	0000                	unimp
     746:	0001                	nop
     748:	585a                	lw	x16,180(x2)
     74a:	000a                	c.slli	x0,0x2
     74c:	5c00                	lw	x8,56(x8)
     74e:	000a                	c.slli	x0,0x2
     750:	0300                	addi	x8,x2,384
     752:	7a00                	flw	f8,48(x12)
     754:	9f01                	0x9f01
     756:	0a5c                	addi	x15,x2,276
      field_width = va_arg(args, int);
     758:	0000                	unimp
     75a:	0a6c                	addi	x11,x2,284
     75c:	0000                	unimp
     75e:	0001                	nop
      fmt++;
     760:	745a                	flw	f8,180(x2)
     762:	000a                	c.slli	x0,0x2
      field_width = va_arg(args, int);
     764:	7800                	flw	f8,48(x8)
     766:	000a                	c.slli	x0,0x2
      if (field_width < 0)
     768:	0400                	addi	x8,x2,512
     76a:	9100                	0x9100
        field_width = -field_width;
     76c:	7db0                	flw	f12,120(x11)
     76e:	789f 000a 8000      	0x8000000a789f
        flags |= LEFT;
     774:	000a                	c.slli	x0,0x2
     776:	0100                	addi	x8,x2,128
    if (qualifier == 'l')
     778:	6200                	flw	f8,0(x12)
     77a:	0a94                	addi	x13,x2,336
        base = 16;
     77c:	0000                	unimp
     77e:	0a98                	addi	x14,x2,336
      num = va_arg(args, unsigned int);
     780:	0000                	unimp
     782:	017a0003          	lb	x0,23(x20)
     786:	989f 000a ac00      	0xac00000a989f
    str = number(str, num, base, field_width, precision, flags);
     78c:	000a                	c.slli	x0,0x2
     78e:	0100                	addi	x8,x2,128
     790:	5a00                	lw	x8,48(x12)
     792:	0ae4                	addi	x9,x2,348
  for (str = buf; *fmt; fmt++)
     794:	0000                	unimp
     796:	0af4                	addi	x13,x2,348
     798:	0000                	unimp
     79a:	0001                	nop
    if (qualifier == 'l')
     79c:	f45e                	fsw	f23,40(x2)
     79e:	000a                	c.slli	x0,0x2
    if (*fmt == 'l' || *fmt == 'L')
     7a0:	fc00                	fsw	f8,56(x8)
     7a2:	000a                	c.slli	x0,0x2
     7a4:	0100                	addi	x8,x2,128
     7a6:	5a00                	lw	x8,48(x12)
      fmt++;
     7a8:	0b04                	addi	x9,x2,400
     7aa:	0000                	unimp
        s = va_arg(args, char *);
     7ac:	0b08                	addi	x10,x2,400
     7ae:	0000                	unimp
     7b0:	037a0003          	lb	x0,55(x20)
        if (!s) s = "<NULL>";
     7b4:	089f 000b 0c00      	0xc00000b089f
  for (sc = s; *sc != '\0' && count--; ++sc);
     7ba:	0300000b          	0x300000b
     7be:	7a00                	flw	f8,48(x12)
     7c0:	9f01                	0x9f01
	...
     7ca:	05a0                	addi	x8,x2,712
     7cc:	0000                	unimp
     7ce:	05f8                	addi	x14,x2,716
     7d0:	0000                	unimp
     7d2:	0001                	nop
     7d4:	805c                	0x805c
     7d6:	000a                	c.slli	x0,0x2
     7d8:	ac00                	fsd	f8,24(x8)
     7da:	000a                	c.slli	x0,0x2
     7dc:	0100                	addi	x8,x2,128
     7de:	5c00                	lw	x8,56(x8)
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e0:	0ac4                	addi	x9,x2,340
     7e2:	0000                	unimp
  return sc - s;
     7e4:	0ad8                	addi	x14,x2,340
     7e6:	0000                	unimp
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     7e8:	0001                	nop
     7ea:	2c5c                	fld	f15,152(x8)
        for (i = 0; i < len; ++i) *str++ = *s++;
     7ec:	5000000b          	0x5000000b
     7f0:	0100000b          	0x100000b
     7f4:	5c00                	lw	x8,56(x8)
	...
     7fe:	03d4                	addi	x13,x2,452
     800:	0000                	unimp
     802:	04c8                	addi	x10,x2,580
     804:	0000                	unimp
     806:	0001                	nop
     808:	e05f 0004 7300      	0x73000004e05f
     80e:	0005                	c.nop	1
        while (len < field_width--) *str++ = ' ';
     810:	0100                	addi	x8,x2,128
     812:	5f00                	lw	x8,56(x14)
     814:	0584                	addi	x9,x2,704
     816:	0000                	unimp
     818:	05cc                	addi	x11,x2,708
     81a:	0000                	unimp
     81c:	0001                	nop
     81e:	245f 0006 3f00      	0x3f000006245f
     824:	0006                	c.slli	x0,0x1
     826:	0100                	addi	x8,x2,128
     828:	5f00                	lw	x8,56(x14)
     82a:	0650                	addi	x12,x2,772
     82c:	0000                	unimp
     82e:	0674                	addi	x13,x2,780
     830:	0000                	unimp
     832:	0001                	nop
  for (str = buf; *fmt; fmt++)
     834:	c05f 0006 9800      	0x98000006c05f
     83a:	01000007          	0x1000007
      fmt++;
     83e:	5f00                	lw	x8,56(x14)
        if (field_width == -1)
     840:	081c                	addi	x15,x2,16
     842:	0000                	unimp
     844:	08c8                	addi	x10,x2,84
     846:	0000                	unimp
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
     848:	0001                	nop
     84a:	6c5f 0009 0000      	0x96c5f
     850:	000a                	c.slli	x0,0x2
     852:	0100                	addi	x8,x2,128
     854:	5f00                	lw	x8,56(x14)
     856:	0a34                	addi	x13,x2,280
     858:	0000                	unimp
     85a:	0a4c                	addi	x11,x2,276
        continue;
     85c:	0000                	unimp
     85e:	0001                	nop
  for (str = buf; *fmt; fmt++)
     860:	ac5f 000a d800      	0xd800000aac5f
     866:	000a                	c.slli	x0,0x2
    if (qualifier == 'l')
     868:	0100                	addi	x8,x2,128
     86a:	5f00                	lw	x8,56(x14)
        base = 8;
     86c:	0afc                	addi	x15,x2,348
     86e:	0000                	unimp
     870:	0b04                	addi	x9,x2,400
     872:	0000                	unimp
        flags |= SIGN;
     874:	0001                	nop
     876:	345f 000b 4800      	0x4800000b345f
    base = 10;
     87c:	0100000b          	0x100000b
     880:	5f00                	lw	x8,56(x14)
	...
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     88a:	03f8                	addi	x14,x2,460
     88c:	0000                	unimp
     88e:	0414                	addi	x13,x2,512
     890:	0000                	unimp
     892:	ff090003          	lb	x0,-16(x18)
        *str++ = (unsigned char) va_arg(args, int);
     896:	0c9f 0005 4c00      	0x4c0000050c9f
     89c:	0005                	c.nop	1
     89e:	0300                	addi	x8,x2,384
     8a0:	0900                	addi	x8,x2,144
     8a2:	9fff                	0x9fff
     8a4:	0558                	addi	x14,x2,644
     8a6:	0000                	unimp
        while (--field_width > 0) *str++ = ' ';
     8a8:	0560                	addi	x8,x2,652
     8aa:	0000                	unimp
     8ac:	0001                	nop
     8ae:	c05d                	beqz	x8,954 <bsg_printf+0x488>
        *str++ = (unsigned char) va_arg(args, int);
     8b0:	c4000007          	0xc4000007
        while (--field_width > 0) *str++ = ' ';
     8b4:	06000007          	0x6000007
     8b8:	7d00                	flw	f8,56(x10)
     8ba:	8000                	0x8000
     8bc:	2200                	fld	f8,0(x12)
     8be:	c49f 0007 c800      	0xc8000007c49f
     8c4:	01000007          	0x1000007
     8c8:	5d00                	lw	x8,56(x10)
     8ca:	08f0                	addi	x12,x2,92
     8cc:	0000                	unimp
     8ce:	08f4                	addi	x13,x2,92
  for (str = buf; *fmt; fmt++)
     8d0:	0000                	unimp
     8d2:	0006                	c.slli	x0,0x1
     8d4:	007c                	addi	x15,x2,12
     8d6:	9f1c007b          	0x9f1c007b
        flags |= UPPERCASE;
     8da:	08f4                	addi	x13,x2,92
    if (qualifier == 'l')
     8dc:	0000                	unimp
     8de:	08f8                	addi	x14,x2,92
        base = 16;
     8e0:	0000                	unimp
     8e2:	0001                	nop
     8e4:	345d                	jal	38a <number+0x172>
     8e6:	000a                	c.slli	x0,0x2
        flags |= UPPERCASE;
     8e8:	4000                	lw	x8,0(x8)
     8ea:	000a                	c.slli	x0,0x2
     8ec:	0200                	addi	x8,x2,256
     8ee:	3800                	fld	f8,48(x8)
        if (qualifier == 'l')
     8f0:	849f 000a 9400      	0x9400000a849f
    n = addr[i];
     8f6:	000a                	c.slli	x0,0x2
  len = 0;
     8f8:	0100                	addi	x8,x2,128
     8fa:	6000                	flw	f8,0(x8)
     8fc:	0b10                	addi	x12,x2,400
     8fe:	0000                	unimp
      if (n >= 100) 
     900:	0b18                	addi	x14,x2,400
     902:	0000                	unimp
      else if (n >= 10) 
     904:	0001                	nop
     906:	1860                	addi	x8,x2,60
        tmp[len++] = digits[n / 10];
     908:	1c00000b          	0x1c00000b
        tmp[len++] = digits[n / 100];
     90c:	0100000b          	0x100000b
      tmp[len++] = digits[0];
     910:	5d00                	lw	x8,56(x10)
     912:	0b20                	addi	x8,x2,408
    if (i != 0) tmp[len++] = '.';
     914:	0000                	unimp
     916:	0b28                	addi	x10,x2,408
    if (n == 0)
     918:	0000                	unimp
     91a:	0001                	nop
     91c:	285c                	fld	f15,144(x8)
     91e:	2c00000b          	0x2c00000b
      tmp[len++] = digits[0];
     922:	0100000b          	0x100000b
     926:	5d00                	lw	x8,56(x10)
     928:	0b38                	addi	x14,x2,408
     92a:	0000                	unimp
  for (i = 0; i < 4; i++)
     92c:	0b50                	addi	x12,x2,404
     92e:	0000                	unimp
     930:	0001                	nop
     932:	0060                	addi	x8,x2,12
    if (i != 0) tmp[len++] = '.';
     934:	0000                	unimp
     936:	0000                	unimp
     938:	0000                	unimp
     93a:	1400                	addi	x8,x2,544
     93c:	0004                	0x4
     93e:	2000                	fld	f8,0(x8)
    n = addr[i];
     940:	0004                	0x4
     942:	0300                	addi	x8,x2,384
    if (i != 0) tmp[len++] = '.';
     944:	0900                	addi	x8,x2,144
     946:	9fff                	0x9fff
    if (n == 0)
     948:	04e0                	addi	x8,x2,588
     94a:	0000                	unimp
     94c:	050c                	addi	x11,x2,640
     94e:	0000                	unimp
      if (n >= 100) 
     950:	ff090003          	lb	x0,-16(x18)
        n = n % 100;
     954:	9c9f 0009 d400      	0xd40000099c9f
        tmp[len++] = digits[n / 100];
     95a:	0009                	c.nop	2
     95c:	0300                	addi	x8,x2,384
     95e:	0900                	addi	x8,x2,144
        tmp[len++] = digits[n / 10];
     960:	9fff                	0x9fff
     962:	09e0                	addi	x8,x2,220
     964:	0000                	unimp
     966:	09fc                	addi	x15,x2,220
     968:	0000                	unimp
     96a:	ff090003          	lb	x0,-16(x18)
        tmp[len++] = digits[n / 100];
     96e:	009f 0000 0000      	0x9f
     974:	0000                	unimp
     976:	2000                	fld	f8,0(x8)
     978:	0004                	0x4
     97a:	4c00                	lw	x8,24(x8)
     97c:	0004                	0x4
     97e:	0300                	addi	x8,x2,384
        n = n % 10;
     980:	0900                	addi	x8,x2,144
     982:	9fff                	0x9fff
        tmp[len++] = digits[n / 10];
     984:	0488                	addi	x10,x2,576
     986:	0000                	unimp
     988:	04bc                	addi	x15,x2,584
     98a:	0000                	unimp
     98c:	0006                	c.slli	x0,0x1
     98e:	ff08007b          	0xff08007b
      tmp[len++] = digits[n];
     992:	9f1a                	add	x30,x30,x6
     994:	0560                	addi	x8,x2,652
     996:	0000                	unimp
     998:	0568                	addi	x10,x2,652
     99a:	0000                	unimp
     99c:	ff090003          	lb	x0,-16(x18)
     9a0:	849f 0005 9000      	0x90000005849f
  for (i = 0; i < 4; i++)
     9a6:	0005                	c.nop	1
     9a8:	0300                	addi	x8,x2,384
     9aa:	0900                	addi	x8,x2,144
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     9ac:	9fff                	0x9fff
     9ae:	0590                	addi	x12,x2,704
     9b0:	0000                	unimp
     9b2:	0594                	addi	x13,x2,704
     9b4:	0000                	unimp
     9b6:	0006                	c.slli	x0,0x1
     9b8:	ff08007b          	0xff08007b
     9bc:	9f1a                	add	x30,x30,x6
     9be:	0624                	addi	x9,x2,776
     9c0:	0000                	unimp
     9c2:	0628                	addi	x10,x2,776
     9c4:	0000                	unimp
     9c6:	0006                	c.slli	x0,0x1
     9c8:	ff08007b          	0xff08007b
     9cc:	9f1a                	add	x30,x30,x6
     9ce:	0650                	addi	x12,x2,772
     9d0:	0000                	unimp
     9d2:	066c                	addi	x11,x2,780
     9d4:	0000                	unimp
     9d6:	ff090003          	lb	x0,-16(x18)
     9da:	6c9f 0006 7000      	0x700000066c9f
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     9e0:	0006                	c.slli	x0,0x1
     9e2:	0600                	addi	x8,x2,768
     9e4:	7b00                	flw	f8,48(x14)
     9e6:	0800                	addi	x8,x2,16
     9e8:	1aff                	0x1aff
     9ea:	c09f 0006 dc00      	0xdc000006c09f
     9f0:	0006                	c.slli	x0,0x1
     9f2:	0300                	addi	x8,x2,384
     9f4:	0900                	addi	x8,x2,144
     9f6:	9fff                	0x9fff
     9f8:	081c                	addi	x15,x2,16
     9fa:	0000                	unimp
  while (len < size--) *str++ = ' ';
     9fc:	0834                	addi	x13,x2,24
     9fe:	0000                	unimp
     a00:	0006                	c.slli	x0,0x1
     a02:	ff08007b          	0xff08007b
     a06:	9f1a                	add	x30,x30,x6
     a08:	0840                	addi	x8,x2,20
     a0a:	0000                	unimp
     a0c:	0888                	addi	x10,x2,80
     a0e:	0000                	unimp
     a10:	0006                	c.slli	x0,0x1
     a12:	ff08007b          	0xff08007b
     a16:	9f1a                	add	x30,x30,x6
     a18:	09d4                	addi	x13,x2,212
     a1a:	0000                	unimp
     a1c:	09e0                	addi	x8,x2,220
     a1e:	0000                	unimp
     a20:	ff090003          	lb	x0,-16(x18)
     a24:	ac9f 000a c400      	0xc400000aac9f
     a2a:	000a                	c.slli	x0,0x2
     a2c:	0600                	addi	x8,x2,768
     a2e:	7b00                	flw	f8,48(x14)
  return str;
     a30:	0800                	addi	x8,x2,16
     a32:	1aff                	0x1aff
        flags |= SIGN;
     a34:	fc9f 000a 0400      	0x400000afc9f
    base = 10;
     a3a:	0600000b          	0x600000b
    if (qualifier == 'l')
     a3e:	7b00                	flw	f8,48(x14)
     a40:	0800                	addi	x8,x2,16
     a42:	1aff                	0x1aff
     a44:	009f 0000 0000      	0x9f
      num = va_arg(args, unsigned long);
     a4a:	0000                	unimp
      fmt++;
     a4c:	2800                	fld	f8,16(x8)
     a4e:	0005                	c.nop	1
     a50:	3000                	fld	f8,32(x8)
     a52:	0005                	c.nop	1
     a54:	0300                	addi	x8,x2,384
     a56:	7d00                	flw	f8,56(x10)
        base = 8;
     a58:	9f50                	0x9f50
     a5a:	0530                	addi	x12,x2,648
        break;
     a5c:	0000                	unimp
     a5e:	0540                	addi	x8,x2,644
        flags |= UPPERCASE;
     a60:	0000                	unimp
     a62:	0001                	nop
        base = 16;
     a64:	005d                	c.nop	23
     a66:	0000                	unimp
     a68:	0000                	unimp
     a6a:	0000                	unimp
        flags |= UPPERCASE;
     a6c:	a000                	fsd	f8,0(x8)
     a6e:	0005                	c.nop	1
        if (qualifier == 'l')
     a70:	d000                	sw	x8,32(x8)
     a72:	0005                	c.nop	1
     a74:	0100                	addi	x8,x2,128
     a76:	5c00                	lw	x8,56(x8)
	...
  if (type & UPPERCASE)  dig = upper_digits;
     a80:	05a0                	addi	x8,x2,712
     a82:	0000                	unimp
  char *dig = digits;
     a84:	05b4                	addi	x13,x2,712
     a86:	0000                	unimp
  if (type & UPPERCASE)  dig = upper_digits;
     a88:	0001                	nop
     a8a:	b45c                	fsd	f15,168(x8)
     a8c:	0005                	c.nop	1
     a8e:	d000                	sw	x8,32(x8)
     a90:	0005                	c.nop	1
     a92:	0100                	addi	x8,x2,128
    if (i != 0) tmp[len++] = ':';
     a94:	5b00                	lw	x8,48(x14)
	...
  if (type & UPPERCASE)  dig = upper_digits;
     a9e:	06dc                	addi	x15,x2,836
    if (i != 0) tmp[len++] = ':';
     aa0:	0000                	unimp
     aa2:	0798                	addi	x14,x2,960
     aa4:	0000                	unimp
     aa6:	0001                	nop
     aa8:	6c5f 0009 9c00      	0x9c0000096c5f
    tmp[len++] = dig[addr[i] >> 4];
     aae:	0009                	c.nop	2
     ab0:	0100                	addi	x8,x2,128
     ab2:	5f00                	lw	x8,56(x14)
	...
    tmp[len++] = dig[addr[i] & 0x0F];
     abc:	07c0                	addi	x8,x2,964
     abe:	0000                	unimp
    tmp[len++] = dig[addr[i] >> 4];
     ac0:	07c4                	addi	x9,x2,964
     ac2:	0000                	unimp
    tmp[len++] = dig[addr[i] & 0x0F];
     ac4:	0008                	0x8
     ac6:	007d                	c.nop	31
    tmp[len++] = dig[addr[i] >> 4];
     ac8:	0080                	addi	x8,x2,64
     aca:	3122                	fld	f2,40(x2)
    tmp[len++] = dig[addr[i] & 0x0F];
     acc:	9f1c                	0x9f1c
     ace:	07c4                	addi	x9,x2,964
    tmp[len++] = dig[addr[i] >> 4];
     ad0:	0000                	unimp
     ad2:	07c8                	addi	x10,x2,964
    tmp[len++] = dig[addr[i] & 0x0F];
     ad4:	0000                	unimp
     ad6:	7f7d0003          	lb	x0,2039(x26) # 1b7f7 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x19603>
  for (i = 0; i < 6; i++)
     ada:	f49f 0007 f800      	0xf8000007f49f
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     ae0:	09000007          	0x9000007
     ae4:	7b00                	flw	f8,48(x14)
     ae6:	8000                	0x8000
     ae8:	2200                	fld	f8,0(x12)
     aea:	007e                	c.slli	x0,0x1f
     aec:	9f1c                	0x9f1c
     aee:	07f8                	addi	x14,x2,972
     af0:	0000                	unimp
     af2:	0808                	addi	x10,x2,16
     af4:	0000                	unimp
     af6:	007b000b          	0x7b000b
     afa:	007e                	c.slli	x0,0x1f
     afc:	801c                	0x801c
     afe:	2200                	fld	f8,0(x12)
     b00:	089f0123          	sb	x9,130(x30)
     b04:	0008                	0x8
     b06:	1800                	addi	x8,x2,48
     b08:	0008                	0x8
     b0a:	0900                	addi	x8,x2,144
     b0c:	7b00                	flw	f8,48(x14)
     b0e:	8000                	0x8000
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b10:	2200                	fld	f8,0(x12)
     b12:	007e                	c.slli	x0,0x1f
     b14:	9f1c                	0x9f1c
     b16:	0a00                	addi	x8,x2,272
     b18:	0000                	unimp
     b1a:	0a0c                	addi	x11,x2,272
     b1c:	0000                	unimp
     b1e:	0009                	c.nop	2
     b20:	0080007b          	0x80007b
     b24:	7e22                	flw	f28,40(x2)
     b26:	1c00                	addi	x8,x2,560
     b28:	109f 000b 1800      	0x1800000b109f
  while (len < size--) *str++ = ' ';
     b2e:	0300000b          	0x300000b
     b32:	8000                	0x8000
     b34:	9f7f                	0x9f7f
     b36:	0b18                	addi	x14,x2,400
  for (i = 0; i < len; ++i) *str++ = tmp[i];
     b38:	0000                	unimp
     b3a:	0b1c                	addi	x15,x2,400
  while (len < size--) *str++ = ' ';
     b3c:	0000                	unimp
     b3e:	7f7d0003          	lb	x0,2039(x26)
     b42:	009f 0000 0000      	0x9f
     b48:	0000                	unimp
     b4a:	b000                	fsd	f8,32(x8)
     b4c:	b4000007          	0xb4000007
     b50:	03000007          	0x3000007
     b54:	7a00                	flw	f8,48(x12)
     b56:	9f01                	0x9f01
     b58:	07b4                	addi	x13,x2,968
     b5a:	0000                	unimp
     b5c:	07c8                	addi	x10,x2,964
     b5e:	0000                	unimp
     b60:	0001                	nop
     b62:	d05a                	sw	x22,32(x2)
     b64:	d8000007          	0xd8000007
     b68:	03000007          	0x3000007
     b6c:	7a00                	flw	f8,48(x12)
     b6e:	9f01                	0x9f01
     b70:	07d8                	addi	x14,x2,964
     b72:	0000                	unimp
  return str;
     b74:	07e4                	addi	x9,x2,972
     b76:	0000                	unimp
     b78:	0001                	nop
     b7a:	e45a                	fsw	f22,8(x2)
  for (str = buf; *fmt; fmt++)
     b7c:	f4000007          	0xf4000007
     b80:	01000007          	0x1000007
      else if (n >= 10) 
     b84:	5b00                	lw	x8,48(x14)
     b86:	07f4                	addi	x13,x2,972
     b88:	0000                	unimp
     b8a:	0818                	addi	x14,x2,16
        tmp[len++] = digits[n / 10];
     b8c:	0000                	unimp
     b8e:	0001                	nop
     b90:	005e                	c.slli	x0,0x17
     b92:	000a                	c.slli	x0,0x2
     b94:	0c00                	addi	x8,x2,528
     b96:	000a                	c.slli	x0,0x2
     b98:	0100                	addi	x8,x2,128
     b9a:	5e00                	lw	x8,56(x12)
	...
     ba4:	06dc                	addi	x15,x2,836
     ba6:	0000                	unimp
        n = n % 10;
     ba8:	0708                	addi	x10,x2,896
     baa:	0000                	unimp
        tmp[len++] = digits[n / 10];
     bac:	0002                	c.slli64	x0
     bae:	9f30                	0x9f30
        n = n % 10;
     bb0:	0714                	addi	x13,x2,896
     bb2:	0000                	unimp
  int i = 0;
     bb4:	0718                	addi	x14,x2,896
     bb6:	0000                	unimp
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
     bb8:	0008                	0x8
     bba:	007e                	c.slli	x0,0x1f
     bbc:	0081                	addi	x1,x1,0
     bbe:	231c                	fld	f15,0(x14)
     bc0:	9f05                	0x9f05
     bc2:	0718                	addi	x14,x2,896
     bc4:	0000                	unimp
     bc6:	071c                	addi	x15,x2,896
     bc8:	0000                	unimp
     bca:	0008                	0x8
     bcc:	007e                	c.slli	x0,0x1f
     bce:	0081                	addi	x1,x1,0
     bd0:	231c                	fld	f15,0(x14)
     bd2:	9f04                	0x9f04
     bd4:	078c                	addi	x11,x2,960
     bd6:	0000                	unimp
     bd8:	0790                	addi	x12,x2,960
     bda:	0000                	unimp
     bdc:	0008                	0x8
     bde:	007e                	c.slli	x0,0x1f
     be0:	0081                	addi	x1,x1,0
     be2:	231c                	fld	f15,0(x14)
     be4:	9f05                	0x9f05
     be6:	0790                	addi	x12,x2,960
     be8:	0000                	unimp
     bea:	0794                	addi	x13,x2,960
     bec:	0000                	unimp
     bee:	0008                	0x8
     bf0:	007e                	c.slli	x0,0x1f
     bf2:	0081                	addi	x1,x1,0
     bf4:	231c                	fld	f15,0(x14)
     bf6:	9f04                	0x9f04
        precision = va_arg(args, int);
     bf8:	07c8                	addi	x10,x2,964
     bfa:	0000                	unimp
     bfc:	07d0                	addi	x12,x2,964
     bfe:	0000                	unimp
     c00:	0002                	c.slli64	x0
     c02:	9f30                	0x9f30
     c04:	07d0                	addi	x12,x2,964
     c06:	0000                	unimp
     c08:	07dc                	addi	x15,x2,964
     c0a:	0000                	unimp
     c0c:	0009                	c.nop	2
     c0e:	007f                	0x7f
        ++fmt;
     c10:	0091                	addi	x1,x1,4
     c12:	231c                	fld	f15,0(x14)
      if (precision < 0) precision = 0;
     c14:	02e8                	addi	x10,x2,332
     c16:	dc9f 0007 e000      	0xe0000007dc9f
     c1c:	09000007          	0x9000007
     c20:	7f00                	flw	f8,56(x14)
     c22:	9100                	0x9100
  return str;
     c24:	1c00                	addi	x8,x2,560
     c26:	9f02e723          	0x9f02e723
	...
        if (*fmt)
     c32:	0700                	addi	x8,x2,896
     c34:	0000                	unimp
     c36:	070c                	addi	x11,x2,896
          *str++ = *fmt;
     c38:	0000                	unimp
     c3a:	0001                	nop
     c3c:	0007305b          	0x7305b
     c40:	6400                	flw	f8,8(x8)
     c42:	01000007          	0x1000007
  for (str = buf; *fmt; fmt++)
     c46:	5b00                	lw	x8,48(x14)
     c48:	0768                	addi	x10,x2,908
     c4a:	0000                	unimp
          flags |= ZEROPAD;
     c4c:	0778                	addi	x14,x2,908
     c4e:	0000                	unimp
          field_width = 2 * sizeof(void *);
     c50:	0001                	nop
     c52:	00077867          	0x77867
     c56:	7c00                	flw	f8,56(x8)
        if (!s) s = "<NULL>";
     c58:	01000007          	0x1000007
     c5c:	5b00                	lw	x8,48(x14)
     c5e:	096c                	addi	x11,x2,156
     c60:	0000                	unimp
     c62:	0994                	addi	x13,x2,208
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
     c64:	0000                	unimp
     c66:	0001                	nop
     c68:	0009985b          	0x9985b
     c6c:	9c00                	0x9c00
     c6e:	0009                	c.nop	2
     c70:	0100                	addi	x8,x2,128
     c72:	5b00                	lw	x8,48(x14)
	...
     c7c:	06dc                	addi	x15,x2,836
     c7e:	0000                	unimp
     c80:	0700                	addi	x8,x2,896
     c82:	0000                	unimp
  int n=0;
     c84:	0002                	c.slli64	x0
     c86:	9f30                	0x9f30
     c88:	0700                	addi	x8,x2,896
     c8a:	0000                	unimp
  for (str = buf; *fmt; fmt++)
     c8c:	0708                	addi	x10,x2,896
     c8e:	0000                	unimp
     c90:	0001                	nop
     c92:	0860                	addi	x8,x2,28
     c94:	10000007          	0x10000007
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     c98:	03000007          	0x3000007
     c9c:	8000                	0x8000
     c9e:	9f01                	0x9f01
     ca0:	0714                	addi	x13,x2,896
     ca2:	0000                	unimp
     ca4:	0730                	addi	x12,x2,904
     ca6:	0000                	unimp
     ca8:	0001                	nop
     caa:	305c                	fld	f15,160(x8)
     cac:	3c000007          	0x3c000007
     cb0:	01000007          	0x1000007
     cb4:	6000                	flw	f8,0(x8)
     cb6:	073c                	addi	x15,x2,904
     cb8:	0000                	unimp
     cba:	075c                	addi	x15,x2,900
     cbc:	0000                	unimp
     cbe:	01800003          	lb	x0,24(x0) # 18 <bsg_group_size+0x17>
     cc2:	5c9f 0007 6800      	0x680000075c9f
      fmt++;
     cc8:	03000007          	0x3000007
        base = 16;
     ccc:	7c00                	flw	f8,56(x8)
     cce:	9f7e                	add	x30,x30,x31
     cd0:	0768                	addi	x10,x2,908
     cd2:	0000                	unimp
    switch (*fmt)
     cd4:	0778                	addi	x14,x2,908
     cd6:	0000                	unimp
     cd8:	0001                	nop
     cda:	7866                	flw	f16,120(x2)
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     cdc:	8c000007          	0x8c000007
     ce0:	03000007          	0x3000007
     ce4:	8600                	0x8600
     ce6:	9f01                	0x9f01
  return sc - s;
     ce8:	078c                	addi	x11,x2,960
     cea:	0000                	unimp
     cec:	0818                	addi	x14,x2,16
     cee:	0000                	unimp
        *str++ = (unsigned char) va_arg(args, int);
     cf0:	0001                	nop
     cf2:	6c5c                	flw	f15,28(x8)
     cf4:	0009                	c.nop	2
     cf6:	7400                	flw	f8,40(x8)
     cf8:	0009                	c.nop	2
     cfa:	0100                	addi	x8,x2,128
     cfc:	6000                	flw	f8,0(x8)
     cfe:	0974                	addi	x13,x2,156
        while (--field_width > 0) *str++ = ' ';
     d00:	0000                	unimp
     d02:	098c                	addi	x11,x2,208
     d04:	0000                	unimp
     d06:	01800003          	lb	x0,24(x0) # 18 <bsg_group_size+0x17>
        while (len < field_width--) *str++ = ' ';
     d0a:	8c9f 0009 9c00      	0x9c0000098c9f
  for (str = buf; *fmt; fmt++)
     d10:	0009                	c.nop	2
     d12:	0300                	addi	x8,x2,384
      fmt++;
     d14:	7c00                	flw	f8,56(x8)
     d16:	9f7f                	0x9f7f
     d18:	0a00                	addi	x8,x2,272
     d1a:	0000                	unimp
     d1c:	0a0c                	addi	x11,x2,272
     d1e:	0000                	unimp
     d20:	0001                	nop
     d22:	0c5c                	addi	x15,x2,532
     d24:	1c00000b          	0x1c00000b
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d28:	0100000b          	0x100000b
     d2c:	5c00                	lw	x8,56(x8)
	...
     d36:	0868                	addi	x10,x2,28
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
     d38:	0000                	unimp
     d3a:	08c8                	addi	x10,x2,84
     d3c:	0000                	unimp
     d3e:	0001                	nop
     d40:	005f 0000 0000      	0x5f
        for (i = 0; i < len; ++i) *str++ = *s++;
     d46:	0000                	unimp
     d48:	f000                	fsw	f8,32(x8)
     d4a:	0008                	0x8
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
     d4c:	f400                	fsw	f8,40(x8)
     d4e:	0008                	0x8
     d50:	0700                	addi	x8,x2,896
     d52:	7b00                	flw	f8,48(x14)
     d54:	2000                	fld	f8,0(x8)
     d56:	007c                	addi	x15,x2,12
     d58:	9f22                	add	x30,x30,x8
     d5a:	08f4                	addi	x13,x2,92
     d5c:	0000                	unimp
     d5e:	08f8                	addi	x14,x2,92
     d60:	0000                	unimp
     d62:	7f7d0003          	lb	x0,2039(x26)
     d66:	309f 0009 3400      	0x34000009309f
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d6c:	0009                	c.nop	2
     d6e:	0900                	addi	x8,x2,144
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d70:	7a00                	flw	f8,48(x12)
     d72:	7c00                	flw	f8,56(x8)
     d74:	2200                	fld	f8,0(x12)
     d76:	007e                	c.slli	x0,0x1f
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d78:	9f1c                	0x9f1c
     d7a:	0934                	addi	x13,x2,152
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d7c:	0000                	unimp
     d7e:	0944                	addi	x9,x2,148
        int center_x_cord = (p_row_b->_x_cord_start + p_row_b->_x_cord_end)/2;
     d80:	0000                	unimp
     d82:	007a000b          	0x7a000b
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d86:	007e                	c.slli	x0,0x1f
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     d88:	7c1c                	flw	f15,56(x8)
     d8a:	2200                	fld	f8,0(x12)
     d8c:	449f0123          	sb	x9,1090(x30)
     d90:	0009                	c.nop	2
     d92:	4c00                	lw	x8,24(x8)
     d94:	0009                	c.nop	2
     d96:	0900                	addi	x8,x2,144
     d98:	7a00                	flw	f8,48(x12)
     d9a:	7c00                	flw	f8,56(x8)
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     d9c:	2200                	fld	f8,0(x12)
     d9e:	007e                	c.slli	x0,0x1f
        bsg_row_barrier * p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( center_x_cord,    \
     da0:	9f1c                	0x9f1c
     da2:	0b20                	addi	x8,x2,408
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     da4:	0000                	unimp
     da6:	0b28                	addi	x10,x2,408
     da8:	0000                	unimp
     daa:	7f7c0003          	lb	x0,2039(x24) # 187f7 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x16603>
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     dae:	289f 000b 2c00      	0x2c00000b289f
        p_remote_barrier->_done_list[ bsg_x - p_row_b-> _x_cord_start] = 1; 
     db4:	0300000b          	0x300000b
        if( bsg_x == center_x_cord) 
     db8:	7d00                	flw	f8,56(x10)
     dba:	9f7f                	0x9f7f
	...
        if( tmp == cond ) return tmp;  //the data is ready
     dc4:	08e4                	addi	x9,x2,92
     dc6:	0000                	unimp
     dc8:	08e8                	addi	x10,x2,92
     dca:	0000                	unimp
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dcc:	017a0003          	lb	x0,23(x20)
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     dd0:	e89f 0008 f800      	0xf8000008e89f
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     dd6:	0008                	0x8
        if( tmp == cond ) return tmp;  //the data is ready
     dd8:	0100                	addi	x8,x2,128
     dda:	5a00                	lw	x8,48(x12)
        p_row_b->_local_alert = 0;
     ddc:	0914                	addi	x13,x2,144
     dde:	0000                	unimp
}
     de0:	091c                	addi	x15,x2,144
     de2:	0000                	unimp
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     de4:	000c                	0xc
     de6:	007a                	c.slli	x0,0x1e
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     de8:	0091                	addi	x1,x1,4
     dea:	761c                	flw	f15,40(x12)
     dec:	2200                	fld	f8,0(x12)
     dee:	9f02f923          	0x9f02f923
        int center_y_cord = (p_col_b->_y_cord_start + p_col_b->_y_cord_end)/2;
     df2:	091c                	addi	x15,x2,144
        bsg_col_barrier * p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( center_x_cord,    \
     df4:	0000                	unimp
     df6:	0930                	addi	x12,x2,152
     df8:	0000                	unimp
     dfa:	0001                	nop
     dfc:	305a                	fld	f0,432(x2)
     dfe:	0009                	c.nop	2
     e00:	4c00                	lw	x8,24(x8)
     e02:	0009                	c.nop	2
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e04:	0100                	addi	x8,x2,128
     e06:	5e00                	lw	x8,56(x12)
	...
                        if ( p[ i ] == 0) break;
     e10:	0868                	addi	x10,x2,28
     e12:	0000                	unimp
     e14:	087c                	addi	x15,x2,28
     e16:	0000                	unimp
                for( i= 0; i <= range; i++) {
     e18:	0006                	c.slli	x0,0x1
     e1a:	00000003          	lb	x0,0(x0) # 0 <_start>
                        if ( p[ i ] == 0) break;
     e1e:	9f81                	0x9f81
                for( i= 0; i <= range; i++) {
     e20:	087c                	addi	x15,x2,28
     e22:	0000                	unimp
        p_remote_barrier->_done_list[ bsg_y - p_col_b-> _y_cord_start] = 1; 
     e24:	095c                	addi	x15,x2,148
     e26:	0000                	unimp
     e28:	0001                	nop
     e2a:	1c61                	addi	x24,x24,-8
     e2c:	2c00000b          	0x2c00000b
     e30:	0100000b          	0x100000b
     e34:	6100                	flw	f8,0(x10)
	...
        if( bsg_x == center_x_cord && bsg_y == center_y_cord) 
     e3e:	087c                	addi	x15,x2,28
     e40:	0000                	unimp
     e42:	0890                	addi	x12,x2,80
     e44:	0000                	unimp
     e46:	0002                	c.slli64	x0
     e48:	9f30                	0x9f30
     e4a:	08f8                	addi	x14,x2,92
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e4c:	0000                	unimp
     e4e:	0900                	addi	x8,x2,144
     e50:	0000                	unimp
     e52:	0002                	c.slli64	x0
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e54:	9f30                	0x9f30
     e56:	0900                	addi	x8,x2,144
        if( tmp == cond ) return tmp;  //the data is ready
     e58:	0000                	unimp
     e5a:	0908                	addi	x10,x2,144
        int x_range = p_row_b-> _x_cord_end - p_row_b->_x_cord_start;
     e5c:	0000                	unimp
     e5e:	0009                	c.nop	2
        bsg_wait_local_int( (int *) &(p_col_b -> _local_alert),  1);
     e60:	0076                	c.slli	x0,0x1d
     e62:	0091                	addi	x1,x1,4
inline int bsg_lr_aq(int *p) { int tmp; __asm__ __volatile__("lr.w.aq %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e64:	231c                	fld	f15,0(x14)
     e66:	02e8                	addi	x10,x2,332
            if( tmp == cond ) return tmp; //return if data is expected, otherwise retry
     e68:	089f 0009 1000      	0x10000009089f
inline int bsg_lr(int *p)    { int tmp; __asm__ __volatile__("lr.w    %0,%1\n" : "=r" (tmp) : "A" (*p)); return tmp; }
     e6e:	0009                	c.nop	2
        if( tmp == cond ) return tmp;  //the data is ready
     e70:	0900                	addi	x8,x2,144
     e72:	7600                	flw	f8,40(x12)
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e74:	9100                	0x9100
     e76:	1c00                	addi	x8,x2,560
               p_remote_barrier = (bsg_row_barrier *) bsg_remote_ptr( i,        \
     e78:	9f02e723          	0x9f02e723
	...
     e84:	087c                	addi	x15,x2,28
     e86:	0000                	unimp
     e88:	0890                	addi	x12,x2,80
     e8a:	0000                	unimp
     e8c:	0002                	c.slli64	x0
     e8e:	9f30                	0x9f30
     e90:	0890                	addi	x12,x2,80
     e92:	0000                	unimp
     e94:	0898                	addi	x14,x2,80
     e96:	0000                	unimp
               p_remote_barrier->_local_alert = 1;
     e98:	0009                	c.nop	2
     e9a:	0091007b          	0x91007b
        for( i= p_row_b-> _x_cord_start; i <= p_row_b-> _x_cord_end; i++) {
     e9e:	231c                	fld	f15,0(x14)
     ea0:	02e8                	addi	x10,x2,332
     ea2:	989f 0008 9c00      	0x9c000008989f
        for( i= 0; i <= x_range; i++) {
     ea8:	0008                	0x8
     eaa:	0900                	addi	x8,x2,144
        p_col_b -> _local_alert = 0;
     eac:	7b00                	flw	f8,48(x14)
     eae:	9100                	0x9100
}
     eb0:	1c00                	addi	x8,x2,560
     eb2:	9f02e923          	0x9f02e923
              p_row_b->_done_list[ i ] = 0;
     eb6:	089c                	addi	x15,x2,80
        p_col_b -> _local_alert = 0;
     eb8:	0000                	unimp
     eba:	08bc                	addi	x15,x2,88
     ebc:	0000                	unimp
     ebe:	0009                	c.nop	2
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ec0:	0091007b          	0x91007b
     ec4:	231c                	fld	f15,0(x14)
     ec6:	02e6                	slli	x5,x5,0x19
                for( i= 0; i <= range; i++) {
     ec8:	009f 0000 0000      	0x9f
     ece:	0000                	unimp
        int y_range = p_col_b-> _y_cord_end - p_col_b->_y_cord_start;
     ed0:	b800                	fsd	f8,48(x8)
     ed2:	0009                	c.nop	2
                for( i= 0; i <= range; i++) {
     ed4:	c000                	sw	x8,0(x8)
     ed6:	0009                	c.nop	2
     ed8:	0300                	addi	x8,x2,384
     eda:	7e00                	flw	f8,56(x12)
                        if ( p[ i ] == 0) break;
     edc:	9f50                	0x9f50
     ede:	09c0                	addi	x8,x2,212
     ee0:	0000                	unimp
     ee2:	09d4                	addi	x13,x2,212
                for( i= 0; i <= range; i++) {
     ee4:	0000                	unimp
     ee6:	0001                	nop
                        if ( p[ i ] == 0) break;
     ee8:	005e                	c.slli	x0,0x17
     eea:	0000                	unimp
                for( i= 0; i <= range; i++) {
     eec:	0000                	unimp
     eee:	0000                	unimp
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     ef0:	5400                	lw	x8,40(x8)
     ef2:	64000003          	lb	x0,1600(x0) # 640 <bsg_printf+0x174>
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     ef6:	04000003          	lb	x0,64(x0) # 40 <bsg_group_size+0x3f>
     efa:	4000                	lw	x8,0(x8)
               p_remote_barrier->_local_alert = 1;
     efc:	244a                	fld	f8,144(x2)
     efe:	009f 0000 0000      	0x9f
               p_remote_barrier = (bsg_col_barrier *) bsg_remote_ptr( bsg_x,    \
     f04:	0000                	unimp
     f06:	5400                	lw	x8,40(x8)
     f08:	5c000003          	lb	x0,1472(x0) # 5c0 <bsg_printf+0xf4>
     f0c:	02000003          	lb	x0,32(x0) # 20 <bsg_group_size+0x1f>
               p_remote_barrier->_local_alert = 1;
     f10:	3100                	fld	f8,32(x10)
     f12:	609f 0003 6800      	0x68000003609f
        for( i= p_col_b-> _y_cord_start; i <= p_col_b-> _y_cord_end; i++) {
     f18:	01000003          	lb	x0,16(x0) # 10 <bsg_group_size+0xf>
     f1c:	5e00                	lw	x8,56(x12)
	...
              p_col_b->_done_list[ i ] = 0;
     f26:	035c                	addi	x15,x2,388
        if( bsg_x == center_x_cord)
     f28:	0000                	unimp
     f2a:	0360                	addi	x8,x2,396
     f2c:	0000                	unimp
     f2e:	0004                	0x4
     f30:	4a40                	lw	x8,20(x12)
     f32:	9f24                	0x9f24
	...
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f3c:	035c                	addi	x15,x2,388
     f3e:	0000                	unimp
     f40:	0360                	addi	x8,x2,396
     f42:	0000                	unimp
     f44:	0002                	c.slli64	x0
     f46:	9f31                	0x9f31
	...
     f50:	035c                	addi	x15,x2,388
     f52:	0000                	unimp
     f54:	03cc                	addi	x11,x2,452
     f56:	0000                	unimp
     f58:	0002                	c.slli64	x0
     f5a:	9f31                	0x9f31
     f5c:	0a6c                	addi	x11,x2,284
     f5e:	0000                	unimp
     f60:	0a74                	addi	x13,x2,284
     f62:	0000                	unimp
     f64:	0002                	c.slli64	x0
     f66:	9f31                	0x9f31
	...
     f70:	037c                	addi	x15,x2,396
     f72:	0000                	unimp
     f74:	0380                	addi	x8,x2,448
     f76:	0000                	unimp
     f78:	0001                	nop
     f7a:	005e                	c.slli	x0,0x17
     f7c:	0000                	unimp
     f7e:	0000                	unimp
                int A_local[A_HEIGHT * A_WIDTH];
     f80:	0000                	unimp
     f82:	7c00                	flw	f8,56(x8)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     f84:	90000003          	lb	x0,-1792(x0) # fffff900 <_end+0x7efff8a8>
     f88:	06000003          	lb	x0,96(x0) # 60 <bsg_group_size+0x5f>
     f8c:	0c00                	addi	x8,x2,528
     f8e:	eadc                	fsw	f15,20(x13)
     f90:	4000                	lw	x8,0(x8)
     f92:	009f 0000 0000      	0x9f
     f98:	0000                	unimp
     f9a:	9000                	0x9000
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
     f9c:	98000003          	lb	x0,-1664(x0) # fffff980 <_end+0x7efff928>
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
     fa0:	04000003          	lb	x0,64(x0) # 40 <bsg_group_size+0x3f>
     fa4:	4000                	lw	x8,0(x8)
     fa6:	244a                	fld	f8,144(x2)
                int B_local[A_WIDTH * B_WIDTH];
     fa8:	009f 0000 0000      	0x9f
                int A_local[A_HEIGHT * A_WIDTH];
     fae:	0000                	unimp
     fb0:	0000                	unimp
     fb2:	0000                	unimp
     fb4:	b800                	fsd	f8,48(x8)
     fb6:	0000                	unimp
     fb8:	0100                	addi	x8,x2,128
     fba:	5a00                	lw	x8,48(x12)
     fbc:	00b8                	addi	x14,x2,72
     fbe:	0000                	unimp
     fc0:	00cc                	addi	x11,x2,68
     fc2:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
     fc4:	0001                	nop
     fc6:	cc5a                	sw	x22,24(x2)
     fc8:	0000                	unimp
     fca:	d400                	sw	x8,40(x8)
     fcc:	0000                	unimp
     fce:	0300                	addi	x8,x2,384
                int C_local[A_HEIGHT * B_WIDTH];
     fd0:	7a00                	flw	f8,48(x12)
     fd2:	9f01                	0x9f01
                int B_local[A_WIDTH * B_WIDTH];
     fd4:	00d4                	addi	x13,x2,68
     fd6:	0000                	unimp
     fd8:	00f8                	addi	x14,x2,76
     fda:	0000                	unimp
     fdc:	0001                	nop
     fde:	f85a                	fsw	f22,48(x2)
     fe0:	0000                	unimp
     fe2:	3000                	fld	f8,32(x8)
     fe4:	0001                	nop
     fe6:	0100                	addi	x8,x2,128
     fe8:	5c00                	lw	x8,56(x8)
     fea:	0130                	addi	x12,x2,136
     fec:	0000                	unimp
     fee:	014c                	addi	x11,x2,132
                int C_local[A_HEIGHT * B_WIDTH];
     ff0:	0000                	unimp
     ff2:	0001                	nop
     ff4:	4c5a                	lw	x24,148(x2)
     ff6:	0001                	nop
     ff8:	5c00                	lw	x8,56(x8)
     ffa:	0001                	nop
     ffc:	0100                	addi	x8,x2,128
     ffe:	5e00                	lw	x8,56(x12)
    1000:	015c                	addi	x15,x2,132
    1002:	0000                	unimp
    1004:	0184                	addi	x9,x2,192
    1006:	0000                	unimp
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1008:	0001                	nop
    100a:	845d                	srai	x8,x8,0x17
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    100c:	0001                	nop
    100e:	9400                	0x9400
    1010:	0001                	nop
    1012:	0100                	addi	x8,x2,128
    1014:	5a00                	lw	x8,48(x12)
    1016:	0194                	addi	x13,x2,192
    1018:	0000                	unimp
    101a:	01c0                	addi	x8,x2,196
                        bsg_cuda_print_stat_start(temp);
    101c:	0000                	unimp
    101e:	0001                	nop
    1020:	d05e                	sw	x23,32(x2)
    1022:	0001                	nop
                int C_local[A_HEIGHT * B_WIDTH];
    1024:	5400                	lw	x8,40(x8)
    1026:	0002                	c.slli64	x0
                int rc, temp = IGNORE_TAG;
    1028:	0100                	addi	x8,x2,128
    102a:	5a00                	lw	x8,48(x12)
    102c:	0254                	addi	x13,x2,260
    102e:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1030:	025c                	addi	x15,x2,260
    1032:	0000                	unimp
    1034:	017a0003          	lb	x0,23(x20)
    1038:	5c9f 0002 6800      	0x680000025c9f
    103e:	0002                	c.slli64	x0
    1040:	0300                	addi	x8,x2,384
    1042:	7a00                	flw	f8,48(x12)
                        temp = tag;
    1044:	9f02                	jalr	x30
    1046:	0268                	addi	x10,x2,268
                        bsg_cuda_print_stat_start(temp);
    1048:	0000                	unimp
    104a:	0274                	addi	x13,x2,268
    104c:	0000                	unimp
    104e:	0001                	nop
    1050:	745a                	flw	f8,180(x2)
    1052:	0002                	c.slli64	x0
    1054:	8000                	0x8000
    1056:	0002                	c.slli64	x0
    1058:	0300                	addi	x8,x2,384
    105a:	7a00                	flw	f8,48(x12)
    105c:	9f01                	0x9f01
    105e:	0280                	addi	x8,x2,320
    1060:	0000                	unimp
    1062:	02a8                	addi	x10,x2,328
    1064:	0000                	unimp
    1066:	0001                	nop
    1068:	005a                	c.slli	x0,0x16
	...
    1072:	0000                	unimp
    1074:	a400                	fsd	f8,8(x8)
    1076:	0000                	unimp
    1078:	0100                	addi	x8,x2,128
    107a:	5b00                	lw	x8,48(x14)
    107c:	01d0                	addi	x12,x2,196
    107e:	0000                	unimp
    1080:	023c                	addi	x15,x2,264
    1082:	0000                	unimp
    1084:	0001                	nop
    1086:	00023c5b          	0x23c5b
    108a:	4000                	lw	x8,0(x8)
    108c:	0002                	c.slli64	x0
    108e:	0100                	addi	x8,x2,128
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1090:	5600                	lw	x8,40(x12)
    1092:	0240                	addi	x8,x2,260
    1094:	0000                	unimp
    1096:	0254                	addi	x13,x2,260
    1098:	0000                	unimp
    109a:	0001                	nop
    109c:	00026c5b          	0x26c5b
    10a0:	7400                	flw	f8,40(x8)
    10a2:	0002                	c.slli64	x0
    10a4:	0100                	addi	x8,x2,128
    10a6:	5b00                	lw	x8,48(x14)
	...
                        bsg_cuda_print_stat_end(temp);
    10b4:	00f0                	addi	x12,x2,76
    10b6:	0000                	unimp
    10b8:	0001                	nop
    10ba:	f05c                	fsw	f15,36(x8)
    10bc:	0000                	unimp
    10be:	d000                	sw	x8,32(x8)
    10c0:	0001                	nop
    10c2:	0400                	addi	x8,x2,512
    10c4:	f300                	fsw	f8,32(x14)
    10c6:	5c01                	li	x24,-32
    10c8:	d09f 0001 8400      	0x84000001d09f
    10ce:	0002                	c.slli64	x0
    10d0:	0100                	addi	x8,x2,128
    10d2:	5c00                	lw	x8,56(x8)
    10d4:	0284                	addi	x9,x2,320
    10d6:	0000                	unimp
    10d8:	028c                	addi	x11,x2,320
    10da:	0000                	unimp
    10dc:	0004                	0x4
    10de:	9f5c01f3          	0x9f5c01f3
    10e2:	028c                	addi	x11,x2,320
    10e4:	0000                	unimp
    10e6:	029c                	addi	x15,x2,320
    10e8:	0000                	unimp
    10ea:	0001                	nop
    10ec:	9c5c                	0x9c5c
    10ee:	0002                	c.slli64	x0
    10f0:	a800                	fsd	f8,16(x8)
    10f2:	0002                	c.slli64	x0
                for(int i = 0; i <= iter; ++i){
    10f4:	0400                	addi	x8,x2,512
    10f6:	f300                	fsw	f8,32(x14)
                        bsg_cuda_print_stat_end(temp);
    10f8:	5c01                	li	x24,-32
    10fa:	009f 0000 0000      	0x9f
                for(int i = 0; i <= iter; ++i){
    1100:	0000                	unimp
    1102:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1104:	0000                	unimp
    1106:	5800                	lw	x8,48(x8)
                for(int i = 0; i <= iter; ++i){
    1108:	0000                	unimp
    110a:	0100                	addi	x8,x2,128
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    110c:	5d00                	lw	x8,56(x10)
    110e:	0058                	addi	x14,x2,4
    1110:	0000                	unimp
    1112:	0090                	addi	x12,x2,64
    1114:	0000                	unimp
    1116:	0001                	nop
    1118:	a05d                	j	11be <kernel_matrix_multiply_int16+0x5e>
    111a:	0000                	unimp
        }
    111c:	a800                	fsd	f8,16(x8)
    111e:	0000                	unimp
    1120:	0100                	addi	x8,x2,128
    1122:	5600                	lw	x8,40(x12)
    1124:	00a8                	addi	x10,x2,72
    1126:	0000                	unimp
    1128:	00c4                	addi	x9,x2,68
    112a:	0000                	unimp
    112c:	7f760003          	lb	x0,2039(x12) # 117f7 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xf603>
    1130:	c49f 0000 c800      	0xc8000000c49f
    1136:	0000                	unimp
    1138:	0300                	addi	x8,x2,384
    113a:	0900                	addi	x8,x2,144
    113c:	9ffe                	add	x31,x31,x31
    113e:	00f8                	addi	x14,x2,76
    1140:	0000                	unimp
    1142:	00fc                	addi	x15,x2,76
    1144:	0000                	unimp
    1146:	0009                	c.nop	2
    1148:	007a                	c.slli	x0,0x1e
    114a:	7c22007b          	0x7c22007b
    114e:	1c00                	addi	x8,x2,560
    1150:	fc9f 0000 0c00      	0xc000000fc9f
    1156:	0001                	nop
    1158:	0b00                	addi	x8,x2,400
    115a:	7a00                	flw	f8,48(x12)
    115c:	7c00                	flw	f8,56(x8)
    115e:	1c00                	addi	x8,x2,560
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1160:	2322007b          	0x2322007b
    1164:	9f01                	0x9f01
    1166:	010c                	addi	x11,x2,128
    1168:	0000                	unimp
    116a:	0120                	addi	x8,x2,136
    116c:	0000                	unimp
    116e:	0009                	c.nop	2
    1170:	007a                	c.slli	x0,0x1e
    1172:	7c22007b          	0x7c22007b
    1176:	1c00                	addi	x8,x2,560
    1178:	209f 0001 2c00      	0x2c000001209f
    117e:	0001                	nop
    1180:	0b00                	addi	x8,x2,400
    1182:	7a00                	flw	f8,48(x12)
    1184:	7c00                	flw	f8,56(x8)
    1186:	1c00                	addi	x8,x2,560
    1188:	2322007b          	0x2322007b
    118c:	9f01                	0x9f01
    118e:	0194                	addi	x13,x2,192
    1190:	0000                	unimp
    1192:	0198                	addi	x14,x2,192
    1194:	0000                	unimp
    1196:	0009                	c.nop	2
    1198:	007a                	c.slli	x0,0x1e
    119a:	7e22007b          	0x7e22007b
    119e:	1c00                	addi	x8,x2,560
    11a0:	989f 0001 a800      	0xa8000001989f
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11a6:	0001                	nop
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11a8:	0b00                	addi	x8,x2,400
    11aa:	7a00                	flw	f8,48(x12)
    11ac:	7e00                	flw	f8,56(x12)
    11ae:	1c00                	addi	x8,x2,560
    11b0:	2322007b          	0x2322007b
    11b4:	9f01                	0x9f01
    11b6:	01a8                	addi	x10,x2,200
    11b8:	0000                	unimp
    11ba:	01b8                	addi	x14,x2,200
    11bc:	0000                	unimp
    11be:	0009                	c.nop	2
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    11c0:	007a                	c.slli	x0,0x1e
    11c2:	7e22007b          	0x7e22007b
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    11c6:	1c00                	addi	x8,x2,560
    11c8:	d09f 0001 1400      	0x14000001d09f
                int16_t B_local[A_WIDTH * B_WIDTH];
    11ce:	0002                	c.slli64	x0
                int16_t A_local[A_HEIGHT * A_WIDTH];
    11d0:	0100                	addi	x8,x2,128
    11d2:	5d00                	lw	x8,56(x10)
    11d4:	0248                	addi	x10,x2,260
    11d6:	0000                	unimp
    11d8:	0254                	addi	x13,x2,260
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	6c5d                	lui	x24,0x17
    11e0:	0002                	c.slli64	x0
    11e2:	7400                	flw	f8,40(x8)
    11e4:	0002                	c.slli64	x0
    11e6:	0100                	addi	x8,x2,128
                for(int i = 0; i <= iter; ++i){
    11e8:	5d00                	lw	x8,56(x10)
    11ea:	028c                	addi	x11,x2,320
    11ec:	0000                	unimp
    11ee:	0290                	addi	x12,x2,320
    11f0:	0000                	unimp
    11f2:	7f760003          	lb	x0,2039(x12)
                int16_t C_local[A_HEIGHT * B_WIDTH];
    11f6:	909f 0002 9800      	0x98000002909f
                int16_t B_local[A_WIDTH * B_WIDTH];
    11fc:	0002                	c.slli64	x0
    11fe:	0300                	addi	x8,x2,384
    1200:	7b00                	flw	f8,48(x14)
    1202:	9f7f                	0x9f7f
    1204:	0298                	addi	x14,x2,320
    1206:	0000                	unimp
    1208:	029c                	addi	x15,x2,320
    120a:	0000                	unimp
    120c:	7f760003          	lb	x0,2039(x12)
    1210:	9c9f 0002 a400      	0xa40000029c9f
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1216:	0002                	c.slli64	x0
    1218:	0300                	addi	x8,x2,384
    121a:	7b00                	flw	f8,48(x14)
    121c:	9f7f                	0x9f7f
    121e:	02a4                	addi	x9,x2,328
    1220:	0000                	unimp
    1222:	02a8                	addi	x10,x2,328
    1224:	0000                	unimp
    1226:	7f760003          	lb	x0,2039(x12)
    122a:	009f 0000 0000      	0x9f
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1230:	0000                	unimp
    1232:	0000                	unimp
    1234:	0000                	unimp
    1236:	9c00                	0x9c00
    1238:	0000                	unimp
    123a:	0100                	addi	x8,x2,128
    123c:	5e00                	lw	x8,56(x12)
    123e:	009c                	addi	x15,x2,64
                        bsg_cuda_print_stat_start(temp);
    1240:	0000                	unimp
    1242:	0130                	addi	x12,x2,136
    1244:	0000                	unimp
    1246:	0001                	nop
                int16_t C_local[A_HEIGHT * B_WIDTH];
    1248:	306c                	fld	f11,224(x8)
    124a:	0001                	nop
                int rc, temp = IGNORE_TAG;
    124c:	4c00                	lw	x8,24(x8)
    124e:	0001                	nop
    1250:	0300                	addi	x8,x2,384
    1252:	8c00                	0x8c00
                        bsg_cuda_print_stat_start(temp);
    1254:	9f7f                	0x9f7f
    1256:	01d0                	addi	x12,x2,196
    1258:	0000                	unimp
    125a:	0254                	addi	x13,x2,260
    125c:	0000                	unimp
    125e:	0001                	nop
    1260:	545e                	lw	x8,244(x2)
    1262:	0002                	c.slli64	x0
    1264:	6c00                	flw	f8,24(x8)
    1266:	0002                	c.slli64	x0
                        temp = tag;
    1268:	0100                	addi	x8,x2,128
    126a:	6c00                	flw	f8,24(x8)
                        bsg_cuda_print_stat_start(temp);
    126c:	026c                	addi	x11,x2,268
    126e:	0000                	unimp
    1270:	0274                	addi	x13,x2,268
    1272:	0000                	unimp
    1274:	0001                	nop
    1276:	745e                	flw	f8,244(x2)
    1278:	0002                	c.slli64	x0
    127a:	8400                	0x8400
    127c:	0002                	c.slli64	x0
    127e:	0100                	addi	x8,x2,128
    1280:	6c00                	flw	f8,24(x8)
    1282:	0284                	addi	x9,x2,320
    1284:	0000                	unimp
    1286:	028c                	addi	x11,x2,320
    1288:	0000                	unimp
    128a:	7f8c0003          	lb	x0,2040(x24) # 177f8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x15604>
    128e:	8c9f 0002 a800      	0xa80000028c9f
    1294:	0002                	c.slli64	x0
    1296:	0100                	addi	x8,x2,128
    1298:	6c00                	flw	f8,24(x8)
	...
    12a6:	0028                	addi	x10,x2,8
    12a8:	0000                	unimp
    12aa:	0001                	nop
    12ac:	285f 0000 4c00      	0x4c000000285f
    12b2:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    12b4:	0100                	addi	x8,x2,128
    12b6:	5f00                	lw	x8,56(x14)
    12b8:	01d0                	addi	x12,x2,196
    12ba:	0000                	unimp
    12bc:	0214                	addi	x13,x2,256
    12be:	0000                	unimp
    12c0:	0001                	nop
    12c2:	485f 0002 5400      	0x54000002485f
    12c8:	0002                	c.slli64	x0
    12ca:	0100                	addi	x8,x2,128
                for(int i = 0; i <= iter; ++i){
    12cc:	5f00                	lw	x8,56(x14)
	...
                        bsg_cuda_print_stat_end(temp);
    12d6:	0034                	addi	x13,x2,8
    12d8:	0000                	unimp
    12da:	01d0                	addi	x12,x2,196
    12dc:	0000                	unimp
    12de:	0001                	nop
    12e0:	0001f06f          	j	202e0 <_bsg_elf_vcache_size+0x2e0>
    12e4:	a800                	fsd	f8,16(x8)
    12e6:	0002                	c.slli64	x0
    12e8:	0100                	addi	x8,x2,128
    12ea:	6f00                	flw	f8,24(x14)
	...
    12f4:	0034                	addi	x13,x2,8
    12f6:	0000                	unimp
    12f8:	0054                	addi	x13,x2,4
    12fa:	0000                	unimp
    12fc:	0002                	c.slli64	x0
    12fe:	9f30                	0x9f30
    1300:	0054                	addi	x13,x2,4
    1302:	0000                	unimp
    1304:	005c                	addi	x15,x2,4
    1306:	0000                	unimp
    1308:	20080003          	lb	x0,512(x16) # ffffa200 <_end+0x7effa1a8>
    130c:	5c9f 0000 6000      	0x600000005c9f
    1312:	0000                	unimp
    1314:	0100                	addi	x8,x2,128
    1316:	5900                	lw	x8,48(x10)
                for(int i = 0; i <= iter; ++i){
    1318:	01f0                	addi	x12,x2,204
    131a:	0000                	unimp
                        bsg_cuda_print_stat_end(temp);
    131c:	0204                	addi	x9,x2,256
    131e:	0000                	unimp
    1320:	0002                	c.slli64	x0
    1322:	9f30                	0x9f30
                for(int i = 0; i <= iter; ++i){
    1324:	0204                	addi	x9,x2,256
    1326:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1328:	0214                	addi	x13,x2,256
    132a:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    132c:	2d080003          	lb	x0,720(x16)
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1330:	489f 0002 5400      	0x54000002489f
    1336:	0002                	c.slli64	x0
    1338:	0300                	addi	x8,x2,384
    133a:	0800                	addi	x8,x2,16
    133c:	00009f2b          	0x9f2b
	...
        }
    1348:	0000                	unimp
    134a:	0020                	addi	x8,x2,8
    134c:	0000                	unimp
    134e:	0006                	c.slli	x0,0x1
    1350:	00000003          	lb	x0,0(x0) # 0 <_start>
    1354:	9f81                	0x9f81
    1356:	0020                	addi	x8,x2,8
    1358:	0000                	unimp
    135a:	01d0                	addi	x12,x2,196
    135c:	0000                	unimp
    135e:	0001                	nop
    1360:	d06d                	beqz	x8,1342 <kernel_matrix_multiply_int16+0x1e2>
    1362:	0001                	nop
    1364:	dc00                	sw	x8,56(x8)
    1366:	0001                	nop
    1368:	0600                	addi	x8,x2,768
    136a:	0300                	addi	x8,x2,384
    136c:	0000                	unimp
    136e:	8100                	0x8100
    1370:	dc9f 0001 a800      	0xa8000001dc9f
    1376:	0002                	c.slli64	x0
    1378:	0100                	addi	x8,x2,128
    137a:	6d00                	flw	f8,24(x10)
	...
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1384:	0074                	addi	x13,x2,12
    1386:	0000                	unimp
    1388:	0078                	addi	x14,x2,12
    138a:	0000                	unimp
    138c:	0002                	c.slli64	x0
    138e:	9f30                	0x9f30
    1390:	0078                	addi	x14,x2,12
    1392:	0000                	unimp
    1394:	0090                	addi	x12,x2,64
    1396:	0000                	unimp
    1398:	0002                	c.slli64	x0
    139a:	9f31                	0x9f31
    139c:	015c                	addi	x15,x2,132
    139e:	0000                	unimp
    13a0:	0164                	addi	x9,x2,140
    13a2:	0000                	unimp
    13a4:	0009                	c.nop	2
    13a6:	007e                	c.slli	x0,0x1f
    13a8:	0081                	addi	x1,x1,0
    13aa:	7d22                	flw	f26,40(x2)
    13ac:	1c00                	addi	x8,x2,560
    13ae:	649f 0001 7400      	0x74000001649f
    13b4:	0001                	nop
    13b6:	0b00                	addi	x8,x2,400
    13b8:	7e00                	flw	f8,56(x12)
    13ba:	7d00                	flw	f8,56(x10)
    13bc:	1c00                	addi	x8,x2,560
    13be:	0081                	addi	x1,x1,0
    13c0:	2322                	fld	f6,8(x2)
    13c2:	9f01                	0x9f01
    13c4:	0174                	addi	x13,x2,140
    13c6:	0000                	unimp
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13c8:	018c                	addi	x11,x2,192
    13ca:	0000                	unimp
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13cc:	0009                	c.nop	2
    13ce:	007e                	c.slli	x0,0x1f
                int8_t B_local[A_WIDTH * B_WIDTH];
    13d0:	0081                	addi	x1,x1,0
    13d2:	7d22                	flw	f26,40(x2)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13d4:	1c00                	addi	x8,x2,560
    13d6:	249f 0002 2800      	0x28000002249f
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    13dc:	0002                	c.slli64	x0
    13de:	0300                	addi	x8,x2,384
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    13e0:	8100                	0x8100
    13e2:	9f01                	0x9f01
    13e4:	0228                	addi	x10,x2,264
    13e6:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    13e8:	0248                	addi	x10,x2,260
    13ea:	0000                	unimp
    13ec:	0001                	nop
    13ee:	006e                	c.slli	x0,0x1b
                int8_t B_local[A_WIDTH * B_WIDTH];
    13f0:	0000                	unimp
    13f2:	0000                	unimp
                int8_t A_local[A_HEIGHT * A_WIDTH];
    13f4:	0000                	unimp
    13f6:	f400                	fsw	f8,40(x8)
    13f8:	0021                	c.nop	8
    13fa:	8800                	0x8800
    13fc:	0022                	c.slli	x0,0x8
    13fe:	0100                	addi	x8,x2,128
    1400:	5a00                	lw	x8,48(x12)
    1402:	2288                	fld	f10,0(x13)
    1404:	0000                	unimp
    1406:	2430                	fld	f12,72(x8)
    1408:	0000                	unimp
    140a:	0004                	0x4
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    140c:	9f5a01f3          	0x9f5a01f3
	...
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1418:	21f4                	fld	f13,192(x11)
    141a:	0000                	unimp
                int8_t B_local[A_WIDTH * B_WIDTH];
    141c:	2270                	fld	f12,192(x12)
    141e:	0000                	unimp
    1420:	0001                	nop
    1422:	0022705b          	0x22705b
    1426:	d000                	sw	x8,32(x8)
    1428:	01000023          	sb	x16,0(x0) # 0 <_start>
    142c:	5800                	lw	x8,48(x8)
    142e:	23d0                	fld	f12,128(x15)
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1430:	0000                	unimp
    1432:	240c                	fld	f11,8(x8)
    1434:	0000                	unimp
    1436:	0004                	0x4
    1438:	9f5b01f3          	0x9f5b01f3
                        bsg_cuda_print_stat_start(temp);
    143c:	240c                	fld	f11,8(x8)
    143e:	0000                	unimp
                int8_t C_local[A_HEIGHT * B_WIDTH];
    1440:	2430                	fld	f12,72(x8)
    1442:	0000                	unimp
    1444:	0001                	nop
    1446:	0058                	addi	x14,x2,4
    1448:	0000                	unimp
    144a:	0000                	unimp
    144c:	0000                	unimp
    144e:	f400                	fsw	f8,40(x8)
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1450:	0021                	c.nop	8
    1452:	8800                	0x8800
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1454:	0022                	c.slli	x0,0x8
    1456:	0100                	addi	x8,x2,128
    1458:	5c00                	lw	x8,56(x8)
    145a:	2288                	fld	f10,0(x13)
    145c:	0000                	unimp
    145e:	23d0                	fld	f12,128(x15)
    1460:	0000                	unimp
    1462:	0001                	nop
                        bsg_cuda_print_stat_start(temp);
    1464:	0023d067          	0x23d067
    1468:	0c00                	addi	x8,x2,528
    146a:	0024                	addi	x9,x2,8
                int8_t C_local[A_HEIGHT * B_WIDTH];
    146c:	0400                	addi	x8,x2,512
    146e:	f300                	fsw	f8,32(x14)
                int rc, temp = IGNORE_TAG;
    1470:	5c01                	li	x24,-32
    1472:	0c9f 0024 3000      	0x300000240c9f
                        bsg_cuda_print_stat_start(temp);
    1478:	0024                	addi	x9,x2,8
    147a:	0100                	addi	x8,x2,128
    147c:	6700                	flw	f8,8(x14)
	...
                        temp = tag;
    1486:	21f4                	fld	f13,192(x11)
                        bsg_cuda_print_stat_start(temp);
    1488:	0000                	unimp
    148a:	2288                	fld	f10,0(x13)
    148c:	0000                	unimp
    148e:	0001                	nop
    1490:	885d                	andi	x8,x8,23
    1492:	0022                	c.slli	x0,0x8
    1494:	d000                	sw	x8,32(x8)
    1496:	01000023          	sb	x16,0(x0) # 0 <_start>
    149a:	6a00                	flw	f8,16(x12)
    149c:	23d0                	fld	f12,128(x15)
    149e:	0000                	unimp
    14a0:	240c                	fld	f11,8(x8)
    14a2:	0000                	unimp
    14a4:	0004                	0x4
    14a6:	9f5d01f3          	0x9f5d01f3
    14aa:	240c                	fld	f11,8(x8)
    14ac:	0000                	unimp
    14ae:	2430                	fld	f12,72(x8)
    14b0:	0000                	unimp
    14b2:	0001                	nop
    14b4:	006a                	c.slli	x0,0x1a
    14b6:	0000                	unimp
    14b8:	0000                	unimp
    14ba:	0000                	unimp
    14bc:	f400                	fsw	f8,40(x8)
    14be:	0021                	c.nop	8
    14c0:	4800                	lw	x8,16(x8)
    14c2:	0022                	c.slli	x0,0x8
    14c4:	0100                	addi	x8,x2,128
    14c6:	5e00                	lw	x8,56(x12)
    14c8:	2248                	fld	f10,128(x12)
    14ca:	0000                	unimp
    14cc:	23d0                	fld	f12,128(x15)
    14ce:	0000                	unimp
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    14d0:	0001                	nop
    14d2:	d059                	beqz	x8,1458 <kernel_matrix_multiply_int8+0xd4>
    14d4:	0c000023          	sb	x0,192(x0) # c0 <bsg_group_size+0xbf>
    14d8:	0024                	addi	x9,x2,8
    14da:	0400                	addi	x8,x2,512
    14dc:	f300                	fsw	f8,32(x14)
    14de:	5e01                	li	x28,-32
    14e0:	0c9f 0024 3000      	0x300000240c9f
    14e6:	0024                	addi	x9,x2,8
                for(int i = 0; i <= iter; ++i){
    14e8:	0100                	addi	x8,x2,128
    14ea:	5900                	lw	x8,48(x10)
	...
                        bsg_cuda_print_stat_end(temp);
    14f4:	21f4                	fld	f13,192(x11)
    14f6:	0000                	unimp
    14f8:	223c                	fld	f15,64(x12)
    14fa:	0000                	unimp
    14fc:	0001                	nop
    14fe:	3c5f 0022 d000      	0xd00000223c5f
    1504:	01000023          	sb	x16,0(x0) # 0 <_start>
    1508:	6900                	flw	f8,16(x10)
    150a:	23d0                	fld	f12,128(x15)
    150c:	0000                	unimp
    150e:	240c                	fld	f11,8(x8)
    1510:	0000                	unimp
    1512:	0004                	0x4
    1514:	9f5f01f3          	0x9f5f01f3
    1518:	240c                	fld	f11,8(x8)
    151a:	0000                	unimp
    151c:	2430                	fld	f12,72(x8)
    151e:	0000                	unimp
    1520:	0001                	nop
    1522:	0069                	c.nop	26
    1524:	0000                	unimp
    1526:	0000                	unimp
    1528:	0000                	unimp
    152a:	3000                	fld	f8,32(x8)
    152c:	0022                	c.slli	x0,0x8
    152e:	e400                	fsw	f8,8(x8)
    1530:	01000023          	sb	x16,0(x0) # 0 <_start>
    1534:	6400                	flw	f8,8(x8)
    1536:	23e4                	fld	f9,192(x15)
                for(int i = 0; i <= iter; ++i){
    1538:	0000                	unimp
    153a:	240c                	fld	f11,8(x8)
                        bsg_cuda_print_stat_end(temp);
    153c:	0000                	unimp
    153e:	000a                	c.slli	x0,0x2
                for(int i = 0; i <= iter; ++i){
    1540:	335e01f3          	0x335e01f3
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1544:	f324                	fsw	f9,96(x14)
    1546:	5e01                	li	x28,-32
                for(int i = 0; i <= iter; ++i){
    1548:	9f1c                	0x9f1c
    154a:	240c                	fld	f11,8(x8)
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    154c:	0000                	unimp
    154e:	2430                	fld	f12,72(x8)
    1550:	0000                	unimp
    1552:	0001                	nop
    1554:	0064                	addi	x9,x2,12
    1556:	0000                	unimp
    1558:	0000                	unimp
    155a:	0000                	unimp
        }
    155c:	3000                	fld	f8,32(x8)
    155e:	0022                	c.slli	x0,0x8
    1560:	8800                	0x8800
    1562:	0022                	c.slli	x0,0x8
    1564:	0200                	addi	x8,x2,256
    1566:	3000                	fld	f8,32(x8)
    1568:	889f 0022 d000      	0xd0000022889f
    156e:	01000023          	sb	x16,0(x0) # 0 <_start>
    1572:	6b00                	flw	f8,16(x14)
    1574:	240c                	fld	f11,8(x8)
    1576:	0000                	unimp
    1578:	2430                	fld	f12,72(x8)
    157a:	0000                	unimp
    157c:	0001                	nop
    157e:	0000006b          	0x6b
    1582:	0000                	unimp
    1584:	0000                	unimp
    1586:	3000                	fld	f8,32(x8)
    1588:	0022                	c.slli	x0,0x8
    158a:	8800                	0x8800
    158c:	0022                	c.slli	x0,0x8
    158e:	0200                	addi	x8,x2,256
    1590:	3000                	fld	f8,32(x8)
    1592:	889f 0022 8c00      	0x8c000022889f
    1598:	0022                	c.slli	x0,0x8
    159a:	0100                	addi	x8,x2,128
    159c:	6500                	flw	f8,8(x10)
    159e:	23c0                	fld	f8,128(x15)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    15a0:	0000                	unimp
    15a2:	23d0                	fld	f12,128(x15)
    15a4:	0000                	unimp
    15a6:	0006                	c.slli	x0,0x1
    15a8:	0079                	c.nop	30
    15aa:	0085                	addi	x1,x1,1
    15ac:	9f22                	add	x30,x30,x8
	...
    15b6:	2230                	fld	f12,64(x12)
    15b8:	0000                	unimp
    15ba:	22b0                	fld	f12,64(x13)
    15bc:	0000                	unimp
    15be:	0002                	c.slli64	x0
    15c0:	9f30                	0x9f30
    15c2:	22b0                	fld	f12,64(x13)
    15c4:	0000                	unimp
    15c6:	22e0                	fld	f8,192(x13)
    15c8:	0000                	unimp
    15ca:	0001                	nop
    15cc:	b05f 0023 b800      	0xb8000023b05f
    15d2:	01000023          	sb	x16,0(x0) # 0 <_start>
    15d6:	5f00                	lw	x8,56(x14)
    15d8:	240c                	fld	f11,8(x8)
    15da:	0000                	unimp
    15dc:	2430                	fld	f12,72(x8)
    15de:	0000                	unimp
    15e0:	0001                	nop
    15e2:	005f 0000 0000      	0x5f
    15e8:	0000                	unimp
    15ea:	3000                	fld	f8,32(x8)
    15ec:	0022                	c.slli	x0,0x8
    15ee:	8800                	0x8800
    15f0:	0022                	c.slli	x0,0x8
    15f2:	0200                	addi	x8,x2,256
    15f4:	3000                	fld	f8,32(x8)
    15f6:	889f 0022 b000      	0xb0000022889f
    15fc:	0022                	c.slli	x0,0x8
    15fe:	0100                	addi	x8,x2,128
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    1600:	6800                	flw	f8,16(x8)
    1602:	23c0                	fld	f8,128(x15)
                      uint32_t B_WIDTH, uint32_t tag, uint32_t iter) {
    1604:	0000                	unimp
    1606:	23d0                	fld	f12,128(x15)
    1608:	0000                	unimp
    160a:	0001                	nop
                float B_local[A_WIDTH * B_WIDTH];
    160c:	0068                	addi	x10,x2,12
    160e:	0000                	unimp
                float A_local[A_HEIGHT * A_WIDTH];
    1610:	0000                	unimp
    1612:	0000                	unimp
    1614:	8800                	0x8800
    1616:	0022                	c.slli	x0,0x8
    1618:	b000                	fsd	f8,32(x8)
    161a:	0022                	c.slli	x0,0x8
    161c:	0200                	addi	x8,x2,256
    161e:	3000                	fld	f8,32(x8)
    1620:	009f 0000 0000      	0x9f
    1626:	0000                	unimp
                for(int i = 0; i <= iter; ++i){
    1628:	b000                	fsd	f8,32(x8)
    162a:	0022                	c.slli	x0,0x8
    162c:	f800                	fsw	f8,48(x8)
    162e:	0022                	c.slli	x0,0x8
    1630:	0200                	addi	x8,x2,256
    1632:	3000                	fld	f8,32(x8)
                float C_local[A_HEIGHT * B_WIDTH];
    1634:	0c9f 0024 3000      	0x300000240c9f
                float B_local[A_WIDTH * B_WIDTH];
    163a:	0024                	addi	x9,x2,8
    163c:	0200                	addi	x8,x2,256
    163e:	3000                	fld	f8,32(x8)
    1640:	009f 0000 0000      	0x9f
    1646:	0000                	unimp
    1648:	b000                	fsd	f8,32(x8)
    164a:	0022                	c.slli	x0,0x8
    164c:	f800                	fsw	f8,48(x8)
    164e:	0022                	c.slli	x0,0x8
    1650:	4000                	lw	x8,0(x8)
    1652:	9e00                	0x9e00
                float C_local[A_HEIGHT * B_WIDTH];
    1654:	0004                	0x4
    1656:	0000                	unimp
    1658:	9300                	0x9300
    165a:	9e04                	0x9e04
    165c:	0004                	0x4
    165e:	0000                	unimp
    1660:	9300                	0x9300
    1662:	9e04                	0x9e04
    1664:	0004                	0x4
    1666:	0000                	unimp
    1668:	9300                	0x9300
    166a:	9e04                	0x9e04
                memcpy (A_local, A, sizeof(A[0])*A_HEIGHT*A_WIDTH);
    166c:	0004                	0x4
    166e:	0000                	unimp
                memcpy (B_local, B, sizeof(B[0])*A_WIDTH*B_WIDTH);
    1670:	9300                	0x9300
    1672:	9e04                	0x9e04
    1674:	0004                	0x4
    1676:	0000                	unimp
    1678:	9300                	0x9300
    167a:	9e04                	0x9e04
    167c:	0004                	0x4
    167e:	0000                	unimp
                        bsg_cuda_print_stat_start(temp);
    1680:	9300                	0x9300
    1682:	9e04                	0x9e04
    1684:	0004                	0x4
    1686:	0000                	unimp
                float C_local[A_HEIGHT * B_WIDTH];
    1688:	9300                	0x9300
    168a:	9e04                	0x9e04
                int rc, temp = IGNORE_TAG;
    168c:	0004                	0x4
    168e:	0000                	unimp
    1690:	9300                	0x9300
    1692:	f804                	fsw	f9,48(x8)
                        bsg_cuda_print_stat_start(temp);
    1694:	0022                	c.slli	x0,0x8
    1696:	5800                	lw	x8,48(x8)
    1698:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    169c:	9000                	0x9000
    169e:	9331                	srli	x14,x14,0x2c
    16a0:	9004                	0x9004
    16a2:	9330                	0x9330
    16a4:	9004                	0x9004
    16a6:	90049327          	0x90049327
                        temp = tag;
    16aa:	9326                	add	x6,x6,x9
                        bsg_cuda_print_stat_start(temp);
    16ac:	9004                	0x9004
    16ae:	9325                	srli	x14,x14,0x29
    16b0:	9004                	0x9004
    16b2:	9324                	0x9324
    16b4:	9004                	0x9004
    16b6:	90049323          	sh	x0,-1786(x9)
    16ba:	9322                	add	x6,x6,x8
    16bc:	5804                	lw	x9,48(x8)
    16be:	5c000023          	sb	x0,1472(x0) # 5c0 <bsg_printf+0xf4>
    16c2:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    16c6:	9000                	0x9000
    16c8:	9331                	srli	x14,x14,0x2c
    16ca:	9004                	0x9004
    16cc:	9330                	0x9330
    16ce:	9004                	0x9004
    16d0:	90049327          	0x90049327
    16d4:	9326                	add	x6,x6,x9
    16d6:	9004                	0x9004
    16d8:	9325                	srli	x14,x14,0x29
    16da:	9004                	0x9004
    16dc:	9324                	0x9324
    16de:	9004                	0x9004
    16e0:	90049323          	sh	x0,-1786(x9)
    16e4:	9322                	add	x6,x6,x8
    16e6:	5c04                	lw	x9,56(x8)
    16e8:	60000023          	sb	x0,1536(x0) # 600 <bsg_printf+0x134>
    16ec:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    16f0:	9000                	0x9000
    16f2:	9331                	srli	x14,x14,0x2c
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    16f4:	9004                	0x9004
    16f6:	9330                	0x9330
    16f8:	9004                	0x9004
    16fa:	90049327          	0x90049327
    16fe:	9326                	add	x6,x6,x9
    1700:	9004                	0x9004
    1702:	9325                	srli	x14,x14,0x29
    1704:	9004                	0x9004
    1706:	9324                	0x9324
    1708:	9004                	0x9004
    170a:	90049323          	sh	x0,-1786(x9)
                for(int i = 0; i <= iter; ++i){
    170e:	9322                	add	x6,x6,x8
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    1710:	6004                	flw	f9,0(x8)
    1712:	64000023          	sb	x0,1600(x0) # 640 <bsg_printf+0x174>
                        bsg_cuda_print_stat_end(temp);
    1716:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    171a:	9000                	0x9000
    171c:	9331                	srli	x14,x14,0x2c
    171e:	9004                	0x9004
    1720:	9330                	0x9330
    1722:	9004                	0x9004
    1724:	90049327          	0x90049327
    1728:	9326                	add	x6,x6,x9
    172a:	9004                	0x9004
    172c:	9325                	srli	x14,x14,0x29
    172e:	9004                	0x9004
    1730:	9324                	0x9324
    1732:	9004                	0x9004
    1734:	90049323          	sh	x0,-1786(x9)
    1738:	9322                	add	x6,x6,x8
    173a:	6404                	flw	f9,8(x8)
    173c:	68000023          	sb	x0,1664(x0) # 680 <bsg_printf+0x1b4>
    1740:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    1744:	9000                	0x9000
    1746:	9331                	srli	x14,x14,0x2c
    1748:	9004                	0x9004
    174a:	9330                	0x9330
    174c:	9004                	0x9004
    174e:	90049327          	0x90049327
    1752:	9326                	add	x6,x6,x9
    1754:	9004                	0x9004
    1756:	9325                	srli	x14,x14,0x29
                for(int i = 0; i <= iter; ++i){
    1758:	9004                	0x9004
    175a:	9324                	0x9324
                        bsg_cuda_print_stat_end(temp);
    175c:	9004                	0x9004
    175e:	90049323          	sh	x0,-1786(x9)
    1762:	9322                	add	x6,x6,x8
                for(int i = 0; i <= iter; ++i){
    1764:	6804                	flw	f9,16(x8)
    1766:	6c000023          	sb	x0,1728(x0) # 6c0 <bsg_printf+0x1f4>
                        rc = kernel_matrix_multiply_transpose_nomul_unroll_init<8>(A_local, B_local, C_local,
    176a:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
                for(int i = 0; i <= iter; ++i){
    176e:	9000                	0x9000
                memcpy (C, C_local, sizeof(C[0])*A_HEIGHT*B_WIDTH);
    1770:	9331                	srli	x14,x14,0x2c
    1772:	9004                	0x9004
    1774:	9330                	0x9330
    1776:	9004                	0x9004
    1778:	90049327          	0x90049327
    177c:	9326                	add	x6,x6,x9
    177e:	9004                	0x9004
        }
    1780:	9325                	srli	x14,x14,0x29
    1782:	9004                	0x9004
    1784:	9324                	0x9324
    1786:	9004                	0x9004
    1788:	90049323          	sh	x0,-1786(x9)
    178c:	9322                	add	x6,x6,x8
    178e:	6c04                	flw	f9,24(x8)
    1790:	70000023          	sb	x0,1792(x0) # 700 <bsg_printf+0x234>
    1794:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    1798:	9000                	0x9000
    179a:	9331                	srli	x14,x14,0x2c
    179c:	9004                	0x9004
    179e:	9330                	0x9330
    17a0:	9004                	0x9004
    17a2:	90049327          	0x90049327
    17a6:	9326                	add	x6,x6,x9
    17a8:	9004                	0x9004
    17aa:	9325                	srli	x14,x14,0x29
    17ac:	9004                	0x9004
    17ae:	9324                	0x9324
    17b0:	9004                	0x9004
    17b2:	90049323          	sh	x0,-1786(x9)
    17b6:	9322                	add	x6,x6,x8
    17b8:	7004                	flw	f9,32(x8)
    17ba:	74000023          	sb	x0,1856(x0) # 740 <bsg_printf+0x274>
    17be:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    17c2:	9000                	0x9000
    17c4:	9331                	srli	x14,x14,0x2c
    17c6:	9004                	0x9004
    17c8:	9330                	0x9330
    17ca:	9004                	0x9004
    17cc:	90049327          	0x90049327
    17d0:	9326                	add	x6,x6,x9
    17d2:	9004                	0x9004
    17d4:	9325                	srli	x14,x14,0x29
    17d6:	9004                	0x9004
    17d8:	9324                	0x9324
    17da:	9004                	0x9004
    17dc:	90049323          	sh	x0,-1786(x9)
    17e0:	9322                	add	x6,x6,x8
    17e2:	7404                	flw	f9,40(x8)
    17e4:	88000023          	sb	x0,-1920(x0) # fffff880 <_end+0x7efff828>
    17e8:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    17ec:	9000                	0x9000
    17ee:	9331                	srli	x14,x14,0x2c
    17f0:	9004                	0x9004
    17f2:	9330                	0x9330
    17f4:	9004                	0x9004
    17f6:	90049327          	0x90049327
    17fa:	9326                	add	x6,x6,x9
    17fc:	9004                	0x9004
    17fe:	9325                	srli	x14,x14,0x29
    1800:	9004                	0x9004
    1802:	9324                	0x9324
    1804:	9004                	0x9004
    1806:	90049323          	sh	x0,-1786(x9)
    180a:	9322                	add	x6,x6,x8
    180c:	8804                	0x8804
    180e:	b0000023          	sb	x0,-1280(x0) # fffffb00 <_end+0x7efffaa8>
    1812:	20000023          	sb	x0,512(x0) # 200 <bsg_set_tile_x_y+0xb0>
    1816:	9000                	0x9000
    1818:	9331                	srli	x14,x14,0x2c
    181a:	9004                	0x9004
    181c:	9330                	0x9330
    181e:	9004                	0x9004
    1820:	90049327          	0x90049327
    1824:	9326                	add	x6,x6,x9
    1826:	9004                	0x9004
    1828:	9325                	srli	x14,x14,0x29
    182a:	9004                	0x9004
    182c:	9324                	0x9324
    182e:	9004                	0x9004
    1830:	90049323          	sh	x0,-1786(x9)
    1834:	9322                	add	x6,x6,x8
    1836:	0c04                	addi	x9,x2,528
    1838:	0024                	addi	x9,x2,8
    183a:	3000                	fld	f8,32(x8)
    183c:	0024                	addi	x9,x2,8
    183e:	4000                	lw	x8,0(x8)
    1840:	9e00                	0x9e00
    1842:	0004                	0x4
    1844:	0000                	unimp
    1846:	9300                	0x9300
    1848:	9e04                	0x9e04
    184a:	0004                	0x4
    184c:	0000                	unimp
    184e:	9300                	0x9300
    1850:	9e04                	0x9e04
    1852:	0004                	0x4
    1854:	0000                	unimp
    1856:	9300                	0x9300
    1858:	9e04                	0x9e04
    185a:	0004                	0x4
    185c:	0000                	unimp
    185e:	9300                	0x9300
    1860:	9e04                	0x9e04
    1862:	0004                	0x4
    1864:	0000                	unimp
    1866:	9300                	0x9300
    1868:	9e04                	0x9e04
    186a:	0004                	0x4
    186c:	0000                	unimp
    186e:	9300                	0x9300
    1870:	9e04                	0x9e04
    1872:	0004                	0x4
    1874:	0000                	unimp
    1876:	9300                	0x9300
    1878:	9e04                	0x9e04
    187a:	0004                	0x4
    187c:	0000                	unimp
    187e:	9300                	0x9300
    1880:	0004                	0x4
    1882:	0000                	unimp
    1884:	0000                	unimp
    1886:	0000                	unimp
    1888:	b000                	fsd	f8,32(x8)
    188a:	0022                	c.slli	x0,0x8
    188c:	f800                	fsw	f8,48(x8)
    188e:	0022                	c.slli	x0,0x8
    1890:	0100                	addi	x8,x2,128
    1892:	6500                	flw	f8,8(x10)
    1894:	240c                	fld	f11,8(x8)
    1896:	0000                	unimp
    1898:	2430                	fld	f12,72(x8)
    189a:	0000                	unimp
    189c:	0001                	nop
    189e:	0065                	c.nop	25
    18a0:	0000                	unimp
    18a2:	0000                	unimp
    18a4:	0000                	unimp
    18a6:	f800                	fsw	f8,48(x8)
    18a8:	0022                	c.slli	x0,0x8
    18aa:	5800                	lw	x8,48(x8)
    18ac:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    18b0:	3000                	fld	f8,32(x8)
    18b2:	589f 0023 5c00      	0x5c000023589f
    18b8:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    18bc:	3100                	fld	f8,32(x10)
    18be:	5c9f 0023 6000      	0x600000235c9f
    18c4:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    18c8:	3200                	fld	f8,32(x12)
    18ca:	609f 0023 6400      	0x64000023609f
    18d0:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    18d4:	3300                	fld	f8,32(x14)
    18d6:	649f 0023 6800      	0x68000023649f
    18dc:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
        __wait_until_valid_func();
    18e0:	3400                	fld	f8,40(x8)
    18e2:	689f 0023 6c00      	0x6c000023689f
    18e8:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    18ec:	3500                	fld	f8,40(x10)
    18ee:	6c9f 0023 7000      	0x700000236c9f
    18f4:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    18f8:	3600                	fld	f8,40(x12)
    18fa:	709f 0023 7400      	0x74000023709f
    1900:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1904:	3700                	fld	f8,40(x14)
    1906:	749f 0023 8800      	0x88000023749f
    190c:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1910:	3800                	fld	f8,48(x8)
    1912:	009f 0000 0000      	0x9f
    1918:	0000                	unimp
    191a:	8800                	0x8800
    191c:	8c000023          	sb	x0,-1856(x0) # fffff8c0 <_end+0x7efff868>
    1920:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1924:	3000                	fld	f8,32(x8)
    1926:	8c9f 0023 9000      	0x900000238c9f
    192c:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1930:	3100                	fld	f8,32(x10)
    1932:	909f 0023 9400      	0x94000023909f
    1938:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    193c:	3200                	fld	f8,32(x12)
    193e:	949f 0023 9800      	0x98000023949f
    1944:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1948:	3300                	fld	f8,32(x14)
    194a:	989f 0023 9c00      	0x9c000023989f
    1950:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1954:	3400                	fld	f8,40(x8)
    1956:	9c9f 0023 a000      	0xa00000239c9f
    195c:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1960:	3500                	fld	f8,40(x10)
    1962:	a09f 0023 a400      	0xa4000023a09f
    1968:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    196c:	3600                	fld	f8,40(x12)
    196e:	a49f 0023 a800      	0xa8000023a49f
    1974:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1978:	3700                	fld	f8,40(x14)
    197a:	a89f 0023 bc00      	0xbc000023a89f
    1980:	02000023          	sb	x0,32(x0) # 20 <bsg_group_size+0x1f>
    1984:	3800                	fld	f8,48(x8)
    1986:	009f 0000 0000      	0x9f
    198c:	0000                	unimp
    198e:	5400                	lw	x8,40(x8)
    1990:	001f e400 001f      	0x1fe400001f
    1996:	0100                	addi	x8,x2,128
    1998:	5a00                	lw	x8,48(x12)
    199a:	1fe4                	addi	x9,x2,1020
    199c:	0000                	unimp
    199e:	21f4                	fld	f13,192(x11)
    19a0:	0000                	unimp
    19a2:	0004                	0x4
    19a4:	9f5a01f3          	0x9f5a01f3
	...
  if (__bsg_id == 0) 
    19b0:	1f54                	addi	x13,x2,948
    19b2:	0000                	unimp
    19b4:	1fe4                	addi	x9,x2,1020
    19b6:	0000                	unimp
    19b8:	0001                	nop
    19ba:	001fe45b          	0x1fe45b
     *signal_ptr = cuda_finish_signal_val;     
    19be:	cc00                	sw	x8,24(x8)
    19c0:	0021                	c.nop	8
    19c2:	0300                	addi	x8,x2,384
    19c4:	9100                	0x9100
    19c6:	7fbc                	flw	f15,120(x15)
    19c8:	21cc                	fld	f11,128(x11)
    19ca:	0000                	unimp
    19cc:	21d0                	fld	f12,128(x11)
    19ce:	0000                	unimp
    19d0:	bc720003          	lb	x0,-1081(x4) # ffff8bc7 <_end+0x7eff8b6f>
}
    19d4:	d07f                	0xd07f
    19d6:	0021                	c.nop	8
    19d8:	f400                	fsw	f8,40(x8)
    19da:	0021                	c.nop	8
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19dc:	0300                	addi	x8,x2,384
    19de:	9100                	0x9100
    19e0:	7fbc                	flw	f15,120(x15)
	...
        uint32_t incr = A_WIDTH * (F-1);
    19ea:	1f54                	addi	x13,x2,948
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19ec:	0000                	unimp
    19ee:	1fe4                	addi	x9,x2,1020
        uint32_t incr = A_WIDTH * (F-1);
    19f0:	0000                	unimp
    19f2:	0001                	nop
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    19f4:	e45c                	fsw	f15,12(x8)
    19f6:	001f cc00 0021      	0x21cc00001f
    19fc:	0200                	addi	x8,x2,256
    19fe:	9100                	0x9100
    1a00:	cc48                	sw	x10,28(x8)
    1a02:	0021                	c.nop	8
    1a04:	d000                	sw	x8,32(x8)
    1a06:	0021                	c.nop	8
    1a08:	0200                	addi	x8,x2,256
    1a0a:	7200                	flw	f8,32(x12)
    1a0c:	d048                	sw	x10,36(x8)
    1a0e:	0021                	c.nop	8
    1a10:	f400                	fsw	f8,40(x8)
    1a12:	0021                	c.nop	8
    1a14:	0200                	addi	x8,x2,256
    1a16:	9100                	0x9100
    1a18:	0048                	addi	x10,x2,4
    1a1a:	0000                	unimp
    1a1c:	0000                	unimp
    1a1e:	0000                	unimp
    1a20:	5400                	lw	x8,40(x8)
    1a22:	001f e400 001f      	0x1fe400001f
    1a28:	0100                	addi	x8,x2,128
    1a2a:	5d00                	lw	x8,56(x10)
    1a2c:	1fe4                	addi	x9,x2,1020
    1a2e:	0000                	unimp
        uint32_t incr = A_WIDTH * (F-1);
    1a30:	21cc                	fld	f11,128(x11)
    1a32:	0000                	unimp
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1a34:	0002                	c.slli64	x0
    1a36:	4c91                	li	x25,4
    1a38:	21cc                	fld	f11,128(x11)
    1a3a:	0000                	unimp
    1a3c:	21d0                	fld	f12,128(x11)
    1a3e:	0000                	unimp
    1a40:	0002                	c.slli64	x0
    1a42:	4c72                	lw	x24,28(x2)
    1a44:	21d0                	fld	f12,128(x11)
    1a46:	0000                	unimp
    1a48:	21f4                	fld	f13,192(x11)
    1a4a:	0000                	unimp
    1a4c:	0002                	c.slli64	x0
    1a4e:	4c91                	li	x25,4
	...
    1a58:	1f54                	addi	x13,x2,948
    1a5a:	0000                	unimp
    1a5c:	1f60                	addi	x8,x2,956
    1a5e:	0000                	unimp
    1a60:	0001                	nop
    1a62:	605e                	flw	f0,212(x2)
    1a64:	001f f400 0021      	0x21f400001f
    1a6a:	0100                	addi	x8,x2,128
    1a6c:	6e00                	flw	f8,24(x12)
	...
    1a76:	1f54                	addi	x13,x2,948
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1a78:	0000                	unimp
    1a7a:	1f68                	addi	x10,x2,956
    1a7c:	0000                	unimp
    1a7e:	0001                	nop
    1a80:	685f 001f cc00      	0xcc00001f685f
    1a86:	0021                	c.nop	8
    1a88:	0300                	addi	x8,x2,384
    1a8a:	9100                	0x9100
    1a8c:	7fac                	flw	f11,120(x15)
    1a8e:	21cc                	fld	f11,128(x11)
    1a90:	0000                	unimp
    1a92:	21d0                	fld	f12,128(x11)
    1a94:	0000                	unimp
    1a96:	ac720003          	lb	x0,-1337(x4) # fffffac7 <_end+0x7efffa6f>
    1a9a:	d07f                	0xd07f
    1a9c:	0021                	c.nop	8
    1a9e:	f400                	fsw	f8,40(x8)
    1aa0:	0021                	c.nop	8
    1aa2:	0300                	addi	x8,x2,384
    1aa4:	9100                	0x9100
    1aa6:	7fac                	flw	f11,120(x15)
	...
    1ab0:	1fa8                	addi	x10,x2,1016
    1ab2:	0000                	unimp
    1ab4:	1fb0                	addi	x12,x2,1016
    1ab6:	0000                	unimp
                boff = 0;
    1ab8:	0001                	nop
    1aba:	b05f 001f cc00      	0xcc00001fb05f
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1ac0:	0021                	c.nop	8
    1ac2:	0300                	addi	x8,x2,384
    1ac4:	9100                	0x9100
    1ac6:	7fb0                	flw	f12,120(x15)
    1ac8:	21cc                	fld	f11,128(x11)
    1aca:	0000                	unimp
    1acc:	21d0                	fld	f12,128(x11)
    1ace:	0000                	unimp
                        TC sum[F] = {{init}};
    1ad0:	b0720003          	lb	x0,-1273(x4) # fffffb07 <_end+0x7efffaaf>
    1ad4:	d07f                	0xd07f
    1ad6:	0021                	c.nop	8
    1ad8:	f400                	fsw	f8,40(x8)
    1ada:	0021                	c.nop	8
    1adc:	0300                	addi	x8,x2,384
    1ade:	9100                	0x9100
    1ae0:	7fb0                	flw	f12,120(x15)
	...
    1aea:	1fa8                	addi	x10,x2,1016
    1aec:	0000                	unimp
    1aee:	1fe4                	addi	x9,x2,1020
    1af0:	0000                	unimp
    1af2:	0002                	c.slli64	x0
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1af4:	9f30                	0x9f30
    1af6:	1fe4                	addi	x9,x2,1020
                        TC sum[F] = {{init}};
    1af8:	0000                	unimp
    1afa:	2184                	fld	f9,0(x11)
    1afc:	0000                	unimp
    1afe:	0002                	c.slli64	x0
    1b00:	4491                	li	x9,4
    1b02:	2184                	fld	f9,0(x11)
    1b04:	0000                	unimp
    1b06:	2194                	fld	f13,0(x11)
    1b08:	0000                	unimp
    1b0a:	0001                	nop
    1b0c:	d05f 0021 f400      	0xf4000021d05f
    1b12:	0021                	c.nop	8
                                        sum[f] += A[aoff] * BT[bofff];
    1b14:	0200                	addi	x8,x2,256
    1b16:	9100                	0x9100
    1b18:	0044                	addi	x9,x2,4
    1b1a:	0000                	unimp
    1b1c:	0000                	unimp
    1b1e:	0000                	unimp
    1b20:	a800                	fsd	f8,16(x8)
    1b22:	001f e400 001f      	0x1fe400001f
    1b28:	0200                	addi	x8,x2,256
    1b2a:	3000                	fld	f8,32(x8)
    1b2c:	e49f 001f f000      	0xf000001fe49f
    1b32:	001f 0300 9100      	0x91000300001f
    1b38:	7fa4                	flw	f9,120(x15)
    1b3a:	2184                	fld	f9,0(x11)
    1b3c:	0000                	unimp
    1b3e:	2194                	fld	f13,0(x11)
    1b40:	0000                	unimp
    1b42:	0008                	0x8
    1b44:	008e                	slli	x1,x1,0x3
    1b46:	a491                	j	1d8a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EsssEiPT0_PT1_PT2_mmm+0x10e>
    1b48:	067f                	0x67f
    1b4a:	9f22                	add	x30,x30,x8
	...
    1b54:	1fa8                	addi	x10,x2,1016
    1b56:	0000                	unimp
    1b58:	200c                	fld	f11,0(x8)
    1b5a:	0000                	unimp
    1b5c:	0002                	c.slli64	x0
    1b5e:	9f30                	0x9f30
	...
    1b68:	1fa8                	addi	x10,x2,1016
    1b6a:	0000                	unimp
    1b6c:	1fe4                	addi	x9,x2,1020
    1b6e:	0000                	unimp
    1b70:	0002                	c.slli64	x0
    1b72:	9f30                	0x9f30
	...
    1b7c:	1fe4                	addi	x9,x2,1020
    1b7e:	0000                	unimp
    1b80:	200c                	fld	f11,0(x8)
    1b82:	0000                	unimp
    1b84:	0002                	c.slli64	x0
    1b86:	9f30                	0x9f30
	...
    1b90:	200c                	fld	f11,0(x8)
    1b92:	0000                	unimp
    1b94:	2054                	fld	f13,128(x8)
    1b96:	0000                	unimp
    1b98:	0002                	c.slli64	x0
    1b9a:	9f30                	0x9f30
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1b9c:	21d0                	fld	f12,128(x11)
    1b9e:	0000                	unimp
    1ba0:	21f4                	fld	f13,192(x11)
    1ba2:	0000                	unimp
                        boff += incr;
    1ba4:	0002                	c.slli64	x0
    1ba6:	9f30                	0x9f30
	...
    1bb0:	200c                	fld	f11,0(x8)
    1bb2:	0000                	unimp
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1bb4:	2054                	fld	f13,128(x8)
    1bb6:	0000                	unimp
                                C[coff + f] = sum[f];
    1bb8:	0020                	addi	x8,x2,8
    1bba:	9f30                	0x9f30
    1bbc:	9f300193          	li	x3,-1549
    1bc0:	9f300193          	li	x3,-1549
    1bc4:	9f300193          	li	x3,-1549
    1bc8:	9f300193          	li	x3,-1549
    1bcc:	9f300193          	li	x3,-1549
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1bd0:	9f300193          	li	x3,-1549
    1bd4:	9f300193          	li	x3,-1549
    1bd8:	20540193          	addi	x3,x8,517 # ffff6205 <_end+0x7eff61ad>
    1bdc:	0000                	unimp
    1bde:	20a8                	fld	f10,64(x9)
    1be0:	0000                	unimp
    1be2:	0018                	0x18
    1be4:	9364                	0x9364
    1be6:	6301                	0x6301
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1be8:	93620193          	addi	x3,x4,-1738 # fffff936 <_end+0x7efff8de>
    1bec:	5901                	li	x18,-32
    1bee:	93580193          	addi	x3,x16,-1739
    1bf2:	5701                	li	x14,-32
    1bf4:	93550193          	addi	x3,x10,-1739 # 19935 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x17741>
    1bf8:	6f01                	0x6f01
    1bfa:	20a80193          	addi	x3,x16,522
    1bfe:	0000                	unimp
    1c00:	20b0                	fld	f12,64(x9)
    1c02:	0000                	unimp
    1c04:	01930017          	auipc	x0,0x1930
    1c08:	62019363          	bnez	x3,222e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x3a>
    1c0c:	93590193          	addi	x3,x18,-1739
    1c10:	5801                	li	x16,-32
    1c12:	93570193          	addi	x3,x14,-1739 # 19935 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x17741>
    1c16:	5501                	li	x10,-32
    1c18:	936f0193          	addi	x3,x30,-1738
}
    1c1c:	b001                	j	141c <kernel_matrix_multiply_int8+0x98>
    1c1e:	0020                	addi	x8,x2,8
    1c20:	b800                	fsd	f8,48(x8)
    1c22:	0020                	addi	x8,x2,8
    1c24:	1800                	addi	x8,x2,48
    1c26:	6400                	flw	f8,8(x8)
    1c28:	93630193          	addi	x3,x6,-1738
    1c2c:	6201                	0x6201
    1c2e:	93590193          	addi	x3,x18,-1739
    1c32:	5801                	li	x16,-32
    1c34:	93570193          	addi	x3,x14,-1739
    1c38:	5501                	li	x10,-32
    1c3a:	936f0193          	addi	x3,x30,-1738
    1c3e:	b801                	j	144e <kernel_matrix_multiply_int8+0xca>
    1c40:	0020                	addi	x8,x2,8
    1c42:	c000                	sw	x8,0(x8)
    1c44:	0020                	addi	x8,x2,8
    1c46:	1700                	addi	x8,x2,928
    1c48:	6400                	flw	f8,8(x8)
    1c4a:	01930193          	addi	x3,x6,25
    1c4e:	9362                	add	x6,x6,x24
    1c50:	5901                	li	x18,-32
    1c52:	93580193          	addi	x3,x16,-1739
    1c56:	5701                	li	x14,-32
                        TC sum[F] = {{init}};
    1c58:	93550193          	addi	x3,x10,-1739
    1c5c:	6f01                	0x6f01
    1c5e:	20c00193          	li	x3,524
    1c62:	0000                	unimp
    1c64:	20cc                	fld	f11,128(x9)
    1c66:	0000                	unimp
    1c68:	0018                	0x18
    1c6a:	9364                	0x9364
    1c6c:	6301                	0x6301
    1c6e:	93620193          	addi	x3,x4,-1738 # fffff936 <_end+0x7efff8de>
    1c72:	5901                	li	x18,-32
    1c74:	93580193          	addi	x3,x16,-1739
    1c78:	5701                	li	x14,-32
    1c7a:	93550193          	addi	x3,x10,-1739
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c7e:	6f01                	0x6f01
        uint32_t incr = A_WIDTH * (F-1);
    1c80:	20cc0193          	addi	x3,x24,524
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c84:	0000                	unimp
    1c86:	20d0                	fld	f12,128(x9)
        uint32_t incr = A_WIDTH * (F-1);
    1c88:	0000                	unimp
    1c8a:	93640017          	auipc	x0,0x93640
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1c8e:	6301                	0x6301
    1c90:	01930193          	addi	x3,x6,25
    1c94:	9359                	srli	x14,x14,0x36
    1c96:	5801                	li	x16,-32
    1c98:	93570193          	addi	x3,x14,-1739
    1c9c:	5501                	li	x10,-32
    1c9e:	936f0193          	addi	x3,x30,-1738
    1ca2:	d001                	beqz	x8,1ba2 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x1c6>
    1ca4:	0020                	addi	x8,x2,8
    1ca6:	dc00                	sw	x8,56(x8)
    1ca8:	0020                	addi	x8,x2,8
    1caa:	1800                	addi	x8,x2,48
    1cac:	6400                	flw	f8,8(x8)
    1cae:	93630193          	addi	x3,x6,-1738
    1cb2:	6201                	0x6201
    1cb4:	93590193          	addi	x3,x18,-1739
    1cb8:	5801                	li	x16,-32
    1cba:	93570193          	addi	x3,x14,-1739
    1cbe:	5501                	li	x10,-32
    1cc0:	936f0193          	addi	x3,x30,-1738
    1cc4:	dc01                	beqz	x8,1bdc <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x200>
    1cc6:	0020                	addi	x8,x2,8
    1cc8:	e000                	fsw	f8,0(x8)
    1cca:	0020                	addi	x8,x2,8
        uint32_t incr = A_WIDTH * (F-1);
    1ccc:	1700                	addi	x8,x2,928
    1cce:	6400                	flw	f8,8(x8)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1cd0:	93630193          	addi	x3,x6,-1738
    1cd4:	6201                	0x6201
    1cd6:	01930193          	addi	x3,x6,25
    1cda:	9358                	0x9358
    1cdc:	5701                	li	x14,-32
    1cde:	93550193          	addi	x3,x10,-1739
    1ce2:	6f01                	0x6f01
    1ce4:	20e00193          	li	x3,526
    1ce8:	0000                	unimp
    1cea:	20ec                	fld	f11,192(x9)
    1cec:	0000                	unimp
    1cee:	0018                	0x18
    1cf0:	9364                	0x9364
    1cf2:	6301                	0x6301
    1cf4:	93620193          	addi	x3,x4,-1738 # fffff936 <_end+0x7efff8de>
    1cf8:	5901                	li	x18,-32
    1cfa:	93580193          	addi	x3,x16,-1739
    1cfe:	5701                	li	x14,-32
    1d00:	93550193          	addi	x3,x10,-1739
    1d04:	6f01                	0x6f01
    1d06:	20ec0193          	addi	x3,x24,526
    1d0a:	0000                	unimp
    1d0c:	20f0                	fld	f12,192(x9)
    1d0e:	0000                	unimp
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1d10:	93640017          	auipc	x0,0x93640
    1d14:	6301                	0x6301
    1d16:	93620193          	addi	x3,x4,-1738 # fffff936 <_end+0x7efff8de>
    1d1a:	5901                	li	x18,-32
    1d1c:	01930193          	addi	x3,x6,25
    1d20:	55019357          	0x55019357
    1d24:	936f0193          	addi	x3,x30,-1738
    1d28:	f001                	bnez	x8,1c28 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x24c>
    1d2a:	0020                	addi	x8,x2,8
    1d2c:	fc00                	fsw	f8,56(x8)
    1d2e:	0020                	addi	x8,x2,8
    1d30:	1800                	addi	x8,x2,48
    1d32:	6400                	flw	f8,8(x8)
    1d34:	93630193          	addi	x3,x6,-1738
    1d38:	6201                	0x6201
    1d3a:	93590193          	addi	x3,x18,-1739
    1d3e:	5801                	li	x16,-32
    1d40:	93570193          	addi	x3,x14,-1739
    1d44:	5501                	li	x10,-32
    1d46:	936f0193          	addi	x3,x30,-1738
    1d4a:	fc01                	bnez	x8,1c62 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EiiiEiPT0_PT1_PT2_mmm+0x286>
    1d4c:	0020                	addi	x8,x2,8
    1d4e:	0000                	unimp
                boff = 0;
    1d50:	0021                	c.nop	8
    1d52:	1700                	addi	x8,x2,928
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1d54:	6400                	flw	f8,8(x8)
    1d56:	93630193          	addi	x3,x6,-1738
    1d5a:	6201                	0x6201
    1d5c:	93590193          	addi	x3,x18,-1739
    1d60:	5801                	li	x16,-32
    1d62:	01930193          	addi	x3,x6,25
    1d66:	9355                	srli	x14,x14,0x35
                        TC sum[F] = {{init}};
    1d68:	6f01                	0x6f01
    1d6a:	21000193          	li	x3,528
    1d6e:	0000                	unimp
    1d70:	210c                	fld	f11,0(x10)
    1d72:	0000                	unimp
    1d74:	0018                	0x18
    1d76:	9364                	0x9364
    1d78:	6301                	0x6301
    1d7a:	93620193          	addi	x3,x4,-1738 # fffff936 <_end+0x7efff8de>
    1d7e:	5901                	li	x18,-32
    1d80:	93580193          	addi	x3,x16,-1739
    1d84:	5701                	li	x14,-32
    1d86:	93550193          	addi	x3,x10,-1739
    1d8a:	6f01                	0x6f01
    1d8c:	210c0193          	addi	x3,x24,528
    1d90:	0000                	unimp
    1d92:	2110                	fld	f12,0(x10)
    1d94:	0000                	unimp
    1d96:	93640017          	auipc	x0,0x93640
    1d9a:	6301                	0x6301
    1d9c:	93620193          	addi	x3,x4,-1738 # fffff936 <_end+0x7efff8de>
    1da0:	5901                	li	x18,-32
    1da2:	93580193          	addi	x3,x16,-1739
    1da6:	5701                	li	x14,-32
    1da8:	01930193          	addi	x3,x6,25
                                        sum[f] += A[aoff] * BT[bofff];
    1dac:	1001936f          	jal	x6,1aeac <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x18cb8>
    1db0:	0021                	c.nop	8
    1db2:	1800                	addi	x8,x2,48
    1db4:	0021                	c.nop	8
    1db6:	1800                	addi	x8,x2,48
    1db8:	6400                	flw	f8,8(x8)
    1dba:	93630193          	addi	x3,x6,-1738
    1dbe:	6201                	0x6201
    1dc0:	93590193          	addi	x3,x18,-1739
    1dc4:	5801                	li	x16,-32
    1dc6:	93570193          	addi	x3,x14,-1739
    1dca:	5501                	li	x10,-32
    1dcc:	936f0193          	addi	x3,x30,-1738
    1dd0:	1801                	addi	x16,x16,-32
    1dd2:	0021                	c.nop	8
    1dd4:	1c00                	addi	x8,x2,560
    1dd6:	0021                	c.nop	8
    1dd8:	1700                	addi	x8,x2,928
    1dda:	6400                	flw	f8,8(x8)
    1ddc:	93630193          	addi	x3,x6,-1738
    1de0:	6201                	0x6201
    1de2:	93590193          	addi	x3,x18,-1739
    1de6:	5801                	li	x16,-32
    1de8:	93570193          	addi	x3,x14,-1739
    1dec:	5501                	li	x10,-32
    1dee:	01930193          	addi	x3,x6,25
    1df2:	211c                	fld	f15,0(x10)
    1df4:	0000                	unimp
    1df6:	2120                	fld	f8,64(x10)
    1df8:	0000                	unimp
    1dfa:	0018                	0x18
    1dfc:	9364                	0x9364
    1dfe:	6301                	0x6301
    1e00:	93620193          	addi	x3,x4,-1738 # fffff936 <_end+0x7efff8de>
    1e04:	5901                	li	x18,-32
    1e06:	93580193          	addi	x3,x16,-1739
    1e0a:	5701                	li	x14,-32
    1e0c:	93550193          	addi	x3,x10,-1739
    1e10:	6f01                	0x6f01
    1e12:	21200193          	li	x3,530
    1e16:	0000                	unimp
    1e18:	2158                	fld	f14,128(x10)
    1e1a:	0000                	unimp
    1e1c:	0018                	0x18
    1e1e:	9364                	0x9364
    1e20:	6301                	0x6301
    1e22:	93620193          	addi	x3,x4,-1738 # fffff936 <_end+0x7efff8de>
    1e26:	5901                	li	x18,-32
    1e28:	93580193          	addi	x3,x16,-1739
    1e2c:	5701                	li	x14,-32
    1e2e:	93550193          	addi	x3,x10,-1739
    1e32:	6f01                	0x6f01
    1e34:	21d00193          	li	x3,541
    1e38:	0000                	unimp
    1e3a:	21f4                	fld	f13,192(x11)
    1e3c:	0000                	unimp
    1e3e:	0020                	addi	x8,x2,8
    1e40:	9f30                	0x9f30
    1e42:	9f300193          	li	x3,-1549
    1e46:	9f300193          	li	x3,-1549
    1e4a:	9f300193          	li	x3,-1549
    1e4e:	9f300193          	li	x3,-1549
    1e52:	9f300193          	li	x3,-1549
    1e56:	9f300193          	li	x3,-1549
    1e5a:	9f300193          	li	x3,-1549
    1e5e:	00000193          	li	x3,0
    1e62:	0000                	unimp
    1e64:	0000                	unimp
    1e66:	0000                	unimp
    1e68:	200c                	fld	f11,0(x8)
    1e6a:	0000                	unimp
    1e6c:	2054                	fld	f13,128(x8)
    1e6e:	0000                	unimp
    1e70:	a4910003          	lb	x0,-1463(x2) # b0b0083 <_bsg_elf_vcache_size+0xb090083>
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    1e74:	547f                	0x547f
    1e76:	0020                	addi	x8,x2,8
    1e78:	9800                	0x9800
    1e7a:	0020                	addi	x8,x2,8
                        boff += incr;
    1e7c:	0700                	addi	x8,x2,896
    1e7e:	8d00                	0x8d00
                                C[coff + f] = sum[f];
    1e80:	f300                	fsw	f8,32(x14)
    1e82:	5a01                	li	x20,-32
    1e84:	9f1c                	0x9f1c
    1e86:	2098                	fld	f14,0(x9)
                        boff += incr;
    1e88:	0000                	unimp
    1e8a:	211c                	fld	f15,0(x10)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1e8c:	0000                	unimp
    1e8e:	0008                	0x8
                                C[coff + f] = sum[f];
    1e90:	205a01f3          	0x205a01f3
    1e94:	008d                	addi	x1,x1,3
    1e96:	9f22                	add	x30,x30,x8
    1e98:	21d0                	fld	f12,128(x11)
    1e9a:	0000                	unimp
    1e9c:	21f4                	fld	f13,192(x11)
    1e9e:	0000                	unimp
    1ea0:	0001                	nop
    1ea2:	005e                	c.slli	x0,0x17
    1ea4:	0000                	unimp
    1ea6:	0000                	unimp
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1ea8:	0000                	unimp
    1eaa:	5400                	lw	x8,40(x8)
    1eac:	0020                	addi	x8,x2,8
    1eae:	b000                	fsd	f8,32(x8)
    1eb0:	0020                	addi	x8,x2,8
    1eb2:	0200                	addi	x8,x2,256
    1eb4:	3000                	fld	f8,32(x8)
    1eb6:	b09f 0020 c000      	0xc0000020b09f
    1ebc:	0020                	addi	x8,x2,8
    1ebe:	0200                	addi	x8,x2,256
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1ec0:	3100                	fld	f8,32(x10)
    1ec2:	c09f 0020 d000      	0xd0000020c09f
    1ec8:	0020                	addi	x8,x2,8
    1eca:	0200                	addi	x8,x2,256
    1ecc:	3200                	fld	f8,32(x12)
    1ece:	d09f 0020 e000      	0xe0000020d09f
    1ed4:	0020                	addi	x8,x2,8
    1ed6:	0200                	addi	x8,x2,256
    1ed8:	3300                	fld	f8,32(x14)
    1eda:	e09f 0020 f000      	0xf0000020e09f
    1ee0:	0020                	addi	x8,x2,8
    1ee2:	0200                	addi	x8,x2,256
    1ee4:	3400                	fld	f8,40(x8)
    1ee6:	f09f 0020 0000      	0x20f09f
    1eec:	0021                	c.nop	8
    1eee:	0200                	addi	x8,x2,256
    1ef0:	3500                	fld	f8,40(x10)
    1ef2:	009f 0021 1000      	0x10000021009f
}
    1ef8:	0021                	c.nop	8
    1efa:	0200                	addi	x8,x2,256
    1efc:	3600                	fld	f8,40(x12)
    1efe:	109f 0021 1c00      	0x1c000021109f
    1f04:	0021                	c.nop	8
    1f06:	0200                	addi	x8,x2,256
    1f08:	3700                	fld	f8,40(x14)
    1f0a:	1c9f 0021 2000      	0x200000211c9f
    1f10:	0021                	c.nop	8
    1f12:	0200                	addi	x8,x2,256
    1f14:	3800                	fld	f8,48(x8)
    1f16:	009f 0000 0000      	0x9f
    1f1c:	0000                	unimp
    1f1e:	2000                	fld	f8,0(x8)
    1f20:	0021                	c.nop	8
    1f22:	2c00                	fld	f8,24(x8)
    1f24:	0021                	c.nop	8
    1f26:	0200                	addi	x8,x2,256
    1f28:	3000                	fld	f8,32(x8)
    1f2a:	2c9f 0021 4000      	0x400000212c9f
                        TC sum[F] = {{init}};
    1f30:	0021                	c.nop	8
    1f32:	0200                	addi	x8,x2,256
    1f34:	3100                	fld	f8,32(x10)
    1f36:	409f 0021 4400      	0x44000021409f
    1f3c:	0021                	c.nop	8
    1f3e:	0200                	addi	x8,x2,256
    1f40:	3200                	fld	f8,32(x12)
    1f42:	449f 0021 4800      	0x48000021449f
    1f48:	0021                	c.nop	8
    1f4a:	0200                	addi	x8,x2,256
    1f4c:	3300                	fld	f8,32(x14)
    1f4e:	489f 0021 4c00      	0x4c000021489f
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f54:	0021                	c.nop	8
    1f56:	0200                	addi	x8,x2,256
    1f58:	3400                	fld	f8,40(x8)
    1f5a:	4c9f 0021 5000      	0x500000214c9f
    1f60:	0021                	c.nop	8
    1f62:	0200                	addi	x8,x2,256
        uint32_t incr = A_WIDTH * (F-1);
    1f64:	3500                	fld	f8,40(x10)
    1f66:	509f 0021 5400      	0x54000021509f
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    1f6c:	0021                	c.nop	8
    1f6e:	0200                	addi	x8,x2,256
    1f70:	3600                	fld	f8,40(x12)
    1f72:	549f 0021 5800      	0x58000021549f
    1f78:	0021                	c.nop	8
    1f7a:	0200                	addi	x8,x2,256
    1f7c:	3700                	fld	f8,40(x14)
    1f7e:	589f 0021 6400      	0x64000021589f
    1f84:	0021                	c.nop	8
    1f86:	0200                	addi	x8,x2,256
    1f88:	3800                	fld	f8,48(x8)
    1f8a:	009f 0000 0000      	0x9f
    1f90:	0000                	unimp
    1f92:	7c00                	flw	f8,56(x8)
    1f94:	001c                	0x1c
    1f96:	1000                	addi	x8,x2,32
    1f98:	001d                	c.nop	7
    1f9a:	0100                	addi	x8,x2,128
    1f9c:	5a00                	lw	x8,48(x12)
    1f9e:	1d10                	addi	x12,x2,688
    1fa0:	0000                	unimp
    1fa2:	1f54                	addi	x13,x2,948
        uint32_t incr = A_WIDTH * (F-1);
    1fa4:	0000                	unimp
    1fa6:	0004                	0x4
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    1fa8:	9f5a01f3          	0x9f5a01f3
	...
    1fb4:	1c7c                	addi	x15,x2,572
    1fb6:	0000                	unimp
    1fb8:	1c8c                	addi	x11,x2,624
    1fba:	0000                	unimp
    1fbc:	0001                	nop
    1fbe:	001c8c5b          	0x1c8c5b
    1fc2:	2c00                	fld	f8,24(x8)
    1fc4:	001f 0300 9100      	0x91000300001f
    1fca:	7fac                	flw	f11,120(x15)
    1fcc:	1f2c                	addi	x11,x2,952
    1fce:	0000                	unimp
    1fd0:	1f30                	addi	x12,x2,952
    1fd2:	0000                	unimp
    1fd4:	ac720003          	lb	x0,-1337(x4) # fffffac7 <_end+0x7efffa6f>
    1fd8:	307f                	0x307f
    1fda:	001f 5400 001f      	0x1f5400001f
    1fe0:	0300                	addi	x8,x2,384
    1fe2:	9100                	0x9100
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    1fe4:	7fac                	flw	f11,120(x15)
	...
    1fee:	1c7c                	addi	x15,x2,572
    1ff0:	0000                	unimp
    1ff2:	1d10                	addi	x12,x2,688
    1ff4:	0000                	unimp
    1ff6:	0001                	nop
    1ff8:	105c                	addi	x15,x2,36
    1ffa:	001d                	c.nop	7
                boff = 0;
    1ffc:	2c00                	fld	f8,24(x8)
    1ffe:	001f 0300 9100      	0x91000300001f
    2004:	7fbc                	flw	f15,120(x15)
    2006:	1f2c                	addi	x11,x2,952
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2008:	0000                	unimp
    200a:	1f30                	addi	x12,x2,952
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    200c:	0000                	unimp
    200e:	bc720003          	lb	x0,-1081(x4) # fffffbc7 <_end+0x7efffb6f>
    2012:	307f                	0x307f
    2014:	001f 5400 001f      	0x1f5400001f
    201a:	0300                	addi	x8,x2,384
    201c:	9100                	0x9100
    201e:	7fbc                	flw	f15,120(x15)
	...
    2028:	1c7c                	addi	x15,x2,572
    202a:	0000                	unimp
                        TC sum[F] = {{init}};
    202c:	1d10                	addi	x12,x2,688
    202e:	0000                	unimp
    2030:	0001                	nop
    2032:	105d                	c.nop	-9
    2034:	001d                	c.nop	7
    2036:	2c00                	fld	f8,24(x8)
    2038:	001f 0200 9100      	0x91000200001f
    203e:	2c40                	fld	f8,152(x8)
    2040:	001f 3000 001f      	0x1f3000001f
    2046:	0200                	addi	x8,x2,256
    2048:	7200                	flw	f8,32(x12)
    204a:	3040                	fld	f8,160(x8)
    204c:	001f 5400 001f      	0x1f5400001f
    2052:	0200                	addi	x8,x2,256
                                        sum[f] += A[aoff] * BT[bofff];
    2054:	9100                	0x9100
    2056:	0040                	addi	x8,x2,4
    2058:	0000                	unimp
    205a:	0000                	unimp
    205c:	0000                	unimp
    205e:	7c00                	flw	f8,56(x8)
    2060:	001c                	0x1c
    2062:	e000                	fsw	f8,0(x8)
    2064:	001c                	0x1c
    2066:	0100                	addi	x8,x2,128
    2068:	5e00                	lw	x8,56(x12)
    206a:	1ce0                	addi	x8,x2,636
    206c:	0000                	unimp
    206e:	1f2c                	addi	x11,x2,952
    2070:	0000                	unimp
    2072:	a0910003          	lb	x0,-1527(x2)
    2076:	2c7f                	0x2c7f
    2078:	001f 3000 001f      	0x1f3000001f
    207e:	0300                	addi	x8,x2,384
    2080:	7200                	flw	f8,32(x12)
    2082:	7fa0                	flw	f8,120(x15)
    2084:	1f30                	addi	x12,x2,952
    2086:	0000                	unimp
    2088:	1f54                	addi	x13,x2,948
    208a:	0000                	unimp
    208c:	a0910003          	lb	x0,-1527(x2)
    2090:	007f                	0x7f
    2092:	0000                	unimp
    2094:	0000                	unimp
    2096:	0000                	unimp
    2098:	7c00                	flw	f8,56(x8)
    209a:	001c                	0x1c
    209c:	d800                	sw	x8,48(x8)
    209e:	001c                	0x1c
    20a0:	0100                	addi	x8,x2,128
    20a2:	5f00                	lw	x8,56(x14)
    20a4:	1cd8                	addi	x14,x2,628
    20a6:	0000                	unimp
    20a8:	1f2c                	addi	x11,x2,952
    20aa:	0000                	unimp
    20ac:	0002                	c.slli64	x0
    20ae:	4491                	li	x9,4
    20b0:	1f2c                	addi	x11,x2,952
    20b2:	0000                	unimp
    20b4:	1f30                	addi	x12,x2,952
    20b6:	0000                	unimp
    20b8:	0002                	c.slli64	x0
    20ba:	4472                	lw	x8,28(x2)
    20bc:	1f30                	addi	x12,x2,952
    20be:	0000                	unimp
    20c0:	1f54                	addi	x13,x2,948
    20c2:	0000                	unimp
    20c4:	0002                	c.slli64	x0
    20c6:	4491                	li	x9,4
	...
    20d0:	1cd0                	addi	x12,x2,628
    20d2:	0000                	unimp
    20d4:	1d10                	addi	x12,x2,688
    20d6:	0000                	unimp
    20d8:	0001                	nop
    20da:	001d105b          	0x1d105b
    20de:	2c00                	fld	f8,24(x8)
    20e0:	001f 0300 9100      	0x91000300001f
    20e6:	7fa4                	flw	f9,120(x15)
    20e8:	1f2c                	addi	x11,x2,952
    20ea:	0000                	unimp
    20ec:	1f30                	addi	x12,x2,952
    20ee:	0000                	unimp
    20f0:	a4720003          	lb	x0,-1465(x4) # fffffa47 <_end+0x7efff9ef>
    20f4:	307f                	0x307f
    20f6:	001f 5400 001f      	0x1f5400001f
    20fc:	0300                	addi	x8,x2,384
    20fe:	9100                	0x9100
    2100:	7fa4                	flw	f9,120(x15)
	...
    210a:	1cd0                	addi	x12,x2,628
    210c:	0000                	unimp
    210e:	1d10                	addi	x12,x2,688
    2110:	0000                	unimp
    2112:	0002                	c.slli64	x0
    2114:	9f30                	0x9f30
    2116:	1d10                	addi	x12,x2,688
    2118:	0000                	unimp
    211a:	1ee4                	addi	x9,x2,892
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    211c:	0000                	unimp
    211e:	b4910003          	lb	x0,-1207(x2)
                        for (uint32_t f = 0; f < F; f++){
    2122:	e47f                	0xe47f
                        boff += incr;
    2124:	001e                	c.slli	x0,0x7
    2126:	f400                	fsw	f8,40(x8)
                                C[coff + f] = sum[f];
    2128:	001e                	c.slli	x0,0x7
    212a:	0100                	addi	x8,x2,128
                        for (uint32_t f = 0; f < F; f++){
    212c:	5f00                	lw	x8,56(x14)
    212e:	1f30                	addi	x12,x2,952
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2130:	0000                	unimp
    2132:	1f54                	addi	x13,x2,948
                        boff += incr;
    2134:	0000                	unimp
    2136:	b4910003          	lb	x0,-1207(x2)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    213a:	007f                	0x7f
                                C[coff + f] = sum[f];
    213c:	0000                	unimp
    213e:	0000                	unimp
    2140:	0000                	unimp
    2142:	d000                	sw	x8,32(x8)
    2144:	001c                	0x1c
    2146:	1000                	addi	x8,x2,32
    2148:	001d                	c.nop	7
    214a:	0200                	addi	x8,x2,256
    214c:	3000                	fld	f8,32(x8)
    214e:	109f 001d 2000      	0x2000001d109f
    2154:	001d                	c.nop	7
    2156:	0300                	addi	x8,x2,384
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2158:	9100                	0x9100
    215a:	7f94                	flw	f13,56(x15)
    215c:	1ee4                	addi	x9,x2,892
    215e:	0000                	unimp
    2160:	1ef4                	addi	x13,x2,892
    2162:	0000                	unimp
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    2164:	0008                	0x8
    2166:	007d                	c.nop	31
    2168:	9491                	srai	x9,x9,0x24
    216a:	067f                	0x67f
    216c:	9f22                	add	x30,x30,x8
	...
    2176:	1cd0                	addi	x12,x2,628
    2178:	0000                	unimp
    217a:	1d54                	addi	x13,x2,692
    217c:	0000                	unimp
    217e:	0002                	c.slli64	x0
    2180:	9f30                	0x9f30
    2182:	1d54                	addi	x13,x2,692
    2184:	0000                	unimp
    2186:	1d7c                	addi	x15,x2,700
    2188:	0000                	unimp
    218a:	0001                	nop
    218c:	a85f 001e b400      	0xb400001ea85f
    2192:	001e                	c.slli	x0,0x7
}
    2194:	0100                	addi	x8,x2,128
    2196:	5f00                	lw	x8,56(x14)
    2198:	1f30                	addi	x12,x2,952
    219a:	0000                	unimp
    219c:	1f54                	addi	x13,x2,948
    219e:	0000                	unimp
    21a0:	0001                	nop
    21a2:	005f 0000 0000      	0x5f
    21a8:	0000                	unimp
    21aa:	d000                	sw	x8,32(x8)
    21ac:	001c                	0x1c
    21ae:	1000                	addi	x8,x2,32
    21b0:	001d                	c.nop	7
    21b2:	0200                	addi	x8,x2,256
    21b4:	3000                	fld	f8,32(x8)
    21b6:	109f 001d 5400      	0x5400001d109f
    21bc:	001d                	c.nop	7
    21be:	0300                	addi	x8,x2,384
    21c0:	9100                	0x9100
    21c2:	7fb0                	flw	f12,120(x15)
    21c4:	1ee4                	addi	x9,x2,892
    21c6:	0000                	unimp
    21c8:	1ef4                	addi	x13,x2,892
    21ca:	0000                	unimp
    21cc:	b0910003          	lb	x0,-1271(x2)
                        TC sum[F] = {{init}};
    21d0:	007f                	0x7f
    21d2:	0000                	unimp
    21d4:	0000                	unimp
    21d6:	0000                	unimp
    21d8:	1000                	addi	x8,x2,32
    21da:	001d                	c.nop	7
    21dc:	5400                	lw	x8,40(x8)
    21de:	001d                	c.nop	7
    21e0:	0200                	addi	x8,x2,256
    21e2:	3000                	fld	f8,32(x8)
    21e4:	009f 0000 0000      	0x9f
    21ea:	0000                	unimp
    21ec:	5400                	lw	x8,40(x8)
    21ee:	001d                	c.nop	7
    21f0:	ac00                	fsd	f8,24(x8)
    21f2:	001d                	c.nop	7
int __attribute__ ((noinline)) kernel_matrix_multiply_transpose_nomul_unroll_init (
    21f4:	0200                	addi	x8,x2,256
    21f6:	3000                	fld	f8,32(x8)
    21f8:	309f 001f 5400      	0x5400001f309f
    21fe:	001f 0200 3000      	0x30000200001f
    2204:	009f 0000 0000      	0x9f
    220a:	0000                	unimp
    220c:	5400                	lw	x8,40(x8)
    220e:	001d                	c.nop	7
    2210:	ac00                	fsd	f8,24(x8)
    2212:	001d                	c.nop	7
    2214:	2000                	fld	f8,0(x8)
    2216:	3000                	fld	f8,32(x8)
    2218:	939f 3002 939f      	0x939f3002939f
    221e:	3002                	fld	f0,32(x2)
    2220:	939f 3002 939f      	0x939f3002939f
    2226:	3002                	fld	f0,32(x2)
    2228:	939f 3002 939f      	0x939f3002939f
        uint32_t incr = A_WIDTH * (F-1);
    222e:	3002                	fld	f0,32(x2)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    2230:	939f 3002 939f      	0x939f3002939f
    2236:	ac02                	fsd	f0,24(x2)
    2238:	001d                	c.nop	7
    223a:	0000                	unimp
    223c:	001e                	c.slli	x0,0x7
    223e:	1800                	addi	x8,x2,48
    2240:	6500                	flw	f8,8(x10)
    2242:	93640293          	addi	x5,x8,-1738
    2246:	6302                	flw	f6,0(x2)
    2248:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
    224c:	5902                	lw	x18,32(x2)
    224e:	93580293          	addi	x5,x16,-1739
    2252:	5702                	lw	x14,32(x2)
    2254:	93550293          	addi	x5,x10,-1739
    2258:	0002                	c.slli64	x0
    225a:	001e                	c.slli	x0,0x7
    225c:	0800                	addi	x8,x2,16
    225e:	001e                	c.slli	x0,0x7
    2260:	1700                	addi	x8,x2,928
    2262:	9300                	0x9300
    2264:	6402                	flw	f8,0(x2)
    2266:	93630293          	addi	x5,x6,-1738
    226a:	6202                	flw	f4,0(x2)
    226c:	93590293          	addi	x5,x18,-1739
    2270:	5802                	lw	x16,32(x2)
    2272:	93570293          	addi	x5,x14,-1739
    2276:	5502                	lw	x10,32(x2)
    2278:	1e080293          	addi	x5,x16,480
    227c:	0000                	unimp
    227e:	1e10                	addi	x12,x2,816
    2280:	0000                	unimp
    2282:	0018                	0x18
    2284:	9365                	srli	x14,x14,0x39
    2286:	6402                	flw	f8,0(x2)
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    2288:	93630293          	addi	x5,x6,-1738
    228c:	6202                	flw	f4,0(x2)
    228e:	93590293          	addi	x5,x18,-1739
    2292:	5802                	lw	x16,32(x2)
    2294:	93570293          	addi	x5,x14,-1739
    2298:	5502                	lw	x10,32(x2)
    229a:	1e100293          	li	x5,481
    229e:	0000                	unimp
    22a0:	1e18                	addi	x14,x2,816
    22a2:	0000                	unimp
    22a4:	93650017          	auipc	x0,0x93650
    22a8:	9302                	jalr	x6
    22aa:	6302                	flw	f6,0(x2)
                boff = 0;
    22ac:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    22b0:	5902                	lw	x18,32(x2)
    22b2:	93580293          	addi	x5,x16,-1739
                        TC sum[F] = {{init}};
    22b6:	5702                	lw	x14,32(x2)
    22b8:	93550293          	addi	x5,x10,-1739
    22bc:	1802                	slli	x16,x16,0x20
    22be:	001e                	c.slli	x0,0x7
    22c0:	2400                	fld	f8,8(x8)
    22c2:	001e                	c.slli	x0,0x7
    22c4:	1800                	addi	x8,x2,48
    22c6:	6500                	flw	f8,8(x10)
    22c8:	93640293          	addi	x5,x8,-1738
    22cc:	6302                	flw	f6,0(x2)
    22ce:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
    22d2:	5902                	lw	x18,32(x2)
    22d4:	93580293          	addi	x5,x16,-1739
    22d8:	5702                	lw	x14,32(x2)
    22da:	93550293          	addi	x5,x10,-1739
    22de:	2402                	fld	f8,0(x2)
    22e0:	001e                	c.slli	x0,0x7
    22e2:	2800                	fld	f8,16(x8)
    22e4:	001e                	c.slli	x0,0x7
    22e6:	1700                	addi	x8,x2,928
    22e8:	6500                	flw	f8,8(x10)
    22ea:	93640293          	addi	x5,x8,-1738
    22ee:	9302                	jalr	x6
    22f0:	6202                	flw	f4,0(x2)
    22f2:	93590293          	addi	x5,x18,-1739
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    22f6:	5802                	lw	x16,32(x2)
                                        sum[f] += A[aoff] * BT[bofff];
    22f8:	93570293          	addi	x5,x14,-1739
    22fc:	5502                	lw	x10,32(x2)
    22fe:	1e280293          	addi	x5,x16,482
    2302:	0000                	unimp
    2304:	1e34                	addi	x13,x2,824
    2306:	0000                	unimp
    2308:	0018                	0x18
    230a:	9365                	srli	x14,x14,0x39
    230c:	6402                	flw	f8,0(x2)
    230e:	93630293          	addi	x5,x6,-1738
    2312:	6202                	flw	f4,0(x2)
    2314:	93590293          	addi	x5,x18,-1739
    2318:	5802                	lw	x16,32(x2)
    231a:	93570293          	addi	x5,x14,-1739
    231e:	5502                	lw	x10,32(x2)
    2320:	1e340293          	addi	x5,x8,483
    2324:	0000                	unimp
    2326:	1e38                	addi	x14,x2,824
    2328:	0000                	unimp
    232a:	93650017          	auipc	x0,0x93650
    232e:	6402                	flw	f8,0(x2)
    2330:	93630293          	addi	x5,x6,-1738
    2334:	9302                	jalr	x6
    2336:	5902                	lw	x18,32(x2)
    2338:	93580293          	addi	x5,x16,-1739
    233c:	5702                	lw	x14,32(x2)
    233e:	93550293          	addi	x5,x10,-1739
    2342:	3802                	fld	f16,32(x2)
    2344:	001e                	c.slli	x0,0x7
    2346:	4400                	lw	x8,8(x8)
    2348:	001e                	c.slli	x0,0x7
    234a:	1800                	addi	x8,x2,48
    234c:	6500                	flw	f8,8(x10)
    234e:	93640293          	addi	x5,x8,-1738
    2352:	6302                	flw	f6,0(x2)
    2354:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
    2358:	5902                	lw	x18,32(x2)
    235a:	93580293          	addi	x5,x16,-1739
    235e:	5702                	lw	x14,32(x2)
    2360:	93550293          	addi	x5,x10,-1739
    2364:	4402                	lw	x8,0(x2)
    2366:	001e                	c.slli	x0,0x7
    2368:	4800                	lw	x8,16(x8)
    236a:	001e                	c.slli	x0,0x7
    236c:	1700                	addi	x8,x2,928
    236e:	6500                	flw	f8,8(x10)
    2370:	93640293          	addi	x5,x8,-1738
                        for (uint32_t aoff = ayoff; aoff < ayoff + A_WIDTH; aoff++, ++boff) {
    2374:	6302                	flw	f6,0(x2)
    2376:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
    237a:	9302                	jalr	x6
    237c:	5802                	lw	x16,32(x2)
    237e:	93570293          	addi	x5,x14,-1739
    2382:	5502                	lw	x10,32(x2)
    2384:	1e480293          	addi	x5,x16,484
                                C[coff + f] = sum[f];
    2388:	0000                	unimp
    238a:	1e54                	addi	x13,x2,820
    238c:	0000                	unimp
    238e:	0018                	0x18
    2390:	9365                	srli	x14,x14,0x39
    2392:	6402                	flw	f8,0(x2)
    2394:	93630293          	addi	x5,x6,-1738
    2398:	6202                	flw	f4,0(x2)
    239a:	93590293          	addi	x5,x18,-1739
    239e:	5802                	lw	x16,32(x2)
    23a0:	93570293          	addi	x5,x14,-1739
    23a4:	5502                	lw	x10,32(x2)
    23a6:	1e540293          	addi	x5,x8,485
                        for (uint32_t f = 0; f < F; f++){
    23aa:	0000                	unimp
                        boff += incr;
    23ac:	1e58                	addi	x14,x2,820
    23ae:	0000                	unimp
                for (uint32_t x = 0; x < B_WIDTH; x += F) {
    23b0:	93650017          	auipc	x0,0x93650
    23b4:	6402                	flw	f8,0(x2)
    23b6:	93630293          	addi	x5,x6,-1738
    23ba:	6202                	flw	f4,0(x2)
        for (uint32_t y = 0, ayoff = 0, boff = 0, coff = 0; y < A_HEIGHT; y ++, ayoff += A_WIDTH) {
    23bc:	93590293          	addi	x5,x18,-1739
    23c0:	9302                	jalr	x6
    23c2:	5702                	lw	x14,32(x2)
    23c4:	93550293          	addi	x5,x10,-1739
    23c8:	5802                	lw	x16,32(x2)
    23ca:	001e                	c.slli	x0,0x7
    23cc:	6400                	flw	f8,8(x8)
    23ce:	001e                	c.slli	x0,0x7
}
    23d0:	1800                	addi	x8,x2,48
    23d2:	6500                	flw	f8,8(x10)
    23d4:	93640293          	addi	x5,x8,-1738
    23d8:	6302                	flw	f6,0(x2)
    23da:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
    23de:	5902                	lw	x18,32(x2)
    23e0:	93580293          	addi	x5,x16,-1739
    23e4:	5702                	lw	x14,32(x2)
    23e6:	93550293          	addi	x5,x10,-1739
    23ea:	6402                	flw	f8,0(x2)
    23ec:	001e                	c.slli	x0,0x7
    23ee:	6800                	flw	f8,16(x8)
    23f0:	001e                	c.slli	x0,0x7
    23f2:	1700                	addi	x8,x2,928
    23f4:	6500                	flw	f8,8(x10)
    23f6:	93640293          	addi	x5,x8,-1738
    23fa:	6302                	flw	f6,0(x2)
    23fc:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
    2400:	5902                	lw	x18,32(x2)
    2402:	93580293          	addi	x5,x16,-1739
    2406:	9302                	jalr	x6
    2408:	5502                	lw	x10,32(x2)
    240a:	1e680293          	addi	x5,x16,486
                        TC sum[F] = {{init}};
    240e:	0000                	unimp
    2410:	1e70                	addi	x12,x2,828
    2412:	0000                	unimp
    2414:	0018                	0x18
    2416:	9365                	srli	x14,x14,0x39
    2418:	6402                	flw	f8,0(x2)
    241a:	93630293          	addi	x5,x6,-1738
    241e:	6202                	flw	f4,0(x2)
    2420:	93590293          	addi	x5,x18,-1739
    2424:	5802                	lw	x16,32(x2)
    2426:	93570293          	addi	x5,x14,-1739
    242a:	5502                	lw	x10,32(x2)
    242c:	1e700293          	li	x5,487
    2430:	0000                	unimp
    2432:	1e74                	addi	x13,x2,828
    2434:	0000                	unimp
    2436:	93650017          	auipc	x0,0x93650
    243a:	6402                	flw	f8,0(x2)
    243c:	93630293          	addi	x5,x6,-1738
    2440:	6202                	flw	f4,0(x2)
    2442:	93590293          	addi	x5,x18,-1739
    2446:	5802                	lw	x16,32(x2)
    2448:	93570293          	addi	x5,x14,-1739
    244c:	9302                	jalr	x6
    244e:	7402                	flw	f8,32(x2)
    2450:	001e                	c.slli	x0,0x7
    2452:	7c00                	flw	f8,56(x8)
    2454:	001e                	c.slli	x0,0x7
    2456:	1800                	addi	x8,x2,48
    2458:	6500                	flw	f8,8(x10)
    245a:	93640293          	addi	x5,x8,-1738
    245e:	6302                	flw	f6,0(x2)
    2460:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
    2464:	5902                	lw	x18,32(x2)
    2466:	93580293          	addi	x5,x16,-1739
    246a:	5702                	lw	x14,32(x2)
    246c:	93550293          	addi	x5,x10,-1739
    2470:	7c02                	flw	f24,32(x2)
    2472:	001e                	c.slli	x0,0x7
    2474:	a800                	fsd	f8,16(x8)
    2476:	001e                	c.slli	x0,0x7
    2478:	1800                	addi	x8,x2,48
    247a:	6500                	flw	f8,8(x10)
    247c:	93640293          	addi	x5,x8,-1738
    2480:	6302                	flw	f6,0(x2)
    2482:	93620293          	addi	x5,x4,-1738 # fffff936 <_end+0x7efff8de>
    2486:	5902                	lw	x18,32(x2)
    2488:	93580293          	addi	x5,x16,-1739
    248c:	5702                	lw	x14,32(x2)
    248e:	93550293          	addi	x5,x10,-1739
    2492:	3002                	fld	f0,32(x2)
    2494:	001f 5400 001f      	0x1f5400001f
    249a:	2000                	fld	f8,0(x8)
    249c:	3000                	fld	f8,32(x8)
    249e:	939f 3002 939f      	0x939f3002939f
    24a4:	3002                	fld	f0,32(x2)
    24a6:	939f 3002 939f      	0x939f3002939f
    24ac:	3002                	fld	f0,32(x2)
    24ae:	939f 3002 939f      	0x939f3002939f
    24b4:	3002                	fld	f0,32(x2)
    24b6:	939f 3002 939f      	0x939f3002939f
    24bc:	0002                	c.slli64	x0
    24be:	0000                	unimp
    24c0:	0000                	unimp
    24c2:	0000                	unimp
    24c4:	5400                	lw	x8,40(x8)
    24c6:	001d                	c.nop	7
    24c8:	ac00                	fsd	f8,24(x8)
    24ca:	001d                	c.nop	7
    24cc:	0300                	addi	x8,x2,384
    24ce:	9100                	0x9100
    24d0:	7f94                	flw	f13,56(x15)
    24d2:	1f30                	addi	x12,x2,952
    24d4:	0000                	unimp
    24d6:	1f54                	addi	x13,x2,948
    24d8:	0000                	unimp
    24da:	0001                	nop
    24dc:	005d                	c.nop	23
    24de:	0000                	unimp
    24e0:	0000                	unimp
    24e2:	0000                	unimp
    24e4:	ac00                	fsd	f8,24(x8)
    24e6:	001d                	c.nop	7
    24e8:	0800                	addi	x8,x2,16
    24ea:	001e                	c.slli	x0,0x7
    24ec:	0200                	addi	x8,x2,256
    24ee:	3000                	fld	f8,32(x8)
    24f0:	089f 001e 1800      	0x1800001e089f
    24f6:	001e                	c.slli	x0,0x7
    24f8:	0200                	addi	x8,x2,256
    24fa:	3100                	fld	f8,32(x10)
    24fc:	189f 001e 2800      	0x2800001e189f
    2502:	001e                	c.slli	x0,0x7
    2504:	0200                	addi	x8,x2,256
    2506:	3200                	fld	f8,32(x12)
    2508:	289f 001e 3800      	0x3800001e289f
    250e:	001e                	c.slli	x0,0x7
    2510:	0200                	addi	x8,x2,256
    2512:	3300                	fld	f8,32(x14)
    2514:	389f 001e 4800      	0x4800001e389f
    251a:	001e                	c.slli	x0,0x7
    251c:	0200                	addi	x8,x2,256
    251e:	3400                	fld	f8,40(x8)
    2520:	489f 001e 5800      	0x5800001e489f
    2526:	001e                	c.slli	x0,0x7
    2528:	0200                	addi	x8,x2,256
    252a:	3500                	fld	f8,40(x10)
    252c:	589f 001e 6800      	0x6800001e589f
    2532:	001e                	c.slli	x0,0x7
    2534:	0200                	addi	x8,x2,256
    2536:	3600                	fld	f8,40(x12)
    2538:	689f 001e 7400      	0x7400001e689f
    253e:	001e                	c.slli	x0,0x7
    2540:	0200                	addi	x8,x2,256
    2542:	3700                	fld	f8,40(x14)
    2544:	749f 001e 7c00      	0x7c00001e749f
    254a:	001e                	c.slli	x0,0x7
    254c:	0200                	addi	x8,x2,256
    254e:	3800                	fld	f8,48(x8)
    2550:	009f 0000 0000      	0x9f
    2556:	0000                	unimp
    2558:	7c00                	flw	f8,56(x8)
    255a:	001e                	c.slli	x0,0x7
    255c:	8400                	0x8400
    255e:	001e                	c.slli	x0,0x7
    2560:	0200                	addi	x8,x2,256
    2562:	3000                	fld	f8,32(x8)
    2564:	849f 001e 8800      	0x8800001e849f
    256a:	001e                	c.slli	x0,0x7
    256c:	0200                	addi	x8,x2,256
    256e:	3100                	fld	f8,32(x10)
    2570:	889f 001e 9400      	0x9400001e889f
    2576:	001e                	c.slli	x0,0x7
    2578:	0200                	addi	x8,x2,256
    257a:	3200                	fld	f8,32(x12)
    257c:	949f 001e 9800      	0x9800001e949f
    2582:	001e                	c.slli	x0,0x7
    2584:	0200                	addi	x8,x2,256
    2586:	3300                	fld	f8,32(x14)
    2588:	989f 001e 9c00      	0x9c00001e989f
    258e:	001e                	c.slli	x0,0x7
    2590:	0200                	addi	x8,x2,256
    2592:	3400                	fld	f8,40(x8)
    2594:	9c9f 001e a000      	0xa000001e9c9f
    259a:	001e                	c.slli	x0,0x7
    259c:	0200                	addi	x8,x2,256
    259e:	3500                	fld	f8,40(x10)
    25a0:	a09f 001e a400      	0xa400001ea09f
    25a6:	001e                	c.slli	x0,0x7
    25a8:	0200                	addi	x8,x2,256
    25aa:	3600                	fld	f8,40(x12)
    25ac:	a49f 001e a800      	0xa800001ea49f
    25b2:	001e                	c.slli	x0,0x7
    25b4:	0200                	addi	x8,x2,256
    25b6:	3700                	fld	f8,40(x14)
    25b8:	a89f 001e c000      	0xc000001ea89f
    25be:	001e                	c.slli	x0,0x7
    25c0:	0200                	addi	x8,x2,256
    25c2:	3800                	fld	f8,48(x8)
    25c4:	009f 0000 0000      	0x9f
    25ca:	0000                	unimp
    25cc:	dc00                	sw	x8,56(x8)
    25ce:	0019                	c.nop	6
    25d0:	7800                	flw	f8,48(x8)
    25d2:	001a                	c.slli	x0,0x6
    25d4:	0100                	addi	x8,x2,128
    25d6:	5a00                	lw	x8,48(x12)
    25d8:	1a78                	addi	x14,x2,316
    25da:	0000                	unimp
    25dc:	1c7c                	addi	x15,x2,572
    25de:	0000                	unimp
    25e0:	0004                	0x4
    25e2:	9f5a01f3          	0x9f5a01f3
	...
    25ee:	19dc                	addi	x15,x2,244
    25f0:	0000                	unimp
    25f2:	19f4                	addi	x13,x2,252
    25f4:	0000                	unimp
    25f6:	0001                	nop
    25f8:	0019f45b          	0x19f45b
    25fc:	5400                	lw	x8,40(x8)
    25fe:	001c                	0x1c
    2600:	0300                	addi	x8,x2,384
    2602:	9100                	0x9100
    2604:	7fac                	flw	f11,120(x15)
    2606:	1c54                	addi	x13,x2,564
    2608:	0000                	unimp
    260a:	1c58                	addi	x14,x2,564
    260c:	0000                	unimp
    260e:	ac720003          	lb	x0,-1337(x4) # fffffac7 <_end+0x7efffa6f>
    2612:	587f                	0x587f
    2614:	001c                	0x1c
    2616:	7c00                	flw	f8,56(x8)
    2618:	001c                	0x1c
    261a:	0300                	addi	x8,x2,384
    261c:	9100                	0x9100
    261e:	7fac                	flw	f11,120(x15)
	...
    2628:	19dc                	addi	x15,x2,244
    262a:	0000                	unimp
    262c:	1a78                	addi	x14,x2,316
    262e:	0000                	unimp
    2630:	0001                	nop
    2632:	785c                	flw	f15,52(x8)
    2634:	001a                	c.slli	x0,0x6
    2636:	5400                	lw	x8,40(x8)
    2638:	001c                	0x1c
    263a:	0300                	addi	x8,x2,384
    263c:	9100                	0x9100
    263e:	7fbc                	flw	f15,120(x15)
    2640:	1c54                	addi	x13,x2,564
    2642:	0000                	unimp
    2644:	1c58                	addi	x14,x2,564
    2646:	0000                	unimp
    2648:	bc720003          	lb	x0,-1081(x4) # fffffbc7 <_end+0x7efffb6f>
    264c:	587f                	0x587f
    264e:	001c                	0x1c
    2650:	7c00                	flw	f8,56(x8)
    2652:	001c                	0x1c
    2654:	0300                	addi	x8,x2,384
    2656:	9100                	0x9100
    2658:	7fbc                	flw	f15,120(x15)
	...
    2662:	19dc                	addi	x15,x2,244
    2664:	0000                	unimp
    2666:	1a78                	addi	x14,x2,316
    2668:	0000                	unimp
    266a:	0001                	nop
    266c:	785d                	lui	x16,0xffff7
    266e:	001a                	c.slli	x0,0x6
    2670:	5400                	lw	x8,40(x8)
    2672:	001c                	0x1c
    2674:	0200                	addi	x8,x2,256
    2676:	9100                	0x9100
    2678:	5440                	lw	x8,44(x8)
    267a:	001c                	0x1c
    267c:	5800                	lw	x8,48(x8)
    267e:	001c                	0x1c
    2680:	0200                	addi	x8,x2,256
    2682:	7200                	flw	f8,32(x12)
    2684:	5840                	lw	x8,52(x8)
    2686:	001c                	0x1c
    2688:	7c00                	flw	f8,56(x8)
    268a:	001c                	0x1c
    268c:	0200                	addi	x8,x2,256
    268e:	9100                	0x9100
    2690:	0040                	addi	x8,x2,4
    2692:	0000                	unimp
    2694:	0000                	unimp
    2696:	0000                	unimp
    2698:	dc00                	sw	x8,56(x8)
    269a:	0019                	c.nop	6
    269c:	ec00                	fsw	f8,24(x8)
    269e:	0019                	c.nop	6
    26a0:	0100                	addi	x8,x2,128
    26a2:	5e00                	lw	x8,56(x12)
    26a4:	19ec                	addi	x11,x2,252
    26a6:	0000                	unimp
    26a8:	1a78                	addi	x14,x2,316
    26aa:	0000                	unimp
    26ac:	0001                	nop
    26ae:	7860                	flw	f8,116(x8)
    26b0:	001a                	c.slli	x0,0x6
    26b2:	5400                	lw	x8,40(x8)
    26b4:	001c                	0x1c
    26b6:	0300                	addi	x8,x2,384
    26b8:	9100                	0x9100
    26ba:	7fa0                	flw	f8,120(x15)
    26bc:	1c54                	addi	x13,x2,564
    26be:	0000                	unimp
    26c0:	1c58                	addi	x14,x2,564
    26c2:	0000                	unimp
    26c4:	a0720003          	lb	x0,-1529(x4) # fffffa07 <_end+0x7efff9af>
    26c8:	587f                	0x587f
    26ca:	001c                	0x1c
    26cc:	7c00                	flw	f8,56(x8)
    26ce:	001c                	0x1c
    26d0:	0300                	addi	x8,x2,384
    26d2:	9100                	0x9100
    26d4:	7fa0                	flw	f8,120(x15)
	...
    26de:	19dc                	addi	x15,x2,244
    26e0:	0000                	unimp
    26e2:	1a3c                	addi	x15,x2,312
    26e4:	0000                	unimp
    26e6:	0001                	nop
    26e8:	3c5f 001a 5400      	0x5400001a3c5f
    26ee:	001c                	0x1c
    26f0:	0200                	addi	x8,x2,256
    26f2:	9100                	0x9100
    26f4:	5444                	lw	x9,44(x8)
    26f6:	001c                	0x1c
    26f8:	5800                	lw	x8,48(x8)
    26fa:	001c                	0x1c
    26fc:	0200                	addi	x8,x2,256
    26fe:	7200                	flw	f8,32(x12)
    2700:	5844                	lw	x9,52(x8)
    2702:	001c                	0x1c
    2704:	7c00                	flw	f8,56(x8)
    2706:	001c                	0x1c
    2708:	0200                	addi	x8,x2,256
    270a:	9100                	0x9100
    270c:	0044                	addi	x9,x2,4
    270e:	0000                	unimp
    2710:	0000                	unimp
    2712:	0000                	unimp
    2714:	3400                	fld	f8,40(x8)
    2716:	001a                	c.slli	x0,0x6
    2718:	7800                	flw	f8,48(x8)
    271a:	001a                	c.slli	x0,0x6
    271c:	0100                	addi	x8,x2,128
    271e:	5b00                	lw	x8,48(x14)
    2720:	1a78                	addi	x14,x2,316
    2722:	0000                	unimp
    2724:	1c54                	addi	x13,x2,564
    2726:	0000                	unimp
    2728:	a4910003          	lb	x0,-1463(x2)
    272c:	547f                	0x547f
    272e:	001c                	0x1c
    2730:	5800                	lw	x8,48(x8)
    2732:	001c                	0x1c
    2734:	0300                	addi	x8,x2,384
    2736:	7200                	flw	f8,32(x12)
    2738:	7fa4                	flw	f9,120(x15)
    273a:	1c58                	addi	x14,x2,564
    273c:	0000                	unimp
    273e:	1c7c                	addi	x15,x2,572
    2740:	0000                	unimp
    2742:	a4910003          	lb	x0,-1463(x2)
    2746:	007f                	0x7f
    2748:	0000                	unimp
    274a:	0000                	unimp
    274c:	0000                	unimp
    274e:	3400                	fld	f8,40(x8)
    2750:	001a                	c.slli	x0,0x6
    2752:	7800                	flw	f8,48(x8)
    2754:	001a                	c.slli	x0,0x6
    2756:	0200                	addi	x8,x2,256
    2758:	3000                	fld	f8,32(x8)
    275a:	789f 001a 0c00      	0xc00001a789f
    2760:	001c                	0x1c
    2762:	0300                	addi	x8,x2,384
    2764:	9100                	0x9100
    2766:	7fb4                	flw	f13,120(x15)
    2768:	1c0c                	addi	x11,x2,560
    276a:	0000                	unimp
    276c:	1c1c                	addi	x15,x2,560
    276e:	0000                	unimp
    2770:	0001                	nop
    2772:	585f 001c 7c00      	0x7c00001c585f
    2778:	001c                	0x1c
    277a:	0300                	addi	x8,x2,384
    277c:	9100                	0x9100
    277e:	7fb4                	flw	f13,120(x15)
	...
    2788:	1a34                	addi	x13,x2,312
    278a:	0000                	unimp
    278c:	1a78                	addi	x14,x2,316
    278e:	0000                	unimp
    2790:	0002                	c.slli64	x0
    2792:	9f30                	0x9f30
    2794:	1a78                	addi	x14,x2,316
    2796:	0000                	unimp
    2798:	1a88                	addi	x10,x2,368
    279a:	0000                	unimp
    279c:	98910003          	lb	x0,-1655(x2)
    27a0:	0c7f                	0xc7f
    27a2:	001c                	0x1c
    27a4:	1c00                	addi	x8,x2,560
    27a6:	001c                	0x1c
    27a8:	0800                	addi	x8,x2,16
    27aa:	7d00                	flw	f8,56(x10)
    27ac:	9100                	0x9100
    27ae:	7f98                	flw	f14,56(x15)
    27b0:	2206                	fld	f4,64(x2)
    27b2:	009f 0000 0000      	0x9f
    27b8:	0000                	unimp
    27ba:	3400                	fld	f8,40(x8)
    27bc:	001a                	c.slli	x0,0x6
    27be:	bc00                	fsd	f8,56(x8)
    27c0:	001a                	c.slli	x0,0x6
    27c2:	0200                	addi	x8,x2,256
    27c4:	3000                	fld	f8,32(x8)
    27c6:	bc9f 001a e000      	0xe000001abc9f
    27cc:	001a                	c.slli	x0,0x6
    27ce:	0100                	addi	x8,x2,128
    27d0:	5f00                	lw	x8,56(x14)
    27d2:	1bd0                	addi	x12,x2,500
    27d4:	0000                	unimp
    27d6:	1bdc                	addi	x15,x2,500
    27d8:	0000                	unimp
    27da:	0001                	nop
    27dc:	585f 001c 7c00      	0x7c00001c585f
    27e2:	001c                	0x1c
    27e4:	0100                	addi	x8,x2,128
    27e6:	5f00                	lw	x8,56(x14)
	...
    27f0:	1a34                	addi	x13,x2,312
    27f2:	0000                	unimp
    27f4:	1a78                	addi	x14,x2,316
    27f6:	0000                	unimp
    27f8:	0002                	c.slli64	x0
    27fa:	9f30                	0x9f30
    27fc:	1a78                	addi	x14,x2,316
    27fe:	0000                	unimp
    2800:	1abc                	addi	x15,x2,376
    2802:	0000                	unimp
    2804:	b0910003          	lb	x0,-1271(x2)
    2808:	0c7f                	0xc7f
    280a:	001c                	0x1c
    280c:	1c00                	addi	x8,x2,560
    280e:	001c                	0x1c
    2810:	0300                	addi	x8,x2,384
    2812:	9100                	0x9100
    2814:	7fb0                	flw	f12,120(x15)
	...
    281e:	1a78                	addi	x14,x2,316
    2820:	0000                	unimp
    2822:	1abc                	addi	x15,x2,376
    2824:	0000                	unimp
    2826:	0002                	c.slli64	x0
    2828:	9f30                	0x9f30
	...
    2832:	1abc                	addi	x15,x2,376
    2834:	0000                	unimp
    2836:	1b14                	addi	x13,x2,432
    2838:	0000                	unimp
    283a:	0002                	c.slli64	x0
    283c:	9f30                	0x9f30
    283e:	1c58                	addi	x14,x2,564
    2840:	0000                	unimp
    2842:	1c7c                	addi	x15,x2,572
    2844:	0000                	unimp
    2846:	0002                	c.slli64	x0
    2848:	9f30                	0x9f30
	...
    2852:	1abc                	addi	x15,x2,376
    2854:	0000                	unimp
    2856:	1b14                	addi	x13,x2,432
    2858:	0000                	unimp
    285a:	0020                	addi	x8,x2,8
    285c:	9f30                	0x9f30
    285e:	9f300493          	li	x9,-1549
    2862:	9f300493          	li	x9,-1549
    2866:	9f300493          	li	x9,-1549
    286a:	9f300493          	li	x9,-1549
    286e:	9f300493          	li	x9,-1549
    2872:	9f300493          	li	x9,-1549
    2876:	9f300493          	li	x9,-1549
    287a:	1b140493          	addi	x9,x8,433
    287e:	0000                	unimp
    2880:	1b68                	addi	x10,x2,444
    2882:	0000                	unimp
    2884:	0018                	0x18
    2886:	9364                	0x9364
    2888:	6304                	flw	f9,0(x14)
    288a:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    288e:	5904                	lw	x9,48(x10)
    2890:	93580493          	addi	x9,x16,-1739 # ffff6935 <_end+0x7eff68dd>
    2894:	5704                	lw	x9,40(x14)
    2896:	93550493          	addi	x9,x10,-1739
    289a:	6f04                	flw	f9,24(x14)
    289c:	1b680493          	addi	x9,x16,438
    28a0:	0000                	unimp
    28a2:	1b70                	addi	x12,x2,444
    28a4:	0000                	unimp
    28a6:	0018                	0x18
    28a8:	9364                	0x9364
    28aa:	6304                	flw	f9,0(x14)
    28ac:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    28b0:	5904                	lw	x9,48(x10)
    28b2:	93580493          	addi	x9,x16,-1739
    28b6:	5704                	lw	x9,40(x14)
    28b8:	93550493          	addi	x9,x10,-1739
    28bc:	6f04                	flw	f9,24(x14)
    28be:	1b700493          	li	x9,439
    28c2:	0000                	unimp
    28c4:	1b78                	addi	x14,x2,444
    28c6:	0000                	unimp
    28c8:	0018                	0x18
    28ca:	9364                	0x9364
    28cc:	6304                	flw	f9,0(x14)
    28ce:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    28d2:	5904                	lw	x9,48(x10)
    28d4:	93580493          	addi	x9,x16,-1739
    28d8:	5704                	lw	x9,40(x14)
    28da:	93550493          	addi	x9,x10,-1739
    28de:	6f04                	flw	f9,24(x14)
    28e0:	1b780493          	addi	x9,x16,439
    28e4:	0000                	unimp
    28e6:	1b80                	addi	x8,x2,496
    28e8:	0000                	unimp
    28ea:	0018                	0x18
    28ec:	9364                	0x9364
    28ee:	6304                	flw	f9,0(x14)
    28f0:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    28f4:	5904                	lw	x9,48(x10)
    28f6:	93580493          	addi	x9,x16,-1739
    28fa:	5704                	lw	x9,40(x14)
    28fc:	93550493          	addi	x9,x10,-1739
    2900:	6f04                	flw	f9,24(x14)
    2902:	1b800493          	li	x9,440
    2906:	0000                	unimp
    2908:	1b88                	addi	x10,x2,496
    290a:	0000                	unimp
    290c:	0018                	0x18
    290e:	9364                	0x9364
    2910:	6304                	flw	f9,0(x14)
    2912:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    2916:	5904                	lw	x9,48(x10)
    2918:	93580493          	addi	x9,x16,-1739
    291c:	5704                	lw	x9,40(x14)
    291e:	93550493          	addi	x9,x10,-1739
    2922:	6f04                	flw	f9,24(x14)
    2924:	1b880493          	addi	x9,x16,440
    2928:	0000                	unimp
    292a:	1b90                	addi	x12,x2,496
    292c:	0000                	unimp
    292e:	0018                	0x18
    2930:	9364                	0x9364
    2932:	6304                	flw	f9,0(x14)
    2934:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    2938:	5904                	lw	x9,48(x10)
    293a:	93580493          	addi	x9,x16,-1739
    293e:	5704                	lw	x9,40(x14)
    2940:	93550493          	addi	x9,x10,-1739
    2944:	6f04                	flw	f9,24(x14)
    2946:	1b900493          	li	x9,441
    294a:	0000                	unimp
    294c:	1b98                	addi	x14,x2,496
    294e:	0000                	unimp
    2950:	0018                	0x18
    2952:	9364                	0x9364
    2954:	6304                	flw	f9,0(x14)
    2956:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    295a:	5904                	lw	x9,48(x10)
    295c:	93580493          	addi	x9,x16,-1739
    2960:	5704                	lw	x9,40(x14)
    2962:	93550493          	addi	x9,x10,-1739
    2966:	6f04                	flw	f9,24(x14)
    2968:	1b980493          	addi	x9,x16,441
    296c:	0000                	unimp
    296e:	1b9c                	addi	x15,x2,496
    2970:	0000                	unimp
    2972:	0018                	0x18
    2974:	9364                	0x9364
    2976:	6304                	flw	f9,0(x14)
    2978:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    297c:	5904                	lw	x9,48(x10)
    297e:	93580493          	addi	x9,x16,-1739
    2982:	5704                	lw	x9,40(x14)
    2984:	93550493          	addi	x9,x10,-1739
    2988:	6f04                	flw	f9,24(x14)
    298a:	1b9c0493          	addi	x9,x24,441
    298e:	0000                	unimp
    2990:	1ba4                	addi	x9,x2,504
    2992:	0000                	unimp
    2994:	0018                	0x18
    2996:	9364                	0x9364
    2998:	6304                	flw	f9,0(x14)
    299a:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    299e:	5904                	lw	x9,48(x10)
    29a0:	93580493          	addi	x9,x16,-1739
    29a4:	5704                	lw	x9,40(x14)
    29a6:	93550493          	addi	x9,x10,-1739
    29aa:	6f04                	flw	f9,24(x14)
    29ac:	1ba40493          	addi	x9,x8,442
    29b0:	0000                	unimp
    29b2:	1bd0                	addi	x12,x2,500
    29b4:	0000                	unimp
    29b6:	0018                	0x18
    29b8:	9364                	0x9364
    29ba:	6304                	flw	f9,0(x14)
    29bc:	93620493          	addi	x9,x4,-1738 # fffff936 <_end+0x7efff8de>
    29c0:	5904                	lw	x9,48(x10)
    29c2:	93580493          	addi	x9,x16,-1739
    29c6:	5704                	lw	x9,40(x14)
    29c8:	93550493          	addi	x9,x10,-1739
    29cc:	6f04                	flw	f9,24(x14)
    29ce:	1c580493          	addi	x9,x16,453
    29d2:	0000                	unimp
    29d4:	1c7c                	addi	x15,x2,572
    29d6:	0000                	unimp
    29d8:	0020                	addi	x8,x2,8
    29da:	9f30                	0x9f30
    29dc:	9f300493          	li	x9,-1549
    29e0:	9f300493          	li	x9,-1549
    29e4:	9f300493          	li	x9,-1549
    29e8:	9f300493          	li	x9,-1549
    29ec:	9f300493          	li	x9,-1549
    29f0:	9f300493          	li	x9,-1549
    29f4:	9f300493          	li	x9,-1549
    29f8:	00000493          	li	x9,0
    29fc:	0000                	unimp
    29fe:	0000                	unimp
    2a00:	0000                	unimp
    2a02:	1abc                	addi	x15,x2,376
    2a04:	0000                	unimp
    2a06:	1b14                	addi	x13,x2,432
    2a08:	0000                	unimp
    2a0a:	98910003          	lb	x0,-1655(x2)
    2a0e:	587f                	0x587f
    2a10:	001c                	0x1c
    2a12:	7c00                	flw	f8,56(x8)
    2a14:	001c                	0x1c
    2a16:	0100                	addi	x8,x2,128
    2a18:	5d00                	lw	x8,56(x10)
	...
    2a22:	1b14                	addi	x13,x2,432
    2a24:	0000                	unimp
    2a26:	1b68                	addi	x10,x2,444
    2a28:	0000                	unimp
    2a2a:	0002                	c.slli64	x0
    2a2c:	9f30                	0x9f30
    2a2e:	1b68                	addi	x10,x2,444
    2a30:	0000                	unimp
    2a32:	1b70                	addi	x12,x2,444
    2a34:	0000                	unimp
    2a36:	0002                	c.slli64	x0
    2a38:	9f31                	0x9f31
    2a3a:	1b70                	addi	x12,x2,444
    2a3c:	0000                	unimp
    2a3e:	1b78                	addi	x14,x2,444
    2a40:	0000                	unimp
    2a42:	0002                	c.slli64	x0
    2a44:	9f32                	add	x30,x30,x12
    2a46:	1b78                	addi	x14,x2,444
    2a48:	0000                	unimp
    2a4a:	1b80                	addi	x8,x2,496
    2a4c:	0000                	unimp
    2a4e:	0002                	c.slli64	x0
    2a50:	1b809f33          	0x1b809f33
    2a54:	0000                	unimp
    2a56:	1b88                	addi	x10,x2,496
    2a58:	0000                	unimp
    2a5a:	0002                	c.slli64	x0
    2a5c:	9f34                	0x9f34
    2a5e:	1b88                	addi	x10,x2,496
    2a60:	0000                	unimp
    2a62:	1b90                	addi	x12,x2,496
    2a64:	0000                	unimp
    2a66:	0002                	c.slli64	x0
    2a68:	9f35                	0x9f35
    2a6a:	1b90                	addi	x12,x2,496
    2a6c:	0000                	unimp
    2a6e:	1b98                	addi	x14,x2,496
    2a70:	0000                	unimp
    2a72:	0002                	c.slli64	x0
    2a74:	9f36                	add	x30,x30,x13
    2a76:	1b98                	addi	x14,x2,496
    2a78:	0000                	unimp
    2a7a:	1b9c                	addi	x15,x2,496
    2a7c:	0000                	unimp
    2a7e:	0002                	c.slli64	x0
    2a80:	1b9c9f37          	lui	x30,0x1b9c9
    2a84:	0000                	unimp
    2a86:	1ba4                	addi	x9,x2,504
    2a88:	0000                	unimp
    2a8a:	0002                	c.slli64	x0
    2a8c:	9f38                	0x9f38
	...
    2a96:	1ba4                	addi	x9,x2,504
    2a98:	0000                	unimp
    2a9a:	1bac                	addi	x11,x2,504
    2a9c:	0000                	unimp
    2a9e:	0002                	c.slli64	x0
    2aa0:	9f30                	0x9f30
    2aa2:	1bac                	addi	x11,x2,504
    2aa4:	0000                	unimp
    2aa6:	1bb0                	addi	x12,x2,504
    2aa8:	0000                	unimp
    2aaa:	0002                	c.slli64	x0
    2aac:	9f31                	0x9f31
    2aae:	1bb0                	addi	x12,x2,504
    2ab0:	0000                	unimp
    2ab2:	1bbc                	addi	x15,x2,504
    2ab4:	0000                	unimp
    2ab6:	0002                	c.slli64	x0
    2ab8:	9f32                	add	x30,x30,x12
    2aba:	1bbc                	addi	x15,x2,504
    2abc:	0000                	unimp
    2abe:	1bc0                	addi	x8,x2,500
    2ac0:	0000                	unimp
    2ac2:	0002                	c.slli64	x0
    2ac4:	1bc09f33          	0x1bc09f33
    2ac8:	0000                	unimp
    2aca:	1bc4                	addi	x9,x2,500
    2acc:	0000                	unimp
    2ace:	0002                	c.slli64	x0
    2ad0:	9f34                	0x9f34
    2ad2:	1bc4                	addi	x9,x2,500
    2ad4:	0000                	unimp
    2ad6:	1bc8                	addi	x10,x2,500
    2ad8:	0000                	unimp
    2ada:	0002                	c.slli64	x0
    2adc:	9f35                	0x9f35
    2ade:	1bc8                	addi	x10,x2,500
    2ae0:	0000                	unimp
    2ae2:	1bcc                	addi	x11,x2,500
    2ae4:	0000                	unimp
    2ae6:	0002                	c.slli64	x0
    2ae8:	9f36                	add	x30,x30,x13
    2aea:	1bcc                	addi	x11,x2,500
    2aec:	0000                	unimp
    2aee:	1bd0                	addi	x12,x2,500
    2af0:	0000                	unimp
    2af2:	0002                	c.slli64	x0
    2af4:	1bd09f37          	lui	x30,0x1bd09
    2af8:	0000                	unimp
    2afa:	1be8                	addi	x10,x2,508
    2afc:	0000                	unimp
    2afe:	0002                	c.slli64	x0
    2b00:	9f38                	0x9f38
	...
    2b0a:	15a0                	addi	x8,x2,744
    2b0c:	0000                	unimp
    2b0e:	1624                	addi	x9,x2,808
    2b10:	0000                	unimp
    2b12:	0001                	nop
    2b14:	245a                	fld	f8,400(x2)
    2b16:	0016                	c.slli	x0,0x5
    2b18:	6f00                	flw	f8,24(x14)
    2b1a:	0016                	c.slli	x0,0x5
    2b1c:	0100                	addi	x8,x2,128
    2b1e:	5b00                	lw	x8,48(x14)
    2b20:	0000166f          	jal	x12,3b20 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x192c>
    2b24:	17c4                	addi	x9,x2,996
    2b26:	0000                	unimp
    2b28:	0004                	0x4
    2b2a:	9f5a01f3          	0x9f5a01f3
	...
    2b36:	15a0                	addi	x8,x2,744
    2b38:	0000                	unimp
    2b3a:	1604                	addi	x9,x2,800
    2b3c:	0000                	unimp
    2b3e:	0001                	nop
    2b40:	0016045b          	0x16045b
    2b44:	9000                	0x9000
    2b46:	0016                	c.slli	x0,0x5
    2b48:	0100                	addi	x8,x2,128
    2b4a:	5900                	lw	x8,48(x10)
    2b4c:	1690                	addi	x12,x2,864
    2b4e:	0000                	unimp
    2b50:	17c4                	addi	x9,x2,996
    2b52:	0000                	unimp
    2b54:	0004                	0x4
    2b56:	9f5b01f3          	0x9f5b01f3
	...
    2b62:	15a0                	addi	x8,x2,744
    2b64:	0000                	unimp
    2b66:	1614                	addi	x13,x2,800
    2b68:	0000                	unimp
    2b6a:	0001                	nop
    2b6c:	145c                	addi	x15,x2,548
    2b6e:	0016                	c.slli	x0,0x5
    2b70:	6f00                	flw	f8,24(x14)
    2b72:	0016                	c.slli	x0,0x5
    2b74:	0100                	addi	x8,x2,128
    2b76:	5600                	lw	x8,40(x12)
    2b78:	0000166f          	jal	x12,3b78 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1984>
    2b7c:	1790                	addi	x12,x2,992
    2b7e:	0000                	unimp
    2b80:	98780003          	lb	x0,-1657(x16)
    2b84:	907f                	0x907f
    2b86:	c4000017          	auipc	x0,0xc4000
    2b8a:	03000017          	auipc	x0,0x3000
    2b8e:	9100                	0x9100
    2b90:	7f98                	flw	f14,56(x15)
	...
    2b9a:	15a0                	addi	x8,x2,744
    2b9c:	0000                	unimp
    2b9e:	15f4                	addi	x13,x2,748
    2ba0:	0000                	unimp
    2ba2:	0001                	nop
    2ba4:	f45d                	bnez	x8,2b52 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x95e>
    2ba6:	0015                	c.nop	5
    2ba8:	6f00                	flw	f8,24(x14)
    2baa:	0016                	c.slli	x0,0x5
    2bac:	0100                	addi	x8,x2,128
    2bae:	6d00                	flw	f8,24(x10)
    2bb0:	0000166f          	jal	x12,3bb0 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x19bc>
    2bb4:	1790                	addi	x12,x2,992
    2bb6:	0000                	unimp
    2bb8:	a8780003          	lb	x0,-1401(x16)
    2bbc:	907f                	0x907f
    2bbe:	c4000017          	auipc	x0,0xc4000
    2bc2:	03000017          	auipc	x0,0x3000
    2bc6:	9100                	0x9100
    2bc8:	7fa8                	flw	f10,120(x15)
	...
    2bd2:	15a0                	addi	x8,x2,744
    2bd4:	0000                	unimp
    2bd6:	15e8                	addi	x10,x2,748
    2bd8:	0000                	unimp
    2bda:	0001                	nop
    2bdc:	e85e                	fsw	f23,16(x2)
    2bde:	0015                	c.nop	5
    2be0:	6f00                	flw	f8,24(x14)
    2be2:	0016                	c.slli	x0,0x5
    2be4:	0100                	addi	x8,x2,128
    2be6:	6c00                	flw	f8,24(x8)
    2be8:	0000166f          	jal	x12,3be8 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x19f4>
    2bec:	1790                	addi	x12,x2,992
    2bee:	0000                	unimp
    2bf0:	a4780003          	lb	x0,-1465(x16)
    2bf4:	907f                	0x907f
    2bf6:	c4000017          	auipc	x0,0xc4000
    2bfa:	03000017          	auipc	x0,0x3000
    2bfe:	9100                	0x9100
    2c00:	7fa4                	flw	f9,120(x15)
	...
    2c0a:	15a0                	addi	x8,x2,744
    2c0c:	0000                	unimp
    2c0e:	1638                	addi	x14,x2,808
    2c10:	0000                	unimp
    2c12:	0001                	nop
    2c14:	385f 0016 a800      	0xa8000016385f
    2c1a:	0016                	c.slli	x0,0x5
    2c1c:	0300                	addi	x8,x2,384
    2c1e:	7800                	flw	f8,48(x8)
    2c20:	7fbc                	flw	f15,120(x15)
    2c22:	16a8                	addi	x10,x2,872
    2c24:	0000                	unimp
    2c26:	17c4                	addi	x9,x2,996
    2c28:	0000                	unimp
    2c2a:	0004                	0x4
    2c2c:	9f5f01f3          	0x9f5f01f3
	...
    2c38:	15a0                	addi	x8,x2,744
    2c3a:	0000                	unimp
    2c3c:	0000166f          	jal	x12,3c3c <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1a48>
    2c40:	0001                	nop
    2c42:	6f60                	flw	f8,92(x14)
    2c44:	0016                	c.slli	x0,0x5
    2c46:	9000                	0x9000
    2c48:	03000017          	auipc	x0,0x3000
    2c4c:	7800                	flw	f8,48(x8)
    2c4e:	7fa0                	flw	f8,120(x15)
    2c50:	1790                	addi	x12,x2,992
    2c52:	0000                	unimp
    2c54:	17c4                	addi	x9,x2,996
    2c56:	0000                	unimp
    2c58:	a0910003          	lb	x0,-1527(x2)
    2c5c:	007f                	0x7f
    2c5e:	0000                	unimp
    2c60:	0000                	unimp
    2c62:	0000                	unimp
    2c64:	a000                	fsd	f8,0(x8)
    2c66:	0015                	c.nop	5
    2c68:	6f00                	flw	f8,24(x14)
    2c6a:	0016                	c.slli	x0,0x5
    2c6c:	0100                	addi	x8,x2,128
    2c6e:	6100                	flw	f8,0(x10)
    2c70:	0000166f          	jal	x12,3c70 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1a7c>
    2c74:	1790                	addi	x12,x2,992
    2c76:	0000                	unimp
    2c78:	ac780007          	0xac780007
    2c7c:	067f                	0x67f
    2c7e:	1c31                	addi	x24,x24,-20
    2c80:	909f 0017 c400      	0xc4000017909f
    2c86:	07000017          	auipc	x0,0x7000
    2c8a:	9100                	0x9100
    2c8c:	7fac                	flw	f11,120(x15)
    2c8e:	3106                	fld	f2,96(x2)
    2c90:	9f1c                	0x9f1c
	...
    2c9a:	16a8                	addi	x10,x2,872
    2c9c:	0000                	unimp
    2c9e:	16ac                	addi	x11,x2,872
    2ca0:	0000                	unimp
    2ca2:	0001                	nop
    2ca4:	6c59                	lui	x24,0x16
    2ca6:	94000017          	auipc	x0,0x94000
    2caa:	01000017          	auipc	x0,0x1000
    2cae:	5900                	lw	x8,48(x10)
    2cb0:	1794                	addi	x13,x2,992
    2cb2:	0000                	unimp
    2cb4:	17c4                	addi	x9,x2,996
    2cb6:	0000                	unimp
    2cb8:	0001                	nop
    2cba:	005a                	c.slli	x0,0x16
    2cbc:	0000                	unimp
    2cbe:	0000                	unimp
    2cc0:	0000                	unimp
    2cc2:	e400                	fsw	f8,8(x8)
    2cc4:	0015                	c.nop	5
    2cc6:	a800                	fsd	f8,16(x8)
    2cc8:	0016                	c.slli	x0,0x5
    2cca:	0200                	addi	x8,x2,256
    2ccc:	3000                	fld	f8,32(x8)
    2cce:	a89f 0016 ac00      	0xac000016a89f
    2cd4:	0016                	c.slli	x0,0x5
    2cd6:	0300                	addi	x8,x2,384
    2cd8:	7800                	flw	f8,48(x8)
    2cda:	7fa0                	flw	f8,120(x15)
    2cdc:	16ac                	addi	x11,x2,872
    2cde:	0000                	unimp
    2ce0:	16e8                	addi	x10,x2,876
    2ce2:	0000                	unimp
    2ce4:	0001                	nop
    2ce6:	6c59                	lui	x24,0x16
    2ce8:	90000017          	auipc	x0,0x90000
    2cec:	03000017          	auipc	x0,0x3000
    2cf0:	7800                	flw	f8,48(x8)
    2cf2:	7fa0                	flw	f8,120(x15)
    2cf4:	1790                	addi	x12,x2,992
    2cf6:	0000                	unimp
    2cf8:	17c4                	addi	x9,x2,996
    2cfa:	0000                	unimp
    2cfc:	a0910003          	lb	x0,-1527(x2)
    2d00:	007f                	0x7f
    2d02:	0000                	unimp
    2d04:	0000                	unimp
    2d06:	0000                	unimp
    2d08:	2800                	fld	f8,16(x8)
    2d0a:	0016                	c.slli	x0,0x5
    2d0c:	4400                	lw	x8,8(x8)
    2d0e:	0016                	c.slli	x0,0x5
    2d10:	0200                	addi	x8,x2,256
    2d12:	7200                	flw	f8,32(x12)
    2d14:	4400                	lw	x8,8(x8)
    2d16:	0016                	c.slli	x0,0x5
    2d18:	6f00                	flw	f8,24(x14)
    2d1a:	0016                	c.slli	x0,0x5
    2d1c:	0200                	addi	x8,x2,256
    2d1e:	7a00                	flw	f8,48(x12)
    2d20:	6f00                	flw	f8,24(x14)
    2d22:	0016                	c.slli	x0,0x5
    2d24:	9000                	0x9000
    2d26:	04000017          	auipc	x0,0x4000
    2d2a:	7800                	flw	f8,48(x8)
    2d2c:	7fb4                	flw	f13,120(x15)
    2d2e:	9006                	c.add	x0,x1
    2d30:	c4000017          	auipc	x0,0xc4000
    2d34:	04000017          	auipc	x0,0x4000
    2d38:	9100                	0x9100
    2d3a:	7fb4                	flw	f13,120(x15)
    2d3c:	0006                	c.slli	x0,0x1
    2d3e:	0000                	unimp
    2d40:	0000                	unimp
    2d42:	0000                	unimp
    2d44:	5400                	lw	x8,40(x8)
    2d46:	0016                	c.slli	x0,0x5
    2d48:	6800                	flw	f8,16(x8)
    2d4a:	0016                	c.slli	x0,0x5
    2d4c:	0200                	addi	x8,x2,256
    2d4e:	7200                	flw	f8,32(x12)
    2d50:	6800                	flw	f8,16(x8)
    2d52:	0016                	c.slli	x0,0x5
    2d54:	9c00                	0x9c00
    2d56:	0016                	c.slli	x0,0x5
    2d58:	0200                	addi	x8,x2,256
    2d5a:	8400                	0x8400
    2d5c:	9c00                	0x9c00
    2d5e:	0016                	c.slli	x0,0x5
    2d60:	9000                	0x9000
    2d62:	04000017          	auipc	x0,0x4000
    2d66:	7800                	flw	f8,48(x8)
    2d68:	7fb0                	flw	f12,120(x15)
    2d6a:	9006                	c.add	x0,x1
    2d6c:	c4000017          	auipc	x0,0xc4000
    2d70:	04000017          	auipc	x0,0x4000
    2d74:	9100                	0x9100
    2d76:	7fb0                	flw	f12,120(x15)
    2d78:	0006                	c.slli	x0,0x1
    2d7a:	0000                	unimp
    2d7c:	0000                	unimp
    2d7e:	0000                	unimp
    2d80:	8c00                	0x8c00
    2d82:	0016                	c.slli	x0,0x5
    2d84:	a800                	fsd	f8,16(x8)
    2d86:	0016                	c.slli	x0,0x5
    2d88:	0400                	addi	x8,x2,512
    2d8a:	7800                	flw	f8,48(x8)
    2d8c:	7fb8                	flw	f14,120(x15)
    2d8e:	a806                	fsd	f1,16(x2)
    2d90:	0016                	c.slli	x0,0x5
    2d92:	8400                	0x8400
    2d94:	02000017          	auipc	x0,0x2000
    2d98:	7200                	flw	f8,32(x12)
    2d9a:	8400                	0x8400
    2d9c:	90000017          	auipc	x0,0x90000
    2da0:	04000017          	auipc	x0,0x4000
    2da4:	7800                	flw	f8,48(x8)
    2da6:	7fb8                	flw	f14,120(x15)
    2da8:	9006                	c.add	x0,x1
    2daa:	c4000017          	auipc	x0,0xc4000
    2dae:	04000017          	auipc	x0,0x4000
    2db2:	9100                	0x9100
    2db4:	7fb8                	flw	f14,120(x15)
    2db6:	0006                	c.slli	x0,0x1
    2db8:	0000                	unimp
    2dba:	0000                	unimp
    2dbc:	0000                	unimp
    2dbe:	8c00                	0x8c00
    2dc0:	0016                	c.slli	x0,0x5
    2dc2:	a800                	fsd	f8,16(x8)
    2dc4:	0016                	c.slli	x0,0x5
    2dc6:	0200                	addi	x8,x2,256
    2dc8:	3000                	fld	f8,32(x8)
    2dca:	a89f 0016 1000      	0x10000016a89f
    2dd0:	01000017          	auipc	x0,0x1000
    2dd4:	6200                	flw	f8,0(x12)
    2dd6:	1710                	addi	x12,x2,928
    2dd8:	0000                	unimp
    2dda:	176c                	addi	x11,x2,940
    2ddc:	0000                	unimp
    2dde:	7f820003          	lb	x0,2040(x4) # 7f8 <bsg_printf+0x32c>
    2de2:	6c9f 0017 9800      	0x980000176c9f
    2de8:	01000017          	auipc	x0,0x1000
    2dec:	6200                	flw	f8,0(x12)
	...
    2df6:	16f0                	addi	x12,x2,876
    2df8:	0000                	unimp
    2dfa:	16fc                	addi	x15,x2,876
    2dfc:	0000                	unimp
    2dfe:	0001                	nop
    2e00:	fc5e                	fsw	f23,56(x2)
    2e02:	0016                	c.slli	x0,0x5
    2e04:	1300                	addi	x8,x2,416
    2e06:	03000017          	auipc	x0,0x3000
    2e0a:	8700                	0x8700
    2e0c:	7a8c                	flw	f11,48(x13)
	...
    2e16:	16a8                	addi	x10,x2,872
    2e18:	0000                	unimp
    2e1a:	16ac                	addi	x11,x2,872
    2e1c:	0000                	unimp
    2e1e:	0006                	c.slli	x0,0x1
    2e20:	0c0c                	addi	x11,x2,528
    2e22:	000d                	c.nop	3
    2e24:	9f40                	0x9f40
    2e26:	16f0                	addi	x12,x2,876
    2e28:	0000                	unimp
    2e2a:	17c4                	addi	x9,x2,996
    2e2c:	0000                	unimp
    2e2e:	0006                	c.slli	x0,0x1
    2e30:	0c0c                	addi	x11,x2,528
    2e32:	000d                	c.nop	3
    2e34:	9f40                	0x9f40
	...
    2e3e:	16a8                	addi	x10,x2,872
    2e40:	0000                	unimp
    2e42:	16ac                	addi	x11,x2,872
    2e44:	0000                	unimp
    2e46:	8c870003          	lb	x0,-1848(x14)
    2e4a:	6c7a                	flw	f24,156(x2)
    2e4c:	7f000017          	auipc	x0,0x7f000
    2e50:	03000017          	auipc	x0,0x3000
    2e54:	8700                	0x8700
    2e56:	7a8c                	flw	f11,48(x13)
	...
    2e60:	16a8                	addi	x10,x2,872
    2e62:	0000                	unimp
    2e64:	16ac                	addi	x11,x2,872
    2e66:	0000                	unimp
    2e68:	0006                	c.slli	x0,0x1
    2e6a:	0c0c                	addi	x11,x2,528
    2e6c:	000d                	c.nop	3
    2e6e:	9f40                	0x9f40
    2e70:	176c                	addi	x11,x2,940
    2e72:	0000                	unimp
    2e74:	17c4                	addi	x9,x2,996
    2e76:	0000                	unimp
    2e78:	0006                	c.slli	x0,0x1
    2e7a:	0c0c                	addi	x11,x2,528
    2e7c:	000d                	c.nop	3
    2e7e:	9f40                	0x9f40
	...
    2e88:	15e4                	addi	x9,x2,748
    2e8a:	0000                	unimp
    2e8c:	15e8                	addi	x10,x2,748
    2e8e:	0000                	unimp
    2e90:	0008                	0x8
    2e92:	007e                	c.slli	x0,0x1f
    2e94:	007d                	c.nop	31
    2e96:	311e                	fld	f2,480(x2)
    2e98:	9f1c                	0x9f1c
    2e9a:	15e8                	addi	x10,x2,748
    2e9c:	0000                	unimp
    2e9e:	1618                	addi	x14,x2,800
    2ea0:	0000                	unimp
    2ea2:	7f7e0003          	lb	x0,2039(x28) # 1a7f7 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x18603>
    2ea6:	189f 0016 6f00      	0x6f000016189f
    2eac:	0016                	c.slli	x0,0x5
    2eae:	0800                	addi	x8,x2,16
    2eb0:	8c00                	0x8c00
    2eb2:	8d00                	0x8d00
    2eb4:	1e00                	addi	x8,x2,816
    2eb6:	1c31                	addi	x24,x24,-20
    2eb8:	6f9f 0016 9000      	0x900000166f9f
    2ebe:	0c000017          	auipc	x0,0xc000
    2ec2:	7800                	flw	f8,48(x8)
    2ec4:	7fa4                	flw	f9,120(x15)
    2ec6:	7806                	flw	f16,96(x2)
    2ec8:	7fa8                	flw	f10,120(x15)
    2eca:	1e06                	slli	x28,x28,0x21
    2ecc:	1c31                	addi	x24,x24,-20
    2ece:	909f 0017 c400      	0xc4000017909f
    2ed4:	0c000017          	auipc	x0,0xc000
    2ed8:	9100                	0x9100
    2eda:	7fa4                	flw	f9,120(x15)
    2edc:	9106                	add	x2,x2,x1
    2ede:	7fa8                	flw	f10,120(x15)
    2ee0:	1e06                	slli	x28,x28,0x21
    2ee2:	1c31                	addi	x24,x24,-20
    2ee4:	009f 0000 0000      	0x9f
    2eea:	0000                	unimp
    2eec:	2800                	fld	f8,16(x8)
    2eee:	0016                	c.slli	x0,0x5
    2ef0:	3800                	fld	f8,48(x8)
    2ef2:	0016                	c.slli	x0,0x5
    2ef4:	0800                	addi	x8,x2,16
    2ef6:	8c00                	0x8c00
    2ef8:	7f00                	flw	f8,56(x14)
    2efa:	1e00                	addi	x8,x2,816
    2efc:	1c31                	addi	x24,x24,-20
    2efe:	389f 0016 6f00      	0x6f000016389f
    2f04:	0016                	c.slli	x0,0x5
    2f06:	0a00                	addi	x8,x2,272
    2f08:	8c00                	0x8c00
    2f0a:	7800                	flw	f8,48(x8)
    2f0c:	7fbc                	flw	f15,120(x15)
    2f0e:	1e06                	slli	x28,x28,0x21
    2f10:	1c31                	addi	x24,x24,-20
    2f12:	6f9f 0016 a800      	0xa80000166f9f
    2f18:	0016                	c.slli	x0,0x5
    2f1a:	0c00                	addi	x8,x2,528
    2f1c:	7800                	flw	f8,48(x8)
    2f1e:	7fa4                	flw	f9,120(x15)
    2f20:	7806                	flw	f16,96(x2)
    2f22:	7fbc                	flw	f15,120(x15)
    2f24:	1e06                	slli	x28,x28,0x21
    2f26:	1c31                	addi	x24,x24,-20
    2f28:	a89f 0016 9000      	0x90000016a89f
    2f2e:	0b000017          	auipc	x0,0xb000
    2f32:	7800                	flw	f8,48(x8)
    2f34:	7fa4                	flw	f9,120(x15)
    2f36:	f306                	fsw	f1,164(x2)
    2f38:	5f01                	li	x30,-32
    2f3a:	311e                	fld	f2,480(x2)
    2f3c:	9f1c                	0x9f1c
    2f3e:	1790                	addi	x12,x2,992
    2f40:	0000                	unimp
    2f42:	17c4                	addi	x9,x2,996
    2f44:	0000                	unimp
    2f46:	a491000b          	0xa491000b
    2f4a:	067f                	0x67f
    2f4c:	1e5f01f3          	0x1e5f01f3
    2f50:	1c31                	addi	x24,x24,-20
    2f52:	009f 0000 0000      	0x9f
    2f58:	0000                	unimp
    2f5a:	5400                	lw	x8,40(x8)
    2f5c:	0016                	c.slli	x0,0x5
    2f5e:	6f00                	flw	f8,24(x14)
    2f60:	0016                	c.slli	x0,0x5
    2f62:	0a00                	addi	x8,x2,272
    2f64:	8d00                	0x8d00
    2f66:	7800                	flw	f8,48(x8)
    2f68:	7fbc                	flw	f15,120(x15)
    2f6a:	1e06                	slli	x28,x28,0x21
    2f6c:	1c31                	addi	x24,x24,-20
    2f6e:	6f9f 0016 a800      	0xa80000166f9f
    2f74:	0016                	c.slli	x0,0x5
    2f76:	0c00                	addi	x8,x2,528
    2f78:	7800                	flw	f8,48(x8)
    2f7a:	7fa8                	flw	f10,120(x15)
    2f7c:	7806                	flw	f16,96(x2)
    2f7e:	7fbc                	flw	f15,120(x15)
    2f80:	1e06                	slli	x28,x28,0x21
    2f82:	1c31                	addi	x24,x24,-20
    2f84:	a89f 0016 9000      	0x90000016a89f
    2f8a:	0b000017          	auipc	x0,0xb000
    2f8e:	7800                	flw	f8,48(x8)
    2f90:	7fa8                	flw	f10,120(x15)
    2f92:	f306                	fsw	f1,164(x2)
    2f94:	5f01                	li	x30,-32
    2f96:	311e                	fld	f2,480(x2)
    2f98:	9f1c                	0x9f1c
    2f9a:	1790                	addi	x12,x2,992
    2f9c:	0000                	unimp
    2f9e:	17c4                	addi	x9,x2,996
    2fa0:	0000                	unimp
    2fa2:	a891000b          	0xa891000b
    2fa6:	067f                	0x67f
    2fa8:	1e5f01f3          	0x1e5f01f3
    2fac:	1c31                	addi	x24,x24,-20
    2fae:	009f 0000 0000      	0x9f
    2fb4:	0000                	unimp
    2fb6:	8400                	0x8400
    2fb8:	0c000013          	li	x0,192
    2fbc:	0014                	0x14
    2fbe:	0100                	addi	x8,x2,128
    2fc0:	5a00                	lw	x8,48(x12)
    2fc2:	140c                	addi	x11,x2,544
    2fc4:	0000                	unimp
    2fc6:	00001453          	fadd.s	f8,f0,f0,rtz
    2fca:	0001                	nop
    2fcc:	0014535b          	0x14535b
    2fd0:	a000                	fsd	f8,0(x8)
    2fd2:	0015                	c.nop	5
    2fd4:	0400                	addi	x8,x2,512
    2fd6:	f300                	fsw	f8,32(x14)
    2fd8:	5a01                	li	x20,-32
    2fda:	009f 0000 0000      	0x9f
    2fe0:	0000                	unimp
    2fe2:	8400                	0x8400
    2fe4:	e0000013          	li	x0,-512
    2fe8:	01000013          	li	x0,16
    2fec:	5b00                	lw	x8,48(x14)
    2fee:	13e0                	addi	x8,x2,492
    2ff0:	0000                	unimp
    2ff2:	1474                	addi	x13,x2,556
    2ff4:	0000                	unimp
    2ff6:	0001                	nop
    2ff8:	7459                	lui	x8,0xffff6
    2ffa:	0014                	0x14
    2ffc:	a000                	fsd	f8,0(x8)
    2ffe:	0015                	c.nop	5
    3000:	0400                	addi	x8,x2,512
    3002:	f300                	fsw	f8,32(x14)
    3004:	5b01                	li	x22,-32
    3006:	009f 0000 0000      	0x9f
    300c:	0000                	unimp
    300e:	8400                	0x8400
    3010:	10000013          	li	x0,256
    3014:	0014                	0x14
    3016:	0100                	addi	x8,x2,128
    3018:	5c00                	lw	x8,56(x8)
    301a:	1410                	addi	x12,x2,544
    301c:	0000                	unimp
    301e:	156c                	addi	x11,x2,684
    3020:	0000                	unimp
    3022:	98780003          	lb	x0,-1657(x16)
    3026:	6c7f                	0x6c7f
    3028:	0015                	c.nop	5
    302a:	a000                	fsd	f8,0(x8)
    302c:	0015                	c.nop	5
    302e:	0300                	addi	x8,x2,384
    3030:	9100                	0x9100
    3032:	7f98                	flw	f14,56(x15)
	...
    303c:	1384                	addi	x9,x2,480
    303e:	0000                	unimp
    3040:	13cc                	addi	x11,x2,484
    3042:	0000                	unimp
    3044:	0001                	nop
    3046:	cc5d                	beqz	x8,3104 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xf10>
    3048:	53000013          	li	x0,1328
    304c:	0014                	0x14
    304e:	0100                	addi	x8,x2,128
    3050:	5600                	lw	x8,40(x12)
    3052:	00001453          	fadd.s	f8,f0,f0,rtz
    3056:	156c                	addi	x11,x2,684
    3058:	0000                	unimp
    305a:	b0780003          	lb	x0,-1273(x16)
    305e:	6c7f                	0x6c7f
    3060:	0015                	c.nop	5
    3062:	a000                	fsd	f8,0(x8)
    3064:	0015                	c.nop	5
    3066:	0300                	addi	x8,x2,384
    3068:	9100                	0x9100
    306a:	7fb0                	flw	f12,120(x15)
	...
    3074:	1384                	addi	x9,x2,480
    3076:	0000                	unimp
    3078:	141c                	addi	x15,x2,544
    307a:	0000                	unimp
    307c:	0001                	nop
    307e:	1c5e                	slli	x24,x24,0x37
    3080:	0014                	0x14
    3082:	8400                	0x8400
    3084:	0014                	0x14
    3086:	0300                	addi	x8,x2,384
    3088:	7800                	flw	f8,48(x8)
    308a:	7fbc                	flw	f15,120(x15)
    308c:	1484                	addi	x9,x2,608
    308e:	0000                	unimp
    3090:	15a0                	addi	x8,x2,744
    3092:	0000                	unimp
    3094:	0004                	0x4
    3096:	9f5e01f3          	0x9f5e01f3
	...
    30a2:	1384                	addi	x9,x2,480
    30a4:	0000                	unimp
    30a6:	13f8                	addi	x14,x2,492
    30a8:	0000                	unimp
    30aa:	0001                	nop
    30ac:	f85f 0013 5300      	0x53000013f85f
    30b2:	0014                	0x14
    30b4:	0100                	addi	x8,x2,128
    30b6:	6c00                	flw	f8,24(x8)
    30b8:	00001453          	fadd.s	f8,f0,f0,rtz
    30bc:	156c                	addi	x11,x2,684
    30be:	0000                	unimp
    30c0:	ac780003          	lb	x0,-1337(x16)
    30c4:	6c7f                	0x6c7f
    30c6:	0015                	c.nop	5
    30c8:	a000                	fsd	f8,0(x8)
    30ca:	0015                	c.nop	5
    30cc:	0300                	addi	x8,x2,384
    30ce:	9100                	0x9100
    30d0:	7fac                	flw	f11,120(x15)
	...
    30da:	1384                	addi	x9,x2,480
    30dc:	0000                	unimp
    30de:	00001453          	fadd.s	f8,f0,f0,rtz
    30e2:	0001                	nop
    30e4:	5360                	lw	x8,100(x14)
    30e6:	0014                	0x14
    30e8:	6c00                	flw	f8,24(x8)
    30ea:	0015                	c.nop	5
    30ec:	0300                	addi	x8,x2,384
    30ee:	7800                	flw	f8,48(x8)
    30f0:	7fa0                	flw	f8,120(x15)
    30f2:	156c                	addi	x11,x2,684
    30f4:	0000                	unimp
    30f6:	15a0                	addi	x8,x2,744
    30f8:	0000                	unimp
    30fa:	a0910003          	lb	x0,-1527(x2)
    30fe:	007f                	0x7f
    3100:	0000                	unimp
    3102:	0000                	unimp
    3104:	0000                	unimp
    3106:	8400                	0x8400
    3108:	53000013          	li	x0,1328
    310c:	0014                	0x14
    310e:	0100                	addi	x8,x2,128
    3110:	6100                	flw	f8,0(x10)
    3112:	00001453          	fadd.s	f8,f0,f0,rtz
    3116:	156c                	addi	x11,x2,684
    3118:	0000                	unimp
    311a:	b4780007          	0xb4780007
    311e:	067f                	0x67f
    3120:	1c31                	addi	x24,x24,-20
    3122:	6c9f 0015 a000      	0xa00000156c9f
    3128:	0015                	c.nop	5
    312a:	0700                	addi	x8,x2,896
    312c:	9100                	0x9100
    312e:	7fb4                	flw	f13,120(x15)
    3130:	3106                	fld	f2,96(x2)
    3132:	9f1c                	0x9f1c
	...
    313c:	1484                	addi	x9,x2,608
    313e:	0000                	unimp
    3140:	1488                	addi	x10,x2,608
    3142:	0000                	unimp
    3144:	0001                	nop
    3146:	4859                	li	x16,22
    3148:	0015                	c.nop	5
    314a:	7000                	flw	f8,32(x8)
    314c:	0015                	c.nop	5
    314e:	0100                	addi	x8,x2,128
    3150:	5900                	lw	x8,48(x10)
    3152:	1570                	addi	x12,x2,684
    3154:	0000                	unimp
    3156:	15a0                	addi	x8,x2,744
    3158:	0000                	unimp
    315a:	0001                	nop
    315c:	005a                	c.slli	x0,0x16
    315e:	0000                	unimp
    3160:	0000                	unimp
    3162:	0000                	unimp
    3164:	d800                	sw	x8,48(x8)
    3166:	84000013          	li	x0,-1984
    316a:	0014                	0x14
    316c:	0200                	addi	x8,x2,256
    316e:	3000                	fld	f8,32(x8)
    3170:	849f 0014 8800      	0x88000014849f
    3176:	0014                	0x14
    3178:	0300                	addi	x8,x2,384
    317a:	7800                	flw	f8,48(x8)
    317c:	7fa0                	flw	f8,120(x15)
    317e:	1488                	addi	x10,x2,608
    3180:	0000                	unimp
    3182:	14c4                	addi	x9,x2,612
    3184:	0000                	unimp
    3186:	0001                	nop
    3188:	4859                	li	x16,22
    318a:	0015                	c.nop	5
    318c:	6c00                	flw	f8,24(x8)
    318e:	0015                	c.nop	5
    3190:	0300                	addi	x8,x2,384
    3192:	7800                	flw	f8,48(x8)
    3194:	7fa0                	flw	f8,120(x15)
    3196:	156c                	addi	x11,x2,684
    3198:	0000                	unimp
    319a:	15a0                	addi	x8,x2,744
    319c:	0000                	unimp
    319e:	a0910003          	lb	x0,-1527(x2)
    31a2:	007f                	0x7f
    31a4:	0000                	unimp
    31a6:	0000                	unimp
    31a8:	0000                	unimp
    31aa:	1400                	addi	x8,x2,544
    31ac:	0014                	0x14
    31ae:	2800                	fld	f8,16(x8)
    31b0:	0014                	0x14
    31b2:	0200                	addi	x8,x2,256
    31b4:	7200                	flw	f8,32(x12)
    31b6:	2800                	fld	f8,16(x8)
    31b8:	0014                	0x14
    31ba:	5300                	lw	x8,32(x14)
    31bc:	0014                	0x14
    31be:	0200                	addi	x8,x2,256
    31c0:	7a00                	flw	f8,48(x12)
    31c2:	5300                	lw	x8,32(x14)
    31c4:	0014                	0x14
    31c6:	6c00                	flw	f8,24(x8)
    31c8:	0015                	c.nop	5
    31ca:	0400                	addi	x8,x2,512
    31cc:	7800                	flw	f8,48(x8)
    31ce:	7fa8                	flw	f10,120(x15)
    31d0:	6c06                	flw	f24,64(x2)
    31d2:	0015                	c.nop	5
    31d4:	a000                	fsd	f8,0(x8)
    31d6:	0015                	c.nop	5
    31d8:	0400                	addi	x8,x2,512
    31da:	9100                	0x9100
    31dc:	7fa8                	flw	f10,120(x15)
    31de:	0006                	c.slli	x0,0x1
    31e0:	0000                	unimp
    31e2:	0000                	unimp
    31e4:	0000                	unimp
    31e6:	3000                	fld	f8,32(x8)
    31e8:	0014                	0x14
    31ea:	4c00                	lw	x8,24(x8)
    31ec:	0014                	0x14
    31ee:	0200                	addi	x8,x2,256
    31f0:	7200                	flw	f8,32(x12)
    31f2:	4c00                	lw	x8,24(x8)
    31f4:	0014                	0x14
    31f6:	7800                	flw	f8,48(x8)
    31f8:	0014                	0x14
    31fa:	0200                	addi	x8,x2,256
    31fc:	8600                	0x8600
    31fe:	7800                	flw	f8,48(x8)
    3200:	0014                	0x14
    3202:	6c00                	flw	f8,24(x8)
    3204:	0015                	c.nop	5
    3206:	0400                	addi	x8,x2,512
    3208:	7800                	flw	f8,48(x8)
    320a:	7fa4                	flw	f9,120(x15)
    320c:	6c06                	flw	f24,64(x2)
    320e:	0015                	c.nop	5
    3210:	a000                	fsd	f8,0(x8)
    3212:	0015                	c.nop	5
    3214:	0400                	addi	x8,x2,512
    3216:	9100                	0x9100
    3218:	7fa4                	flw	f9,120(x15)
    321a:	0006                	c.slli	x0,0x1
    321c:	0000                	unimp
    321e:	0000                	unimp
    3220:	0000                	unimp
    3222:	7000                	flw	f8,32(x8)
    3224:	0014                	0x14
    3226:	8400                	0x8400
    3228:	0014                	0x14
    322a:	0400                	addi	x8,x2,512
    322c:	7800                	flw	f8,48(x8)
    322e:	7fb8                	flw	f14,120(x15)
    3230:	8406                	mv	x8,x1
    3232:	0014                	0x14
    3234:	6000                	flw	f8,0(x8)
    3236:	0015                	c.nop	5
    3238:	0200                	addi	x8,x2,256
    323a:	7200                	flw	f8,32(x12)
    323c:	6000                	flw	f8,0(x8)
    323e:	0015                	c.nop	5
    3240:	6c00                	flw	f8,24(x8)
    3242:	0015                	c.nop	5
    3244:	0400                	addi	x8,x2,512
    3246:	7800                	flw	f8,48(x8)
    3248:	7fb8                	flw	f14,120(x15)
    324a:	6c06                	flw	f24,64(x2)
    324c:	0015                	c.nop	5
    324e:	a000                	fsd	f8,0(x8)
    3250:	0015                	c.nop	5
    3252:	0400                	addi	x8,x2,512
    3254:	9100                	0x9100
    3256:	7fb8                	flw	f14,120(x15)
    3258:	0006                	c.slli	x0,0x1
    325a:	0000                	unimp
    325c:	0000                	unimp
    325e:	0000                	unimp
    3260:	7000                	flw	f8,32(x8)
    3262:	0014                	0x14
    3264:	8400                	0x8400
    3266:	0014                	0x14
    3268:	0200                	addi	x8,x2,256
    326a:	3000                	fld	f8,32(x8)
    326c:	849f 0014 ec00      	0xec000014849f
    3272:	0014                	0x14
    3274:	0100                	addi	x8,x2,128
    3276:	6200                	flw	f8,0(x12)
    3278:	14ec                	addi	x11,x2,620
    327a:	0000                	unimp
    327c:	1548                	addi	x10,x2,676
    327e:	0000                	unimp
    3280:	7f820003          	lb	x0,2040(x4) # 7f8 <bsg_printf+0x32c>
    3284:	489f 0015 7400      	0x74000015489f
    328a:	0015                	c.nop	5
    328c:	0100                	addi	x8,x2,128
    328e:	6200                	flw	f8,0(x12)
	...
    3298:	14cc                	addi	x11,x2,612
    329a:	0000                	unimp
    329c:	14d8                	addi	x14,x2,612
    329e:	0000                	unimp
    32a0:	0001                	nop
    32a2:	d85f 0014 ef00      	0xef000014d85f
    32a8:	0014                	0x14
    32aa:	0300                	addi	x8,x2,384
    32ac:	8700                	0x8700
    32ae:	7a8c                	flw	f11,48(x13)
	...
    32b8:	1484                	addi	x9,x2,608
    32ba:	0000                	unimp
    32bc:	1488                	addi	x10,x2,608
    32be:	0000                	unimp
    32c0:	0006                	c.slli	x0,0x1
    32c2:	0c0c                	addi	x11,x2,528
    32c4:	000d                	c.nop	3
    32c6:	9f40                	0x9f40
    32c8:	14cc                	addi	x11,x2,612
    32ca:	0000                	unimp
    32cc:	15a0                	addi	x8,x2,744
    32ce:	0000                	unimp
    32d0:	0006                	c.slli	x0,0x1
    32d2:	0c0c                	addi	x11,x2,528
    32d4:	000d                	c.nop	3
    32d6:	9f40                	0x9f40
	...
    32e0:	1484                	addi	x9,x2,608
    32e2:	0000                	unimp
    32e4:	1488                	addi	x10,x2,608
    32e6:	0000                	unimp
    32e8:	8c870003          	lb	x0,-1848(x14)
    32ec:	487a                	lw	x16,156(x2)
    32ee:	0015                	c.nop	5
    32f0:	5b00                	lw	x8,48(x14)
    32f2:	0015                	c.nop	5
    32f4:	0300                	addi	x8,x2,384
    32f6:	8700                	0x8700
    32f8:	7a8c                	flw	f11,48(x13)
	...
    3302:	1484                	addi	x9,x2,608
    3304:	0000                	unimp
    3306:	1488                	addi	x10,x2,608
    3308:	0000                	unimp
    330a:	0006                	c.slli	x0,0x1
    330c:	0c0c                	addi	x11,x2,528
    330e:	000d                	c.nop	3
    3310:	9f40                	0x9f40
    3312:	1548                	addi	x10,x2,676
    3314:	0000                	unimp
    3316:	15a0                	addi	x8,x2,744
    3318:	0000                	unimp
    331a:	0006                	c.slli	x0,0x1
    331c:	0c0c                	addi	x11,x2,528
    331e:	000d                	c.nop	3
    3320:	9f40                	0x9f40
	...
    332a:	13d8                	addi	x14,x2,484
    332c:	0000                	unimp
    332e:	00001453          	fadd.s	f8,f0,f0,rtz
    3332:	7f7d0003          	lb	x0,2039(x26)
    3336:	539f 0014 8400      	0x84000014539f
    333c:	0014                	0x14
    333e:	0c00                	addi	x8,x2,528
    3340:	7800                	flw	f8,48(x8)
    3342:	7fbc                	flw	f15,120(x15)
    3344:	7806                	flw	f16,96(x2)
    3346:	7fb0                	flw	f12,120(x15)
    3348:	1e06                	slli	x28,x28,0x21
    334a:	1c31                	addi	x24,x24,-20
    334c:	849f 0014 6c00      	0x6c000014849f
    3352:	0015                	c.nop	5
    3354:	0b00                	addi	x8,x2,400
    3356:	f300                	fsw	f8,32(x14)
    3358:	5e01                	li	x28,-32
    335a:	b078                	fsd	f14,224(x8)
    335c:	067f                	0x67f
    335e:	311e                	fld	f2,480(x2)
    3360:	9f1c                	0x9f1c
    3362:	156c                	addi	x11,x2,684
    3364:	0000                	unimp
    3366:	15a0                	addi	x8,x2,744
    3368:	0000                	unimp
    336a:	01f3000b          	0x1f3000b
    336e:	915e                	add	x2,x2,x23
    3370:	7fb0                	flw	f12,120(x15)
    3372:	1e06                	slli	x28,x28,0x21
    3374:	1c31                	addi	x24,x24,-20
    3376:	009f 0000 0000      	0x9f
    337c:	0000                	unimp
    337e:	1400                	addi	x8,x2,544
    3380:	0014                	0x14
    3382:	6800                	flw	f8,16(x8)
    3384:	0014                	0x14
    3386:	0300                	addi	x8,x2,384
    3388:	8300                	0x8300
    338a:	9f7f                	0x9f7f
    338c:	1468                	addi	x10,x2,556
    338e:	0000                	unimp
    3390:	1484                	addi	x9,x2,608
    3392:	0000                	unimp
    3394:	000c                	0xc
    3396:	bc78                	fsd	f14,248(x8)
    3398:	067f                	0x67f
    339a:	ac78                	fsd	f14,216(x8)
    339c:	067f                	0x67f
    339e:	311e                	fld	f2,480(x2)
    33a0:	9f1c                	0x9f1c
    33a2:	1484                	addi	x9,x2,608
    33a4:	0000                	unimp
    33a6:	156c                	addi	x11,x2,684
    33a8:	0000                	unimp
    33aa:	01f3000b          	0x1f3000b
    33ae:	785e                	flw	f16,244(x2)
    33b0:	7fac                	flw	f11,120(x15)
    33b2:	1e06                	slli	x28,x28,0x21
    33b4:	1c31                	addi	x24,x24,-20
    33b6:	6c9f 0015 a000      	0xa00000156c9f
    33bc:	0015                	c.nop	5
    33be:	0b00                	addi	x8,x2,400
    33c0:	f300                	fsw	f8,32(x14)
    33c2:	5e01                	li	x28,-32
    33c4:	ac91                	j	3618 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1424>
    33c6:	067f                	0x67f
    33c8:	311e                	fld	f2,480(x2)
    33ca:	9f1c                	0x9f1c
	...
    33d4:	1430                	addi	x12,x2,552
    33d6:	0000                	unimp
    33d8:	00001453          	fadd.s	f8,f0,f0,rtz
    33dc:	7f7e0003          	lb	x0,2039(x28)
    33e0:	539f 0014 6c00      	0x6c000014539f
    33e6:	0015                	c.nop	5
    33e8:	0700                	addi	x8,x2,896
    33ea:	7800                	flw	f8,48(x8)
    33ec:	7f9c                	flw	f15,56(x15)
    33ee:	3106                	fld	f2,96(x2)
    33f0:	9f1c                	0x9f1c
    33f2:	156c                	addi	x11,x2,684
    33f4:	0000                	unimp
    33f6:	15a0                	addi	x8,x2,744
    33f8:	0000                	unimp
    33fa:	9c910007          	0x9c910007
    33fe:	067f                	0x67f
    3400:	1c31                	addi	x24,x24,-20
    3402:	009f 0000 0000      	0x9f
    3408:	0000                	unimp
    340a:	6000                	flw	f8,0(x8)
    340c:	0011                	c.nop	4
    340e:	e400                	fsw	f8,8(x8)
    3410:	0011                	c.nop	4
    3412:	0100                	addi	x8,x2,128
    3414:	5a00                	lw	x8,48(x12)
    3416:	11e4                	addi	x9,x2,236
    3418:	0000                	unimp
    341a:	0000122f          	0x122f
    341e:	0001                	nop
    3420:	00122f5b          	0x122f5b
    3424:	8400                	0x8400
    3426:	04000013          	li	x0,64
    342a:	f300                	fsw	f8,32(x14)
    342c:	5a01                	li	x20,-32
    342e:	009f 0000 0000      	0x9f
    3434:	0000                	unimp
    3436:	6000                	flw	f8,0(x8)
    3438:	0011                	c.nop	4
    343a:	c400                	sw	x8,8(x8)
    343c:	0011                	c.nop	4
    343e:	0100                	addi	x8,x2,128
    3440:	5b00                	lw	x8,48(x14)
    3442:	11c4                	addi	x9,x2,228
    3444:	0000                	unimp
    3446:	1250                	addi	x12,x2,292
    3448:	0000                	unimp
    344a:	0001                	nop
    344c:	5059                	c.li	x0,-10
    344e:	0012                	c.slli	x0,0x4
    3450:	8400                	0x8400
    3452:	04000013          	li	x0,64
    3456:	f300                	fsw	f8,32(x14)
    3458:	5b01                	li	x22,-32
    345a:	009f 0000 0000      	0x9f
    3460:	0000                	unimp
    3462:	6000                	flw	f8,0(x8)
    3464:	0011                	c.nop	4
    3466:	d400                	sw	x8,40(x8)
    3468:	0011                	c.nop	4
    346a:	0100                	addi	x8,x2,128
    346c:	5c00                	lw	x8,56(x8)
    346e:	11d4                	addi	x13,x2,228
    3470:	0000                	unimp
    3472:	0000122f          	0x122f
    3476:	0001                	nop
    3478:	2f56                	fld	f30,336(x2)
    347a:	0012                	c.slli	x0,0x4
    347c:	5000                	lw	x8,32(x8)
    347e:	03000013          	li	x0,48
    3482:	7800                	flw	f8,48(x8)
    3484:	7f98                	flw	f14,56(x15)
    3486:	1350                	addi	x12,x2,420
    3488:	0000                	unimp
    348a:	1384                	addi	x9,x2,480
    348c:	0000                	unimp
    348e:	98910003          	lb	x0,-1655(x2)
    3492:	007f                	0x7f
    3494:	0000                	unimp
    3496:	0000                	unimp
    3498:	0000                	unimp
    349a:	6000                	flw	f8,0(x8)
    349c:	0011                	c.nop	4
    349e:	b400                	fsd	f8,40(x8)
    34a0:	0011                	c.nop	4
    34a2:	0100                	addi	x8,x2,128
    34a4:	5d00                	lw	x8,56(x10)
    34a6:	11b4                	addi	x13,x2,232
    34a8:	0000                	unimp
    34aa:	0000122f          	0x122f
    34ae:	0001                	nop
    34b0:	2f6d                	jal	3c6a <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1a76>
    34b2:	0012                	c.slli	x0,0x4
    34b4:	5000                	lw	x8,32(x8)
    34b6:	03000013          	li	x0,48
    34ba:	7800                	flw	f8,48(x8)
    34bc:	7fa8                	flw	f10,120(x15)
    34be:	1350                	addi	x12,x2,420
    34c0:	0000                	unimp
    34c2:	1384                	addi	x9,x2,480
    34c4:	0000                	unimp
    34c6:	a8910003          	lb	x0,-1399(x2)
    34ca:	007f                	0x7f
    34cc:	0000                	unimp
    34ce:	0000                	unimp
    34d0:	0000                	unimp
    34d2:	6000                	flw	f8,0(x8)
    34d4:	0011                	c.nop	4
    34d6:	a800                	fsd	f8,16(x8)
    34d8:	0011                	c.nop	4
    34da:	0100                	addi	x8,x2,128
    34dc:	5e00                	lw	x8,56(x12)
    34de:	11a8                	addi	x10,x2,232
    34e0:	0000                	unimp
    34e2:	0000122f          	0x122f
    34e6:	0001                	nop
    34e8:	2f6c                	fld	f11,216(x14)
    34ea:	0012                	c.slli	x0,0x4
    34ec:	5000                	lw	x8,32(x8)
    34ee:	03000013          	li	x0,48
    34f2:	7800                	flw	f8,48(x8)
    34f4:	7fa4                	flw	f9,120(x15)
    34f6:	1350                	addi	x12,x2,420
    34f8:	0000                	unimp
    34fa:	1384                	addi	x9,x2,480
    34fc:	0000                	unimp
    34fe:	a4910003          	lb	x0,-1463(x2)
    3502:	007f                	0x7f
    3504:	0000                	unimp
    3506:	0000                	unimp
    3508:	0000                	unimp
    350a:	6000                	flw	f8,0(x8)
    350c:	0011                	c.nop	4
    350e:	f800                	fsw	f8,48(x8)
    3510:	0011                	c.nop	4
    3512:	0100                	addi	x8,x2,128
    3514:	5f00                	lw	x8,56(x14)
    3516:	11f8                	addi	x14,x2,236
    3518:	0000                	unimp
    351a:	1268                	addi	x10,x2,300
    351c:	0000                	unimp
    351e:	bc780003          	lb	x0,-1081(x16)
    3522:	687f                	0x687f
    3524:	0012                	c.slli	x0,0x4
    3526:	8400                	0x8400
    3528:	04000013          	li	x0,64
    352c:	f300                	fsw	f8,32(x14)
    352e:	5f01                	li	x30,-32
    3530:	009f 0000 0000      	0x9f
    3536:	0000                	unimp
    3538:	6000                	flw	f8,0(x8)
    353a:	0011                	c.nop	4
    353c:	2f00                	fld	f8,24(x14)
    353e:	0012                	c.slli	x0,0x4
    3540:	0100                	addi	x8,x2,128
    3542:	6000                	flw	f8,0(x8)
    3544:	0000122f          	0x122f
    3548:	1350                	addi	x12,x2,420
    354a:	0000                	unimp
    354c:	a0780003          	lb	x0,-1529(x16)
    3550:	507f                	0x507f
    3552:	84000013          	li	x0,-1984
    3556:	03000013          	li	x0,48
    355a:	9100                	0x9100
    355c:	7fa0                	flw	f8,120(x15)
	...
    3566:	1160                	addi	x8,x2,172
    3568:	0000                	unimp
    356a:	0000122f          	0x122f
    356e:	0001                	nop
    3570:	2f61                	jal	3d08 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1b14>
    3572:	0012                	c.slli	x0,0x4
    3574:	5000                	lw	x8,32(x8)
    3576:	07000013          	li	x0,112
    357a:	7800                	flw	f8,48(x8)
    357c:	7fac                	flw	f11,120(x15)
    357e:	3106                	fld	f2,96(x2)
    3580:	9f1c                	0x9f1c
    3582:	1350                	addi	x12,x2,420
    3584:	0000                	unimp
    3586:	1384                	addi	x9,x2,480
    3588:	0000                	unimp
    358a:	ac910007          	0xac910007
    358e:	067f                	0x67f
    3590:	1c31                	addi	x24,x24,-20
    3592:	009f 0000 0000      	0x9f
    3598:	0000                	unimp
    359a:	6800                	flw	f8,16(x8)
    359c:	0012                	c.slli	x0,0x4
    359e:	6c00                	flw	f8,24(x8)
    35a0:	0012                	c.slli	x0,0x4
    35a2:	0100                	addi	x8,x2,128
    35a4:	5900                	lw	x8,48(x10)
    35a6:	132c                	addi	x11,x2,424
    35a8:	0000                	unimp
    35aa:	1354                	addi	x13,x2,420
    35ac:	0000                	unimp
    35ae:	0001                	nop
    35b0:	5459                	li	x8,-10
    35b2:	84000013          	li	x0,-1984
    35b6:	01000013          	li	x0,16
    35ba:	5a00                	lw	x8,48(x12)
	...
    35c4:	11a4                	addi	x9,x2,232
    35c6:	0000                	unimp
    35c8:	1268                	addi	x10,x2,300
    35ca:	0000                	unimp
    35cc:	0002                	c.slli64	x0
    35ce:	9f30                	0x9f30
    35d0:	1268                	addi	x10,x2,300
    35d2:	0000                	unimp
    35d4:	126c                	addi	x11,x2,300
    35d6:	0000                	unimp
    35d8:	a0780003          	lb	x0,-1529(x16)
    35dc:	6c7f                	0x6c7f
    35de:	0012                	c.slli	x0,0x4
    35e0:	a800                	fsd	f8,16(x8)
    35e2:	0012                	c.slli	x0,0x4
    35e4:	0100                	addi	x8,x2,128
    35e6:	5900                	lw	x8,48(x10)
    35e8:	132c                	addi	x11,x2,424
    35ea:	0000                	unimp
    35ec:	1350                	addi	x12,x2,420
    35ee:	0000                	unimp
    35f0:	a0780003          	lb	x0,-1529(x16)
    35f4:	507f                	0x507f
    35f6:	84000013          	li	x0,-1984
    35fa:	03000013          	li	x0,48
    35fe:	9100                	0x9100
    3600:	7fa0                	flw	f8,120(x15)
	...
    360a:	11e8                	addi	x10,x2,236
    360c:	0000                	unimp
    360e:	1204                	addi	x9,x2,288
    3610:	0000                	unimp
    3612:	0002                	c.slli64	x0
    3614:	0072                	c.slli	x0,0x1c
    3616:	1204                	addi	x9,x2,288
    3618:	0000                	unimp
    361a:	0000122f          	0x122f
    361e:	0002                	c.slli64	x0
    3620:	007a                	c.slli	x0,0x1e
    3622:	0000122f          	0x122f
    3626:	1350                	addi	x12,x2,420
    3628:	0000                	unimp
    362a:	0004                	0x4
    362c:	b478                	fsd	f14,232(x8)
    362e:	067f                	0x67f
    3630:	1350                	addi	x12,x2,420
    3632:	0000                	unimp
    3634:	1384                	addi	x9,x2,480
    3636:	0000                	unimp
    3638:	0004                	0x4
    363a:	b491                	j	307e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xe8a>
    363c:	067f                	0x67f
	...
    3646:	1214                	addi	x13,x2,288
    3648:	0000                	unimp
    364a:	1228                	addi	x10,x2,296
    364c:	0000                	unimp
    364e:	0002                	c.slli64	x0
    3650:	0072                	c.slli	x0,0x1c
    3652:	1228                	addi	x10,x2,296
    3654:	0000                	unimp
    3656:	125c                	addi	x15,x2,292
    3658:	0000                	unimp
    365a:	0002                	c.slli64	x0
    365c:	0084                	addi	x9,x2,64
    365e:	125c                	addi	x15,x2,292
    3660:	0000                	unimp
    3662:	1350                	addi	x12,x2,420
    3664:	0000                	unimp
    3666:	0004                	0x4
    3668:	b078                	fsd	f14,224(x8)
    366a:	067f                	0x67f
    366c:	1350                	addi	x12,x2,420
    366e:	0000                	unimp
    3670:	1384                	addi	x9,x2,480
    3672:	0000                	unimp
    3674:	0004                	0x4
    3676:	b091                	j	2eba <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xcc6>
    3678:	067f                	0x67f
	...
    3682:	124c                	addi	x11,x2,292
    3684:	0000                	unimp
    3686:	1268                	addi	x10,x2,300
    3688:	0000                	unimp
    368a:	0004                	0x4
    368c:	b878                	fsd	f14,240(x8)
    368e:	067f                	0x67f
    3690:	1268                	addi	x10,x2,300
    3692:	0000                	unimp
    3694:	1344                	addi	x9,x2,420
    3696:	0000                	unimp
    3698:	0002                	c.slli64	x0
    369a:	0072                	c.slli	x0,0x1c
    369c:	1344                	addi	x9,x2,420
    369e:	0000                	unimp
    36a0:	1350                	addi	x12,x2,420
    36a2:	0000                	unimp
    36a4:	0004                	0x4
    36a6:	b878                	fsd	f14,240(x8)
    36a8:	067f                	0x67f
    36aa:	1350                	addi	x12,x2,420
    36ac:	0000                	unimp
    36ae:	1384                	addi	x9,x2,480
    36b0:	0000                	unimp
    36b2:	0004                	0x4
    36b4:	b891                	j	2f08 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0xd14>
    36b6:	067f                	0x67f
	...
    36c0:	124c                	addi	x11,x2,292
    36c2:	0000                	unimp
    36c4:	1268                	addi	x10,x2,300
    36c6:	0000                	unimp
    36c8:	0002                	c.slli64	x0
    36ca:	9f30                	0x9f30
    36cc:	1268                	addi	x10,x2,300
    36ce:	0000                	unimp
    36d0:	12d0                	addi	x12,x2,356
    36d2:	0000                	unimp
    36d4:	0001                	nop
    36d6:	d062                	sw	x24,32(x2)
    36d8:	0012                	c.slli	x0,0x4
    36da:	2c00                	fld	f8,24(x8)
    36dc:	03000013          	li	x0,48
    36e0:	8200                	0x8200
    36e2:	9f7f                	0x9f7f
    36e4:	132c                	addi	x11,x2,424
    36e6:	0000                	unimp
    36e8:	1358                	addi	x14,x2,420
    36ea:	0000                	unimp
    36ec:	0001                	nop
    36ee:	0062                	c.slli	x0,0x18
    36f0:	0000                	unimp
    36f2:	0000                	unimp
    36f4:	0000                	unimp
    36f6:	b000                	fsd	f8,32(x8)
    36f8:	0012                	c.slli	x0,0x4
    36fa:	bc00                	fsd	f8,56(x8)
    36fc:	0012                	c.slli	x0,0x4
    36fe:	0100                	addi	x8,x2,128
    3700:	5e00                	lw	x8,56(x12)
    3702:	12bc                	addi	x15,x2,360
    3704:	0000                	unimp
    3706:	000012d3          	fadd.s	f5,f0,f0,rtz
    370a:	8c870003          	lb	x0,-1848(x14)
    370e:	007a                	c.slli	x0,0x1e
    3710:	0000                	unimp
    3712:	0000                	unimp
    3714:	0000                	unimp
    3716:	6800                	flw	f8,16(x8)
    3718:	0012                	c.slli	x0,0x4
    371a:	6c00                	flw	f8,24(x8)
    371c:	0012                	c.slli	x0,0x4
    371e:	0600                	addi	x8,x2,768
    3720:	0c00                	addi	x8,x2,528
    3722:	0d0c                	addi	x11,x2,656
    3724:	4000                	lw	x8,0(x8)
    3726:	b09f 0012 8400      	0x84000012b09f
    372c:	06000013          	li	x0,96
    3730:	0c00                	addi	x8,x2,528
    3732:	0d0c                	addi	x11,x2,656
    3734:	4000                	lw	x8,0(x8)
    3736:	009f 0000 0000      	0x9f
    373c:	0000                	unimp
    373e:	6800                	flw	f8,16(x8)
    3740:	0012                	c.slli	x0,0x4
    3742:	6c00                	flw	f8,24(x8)
    3744:	0012                	c.slli	x0,0x4
    3746:	0300                	addi	x8,x2,384
    3748:	8700                	0x8700
    374a:	7a8c                	flw	f11,48(x13)
    374c:	132c                	addi	x11,x2,424
    374e:	0000                	unimp
    3750:	0000133f 8c870003 	0x8c8700030000133f
    3758:	007a                	c.slli	x0,0x1e
    375a:	0000                	unimp
    375c:	0000                	unimp
    375e:	0000                	unimp
    3760:	6800                	flw	f8,16(x8)
    3762:	0012                	c.slli	x0,0x4
    3764:	6c00                	flw	f8,24(x8)
    3766:	0012                	c.slli	x0,0x4
    3768:	0600                	addi	x8,x2,768
    376a:	0c00                	addi	x8,x2,528
    376c:	0d0c                	addi	x11,x2,656
    376e:	4000                	lw	x8,0(x8)
    3770:	2c9f 0013 8400      	0x840000132c9f
    3776:	06000013          	li	x0,96
    377a:	0c00                	addi	x8,x2,528
    377c:	0d0c                	addi	x11,x2,656
    377e:	4000                	lw	x8,0(x8)
    3780:	009f 0000 0000      	0x9f
    3786:	0000                	unimp
    3788:	a400                	fsd	f8,8(x8)
    378a:	0011                	c.nop	4
    378c:	a800                	fsd	f8,16(x8)
    378e:	0011                	c.nop	4
    3790:	0800                	addi	x8,x2,16
    3792:	7e00                	flw	f8,56(x12)
    3794:	7d00                	flw	f8,56(x10)
    3796:	1e00                	addi	x8,x2,816
    3798:	1c31                	addi	x24,x24,-20
    379a:	a89f 0011 d800      	0xd8000011a89f
    37a0:	0011                	c.nop	4
    37a2:	0300                	addi	x8,x2,384
    37a4:	7e00                	flw	f8,56(x12)
    37a6:	9f7f                	0x9f7f
    37a8:	11d8                	addi	x14,x2,228
    37aa:	0000                	unimp
    37ac:	0000122f          	0x122f
    37b0:	0008                	0x8
    37b2:	008c                	addi	x11,x2,64
    37b4:	008d                	addi	x1,x1,3
    37b6:	311e                	fld	f2,480(x2)
    37b8:	9f1c                	0x9f1c
    37ba:	0000122f          	0x122f
    37be:	1350                	addi	x12,x2,420
    37c0:	0000                	unimp
    37c2:	000c                	0xc
    37c4:	a478                	fsd	f14,200(x8)
    37c6:	067f                	0x67f
    37c8:	a878                	fsd	f14,208(x8)
    37ca:	067f                	0x67f
    37cc:	311e                	fld	f2,480(x2)
    37ce:	9f1c                	0x9f1c
    37d0:	1350                	addi	x12,x2,420
    37d2:	0000                	unimp
    37d4:	1384                	addi	x9,x2,480
    37d6:	0000                	unimp
    37d8:	000c                	0xc
    37da:	a491                	j	3a1e <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x182a>
    37dc:	067f                	0x67f
    37de:	a891                	j	3832 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x163e>
    37e0:	067f                	0x67f
    37e2:	311e                	fld	f2,480(x2)
    37e4:	9f1c                	0x9f1c
	...
    37ee:	11e8                	addi	x10,x2,236
    37f0:	0000                	unimp
    37f2:	11f8                	addi	x14,x2,236
    37f4:	0000                	unimp
    37f6:	0008                	0x8
    37f8:	008c                	addi	x11,x2,64
    37fa:	007f                	0x7f
    37fc:	311e                	fld	f2,480(x2)
    37fe:	9f1c                	0x9f1c
    3800:	11f8                	addi	x14,x2,236
    3802:	0000                	unimp
    3804:	0000122f          	0x122f
    3808:	000a                	c.slli	x0,0x2
    380a:	008c                	addi	x11,x2,64
    380c:	bc78                	fsd	f14,248(x8)
    380e:	067f                	0x67f
    3810:	311e                	fld	f2,480(x2)
    3812:	9f1c                	0x9f1c
    3814:	0000122f          	0x122f
    3818:	1268                	addi	x10,x2,300
    381a:	0000                	unimp
    381c:	000c                	0xc
    381e:	a478                	fsd	f14,200(x8)
    3820:	067f                	0x67f
    3822:	bc78                	fsd	f14,248(x8)
    3824:	067f                	0x67f
    3826:	311e                	fld	f2,480(x2)
    3828:	9f1c                	0x9f1c
    382a:	1268                	addi	x10,x2,300
    382c:	0000                	unimp
    382e:	1350                	addi	x12,x2,420
    3830:	0000                	unimp
    3832:	a478000b          	0xa478000b
    3836:	067f                	0x67f
    3838:	1e5f01f3          	0x1e5f01f3
    383c:	1c31                	addi	x24,x24,-20
    383e:	509f 0013 8400      	0x84000013509f
    3844:	0b000013          	li	x0,176
    3848:	9100                	0x9100
    384a:	7fa4                	flw	f9,120(x15)
    384c:	f306                	fsw	f1,164(x2)
    384e:	5f01                	li	x30,-32
    3850:	311e                	fld	f2,480(x2)
    3852:	9f1c                	0x9f1c
	...
    385c:	1214                	addi	x13,x2,288
    385e:	0000                	unimp
    3860:	0000122f          	0x122f
    3864:	000a                	c.slli	x0,0x2
    3866:	008d                	addi	x1,x1,3
    3868:	bc78                	fsd	f14,248(x8)
    386a:	067f                	0x67f
    386c:	311e                	fld	f2,480(x2)
    386e:	9f1c                	0x9f1c
    3870:	0000122f          	0x122f
    3874:	1268                	addi	x10,x2,300
    3876:	0000                	unimp
    3878:	000c                	0xc
    387a:	a878                	fsd	f14,208(x8)
    387c:	067f                	0x67f
    387e:	bc78                	fsd	f14,248(x8)
    3880:	067f                	0x67f
    3882:	311e                	fld	f2,480(x2)
    3884:	9f1c                	0x9f1c
    3886:	1268                	addi	x10,x2,300
    3888:	0000                	unimp
    388a:	1350                	addi	x12,x2,420
    388c:	0000                	unimp
    388e:	a878000b          	0xa878000b
    3892:	067f                	0x67f
    3894:	1e5f01f3          	0x1e5f01f3
    3898:	1c31                	addi	x24,x24,-20
    389a:	509f 0013 8400      	0x84000013509f
    38a0:	0b000013          	li	x0,176
    38a4:	9100                	0x9100
    38a6:	7fa8                	flw	f10,120(x15)
    38a8:	f306                	fsw	f1,164(x2)
    38aa:	5f01                	li	x30,-32
    38ac:	311e                	fld	f2,480(x2)
    38ae:	9f1c                	0x9f1c
	...
    38b8:	0f3c                	addi	x15,x2,920
    38ba:	0000                	unimp
    38bc:	0fc0                	addi	x8,x2,980
    38be:	0000                	unimp
    38c0:	0001                	nop
    38c2:	c05a                	sw	x22,0(x2)
    38c4:	0b00000f          	fence	irw,unknown
    38c8:	0010                	0x10
    38ca:	0100                	addi	x8,x2,128
    38cc:	5b00                	lw	x8,48(x14)
    38ce:	0000100b          	0x100b
    38d2:	1160                	addi	x8,x2,172
    38d4:	0000                	unimp
    38d6:	0004                	0x4
    38d8:	9f5a01f3          	0x9f5a01f3
	...
    38e4:	0f3c                	addi	x15,x2,920
    38e6:	0000                	unimp
    38e8:	0fa0                	addi	x8,x2,984
    38ea:	0000                	unimp
    38ec:	0001                	nop
    38ee:	000fa05b          	0xfa05b
    38f2:	2c00                	fld	f8,24(x8)
    38f4:	0010                	0x10
    38f6:	0100                	addi	x8,x2,128
    38f8:	5900                	lw	x8,48(x10)
    38fa:	102c                	addi	x11,x2,40
    38fc:	0000                	unimp
    38fe:	1160                	addi	x8,x2,172
    3900:	0000                	unimp
    3902:	0004                	0x4
    3904:	9f5b01f3          	0x9f5b01f3
	...
    3910:	0f3c                	addi	x15,x2,920
    3912:	0000                	unimp
    3914:	0fb0                	addi	x12,x2,984
    3916:	0000                	unimp
    3918:	0001                	nop
    391a:	b05c                	fsd	f15,160(x8)
    391c:	0b00000f          	fence	irw,unknown
    3920:	0010                	0x10
    3922:	0100                	addi	x8,x2,128
    3924:	5600                	lw	x8,40(x12)
    3926:	0000100b          	0x100b
    392a:	112c                	addi	x11,x2,168
    392c:	0000                	unimp
    392e:	98780003          	lb	x0,-1657(x16)
    3932:	2c7f                	0x2c7f
    3934:	0011                	c.nop	4
    3936:	6000                	flw	f8,0(x8)
    3938:	0011                	c.nop	4
    393a:	0300                	addi	x8,x2,384
    393c:	9100                	0x9100
    393e:	7f98                	flw	f14,56(x15)
	...
    3948:	0f3c                	addi	x15,x2,920
    394a:	0000                	unimp
    394c:	0f90                	addi	x12,x2,976
    394e:	0000                	unimp
    3950:	0001                	nop
    3952:	905d                	srli	x8,x8,0x37
    3954:	0b00000f          	fence	irw,unknown
    3958:	0010                	0x10
    395a:	0100                	addi	x8,x2,128
    395c:	6d00                	flw	f8,24(x10)
    395e:	0000100b          	0x100b
    3962:	112c                	addi	x11,x2,168
    3964:	0000                	unimp
    3966:	a8780003          	lb	x0,-1401(x16)
    396a:	2c7f                	0x2c7f
    396c:	0011                	c.nop	4
    396e:	6000                	flw	f8,0(x8)
    3970:	0011                	c.nop	4
    3972:	0300                	addi	x8,x2,384
    3974:	9100                	0x9100
    3976:	7fa8                	flw	f10,120(x15)
	...
    3980:	0f3c                	addi	x15,x2,920
    3982:	0000                	unimp
    3984:	0f84                	addi	x9,x2,976
    3986:	0000                	unimp
    3988:	0001                	nop
    398a:	845e                	mv	x8,x23
    398c:	0b00000f          	fence	irw,unknown
    3990:	0010                	0x10
    3992:	0100                	addi	x8,x2,128
    3994:	6c00                	flw	f8,24(x8)
    3996:	0000100b          	0x100b
    399a:	112c                	addi	x11,x2,168
    399c:	0000                	unimp
    399e:	a4780003          	lb	x0,-1465(x16)
    39a2:	2c7f                	0x2c7f
    39a4:	0011                	c.nop	4
    39a6:	6000                	flw	f8,0(x8)
    39a8:	0011                	c.nop	4
    39aa:	0300                	addi	x8,x2,384
    39ac:	9100                	0x9100
    39ae:	7fa4                	flw	f9,120(x15)
	...
    39b8:	0f3c                	addi	x15,x2,920
    39ba:	0000                	unimp
    39bc:	0fd4                	addi	x13,x2,980
    39be:	0000                	unimp
    39c0:	0001                	nop
    39c2:	d45f 000f 4400      	0x4400000fd45f
    39c8:	0010                	0x10
    39ca:	0300                	addi	x8,x2,384
    39cc:	7800                	flw	f8,48(x8)
    39ce:	7fbc                	flw	f15,120(x15)
    39d0:	1044                	addi	x9,x2,36
    39d2:	0000                	unimp
    39d4:	1160                	addi	x8,x2,172
    39d6:	0000                	unimp
    39d8:	0004                	0x4
    39da:	9f5f01f3          	0x9f5f01f3
	...
    39e6:	0f3c                	addi	x15,x2,920
    39e8:	0000                	unimp
    39ea:	0000100b          	0x100b
    39ee:	0001                	nop
    39f0:	0b60                	addi	x8,x2,412
    39f2:	0010                	0x10
    39f4:	2c00                	fld	f8,24(x8)
    39f6:	0011                	c.nop	4
    39f8:	0300                	addi	x8,x2,384
    39fa:	7800                	flw	f8,48(x8)
    39fc:	7fa0                	flw	f8,120(x15)
    39fe:	112c                	addi	x11,x2,168
    3a00:	0000                	unimp
    3a02:	1160                	addi	x8,x2,172
    3a04:	0000                	unimp
    3a06:	a0910003          	lb	x0,-1527(x2)
    3a0a:	007f                	0x7f
    3a0c:	0000                	unimp
    3a0e:	0000                	unimp
    3a10:	0000                	unimp
    3a12:	3c00                	fld	f8,56(x8)
    3a14:	0b00000f          	fence	irw,unknown
    3a18:	0010                	0x10
    3a1a:	0100                	addi	x8,x2,128
    3a1c:	6100                	flw	f8,0(x10)
    3a1e:	0000100b          	0x100b
    3a22:	112c                	addi	x11,x2,168
    3a24:	0000                	unimp
    3a26:	ac780007          	0xac780007
    3a2a:	067f                	0x67f
    3a2c:	1c31                	addi	x24,x24,-20
    3a2e:	2c9f 0011 6000      	0x600000112c9f
    3a34:	0011                	c.nop	4
    3a36:	0700                	addi	x8,x2,896
    3a38:	9100                	0x9100
    3a3a:	7fac                	flw	f11,120(x15)
    3a3c:	3106                	fld	f2,96(x2)
    3a3e:	9f1c                	0x9f1c
	...
    3a48:	1044                	addi	x9,x2,36
    3a4a:	0000                	unimp
    3a4c:	1048                	addi	x10,x2,36
    3a4e:	0000                	unimp
    3a50:	0001                	nop
    3a52:	0859                	addi	x16,x16,22
    3a54:	0011                	c.nop	4
    3a56:	3000                	fld	f8,32(x8)
    3a58:	0011                	c.nop	4
    3a5a:	0100                	addi	x8,x2,128
    3a5c:	5900                	lw	x8,48(x10)
    3a5e:	1130                	addi	x12,x2,168
    3a60:	0000                	unimp
    3a62:	1160                	addi	x8,x2,172
    3a64:	0000                	unimp
    3a66:	0001                	nop
    3a68:	005a                	c.slli	x0,0x16
    3a6a:	0000                	unimp
    3a6c:	0000                	unimp
    3a6e:	0000                	unimp
    3a70:	8000                	0x8000
    3a72:	4400000f          	0x4400000f
    3a76:	0010                	0x10
    3a78:	0200                	addi	x8,x2,256
    3a7a:	3000                	fld	f8,32(x8)
    3a7c:	449f 0010 4800      	0x48000010449f
    3a82:	0010                	0x10
    3a84:	0300                	addi	x8,x2,384
    3a86:	7800                	flw	f8,48(x8)
    3a88:	7fa0                	flw	f8,120(x15)
    3a8a:	1048                	addi	x10,x2,36
    3a8c:	0000                	unimp
    3a8e:	1084                	addi	x9,x2,96
    3a90:	0000                	unimp
    3a92:	0001                	nop
    3a94:	0859                	addi	x16,x16,22
    3a96:	0011                	c.nop	4
    3a98:	2c00                	fld	f8,24(x8)
    3a9a:	0011                	c.nop	4
    3a9c:	0300                	addi	x8,x2,384
    3a9e:	7800                	flw	f8,48(x8)
    3aa0:	7fa0                	flw	f8,120(x15)
    3aa2:	112c                	addi	x11,x2,168
    3aa4:	0000                	unimp
    3aa6:	1160                	addi	x8,x2,172
    3aa8:	0000                	unimp
    3aaa:	a0910003          	lb	x0,-1527(x2)
    3aae:	007f                	0x7f
    3ab0:	0000                	unimp
    3ab2:	0000                	unimp
    3ab4:	0000                	unimp
    3ab6:	c400                	sw	x8,8(x8)
    3ab8:	e000000f          	0xe000000f
    3abc:	0200000f          	fence	r,unknown
    3ac0:	7200                	flw	f8,32(x12)
    3ac2:	e000                	fsw	f8,0(x8)
    3ac4:	0b00000f          	fence	irw,unknown
    3ac8:	0010                	0x10
    3aca:	0200                	addi	x8,x2,256
    3acc:	7a00                	flw	f8,48(x12)
    3ace:	0b00                	addi	x8,x2,400
    3ad0:	0010                	0x10
    3ad2:	2c00                	fld	f8,24(x8)
    3ad4:	0011                	c.nop	4
    3ad6:	0400                	addi	x8,x2,512
    3ad8:	7800                	flw	f8,48(x8)
    3ada:	7fb4                	flw	f13,120(x15)
    3adc:	2c06                	fld	f24,64(x2)
    3ade:	0011                	c.nop	4
    3ae0:	6000                	flw	f8,0(x8)
    3ae2:	0011                	c.nop	4
    3ae4:	0400                	addi	x8,x2,512
    3ae6:	9100                	0x9100
    3ae8:	7fb4                	flw	f13,120(x15)
    3aea:	0006                	c.slli	x0,0x1
    3aec:	0000                	unimp
    3aee:	0000                	unimp
    3af0:	0000                	unimp
    3af2:	f000                	fsw	f8,32(x8)
    3af4:	0400000f          	fence	o,unknown
    3af8:	0010                	0x10
    3afa:	0200                	addi	x8,x2,256
    3afc:	7200                	flw	f8,32(x12)
    3afe:	0400                	addi	x8,x2,512
    3b00:	0010                	0x10
    3b02:	3800                	fld	f8,48(x8)
    3b04:	0010                	0x10
    3b06:	0200                	addi	x8,x2,256
    3b08:	8400                	0x8400
    3b0a:	3800                	fld	f8,48(x8)
    3b0c:	0010                	0x10
    3b0e:	2c00                	fld	f8,24(x8)
    3b10:	0011                	c.nop	4
    3b12:	0400                	addi	x8,x2,512
    3b14:	7800                	flw	f8,48(x8)
    3b16:	7fb0                	flw	f12,120(x15)
    3b18:	2c06                	fld	f24,64(x2)
    3b1a:	0011                	c.nop	4
    3b1c:	6000                	flw	f8,0(x8)
    3b1e:	0011                	c.nop	4
    3b20:	0400                	addi	x8,x2,512
    3b22:	9100                	0x9100
    3b24:	7fb0                	flw	f12,120(x15)
    3b26:	0006                	c.slli	x0,0x1
    3b28:	0000                	unimp
    3b2a:	0000                	unimp
    3b2c:	0000                	unimp
    3b2e:	2800                	fld	f8,16(x8)
    3b30:	0010                	0x10
    3b32:	4400                	lw	x8,8(x8)
    3b34:	0010                	0x10
    3b36:	0400                	addi	x8,x2,512
    3b38:	7800                	flw	f8,48(x8)
    3b3a:	7fb8                	flw	f14,120(x15)
    3b3c:	4406                	lw	x8,64(x2)
    3b3e:	0010                	0x10
    3b40:	2000                	fld	f8,0(x8)
    3b42:	0011                	c.nop	4
    3b44:	0200                	addi	x8,x2,256
    3b46:	7200                	flw	f8,32(x12)
    3b48:	2000                	fld	f8,0(x8)
    3b4a:	0011                	c.nop	4
    3b4c:	2c00                	fld	f8,24(x8)
    3b4e:	0011                	c.nop	4
    3b50:	0400                	addi	x8,x2,512
    3b52:	7800                	flw	f8,48(x8)
    3b54:	7fb8                	flw	f14,120(x15)
    3b56:	2c06                	fld	f24,64(x2)
    3b58:	0011                	c.nop	4
    3b5a:	6000                	flw	f8,0(x8)
    3b5c:	0011                	c.nop	4
    3b5e:	0400                	addi	x8,x2,512
    3b60:	9100                	0x9100
    3b62:	7fb8                	flw	f14,120(x15)
    3b64:	0006                	c.slli	x0,0x1
    3b66:	0000                	unimp
    3b68:	0000                	unimp
    3b6a:	0000                	unimp
    3b6c:	2800                	fld	f8,16(x8)
    3b6e:	0010                	0x10
    3b70:	4400                	lw	x8,8(x8)
    3b72:	0010                	0x10
    3b74:	0200                	addi	x8,x2,256
    3b76:	3000                	fld	f8,32(x8)
    3b78:	449f 0010 ac00      	0xac000010449f
    3b7e:	0010                	0x10
    3b80:	0100                	addi	x8,x2,128
    3b82:	6200                	flw	f8,0(x12)
    3b84:	10ac                	addi	x11,x2,104
    3b86:	0000                	unimp
    3b88:	1108                	addi	x10,x2,160
    3b8a:	0000                	unimp
    3b8c:	7f820003          	lb	x0,2040(x4) # 7f8 <bsg_printf+0x32c>
    3b90:	089f 0011 3400      	0x34000011089f
    3b96:	0011                	c.nop	4
    3b98:	0100                	addi	x8,x2,128
    3b9a:	6200                	flw	f8,0(x12)
	...
    3ba4:	108c                	addi	x11,x2,96
    3ba6:	0000                	unimp
    3ba8:	1098                	addi	x14,x2,96
    3baa:	0000                	unimp
    3bac:	0001                	nop
    3bae:	985e                	add	x16,x16,x23
    3bb0:	0010                	0x10
    3bb2:	af00                	fsd	f8,24(x14)
    3bb4:	0010                	0x10
    3bb6:	0300                	addi	x8,x2,384
    3bb8:	8700                	0x8700
    3bba:	7a8c                	flw	f11,48(x13)
	...
    3bc4:	1044                	addi	x9,x2,36
    3bc6:	0000                	unimp
    3bc8:	1048                	addi	x10,x2,36
    3bca:	0000                	unimp
    3bcc:	0006                	c.slli	x0,0x1
    3bce:	0c0c                	addi	x11,x2,528
    3bd0:	000d                	c.nop	3
    3bd2:	9f40                	0x9f40
    3bd4:	108c                	addi	x11,x2,96
    3bd6:	0000                	unimp
    3bd8:	1160                	addi	x8,x2,172
    3bda:	0000                	unimp
    3bdc:	0006                	c.slli	x0,0x1
    3bde:	0c0c                	addi	x11,x2,528
    3be0:	000d                	c.nop	3
    3be2:	9f40                	0x9f40
	...
    3bec:	1044                	addi	x9,x2,36
    3bee:	0000                	unimp
    3bf0:	1048                	addi	x10,x2,36
    3bf2:	0000                	unimp
    3bf4:	8c870003          	lb	x0,-1848(x14)
    3bf8:	087a                	slli	x16,x16,0x1e
    3bfa:	0011                	c.nop	4
    3bfc:	1b00                	addi	x8,x2,432
    3bfe:	0011                	c.nop	4
    3c00:	0300                	addi	x8,x2,384
    3c02:	8700                	0x8700
    3c04:	7a8c                	flw	f11,48(x13)
	...
    3c0e:	1044                	addi	x9,x2,36
    3c10:	0000                	unimp
    3c12:	1048                	addi	x10,x2,36
    3c14:	0000                	unimp
    3c16:	0006                	c.slli	x0,0x1
    3c18:	0c0c                	addi	x11,x2,528
    3c1a:	000d                	c.nop	3
    3c1c:	9f40                	0x9f40
    3c1e:	1108                	addi	x10,x2,160
    3c20:	0000                	unimp
    3c22:	1160                	addi	x8,x2,172
    3c24:	0000                	unimp
    3c26:	0006                	c.slli	x0,0x1
    3c28:	0c0c                	addi	x11,x2,528
    3c2a:	000d                	c.nop	3
    3c2c:	9f40                	0x9f40
	...
    3c36:	0f80                	addi	x8,x2,976
    3c38:	0000                	unimp
    3c3a:	0f84                	addi	x9,x2,976
    3c3c:	0000                	unimp
    3c3e:	0008                	0x8
    3c40:	007e                	c.slli	x0,0x1f
    3c42:	007d                	c.nop	31
    3c44:	311e                	fld	f2,480(x2)
    3c46:	9f1c                	0x9f1c
    3c48:	0f84                	addi	x9,x2,976
    3c4a:	0000                	unimp
    3c4c:	0fb4                	addi	x13,x2,984
    3c4e:	0000                	unimp
    3c50:	7f7e0003          	lb	x0,2039(x28)
    3c54:	b49f 000f 0b00      	0xb00000fb49f
    3c5a:	0010                	0x10
    3c5c:	0800                	addi	x8,x2,16
    3c5e:	8c00                	0x8c00
    3c60:	8d00                	0x8d00
    3c62:	1e00                	addi	x8,x2,816
    3c64:	1c31                	addi	x24,x24,-20
    3c66:	0b9f 0010 2c00      	0x2c0000100b9f
    3c6c:	0011                	c.nop	4
    3c6e:	0c00                	addi	x8,x2,528
    3c70:	7800                	flw	f8,48(x8)
    3c72:	7fa4                	flw	f9,120(x15)
    3c74:	7806                	flw	f16,96(x2)
    3c76:	7fa8                	flw	f10,120(x15)
    3c78:	1e06                	slli	x28,x28,0x21
    3c7a:	1c31                	addi	x24,x24,-20
    3c7c:	2c9f 0011 6000      	0x600000112c9f
    3c82:	0011                	c.nop	4
    3c84:	0c00                	addi	x8,x2,528
    3c86:	9100                	0x9100
    3c88:	7fa4                	flw	f9,120(x15)
    3c8a:	9106                	add	x2,x2,x1
    3c8c:	7fa8                	flw	f10,120(x15)
    3c8e:	1e06                	slli	x28,x28,0x21
    3c90:	1c31                	addi	x24,x24,-20
    3c92:	009f 0000 0000      	0x9f
    3c98:	0000                	unimp
    3c9a:	c400                	sw	x8,8(x8)
    3c9c:	d400000f          	0xd400000f
    3ca0:	0800000f          	fence	i,unknown
    3ca4:	8c00                	0x8c00
    3ca6:	7f00                	flw	f8,56(x14)
    3ca8:	1e00                	addi	x8,x2,816
    3caa:	1c31                	addi	x24,x24,-20
    3cac:	d49f 000f 0b00      	0xb00000fd49f
    3cb2:	0010                	0x10
    3cb4:	0a00                	addi	x8,x2,272
    3cb6:	8c00                	0x8c00
    3cb8:	7800                	flw	f8,48(x8)
    3cba:	7fbc                	flw	f15,120(x15)
    3cbc:	1e06                	slli	x28,x28,0x21
    3cbe:	1c31                	addi	x24,x24,-20
    3cc0:	0b9f 0010 4400      	0x440000100b9f
    3cc6:	0010                	0x10
    3cc8:	0c00                	addi	x8,x2,528
    3cca:	7800                	flw	f8,48(x8)
    3ccc:	7fa4                	flw	f9,120(x15)
    3cce:	7806                	flw	f16,96(x2)
    3cd0:	7fbc                	flw	f15,120(x15)
    3cd2:	1e06                	slli	x28,x28,0x21
    3cd4:	1c31                	addi	x24,x24,-20
    3cd6:	449f 0010 2c00      	0x2c000010449f
    3cdc:	0011                	c.nop	4
    3cde:	0b00                	addi	x8,x2,400
    3ce0:	7800                	flw	f8,48(x8)
    3ce2:	7fa4                	flw	f9,120(x15)
    3ce4:	f306                	fsw	f1,164(x2)
    3ce6:	5f01                	li	x30,-32
    3ce8:	311e                	fld	f2,480(x2)
    3cea:	9f1c                	0x9f1c
    3cec:	112c                	addi	x11,x2,168
    3cee:	0000                	unimp
    3cf0:	1160                	addi	x8,x2,172
    3cf2:	0000                	unimp
    3cf4:	a491000b          	0xa491000b
    3cf8:	067f                	0x67f
    3cfa:	1e5f01f3          	0x1e5f01f3
    3cfe:	1c31                	addi	x24,x24,-20
    3d00:	009f 0000 0000      	0x9f
    3d06:	0000                	unimp
    3d08:	f000                	fsw	f8,32(x8)
    3d0a:	0b00000f          	fence	irw,unknown
    3d0e:	0010                	0x10
    3d10:	0a00                	addi	x8,x2,272
    3d12:	8d00                	0x8d00
    3d14:	7800                	flw	f8,48(x8)
    3d16:	7fbc                	flw	f15,120(x15)
    3d18:	1e06                	slli	x28,x28,0x21
    3d1a:	1c31                	addi	x24,x24,-20
    3d1c:	0b9f 0010 4400      	0x440000100b9f
    3d22:	0010                	0x10
    3d24:	0c00                	addi	x8,x2,528
    3d26:	7800                	flw	f8,48(x8)
    3d28:	7fa8                	flw	f10,120(x15)
    3d2a:	7806                	flw	f16,96(x2)
    3d2c:	7fbc                	flw	f15,120(x15)
    3d2e:	1e06                	slli	x28,x28,0x21
    3d30:	1c31                	addi	x24,x24,-20
    3d32:	449f 0010 2c00      	0x2c000010449f
    3d38:	0011                	c.nop	4
    3d3a:	0b00                	addi	x8,x2,400
    3d3c:	7800                	flw	f8,48(x8)
    3d3e:	7fa8                	flw	f10,120(x15)
    3d40:	f306                	fsw	f1,164(x2)
    3d42:	5f01                	li	x30,-32
    3d44:	311e                	fld	f2,480(x2)
    3d46:	9f1c                	0x9f1c
    3d48:	112c                	addi	x11,x2,168
    3d4a:	0000                	unimp
    3d4c:	1160                	addi	x8,x2,172
    3d4e:	0000                	unimp
    3d50:	a891000b          	0xa891000b
    3d54:	067f                	0x67f
    3d56:	1e5f01f3          	0x1e5f01f3
    3d5a:	1c31                	addi	x24,x24,-20
    3d5c:	009f 0000 0000      	0x9f
    3d62:	0000                	unimp
    3d64:	8400                	0x8400
    3d66:	000d                	c.nop	3
    3d68:	c000                	sw	x8,0(x8)
    3d6a:	000d                	c.nop	3
    3d6c:	0100                	addi	x8,x2,128
    3d6e:	5c00                	lw	x8,56(x8)
    3d70:	0de4                	addi	x9,x2,732
    3d72:	0000                	unimp
    3d74:	0e64                	addi	x9,x2,796
    3d76:	0000                	unimp
    3d78:	0001                	nop
    3d7a:	c05c                	sw	x15,4(x8)
    3d7c:	000e                	c.slli	x0,0x3
    3d7e:	3c00                	fld	f8,56(x8)
    3d80:	0100000f          	fence	w,unknown
    3d84:	5c00                	lw	x8,56(x8)
	...
    3d8e:	0db4                	addi	x13,x2,728
    3d90:	0000                	unimp
    3d92:	0dc0                	addi	x8,x2,724
    3d94:	0000                	unimp
    3d96:	000e                	c.slli	x0,0x3
    3d98:	007e                	c.slli	x0,0x1f
    3d9a:	ff08                	fsw	f10,56(x14)
    3d9c:	811a                	mv	x2,x6
    3d9e:	0800                	addi	x8,x2,16
    3da0:	1aff                	0x1aff
    3da2:	3122                	fld	f2,40(x2)
    3da4:	9f26                	add	x30,x30,x9
    3da6:	0de4                	addi	x9,x2,732
    3da8:	0000                	unimp
    3daa:	0de8                	addi	x10,x2,732
    3dac:	0000                	unimp
    3dae:	000e                	c.slli	x0,0x3
    3db0:	007e                	c.slli	x0,0x1f
    3db2:	ff08                	fsw	f10,56(x14)
    3db4:	811a                	mv	x2,x6
    3db6:	0800                	addi	x8,x2,16
    3db8:	1aff                	0x1aff
    3dba:	3122                	fld	f2,40(x2)
    3dbc:	9f26                	add	x30,x30,x9
	...
    3dc6:	0db4                	addi	x13,x2,728
    3dc8:	0000                	unimp
    3dca:	0db8                	addi	x14,x2,728
    3dcc:	0000                	unimp
    3dce:	0001                	nop
    3dd0:	005c                	addi	x15,x2,4
    3dd2:	0000                	unimp
    3dd4:	0000                	unimp
    3dd6:	0000                	unimp
    3dd8:	b400                	fsd	f8,40(x8)
    3dda:	000d                	c.nop	3
    3ddc:	b800                	fsd	f8,48(x8)
    3dde:	000d                	c.nop	3
    3de0:	0100                	addi	x8,x2,128
    3de2:	5a00                	lw	x8,48(x12)
	...
    3dec:	0dc0                	addi	x8,x2,724
    3dee:	0000                	unimp
    3df0:	0de0                	addi	x8,x2,732
    3df2:	0000                	unimp
    3df4:	0001                	nop
    3df6:	005a                	c.slli	x0,0x16
    3df8:	0000                	unimp
    3dfa:	0000                	unimp
    3dfc:	0000                	unimp
    3dfe:	c400                	sw	x8,8(x8)
    3e00:	000d                	c.nop	3
    3e02:	dc00                	sw	x8,56(x8)
    3e04:	000d                	c.nop	3
    3e06:	0200                	addi	x8,x2,256
    3e08:	3100                	fld	f8,32(x10)
    3e0a:	009f 0000 0000      	0x9f
    3e10:	0000                	unimp
    3e12:	c400                	sw	x8,8(x8)
    3e14:	000d                	c.nop	3
    3e16:	dc00                	sw	x8,56(x8)
    3e18:	000d                	c.nop	3
    3e1a:	0100                	addi	x8,x2,128
    3e1c:	5e00                	lw	x8,56(x12)
	...
    3e26:	0dcc                	addi	x11,x2,724
    3e28:	0000                	unimp
    3e2a:	0dd4                	addi	x13,x2,724
    3e2c:	0000                	unimp
    3e2e:	0001                	nop
    3e30:	d85d                	beqz	x8,3de6 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1bf2>
    3e32:	000d                	c.nop	3
    3e34:	e400                	fsw	f8,8(x8)
    3e36:	000d                	c.nop	3
    3e38:	0100                	addi	x8,x2,128
    3e3a:	5d00                	lw	x8,56(x10)
	...
    3e44:	0dcc                	addi	x11,x2,724
    3e46:	0000                	unimp
    3e48:	0dd0                	addi	x12,x2,724
    3e4a:	0000                	unimp
    3e4c:	0001                	nop
    3e4e:	d85e                	sw	x23,48(x2)
    3e50:	000d                	c.nop	3
    3e52:	dc00                	sw	x8,56(x8)
    3e54:	000d                	c.nop	3
    3e56:	0100                	addi	x8,x2,128
    3e58:	5e00                	lw	x8,56(x12)
	...
    3e62:	0dd4                	addi	x13,x2,724
    3e64:	0000                	unimp
    3e66:	0dd8                	addi	x14,x2,724
    3e68:	0000                	unimp
    3e6a:	0001                	nop
    3e6c:	005e                	c.slli	x0,0x17
    3e6e:	0000                	unimp
    3e70:	0000                	unimp
    3e72:	0000                	unimp
    3e74:	f400                	fsw	f8,40(x8)
    3e76:	000d                	c.nop	3
    3e78:	3c00                	fld	f8,56(x8)
    3e7a:	000e                	c.slli	x0,0x3
    3e7c:	0100                	addi	x8,x2,128
    3e7e:	5c00                	lw	x8,56(x8)
	...
    3e88:	0df4                	addi	x13,x2,732
    3e8a:	0000                	unimp
    3e8c:	0e3c                	addi	x15,x2,792
    3e8e:	0000                	unimp
    3e90:	0001                	nop
    3e92:	0000005b          	0x5b
    3e96:	0000                	unimp
    3e98:	0000                	unimp
    3e9a:	f400                	fsw	f8,40(x8)
    3e9c:	000d                	c.nop	3
    3e9e:	3c00                	fld	f8,56(x8)
    3ea0:	000e                	c.slli	x0,0x3
    3ea2:	0100                	addi	x8,x2,128
    3ea4:	5a00                	lw	x8,48(x12)
	...
    3eae:	0e04                	addi	x9,x2,784
    3eb0:	0000                	unimp
    3eb2:	0e34                	addi	x13,x2,792
    3eb4:	0000                	unimp
    3eb6:	0001                	nop
    3eb8:	346d                	jal	3962 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x176e>
    3eba:	000e                	c.slli	x0,0x3
    3ebc:	3c00                	fld	f8,56(x8)
    3ebe:	000e                	c.slli	x0,0x3
    3ec0:	0700                	addi	x8,x2,896
    3ec2:	8000                	0x8000
    3ec4:	4000                	lw	x8,0(x8)
    3ec6:	2449                	jal	4148 <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x1f54>
    3ec8:	9f21                	0x9f21
	...
    3ed2:	0e08                	addi	x10,x2,784
    3ed4:	0000                	unimp
    3ed6:	0e3c                	addi	x15,x2,792
    3ed8:	0000                	unimp
    3eda:	0001                	nop
    3edc:	005d                	c.nop	23
    3ede:	0000                	unimp
    3ee0:	0000                	unimp
    3ee2:	0000                	unimp
    3ee4:	0800                	addi	x8,x2,16
    3ee6:	000e                	c.slli	x0,0x3
    3ee8:	2400                	fld	f8,8(x8)
    3eea:	000e                	c.slli	x0,0x3
    3eec:	0300                	addi	x8,x2,384
    3eee:	7a00                	flw	f8,48(x12)
    3ef0:	9f02                	jalr	x30
	...
    3efa:	0e08                	addi	x10,x2,784
    3efc:	0000                	unimp
    3efe:	0e24                	addi	x9,x2,792
    3f00:	0000                	unimp
    3f02:	0001                	nop
    3f04:	005d                	c.nop	23
    3f06:	0000                	unimp
    3f08:	0000                	unimp
    3f0a:	0000                	unimp
    3f0c:	0800                	addi	x8,x2,16
    3f0e:	000e                	c.slli	x0,0x3
    3f10:	1000                	addi	x8,x2,32
    3f12:	000e                	c.slli	x0,0x3
    3f14:	0200                	addi	x8,x2,256
    3f16:	3000                	fld	f8,32(x8)
    3f18:	109f 000e 2400      	0x2400000e109f
    3f1e:	000e                	c.slli	x0,0x3
    3f20:	0100                	addi	x8,x2,128
    3f22:	5f00                	lw	x8,56(x14)
	...
    3f2c:	0e4c                	addi	x11,x2,788
    3f2e:	0000                	unimp
    3f30:	0ec0                	addi	x8,x2,852
    3f32:	0000                	unimp
    3f34:	0001                	nop
    3f36:	0000005b          	0x5b
    3f3a:	0000                	unimp
    3f3c:	0000                	unimp
    3f3e:	4c00                	lw	x8,24(x8)
    3f40:	000e                	c.slli	x0,0x3
    3f42:	c000                	sw	x8,0(x8)
    3f44:	000e                	c.slli	x0,0x3
    3f46:	0100                	addi	x8,x2,128
    3f48:	5a00                	lw	x8,48(x12)
	...
    3f52:	0ea8                	addi	x10,x2,856
    3f54:	0000                	unimp
    3f56:	0eb8                	addi	x14,x2,856
    3f58:	0000                	unimp
    3f5a:	0002                	c.slli64	x0
    3f5c:	9f30                	0x9f30
    3f5e:	0eb8                	addi	x14,x2,856
    3f60:	0000                	unimp
    3f62:	0ec0                	addi	x8,x2,852
    3f64:	0000                	unimp
    3f66:	0002                	c.slli64	x0
    3f68:	9f31                	0x9f31
	...
    3f72:	0e60                	addi	x8,x2,796
    3f74:	0000                	unimp
    3f76:	0ec0                	addi	x8,x2,852
    3f78:	0000                	unimp
    3f7a:	0001                	nop
    3f7c:	0061                	c.nop	24
    3f7e:	0000                	unimp
    3f80:	0000                	unimp
    3f82:	0000                	unimp
    3f84:	6000                	flw	f8,0(x8)
    3f86:	000e                	c.slli	x0,0x3
    3f88:	7400                	flw	f8,40(x8)
    3f8a:	000e                	c.slli	x0,0x3
    3f8c:	0200                	addi	x8,x2,256
    3f8e:	3100                	fld	f8,32(x10)
    3f90:	009f 0000 0000      	0x9f
    3f96:	0000                	unimp
    3f98:	6000                	flw	f8,0(x8)
    3f9a:	000e                	c.slli	x0,0x3
    3f9c:	7400                	flw	f8,40(x8)
    3f9e:	000e                	c.slli	x0,0x3
    3fa0:	0100                	addi	x8,x2,128
    3fa2:	5d00                	lw	x8,56(x10)
	...
    3fac:	0e64                	addi	x9,x2,796
    3fae:	0000                	unimp
    3fb0:	0e6c                	addi	x11,x2,796
    3fb2:	0000                	unimp
    3fb4:	0001                	nop
    3fb6:	705c                	flw	f15,36(x8)
    3fb8:	000e                	c.slli	x0,0x3
    3fba:	8400                	0x8400
    3fbc:	000e                	c.slli	x0,0x3
    3fbe:	0100                	addi	x8,x2,128
    3fc0:	5c00                	lw	x8,56(x8)
	...
    3fca:	0e64                	addi	x9,x2,796
    3fcc:	0000                	unimp
    3fce:	0e68                	addi	x10,x2,796
    3fd0:	0000                	unimp
    3fd2:	0001                	nop
    3fd4:	705d                	c.lui	x0,0xffff7
    3fd6:	000e                	c.slli	x0,0x3
    3fd8:	7400                	flw	f8,40(x8)
    3fda:	000e                	c.slli	x0,0x3
    3fdc:	0100                	addi	x8,x2,128
    3fde:	5d00                	lw	x8,56(x10)
	...
    3fe8:	0e6c                	addi	x11,x2,796
    3fea:	0000                	unimp
    3fec:	0e70                	addi	x12,x2,796
    3fee:	0000                	unimp
    3ff0:	0001                	nop
    3ff2:	005d                	c.nop	23
    3ff4:	0000                	unimp
    3ff6:	0000                	unimp
    3ff8:	0000                	unimp
    3ffa:	7400                	flw	f8,40(x8)
    3ffc:	000e                	c.slli	x0,0x3
    3ffe:	a800                	fsd	f8,16(x8)
    4000:	000e                	c.slli	x0,0x3
    4002:	0100                	addi	x8,x2,128
    4004:	5e00                	lw	x8,56(x12)
	...
    400e:	0e88                	addi	x10,x2,848
    4010:	0000                	unimp
    4012:	0ea4                	addi	x9,x2,856
    4014:	0000                	unimp
    4016:	007e000f          	0x7e000f
    401a:	2442                	fld	f8,16(x2)
    401c:	007d                	c.nop	31
    401e:	7a21                	lui	x20,0xfffe8
    4020:	2100                	fld	f8,0(x10)
    4022:	4940                	lw	x8,20(x10)
    4024:	2124                	fld	f9,64(x10)
    4026:	a49f 000e a800      	0xa800000ea49f
    402c:	000e                	c.slli	x0,0x3
    402e:	0f00                	addi	x8,x2,912
    4030:	7e00                	flw	f8,56(x12)
    4032:	427f                	0x427f
    4034:	7d24                	flw	f9,120(x10)
    4036:	2100                	fld	f8,0(x10)
    4038:	007a                	c.slli	x0,0x1e
    403a:	4021                	c.li	x0,8
    403c:	2449                	jal	42be <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x20ca>
    403e:	9f21                	0x9f21
	...
    4048:	0ec0                	addi	x8,x2,852
    404a:	0000                	unimp
    404c:	0f28                	addi	x10,x2,920
    404e:	0000                	unimp
    4050:	0001                	nop
    4052:	000f345b          	0xf345b
    4056:	3c00                	fld	f8,56(x8)
    4058:	0100000f          	fence	w,unknown
    405c:	5b00                	lw	x8,48(x14)
	...
    4066:	0f20                	addi	x8,x2,920
    4068:	0000                	unimp
    406a:	0f28                	addi	x10,x2,920
    406c:	0000                	unimp
    406e:	0002                	c.slli64	x0
    4070:	9f30                	0x9f30
	...
    407a:	0ed4                	addi	x13,x2,852
    407c:	0000                	unimp
    407e:	0f28                	addi	x10,x2,920
    4080:	0000                	unimp
    4082:	0001                	nop
    4084:	3460                	fld	f8,232(x8)
    4086:	3c00000f          	0x3c00000f
    408a:	0100000f          	fence	w,unknown
    408e:	6000                	flw	f8,0(x8)
	...
    4098:	0ed4                	addi	x13,x2,852
    409a:	0000                	unimp
    409c:	0ef0                	addi	x12,x2,860
    409e:	0000                	unimp
    40a0:	027b0003          	lb	x0,39(x22)
    40a4:	009f 0000 0000      	0x9f
    40aa:	0000                	unimp
    40ac:	d400                	sw	x8,40(x8)
    40ae:	000e                	c.slli	x0,0x3
    40b0:	f000                	fsw	f8,32(x8)
    40b2:	000e                	c.slli	x0,0x3
    40b4:	0100                	addi	x8,x2,128
    40b6:	6000                	flw	f8,0(x8)
	...
    40c0:	0ed4                	addi	x13,x2,852
    40c2:	0000                	unimp
    40c4:	0edc                	addi	x15,x2,852
    40c6:	0000                	unimp
    40c8:	0002                	c.slli64	x0
    40ca:	9f30                	0x9f30
    40cc:	0edc                	addi	x15,x2,852
    40ce:	0000                	unimp
    40d0:	0ee4                	addi	x9,x2,860
    40d2:	0000                	unimp
    40d4:	007b0007          	0x7b0007
    40d8:	7f20                	flw	f8,120(x14)
    40da:	2200                	fld	f8,0(x12)
    40dc:	e49f 000e f000      	0xf000000ee49f
    40e2:	000e                	c.slli	x0,0x3
    40e4:	0800                	addi	x8,x2,16
    40e6:	7f00                	flw	f8,56(x14)
    40e8:	7b00                	flw	f8,48(x14)
    40ea:	1c00                	addi	x8,x2,560
    40ec:	1c32                	slli	x24,x24,0x2c
    40ee:	009f 0000 0000      	0x9f
    40f4:	0000                	unimp
    40f6:	f000                	fsw	f8,32(x8)
    40f8:	000e                	c.slli	x0,0x3
    40fa:	2000                	fld	f8,0(x8)
    40fc:	0100000f          	fence	w,unknown
    4100:	6d00                	flw	f8,24(x10)
    4102:	0f34                	addi	x13,x2,920
    4104:	0000                	unimp
    4106:	0f3c                	addi	x15,x2,920
    4108:	0000                	unimp
    410a:	0001                	nop
    410c:	006d                	c.nop	27
	...
    4116:	1c00000f          	0x1c00000f
    411a:	0f00000f          	fence	iorw,unknown
    411e:	8d00                	0x8d00
    4120:	4800                	lw	x8,16(x8)
    4122:	8e24                	0x8e24
    4124:	2100                	fld	f8,0(x10)
    4126:	4021007b          	0x4021007b
    412a:	2449                	jal	43ac <_Z50kernel_matrix_multiply_transpose_nomul_unroll_initILj8EfffEiPT0_PT1_PT2_mmm+0x21b8>
    412c:	9f21                	0x9f21
    412e:	0f1c                	addi	x15,x2,912
    4130:	0000                	unimp
    4132:	0f20                	addi	x8,x2,920
    4134:	0000                	unimp
    4136:	7f8d000f          	0x7f8d000f
    413a:	2448                	fld	f10,136(x8)
    413c:	008e                	slli	x1,x1,0x3
    413e:	7b21                	lui	x22,0xfffe8
    4140:	2100                	fld	f8,0(x10)
    4142:	4940                	lw	x8,20(x10)
    4144:	2124                	fld	f9,64(x10)
    4146:	009f 0000 0000      	0x9f
    414c:	0000                	unimp
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
  li  x1, 0
   0:	012c                	addi	x11,x2,136
   2:	0000                	unimp
  li  x3, 0
   4:	0150                	addi	x12,x2,132
   6:	0000                	unimp
  li  x4, 0
   8:	18e0                	addi	x8,x2,124
   a:	0000                	unimp
  li  x5, 0
   c:	19dc                	addi	x15,x2,244
	...
  li  x7, 0
  16:	0000                	unimp
  li  x8, 0
  18:	0300                	addi	x8,x2,384
  1a:	0000                	unimp
  li  x9, 0
  1c:	0304                	addi	x9,x2,384
  1e:	0000                	unimp
  li  x10,0
  20:	030c                	addi	x11,x2,384
  22:	0000                	unimp
  li  x11,0
  24:	0354                	addi	x13,x2,388
  26:	0000                	unimp
  li  x12,0
  28:	03cc                	addi	x11,x2,452
  2a:	0000                	unimp
  li  x13,0
  2c:	0a6c                	addi	x11,x2,284
  2e:	0000                	unimp
  li  x14,0
  30:	0a74                	addi	x13,x2,284
  32:	0000                	unimp
  li  x15,0
  34:	0b50                	addi	x12,x2,404
	...
  li  x17,0
  3e:	0000                	unimp
  li  x18,0
  40:	05a0                	addi	x8,x2,712
  42:	0000                	unimp
  li  x19,0
  44:	05c8                	addi	x10,x2,708
  46:	0000                	unimp
  li  x20,0
  48:	05cc                	addi	x11,x2,708
  4a:	0000                	unimp
  li  x21,0
  4c:	05d0                	addi	x12,x2,708
  4e:	0000                	unimp
  li  x22,0
  50:	0ac4                	addi	x9,x2,340
  52:	0000                	unimp
  li  x23,0
  54:	0ac4                	addi	x9,x2,340
  56:	0000                	unimp
  li  x24,0
  58:	0ad0                	addi	x12,x2,340
  5a:	0000                	unimp
  li  x25,0
  5c:	0ad8                	addi	x14,x2,340
	...
  li  x27,0
  66:	0000                	unimp
  li  x28,0
  68:	06dc                	addi	x15,x2,836
  6a:	0000                	unimp
  li  x29,0
  6c:	081c                	addi	x15,x2,16
  6e:	0000                	unimp
  li  x30,0
  70:	096c                	addi	x11,x2,156
  72:	0000                	unimp
  li  x31,0
  74:	099c                	addi	x15,x2,208
  76:	0000                	unimp
  li t0, 0x00003000 # mstatus.FS
  78:	0a0c                	addi	x11,x2,272
  7a:	0000                	unimp
  csrs mstatus, t0 # enable FPU
  7c:	0a10                	addi	x12,x2,272
  7e:	0000                	unimp
  fscsr x0
  80:	0b10                	addi	x12,x2,400
  82:	0000                	unimp
  li t0, 0
  84:	0b20                	addi	x8,x2,408
	...
  fcvt.s.w f1, x0 
  8e:	0000                	unimp
  fcvt.s.w f2, x0 
  90:	0868                	addi	x10,x2,28
  92:	0000                	unimp
  fcvt.s.w f3, x0 
  94:	0964                	addi	x9,x2,156
  96:	0000                	unimp
  fcvt.s.w f4, x0 
  98:	0b20                	addi	x8,x2,408
  9a:	0000                	unimp
  fcvt.s.w f5, x0 
  9c:	0b2c                	addi	x11,x2,408
	...
  fcvt.s.w f7, x0 
  a6:	0000                	unimp
  fcvt.s.w f8, x0 
  a8:	0354                	addi	x13,x2,388
  aa:	0000                	unimp
  fcvt.s.w f9, x0 
  ac:	035c                	addi	x15,x2,388
  ae:	0000                	unimp
  fcvt.s.w f10,x0 
  b0:	035c                	addi	x15,x2,388
  b2:	0000                	unimp
  fcvt.s.w f11,x0 
  b4:	0360                	addi	x8,x2,396
	...
  fcvt.s.w f13,x0 
  be:	0000                	unimp
  fcvt.s.w f14,x0 
  c0:	0374                	addi	x13,x2,396
  c2:	0000                	unimp
  fcvt.s.w f15,x0 
  c4:	037c                	addi	x15,x2,396
  c6:	0000                	unimp
  fcvt.s.w f16,x0 
  c8:	037c                	addi	x15,x2,396
  ca:	0000                	unimp
  fcvt.s.w f17,x0 
  cc:	0380                	addi	x8,x2,448
	...
  fcvt.s.w f19,x0 
  d6:	0000                	unimp
  fcvt.s.w f20,x0 
  d8:	0d70                	addi	x12,x2,668
  da:	0000                	unimp
  fcvt.s.w f21,x0 
  dc:	0d78                	addi	x14,x2,668
  de:	0000                	unimp
  fcvt.s.w f22,x0 
  e0:	0d7c                	addi	x15,x2,668
  e2:	0000                	unimp
  fcvt.s.w f23,x0 
  e4:	0d80                	addi	x8,x2,720
  e6:	0000                	unimp
  fcvt.s.w f24,x0 
  e8:	0d84                	addi	x9,x2,720
  ea:	0000                	unimp
  fcvt.s.w f25,x0 
  ec:	0dac                	addi	x11,x2,728
  ee:	0000                	unimp
  fcvt.s.w f26,x0 
  f0:	0db4                	addi	x13,x2,728
  f2:	0000                	unimp
  fcvt.s.w f27,x0 
  f4:	0db8                	addi	x14,x2,728
	...
  fcvt.s.w f29,x0 
  fe:	0000                	unimp
  fcvt.s.w f30,x0 
 100:	0dcc                	addi	x11,x2,724
 102:	0000                	unimp
  fcvt.s.w f31,x0 
 104:	0dd0                	addi	x12,x2,724
 106:	0000                	unimp
  la gp, _gp
 108:	0dd8                	addi	x14,x2,724
 10a:	0000                	unimp
 10c:	0dd8                	addi	x14,x2,724
	...
  la  tp, _bsg_data_end_addr + 63
 116:	0000                	unimp
  and tp, tp, -64
 118:	0de8                	addi	x10,x2,732
 11a:	0000                	unimp
  la sp, _sp
 11c:	0df0                	addi	x12,x2,732
 11e:	0000                	unimp
 120:	0df4                	addi	x13,x2,732
 122:	0000                	unimp
  j main
 124:	0e3c                	addi	x15,x2,792
	...
  if (__bsg_id == 0) 
 12e:	0000                	unimp
 130:	0e58                	addi	x14,x2,788
 132:	0000                	unimp
 134:	0e5c                	addi	x15,x2,788
 136:	0000                	unimp
     *signal_ptr = cuda_finish_signal_val;     
 138:	0e64                	addi	x9,x2,796
 13a:	0000                	unimp
 13c:	0e74                	addi	x13,x2,796
	...
 146:	0000                	unimp
 148:	0e64                	addi	x9,x2,796
 14a:	0000                	unimp
}
 14c:	0e68                	addi	x10,x2,796
 14e:	0000                	unimp
  bsg_remote_store(0,0,bsg_x_v,0);
 150:	0e70                	addi	x12,x2,796
 152:	0000                	unimp
 154:	0e70                	addi	x12,x2,796
	...
  bsg_remote_store(0,0,bsg_y_v,0);
 15e:	0000                	unimp
  bsg_remote_store(0,0,bsg_x_v,0);
 160:	0ec0                	addi	x8,x2,852
 162:	0000                	unimp
  bsg_remote_store(0,0,bsg_y_v,0);
 164:	0f28                	addi	x10,x2,920
 166:	0000                	unimp
  bsg_remote_store(0,0,bsg_x_v,0);
 168:	0f34                	addi	x13,x2,920
 16a:	0000                	unimp
  bsg_remote_store(0,0,bsg_y_v,0);
 16c:	0f3c                	addi	x15,x2,920
	...
  bsg_wait_while(*bsg_x_v < 0);
 176:	0000                	unimp
 178:	0ec8                	addi	x10,x2,852
 17a:	0000                	unimp
  bsg_wait_while(*bsg_y_v < 0);
 17c:	0ed0                	addi	x12,x2,852
 17e:	0000                	unimp
 180:	0ed4                	addi	x13,x2,852
 182:	0000                	unimp
  if (!*bsg_x_v && !*bsg_y_v)
 184:	0ef0                	addi	x12,x2,860
	...
 18e:	0000                	unimp
 190:	0ef0                	addi	x12,x2,860
 192:	0000                	unimp
        bsg_remote_store(x,y,bsg_x_v,x);
 194:	0f20                	addi	x8,x2,920
 196:	0000                	unimp
        bsg_remote_store(x,y,bsg_y_v,y);
 198:	0f34                	addi	x13,x2,920
 19a:	0000                	unimp
  grp_org_x_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_X );
 19c:	0f3c                	addi	x15,x2,920
	...
 1a6:	0000                	unimp
 1a8:	1a34                	addi	x13,x2,312
 1aa:	0000                	unimp
 1ac:	1c1c                	addi	x15,x2,560
 1ae:	0000                	unimp
 1b0:	1c58                	addi	x14,x2,564
 1b2:	0000                	unimp
 1b4:	1c7c                	addi	x15,x2,572
	...
  __bsg_grp_org_x  = * grp_org_x_p;
 1be:	0000                	unimp
  grp_org_y_p = bsg_remote_ptr_control( __bsg_x, __bsg_y, CSR_TGO_Y );
 1c0:	1a78                	addi	x14,x2,316
 1c2:	0000                	unimp
 1c4:	1ab8                	addi	x14,x2,376
 1c6:	0000                	unimp
  __bsg_grp_org_x  = * grp_org_x_p;
 1c8:	1abc                	addi	x15,x2,376
 1ca:	0000                	unimp
 1cc:	1be8                	addi	x10,x2,508
 1ce:	0000                	unimp
  __bsg_grp_org_y  = * grp_org_y_p;
 1d0:	1c58                	addi	x14,x2,564
 1d2:	0000                	unimp
 1d4:	1c7c                	addi	x15,x2,572
	...
 1de:	0000                	unimp
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
 1e0:	1abc                	addi	x15,x2,376
 1e2:	0000                	unimp
  __bsg_grid_dim_x = 1;
 1e4:	1bb4                	addi	x13,x2,504
 1e6:	0000                	unimp
  __bsg_id = __bsg_y * bsg_tiles_X + __bsg_x;
 1e8:	1bb8                	addi	x14,x2,504
 1ea:	0000                	unimp
  __bsg_grid_dim_x = 1;
 1ec:	1bd0                	addi	x12,x2,500
 1ee:	0000                	unimp
 1f0:	1c58                	addi	x14,x2,564
 1f2:	0000                	unimp
  __bsg_grid_dim_y = 1;
 1f4:	1c7c                	addi	x15,x2,572
	...
  __bsg_tile_group_id_x = 0;
 1fe:	0000                	unimp
 200:	1abc                	addi	x15,x2,376
 202:	0000                	unimp
  __bsg_tile_group_id_y = 0;
 204:	1ad0                	addi	x12,x2,372
 206:	0000                	unimp
 208:	1af4                	addi	x13,x2,380
 20a:	0000                	unimp
  __bsg_tile_group_id = 0;
 20c:	1af8                	addi	x14,x2,380
 20e:	0000                	unimp
 210:	1b14                	addi	x13,x2,432
 212:	0000                	unimp
}
 214:	1ba4                	addi	x9,x2,504
	...
{
 21e:	0000                	unimp
 220:	1ba4                	addi	x9,x2,504
 222:	0000                	unimp
  if (type & UPPERCASE)  dig = upper_digits;
 224:	1ba4                	addi	x9,x2,504
 226:	0000                	unimp
 228:	1ba8                	addi	x10,x2,504
 22a:	0000                	unimp
 22c:	1bb0                	addi	x12,x2,504
 22e:	0000                	unimp
  if (type & LEFT) type &= ~ZEROPAD;
 230:	1bb8                	addi	x14,x2,504
 232:	0000                	unimp
  if (type & UPPERCASE)  dig = upper_digits;
 234:	1bd0                	addi	x12,x2,500
	...
  if (type & LEFT) type &= ~ZEROPAD;
 23e:	0000                	unimp
 240:	0fc4                	addi	x9,x2,980
 242:	0000                	unimp
  if (type & SIGN)
 244:	0fd0                	addi	x12,x2,980
 246:	0000                	unimp
  c = (type & ZEROPAD) ? '0' : ' ';
 248:	101c                	addi	x15,x2,32
 24a:	0000                	unimp
  if (type & SIGN)
 24c:	1024                	addi	x9,x2,40
 24e:	0000                	unimp
 250:	1028                	addi	x10,x2,40
 252:	0000                	unimp
    if (num < 0)
 254:	1028                	addi	x10,x2,40
 256:	0000                	unimp
    else if (type & PLUS)
 258:	1030                	addi	x12,x2,40
 25a:	0000                	unimp
 25c:	110c                	addi	x11,x2,160
	...
  sign = 0;
 266:	0000                	unimp
    else if (type & SPACE)
 268:	101c                	addi	x15,x2,32
 26a:	0000                	unimp
      size--;
 26c:	1024                	addi	x9,x2,40
 26e:	0000                	unimp
      sign = ' ';
 270:	1030                	addi	x12,x2,40
 272:	0000                	unimp
  if (type & HEX_PREP)
 274:	1044                	addi	x9,x2,36
 276:	0000                	unimp
    if (base == 16)
 278:	1048                	addi	x10,x2,36
 27a:	0000                	unimp
 27c:	1090                	addi	x12,x2,96
	...
      size--;
 286:	0000                	unimp
 288:	103c                	addi	x15,x2,40
 28a:	0000                	unimp
  if (num == 0)
 28c:	1044                	addi	x9,x2,36
 28e:	0000                	unimp
    tmp[i++] = '0';
 290:	108c                	addi	x11,x2,96
 292:	0000                	unimp
 294:	1090                	addi	x12,x2,96
	...
 29e:	0000                	unimp
 2a0:	10b0                	addi	x12,x2,104
 2a2:	0000                	unimp
 2a4:	10f4                	addi	x13,x2,108
 2a6:	0000                	unimp
  if (i > precision) precision = i;
 2a8:	10f8                	addi	x14,x2,108
 2aa:	0000                	unimp
 2ac:	1100                	addi	x8,x2,160
 2ae:	0000                	unimp
 2b0:	1108                	addi	x10,x2,160
 2b2:	0000                	unimp
  size -= precision;
 2b4:	1108                	addi	x10,x2,160
	...
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
 2be:	0000                	unimp
 2c0:	10fc                	addi	x15,x2,108
 2c2:	0000                	unimp
 2c4:	1100                	addi	x8,x2,160
 2c6:	0000                	unimp
 2c8:	1108                	addi	x10,x2,160
 2ca:	0000                	unimp
 2cc:	1108                	addi	x10,x2,160
	...
 2d6:	0000                	unimp
 2d8:	1cd0                	addi	x12,x2,628
 2da:	0000                	unimp
 2dc:	1ef4                	addi	x13,x2,892
 2de:	0000                	unimp
  if (sign) *str++ = sign;
 2e0:	1f30                	addi	x12,x2,952
 2e2:	0000                	unimp
 2e4:	1f54                	addi	x13,x2,948
	...
  if (type & HEX_PREP)
 2ee:	0000                	unimp
    if (base == 8)
 2f0:	1d10                	addi	x12,x2,688
 2f2:	0000                	unimp
 2f4:	1d50                	addi	x12,x2,692
 2f6:	0000                	unimp
    else if (base == 16)
 2f8:	1d54                	addi	x13,x2,692
 2fa:	0000                	unimp
 2fc:	1ec0                	addi	x8,x2,884
 2fe:	0000                	unimp
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
 300:	1f30                	addi	x12,x2,952
 302:	0000                	unimp
 304:	1f54                	addi	x13,x2,948
	...
 30e:	0000                	unimp
 310:	1d54                	addi	x13,x2,692
 312:	0000                	unimp
 314:	1e8c                	addi	x11,x2,880
 316:	0000                	unimp
 318:	1e90                	addi	x12,x2,880
 31a:	0000                	unimp
 31c:	1ea8                	addi	x10,x2,888
 31e:	0000                	unimp
 320:	1f30                	addi	x12,x2,952
 322:	0000                	unimp
 324:	1f54                	addi	x13,x2,948
	...
 32e:	0000                	unimp
 330:	1d54                	addi	x13,x2,692
 332:	0000                	unimp
 334:	1d68                	addi	x10,x2,700
 336:	0000                	unimp
 338:	1dac                	addi	x11,x2,760
 33a:	0000                	unimp
 33c:	1e7c                	addi	x15,x2,828
	...
 346:	0000                	unimp
  while (i < precision--) *str++ = '0';
 348:	1e7c                	addi	x15,x2,828
 34a:	0000                	unimp
 34c:	1e7c                	addi	x15,x2,828
 34e:	0000                	unimp
 350:	1e80                	addi	x8,x2,880
 352:	0000                	unimp
 354:	1e88                	addi	x10,x2,880
 356:	0000                	unimp
 358:	1e90                	addi	x12,x2,880
 35a:	0000                	unimp
 35c:	1ea8                	addi	x10,x2,888
	...
  while (i-- > 0) *str++ = tmp[i];
 366:	0000                	unimp
  while (i < precision--) *str++ = '0';
 368:	11e8                	addi	x10,x2,236
 36a:	0000                	unimp
  while (i-- > 0) *str++ = tmp[i];
 36c:	11f4                	addi	x13,x2,236
 36e:	0000                	unimp
 370:	1240                	addi	x8,x2,292
 372:	0000                	unimp
 374:	1248                	addi	x10,x2,292
 376:	0000                	unimp
 378:	124c                	addi	x11,x2,292
 37a:	0000                	unimp
 37c:	124c                	addi	x11,x2,292
 37e:	0000                	unimp
 380:	1254                	addi	x13,x2,292
 382:	0000                	unimp
 384:	1330                	addi	x12,x2,424
	...
 38e:	0000                	unimp
 390:	1240                	addi	x8,x2,292
 392:	0000                	unimp
 394:	1248                	addi	x10,x2,292
 396:	0000                	unimp
 398:	1254                	addi	x13,x2,292
 39a:	0000                	unimp
  while (size-- > 0) *str++ = ' ';
 39c:	1268                	addi	x10,x2,300
 39e:	0000                	unimp
  while (i-- > 0) *str++ = tmp[i];
 3a0:	126c                	addi	x11,x2,300
 3a2:	0000                	unimp
  while (size-- > 0) *str++ = ' ';
 3a4:	12b4                	addi	x13,x2,360
	...
 3ae:	0000                	unimp
 3b0:	1260                	addi	x8,x2,300
 3b2:	0000                	unimp
 3b4:	1268                	addi	x10,x2,300
 3b6:	0000                	unimp
 3b8:	12b0                	addi	x12,x2,360
 3ba:	0000                	unimp
 3bc:	12b4                	addi	x13,x2,360
	...
 3c6:	0000                	unimp
 3c8:	12d4                	addi	x13,x2,356
 3ca:	0000                	unimp
 3cc:	1318                	addi	x14,x2,416
 3ce:	0000                	unimp
 3d0:	131c                	addi	x15,x2,416
 3d2:	0000                	unimp
 3d4:	1324                	addi	x9,x2,424
 3d6:	0000                	unimp
}
 3d8:	132c                	addi	x11,x2,424
 3da:	0000                	unimp
 3dc:	132c                	addi	x11,x2,424
	...
 3e6:	0000                	unimp
  char *dig = digits;
 3e8:	1320                	addi	x8,x2,424
 3ea:	0000                	unimp
  if (type & LEFT) type &= ~ZEROPAD;
 3ec:	1324                	addi	x9,x2,424
 3ee:	0000                	unimp
  char *dig = digits;
 3f0:	132c                	addi	x11,x2,424
 3f2:	0000                	unimp
  if (type & LEFT) type &= ~ZEROPAD;
 3f4:	132c                	addi	x11,x2,424
	...
  c = (type & ZEROPAD) ? '0' : ' ';
 3fe:	0000                	unimp
 400:	1fa8                	addi	x10,x2,1016
 402:	0000                	unimp
 404:	2194                	fld	f13,0(x11)
 406:	0000                	unimp
  if (type & SIGN)
 408:	21d0                	fld	f12,128(x11)
 40a:	0000                	unimp
 40c:	21f4                	fld	f13,192(x11)
	...
  sign = 0;
 416:	0000                	unimp
 418:	1fe4                	addi	x9,x2,1020
 41a:	0000                	unimp
      num = -num;
 41c:	1ffc                	addi	x15,x2,1020
 41e:	0000                	unimp
      size--;
 420:	2008                	fld	f10,0(x8)
 422:	0000                	unimp
      sign = '-';
 424:	2164                	fld	f9,192(x10)
 426:	0000                	unimp
  if (type & HEX_PREP)
 428:	21d0                	fld	f12,128(x11)
 42a:	0000                	unimp
  if (base < 2 || base > 36) return 0;
 42c:	21f4                	fld	f13,192(x11)
	...
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 436:	0000                	unimp
 438:	200c                	fld	f11,0(x8)
 43a:	0000                	unimp
 43c:	2130                	fld	f12,64(x10)
 43e:	0000                	unimp
 440:	2134                	fld	f13,64(x10)
 442:	0000                	unimp
 444:	2138                	fld	f14,64(x10)
 446:	0000                	unimp
 448:	213c                	fld	f15,64(x10)
 44a:	0000                	unimp
 44c:	2158                	fld	f14,128(x10)
 44e:	0000                	unimp
      num = ((unsigned long) num) / (unsigned) base;
 450:	21d0                	fld	f12,128(x11)
 452:	0000                	unimp
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 454:	21f4                	fld	f13,192(x11)
	...
    while (num != 0)
 45e:	0000                	unimp
      size--;
 460:	200c                	fld	f11,0(x8)
 462:	0000                	unimp
      sign = '+';
 464:	202c                	fld	f11,64(x8)
 466:	0000                	unimp
 468:	2054                	fld	f13,128(x8)
 46a:	0000                	unimp
      *str++ = '0';
 46c:	2120                	fld	f8,64(x10)
	...
      *str++ = digits[33];
 476:	0000                	unimp
 478:	2120                	fld	f8,64(x10)
 47a:	0000                	unimp
 47c:	2124                	fld	f9,64(x10)
 47e:	0000                	unimp
 480:	2128                	fld	f10,64(x10)
 482:	0000                	unimp
      size -= 2;
 484:	2130                	fld	f12,64(x10)
 486:	0000                	unimp
 488:	213c                	fld	f15,64(x10)
 48a:	0000                	unimp
      *str++ = '0';
 48c:	2158                	fld	f14,128(x10)
	...
 496:	0000                	unimp
 498:	13e8                	addi	x10,x2,492
 49a:	0000                	unimp
  while (i < precision--) *str++ = '0';
 49c:	13f0                	addi	x12,x2,492
 49e:	0000                	unimp
 4a0:	143c                	addi	x15,x2,552
 4a2:	0000                	unimp
 4a4:	1440                	addi	x8,x2,548
 4a6:	0000                	unimp
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
 4a8:	1464                	addi	x9,x2,556
 4aa:	0000                	unimp
 4ac:	146c                	addi	x11,x2,556
 4ae:	0000                	unimp
 4b0:	1470                	addi	x12,x2,556
 4b2:	0000                	unimp
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
 4b4:	1470                	addi	x12,x2,556
 4b6:	0000                	unimp
 4b8:	1474                	addi	x13,x2,556
 4ba:	0000                	unimp
 4bc:	154c                	addi	x11,x2,676
	...
bsg_putchar( c );
 4c6:	0000                	unimp
}
 4c8:	143c                	addi	x15,x2,552
 4ca:	0000                	unimp
{
 4cc:	1440                	addi	x8,x2,548
 4ce:	0000                	unimp
 4d0:	1464                	addi	x9,x2,556
 4d2:	0000                	unimp
 4d4:	146c                	addi	x11,x2,556
 4d6:	0000                	unimp
 4d8:	1474                	addi	x13,x2,556
 4da:	0000                	unimp
 4dc:	1484                	addi	x9,x2,608
 4de:	0000                	unimp
 4e0:	1488                	addi	x10,x2,608
 4e2:	0000                	unimp
 4e4:	14d0                	addi	x12,x2,612
	...
 4ee:	0000                	unimp
 4f0:	147c                	addi	x15,x2,556
 4f2:	0000                	unimp
 4f4:	1484                	addi	x9,x2,608
 4f6:	0000                	unimp
 4f8:	14cc                	addi	x11,x2,612
 4fa:	0000                	unimp
 4fc:	14d0                	addi	x12,x2,612
	...
 506:	0000                	unimp
 508:	14f0                	addi	x12,x2,620
 50a:	0000                	unimp
 50c:	1538                	addi	x14,x2,680
 50e:	0000                	unimp
 510:	153c                	addi	x15,x2,680
 512:	0000                	unimp
 514:	1540                	addi	x8,x2,676
 516:	0000                	unimp
  for (str = buf; *fmt; fmt++)
 518:	1548                	addi	x10,x2,676
 51a:	0000                	unimp
  va_start(args, fmt);
 51c:	1548                	addi	x10,x2,676
	...
  for (str = buf; *fmt; fmt++)
 526:	0000                	unimp
 528:	2230                	fld	f12,64(x12)
 52a:	0000                	unimp
 52c:	23d0                	fld	f12,128(x15)
 52e:	0000                	unimp
 530:	240c                	fld	f11,8(x8)
 532:	0000                	unimp
 534:	2430                	fld	f12,72(x8)
	...
 53e:	0000                	unimp
 540:	2288                	fld	f10,0(x13)
 542:	0000                	unimp
 544:	22ac                	fld	f11,64(x13)
 546:	0000                	unimp
 548:	22b0                	fld	f12,64(x13)
 54a:	0000                	unimp
    if (*fmt != '%')
 54c:	23bc                	fld	f15,64(x15)
 54e:	0000                	unimp
 550:	240c                	fld	f11,8(x8)
 552:	0000                	unimp
      *str++ = *fmt;
 554:	2430                	fld	f12,72(x8)
	...
 55e:	0000                	unimp
      continue;
 560:	22b0                	fld	f12,64(x13)
 562:	0000                	unimp
  for (str = buf; *fmt; fmt++)
 564:	23b0                	fld	f12,64(x15)
 566:	0000                	unimp
  *str = '\0';
 568:	240c                	fld	f11,8(x8)
 56a:	0000                	unimp
    asm volatile ("amoswap.w.aq %[result], %[swap_val], 0(%[addr]);"  \
 56c:	2430                	fld	f12,72(x8)
	...
 576:	0000                	unimp
    }while( result == bsg_mutex_lock_fail);
 578:	22b0                	fld	f12,64(x13)
 57a:	0000                	unimp
  while (*p) {
 57c:	22b4                	fld	f13,64(x13)
 57e:	0000                	unimp
 580:	22f4                	fld	f13,192(x13)
 582:	0000                	unimp
 584:	2388                	fld	f10,0(x15)
	...
bsg_putchar( c );
 58e:	0000                	unimp
 590:	1628                	addi	x10,x2,808
 592:	0000                	unimp
 594:	1634                	addi	x13,x2,808
 596:	0000                	unimp
  while (*p) {
 598:	1680                	addi	x8,x2,864
 59a:	0000                	unimp
 59c:	1688                	addi	x10,x2,864
 59e:	0000                	unimp
	p++;
 5a0:	168c                	addi	x11,x2,864
 5a2:	0000                	unimp
  while (*p) {
 5a4:	168c                	addi	x11,x2,864
 5a6:	0000                	unimp
    asm volatile ("amoswap.w.rl x0, x0, 0(%[addr]);"   \
 5a8:	1694                	addi	x13,x2,864
 5aa:	0000                	unimp
 5ac:	1770                	addi	x12,x2,940
	...
}
 5b6:	0000                	unimp
 5b8:	1680                	addi	x8,x2,864
 5ba:	0000                	unimp
 5bc:	1688                	addi	x10,x2,864
 5be:	0000                	unimp
 5c0:	1694                	addi	x13,x2,864
 5c2:	0000                	unimp
 5c4:	16a8                	addi	x10,x2,872
 5c6:	0000                	unimp
 5c8:	16ac                	addi	x11,x2,872
 5ca:	0000                	unimp
 5cc:	16f4                	addi	x13,x2,876
	...
 5d6:	0000                	unimp
 5d8:	16a0                	addi	x8,x2,872
 5da:	0000                	unimp
 5dc:	16a8                	addi	x10,x2,872
 5de:	0000                	unimp
 5e0:	16f0                	addi	x12,x2,876
 5e2:	0000                	unimp
    flags = 0;
 5e4:	16f4                	addi	x13,x2,876
	...
    switch (*fmt)
 5ee:	0000                	unimp
    fmt++; // This also skips first '%'
 5f0:	1714                	addi	x13,x2,928
 5f2:	0000                	unimp
    switch (*fmt)
 5f4:	1758                	addi	x14,x2,932
 5f6:	0000                	unimp
 5f8:	175c                	addi	x15,x2,932
 5fa:	0000                	unimp
 5fc:	1764                	addi	x9,x2,940
 5fe:	0000                	unimp
 600:	176c                	addi	x11,x2,940
 602:	0000                	unimp
 604:	176c                	addi	x11,x2,940
	...
 60e:	0000                	unimp
    if (is_digit(*fmt))
 610:	1760                	addi	x8,x2,940
 612:	0000                	unimp
 614:	1764                	addi	x9,x2,940
 616:	0000                	unimp
 618:	176c                	addi	x11,x2,940
 61a:	0000                	unimp
 61c:	176c                	addi	x11,x2,940
	...
    field_width = -1;
 626:	0000                	unimp
    else if (*fmt == '*')
 628:	0d68                	addi	x10,x2,668
 62a:	0000                	unimp
    if (*fmt == '.')
 62c:	17c4                	addi	x9,x2,996
 62e:	0000                	unimp
    precision = -1;
 630:	19dc                	addi	x15,x2,244
 632:	0000                	unimp
    if (*fmt == '.')
 634:	1c7c                	addi	x15,x2,572
 636:	0000                	unimp
    if (*fmt == 'l' || *fmt == 'L')
 638:	1c7c                	addi	x15,x2,572
 63a:	0000                	unimp
 63c:	1f54                	addi	x13,x2,948
 63e:	0000                	unimp
 640:	1f54                	addi	x13,x2,948
 642:	0000                	unimp
    switch (*fmt)
 644:	21f4                	fld	f13,192(x11)
 646:	0000                	unimp
 648:	21f4                	fld	f13,192(x11)
 64a:	0000                	unimp
 64c:	2430                	fld	f12,72(x8)
	...

Disassembly of section .comment:

00000000 <.comment>:
  li  x1, 0
   0:	3a434347          	fmsub.d	f6,f6,f4,f7,rmm
  li  x3, 0
   4:	2820                	fld	f8,80(x8)
   6:	29554e47          	fmsub.s	f28,f10,f21,f5,rmm
  li  x4, 0
   a:	3920                	fld	f8,112(x10)
  li  x5, 0
   c:	322e                	fld	f4,232(x2)
   e:	302e                	fld	f0,232(x2)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
  li  x1, 0
   0:	2a41                	jal	190 <bsg_set_tile_x_y+0x40>
   2:	0000                	unimp
  li  x3, 0
   4:	7200                	flw	f8,32(x12)
   6:	7369                	lui	x6,0xffffa
  li  x4, 0
   8:	01007663          	bgeu	x0,x16,14 <bsg_group_size+0x13>
  li  x5, 0
   c:	0020                	addi	x8,x2,8
   e:	0000                	unimp
  li  x6, 0
  10:	1004                	addi	x9,x2,32
  12:	7205                	lui	x4,0xfffe1
  li  x7, 0
  14:	3376                	fld	f6,376(x2)
  16:	6932                	flw	f18,12(x2)
  li  x8, 0
  18:	7032                	flw	f0,44(x2)
  1a:	5f30                	lw	x12,120(x14)
  li  x9, 0
  1c:	326d                	jal	fffff9c6 <_end+0x7efff96e>
  1e:	3070                	fld	f12,224(x8)
  li  x10,0
  20:	615f 7032 5f30      	0x5f307032615f
  li  x11,0
  26:	3266                	fld	f4,120(x2)
  li  x12,0
  28:	3070                	fld	f12,224(x8)
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
  li  x1, 0
   0:	000c                	0xc
   2:	0000                	unimp
  li  x3, 0
   4:	ffff                	0xffff
   6:	ffff                	0xffff
  li  x4, 0
   8:	0001                	nop
   a:	7c01                	lui	x24,0xfffe0
  li  x5, 0
   c:	0d01                	addi	x26,x26,0
   e:	0002                	c.slli64	x0
  li  x6, 0
  10:	000c                	0xc
  12:	0000                	unimp
  li  x7, 0
  14:	0000                	unimp
  16:	0000                	unimp
  li  x8, 0
  18:	012c                	addi	x11,x2,136
  1a:	0000                	unimp
  li  x9, 0
  1c:	0024                	addi	x9,x2,8
  1e:	0000                	unimp
  li  x10,0
  20:	000c                	0xc
  22:	0000                	unimp
  li  x11,0
  24:	0000                	unimp
  26:	0000                	unimp
  li  x12,0
  28:	18e0                	addi	x8,x2,124
  2a:	0000                	unimp
  li  x13,0
  2c:	00fc                	addi	x15,x2,76
  2e:	0000                	unimp
  li  x14,0
  30:	000c                	0xc
  32:	0000                	unimp
  li  x15,0
  34:	ffff                	0xffff
  36:	ffff                	0xffff
  li  x16,0
  38:	0001                	nop
  3a:	7c01                	lui	x24,0xfffe0
  li  x17,0
  3c:	0d01                	addi	x26,x26,0
  3e:	0002                	c.slli64	x0
  li  x18,0
  40:	000c                	0xc
  42:	0000                	unimp
  li  x19,0
  44:	0030                	addi	x12,x2,8
  46:	0000                	unimp
  li  x20,0
  48:	0150                	addi	x12,x2,132
  4a:	0000                	unimp
  li  x21,0
  4c:	00c8                	addi	x10,x2,68
  4e:	0000                	unimp
  li  x22,0
  50:	000c                	0xc
  52:	0000                	unimp
  li  x23,0
  54:	ffff                	0xffff
  56:	ffff                	0xffff
  li  x24,0
  58:	0001                	nop
  5a:	7c01                	lui	x24,0xfffe0
  li  x25,0
  5c:	0d01                	addi	x26,x26,0
  5e:	0002                	c.slli64	x0
  li  x26,0
  60:	0020                	addi	x8,x2,8
  62:	0000                	unimp
  li  x27,0
  64:	0050                	addi	x12,x2,4
  66:	0000                	unimp
  li  x28,0
  68:	0218                	addi	x14,x2,256
  6a:	0000                	unimp
  li  x29,0
  6c:	02a8                	addi	x10,x2,328
  6e:	0000                	unimp
  li  x30,0
  70:	0e44                	addi	x9,x2,788
  72:	4860                	lw	x8,84(x8)
  li  x31,0
  74:	0188                	addi	x10,x2,192
  76:	0289                	addi	x5,x5,2
  li t0, 0x00003000 # mstatus.FS
  78:	0a01b803          	0xa01b803
  csrs mstatus, t0 # enable FPU
  7c:	44c8                	lw	x10,12(x9)
  7e:	44c9                	li	x9,18
  fscsr x0
  80:	000e                	c.slli	x0,0x3
  82:	0b44                	addi	x9,x2,404
  li t0, 0
  84:	000c                	0xc
  86:	0000                	unimp
  fcvt.s.w f0, x0 
  88:	0050                	addi	x12,x2,4
  8a:	0000                	unimp
  fcvt.s.w f1, x0 
  8c:	04c0                	addi	x8,x2,580
  8e:	0000                	unimp
  fcvt.s.w f2, x0 
  90:	000c                	0xc
  92:	0000                	unimp
  fcvt.s.w f3, x0 
  94:	0044                	addi	x9,x2,4
  96:	0000                	unimp
  fcvt.s.w f4, x0 
  98:	0050                	addi	x12,x2,4
  9a:	0000                	unimp
  fcvt.s.w f5, x0 
  9c:	04cc                	addi	x11,x2,580
  9e:	0000                	unimp
  fcvt.s.w f6, x0 
  a0:	089c                	addi	x15,x2,80
  a2:	0000                	unimp
  fcvt.s.w f7, x0 
  a4:	0e44                	addi	x9,x2,788
  a6:	02f0                	addi	x12,x2,332
  fcvt.s.w f8, x0 
  a8:	936c                	0x936c
  aa:	810d                	srli	x10,x10,0x3
  fcvt.s.w f9, x0 
  ac:	8809                	andi	x8,x8,2
  ae:	890a                	mv	x18,x2
  fcvt.s.w f10,x0 
  b0:	940c920b          	0x940c920b
  fcvt.s.w f11,x0 
  b4:	950e                	add	x10,x10,x3
  b6:	9710960f          	0x9710960f
  fcvt.s.w f12,x0 
  ba:	9811                	andi	x8,x8,-28
  fcvt.s.w f13,x0 
  bc:	9912                	add	x18,x18,x4
  be:	0ab80213          	addi	x4,x16,171
  fcvt.s.w f14,x0 
  c2:	44c1                	li	x9,16
  fcvt.s.w f15,x0 
  c4:	44c8                	lw	x10,12(x9)
  c6:	44c9                	li	x9,18
  fcvt.s.w f16,x0 
  c8:	44d2                	lw	x9,20(x2)
  ca:	44d444d3          	0x44d444d3
  fcvt.s.w f17,x0 
  ce:	44d5                	li	x9,21
  fcvt.s.w f18,x0 
  d0:	44d6                	lw	x9,84(x2)
  d2:	44d844d7          	0x44d844d7
  fcvt.s.w f19,x0 
  d6:	44d9                	li	x9,22
  fcvt.s.w f20,x0 
  d8:	000e                	c.slli	x0,0x3
  da:	0b44                	addi	x9,x2,404
